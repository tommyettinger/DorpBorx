/* Generated by JSIL v0.7.6 build 24569. See http://jsil.org/ for more information. */ 
/* Generating type stubs only */ 
var $asm03 = JSIL.DeclareAssembly("System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

(function FXAssembly$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("FXAssembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Version", "2.0.0.0"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ThisAssembly$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Title", "System.Configuration.dll"); 
    $.Constant({Static:true , Public:false}, "Description", "System.Configuration.dll"); 
    $.Constant({Static:true , Public:false}, "DefaultAlias", "System.Configuration.dll"); 
    $.Constant({Static:true , Public:false}, "Copyright", "\xa9 Microsoft Corporation.  All rights reserved."); 
    $.Constant({Static:true , Public:false}, "Version", "2.0.0.0"); 
    $.Constant({Static:true , Public:false}, "InformationalVersion", "2.0.50727.5476"); 
    $.Constant({Static:true , Public:false}, "DailyBuildNumber", 50727); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AssemblyRef$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", "00000000000000000400000000000000"); 
    $.Constant({Static:true , Public:false}, "Mscorlib", "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemData", "System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", "System.Data.OracleClient, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "System", "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", "System.Runtime.Remoting, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemWindowsForms", "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemXml", "System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", "b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", "b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293"); 
    $.Constant({Static:true , Public:false}, "SystemConfiguration", "System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", "System.Configuration.Install, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDeployment", "System.Deployment, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDesign", "System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", "System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", "System.Drawing.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDrawing", "System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", "System.EnterpriseServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemManagement", "System.Management, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemMessaging", "System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", "System.Runtime.Serialization.Formatters.Soap, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemSecurity", "System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemServiceProcess", "System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWeb", "System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebMobile", "System.Web.Mobile, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", "System.Web.RegularExpressions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebServices", "System.Web.Services, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", "Microsoft.VisualStudio, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", "Microsoft.VisualStudio.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", "VJSharpCodeProvider, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", "b7bd7678b977bd8f"); 
    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", "ASP.BrowserCapsFactory, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", "Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", "Microsoft.VisualStudio.Web, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftJScript", "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Configuration");
(function SRDescriptionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.ComponentModel.DescriptionAttribute"), "System.Configuration.SRDescriptionAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

(function SRCategoryAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.ComponentModel.CategoryAttribute"), "System.Configuration.SRCategoryAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

(function SR$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.SR", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Globalization.CultureInfo"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Resources.ResourceManager"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "Parameter_Invalid", "Parameter_Invalid"); 
    $.Constant({Static:true , Public:false}, "Parameter_NullOrEmpty", "Parameter_NullOrEmpty"); 
    $.Constant({Static:true , Public:false}, "Property_NullOrEmpty", "Property_NullOrEmpty"); 
    $.Constant({Static:true , Public:false}, "Property_Invalid", "Property_Invalid"); 
    $.Constant({Static:true , Public:false}, "Unexpected_Error", "Unexpected_Error"); 
    $.Constant({Static:true , Public:false}, "Wrapped_exception_message", "Wrapped_exception_message"); 
    $.Constant({Static:true , Public:false}, "Config_error_loading_XML_file", "Config_error_loading_XML_file"); 
    $.Constant({Static:true , Public:false}, "Config_exception_creating_section_handler", "Config_exception_creating_section_handler"); 
    $.Constant({Static:true , Public:false}, "Config_exception_creating_section", "Config_exception_creating_section"); 
    $.Constant({Static:true , Public:false}, "Config_tag_name_invalid", "Config_tag_name_invalid"); 
    $.Constant({Static:true , Public:false}, "Argument_AddingDuplicate", "Argument_AddingDuplicate"); 
    $.Constant({Static:true , Public:false}, "Config_add_configurationsection_already_added", "Config_add_configurationsection_already_added"); 
    $.Constant({Static:true , Public:false}, "Config_add_configurationsection_already_exists", "Config_add_configurationsection_already_exists"); 
    $.Constant({Static:true , Public:false}, "Config_add_configurationsection_in_location_config", "Config_add_configurationsection_in_location_config"); 
    $.Constant({Static:true , Public:false}, "Config_add_configurationsectiongroup_already_added", "Config_add_configurationsectiongroup_already_added"); 
    $.Constant({Static:true , Public:false}, "Config_add_configurationsectiongroup_already_exists", "Config_add_configurationsectiongroup_already_exists"); 
    $.Constant({Static:true , Public:false}, "Config_add_configurationsectiongroup_in_location_config", "Config_add_configurationsectiongroup_in_location_config"); 
    $.Constant({Static:true , Public:false}, "Config_allow_exedefinition_error_application", "Config_allow_exedefinition_error_application"); 
    $.Constant({Static:true , Public:false}, "Config_allow_exedefinition_error_machine", "Config_allow_exedefinition_error_machine"); 
    $.Constant({Static:true , Public:false}, "Config_allow_exedefinition_error_roaminguser", "Config_allow_exedefinition_error_roaminguser"); 
    $.Constant({Static:true , Public:false}, "Config_appsettings_declaration_invalid", "Config_appsettings_declaration_invalid"); 
    $.Constant({Static:true , Public:false}, "Config_base_attribute_locked", "Config_base_attribute_locked"); 
    $.Constant({Static:true , Public:false}, "Config_base_collection_item_locked_cannot_clear", "Config_base_collection_item_locked_cannot_clear"); 
    $.Constant({Static:true , Public:false}, "Config_base_collection_item_locked", "Config_base_collection_item_locked"); 
    $.Constant({Static:true , Public:false}, "Config_base_cannot_add_items_above_inherited_items", "Config_base_cannot_add_items_above_inherited_items"); 
    $.Constant({Static:true , Public:false}, "Config_base_cannot_add_items_below_inherited_items", "Config_base_cannot_add_items_below_inherited_items"); 
    $.Constant({Static:true , Public:false}, "Config_base_cannot_remove_inherited_items", "Config_base_cannot_remove_inherited_items"); 
    $.Constant({Static:true , Public:false}, "Config_base_collection_elements_may_not_be_removed", "Config_base_collection_elements_may_not_be_removed"); 
    $.Constant({Static:true , Public:false}, "Config_base_collection_entry_already_exists", "Config_base_collection_entry_already_exists"); 
    $.Constant({Static:true , Public:false}, "Config_base_collection_entry_already_removed", "Config_base_collection_entry_already_removed"); 
    $.Constant({Static:true , Public:false}, "Config_base_collection_entry_not_found", "Config_base_collection_entry_not_found"); 
    $.Constant({Static:true , Public:false}, "Config_base_element_cannot_have_multiple_child_elements", "Config_base_element_cannot_have_multiple_child_elements"); 
    $.Constant({Static:true , Public:false}, "Config_base_element_default_collection_cannot_be_locked", "Config_base_element_default_collection_cannot_be_locked"); 
    $.Constant({Static:true , Public:false}, "Config_base_element_locked", "Config_base_element_locked"); 
    $.Constant({Static:true , Public:false}, "Config_base_expected_enum", "Config_base_expected_enum"); 
    $.Constant({Static:true , Public:false}, "Config_base_expected_to_find_element", "Config_base_expected_to_find_element"); 
    $.Constant({Static:true , Public:false}, "Config_base_invalid_attribute_to_lock", "Config_base_invalid_attribute_to_lock"); 
    $.Constant({Static:true , Public:false}, "Config_base_invalid_attribute_to_lock_by_add", "Config_base_invalid_attribute_to_lock_by_add"); 
    $.Constant({Static:true , Public:false}, "Config_base_invalid_element_key", "Config_base_invalid_element_key"); 
    $.Constant({Static:true , Public:false}, "Config_base_invalid_element_to_lock", "Config_base_invalid_element_to_lock"); 
    $.Constant({Static:true , Public:false}, "Config_base_invalid_element_to_lock_by_add", "Config_base_invalid_element_to_lock_by_add"); 
    $.Constant({Static:true , Public:false}, "Config_base_property_is_not_a_configuration_element", "Config_base_property_is_not_a_configuration_element"); 
    $.Constant({Static:true , Public:false}, "Config_base_read_only", "Config_base_read_only"); 
    $.Constant({Static:true , Public:false}, "Config_base_required_attribute_locked", "Config_base_required_attribute_locked"); 
    $.Constant({Static:true , Public:false}, "Config_base_required_attribute_lock_attempt", "Config_base_required_attribute_lock_attempt"); 
    $.Constant({Static:true , Public:false}, "Config_base_required_attribute_missing", "Config_base_required_attribute_missing"); 
    $.Constant({Static:true , Public:false}, "Config_base_section_cannot_contain_cdata", "Config_base_section_cannot_contain_cdata"); 
    $.Constant({Static:true , Public:false}, "Config_base_section_invalid_content", "Config_base_section_invalid_content"); 
    $.Constant({Static:true , Public:false}, "Config_base_unrecognized_attribute", "Config_base_unrecognized_attribute"); 
    $.Constant({Static:true , Public:false}, "Config_base_unrecognized_element", "Config_base_unrecognized_element"); 
    $.Constant({Static:true , Public:false}, "Config_base_unrecognized_element_name", "Config_base_unrecognized_element_name"); 
    $.Constant({Static:true , Public:false}, "Config_base_value_cannot_contain", "Config_base_value_cannot_contain"); 
    $.Constant({Static:true , Public:false}, "Config_cannot_edit_configurationsection_in_location_config", "Config_cannot_edit_configurationsection_in_location_config"); 
    $.Constant({Static:true , Public:false}, "Config_cannot_edit_configurationsection_parentsection", "Config_cannot_edit_configurationsection_parentsection"); 
    $.Constant({Static:true , Public:false}, "Config_cannot_edit_configurationsection_when_location_locked", "Config_cannot_edit_configurationsection_when_location_locked"); 
    $.Constant({Static:true , Public:false}, "Config_cannot_edit_configurationsection_when_locked", "Config_cannot_edit_configurationsection_when_locked"); 
    $.Constant({Static:true , Public:false}, "Config_cannot_edit_configurationsection_when_not_attached", "Config_cannot_edit_configurationsection_when_not_attached"); 
    $.Constant({Static:true , Public:false}, "Config_cannot_edit_configurationsection_when_it_is_implicit", "Config_cannot_edit_configurationsection_when_it_is_implicit"); 
    $.Constant({Static:true , Public:false}, "Config_cannot_edit_configurationsection_when_it_is_undeclared", "Config_cannot_edit_configurationsection_when_it_is_undeclared"); 
    $.Constant({Static:true , Public:false}, "Config_cannot_edit_configurationsectiongroup_in_location_config", "Config_cannot_edit_configurationsectiongroup_in_location_config"); 
    $.Constant({Static:true , Public:false}, "Config_cannot_edit_configurationsectiongroup_when_not_attached", "Config_cannot_edit_configurationsectiongroup_when_not_attached"); 
    $.Constant({Static:true , Public:false}, "Config_cannot_edit_locationattriubtes", "Config_cannot_edit_locationattriubtes"); 
    $.Constant({Static:true , Public:false}, "Config_cannot_open_config_source", "Config_cannot_open_config_source"); 
    $.Constant({Static:true , Public:false}, "Config_client_config_init_error", "Config_client_config_init_error"); 
    $.Constant({Static:true , Public:false}, "Config_client_config_init_security", "Config_client_config_init_security"); 
    $.Constant({Static:true , Public:false}, "Config_client_config_too_many_configsections_elements", "Config_client_config_too_many_configsections_elements"); 
    $.Constant({Static:true , Public:false}, "Config_configmanager_open_noexe", "Config_configmanager_open_noexe"); 
    $.Constant({Static:true , Public:false}, "Config_configsection_parentnotvalid", "Config_configsection_parentnotvalid"); 
    $.Constant({Static:true , Public:false}, "Config_connectionstrings_declaration_invalid", "Config_connectionstrings_declaration_invalid"); 
    $.Constant({Static:true , Public:false}, "Config_data_read_count_mismatch", "Config_data_read_count_mismatch"); 
    $.Constant({Static:true , Public:false}, "Config_element_no_context", "Config_element_no_context"); 
    $.Constant({Static:true , Public:false}, "Config_empty_lock_attributes_except", "Config_empty_lock_attributes_except"); 
    $.Constant({Static:true , Public:false}, "Config_empty_lock_attributes_except_effective", "Config_empty_lock_attributes_except_effective"); 
    $.Constant({Static:true , Public:false}, "Config_empty_lock_element_except", "Config_empty_lock_element_except"); 
    $.Constant({Static:true , Public:false}, "Config_exception_in_config_section_handler", "Config_exception_in_config_section_handler"); 
    $.Constant({Static:true , Public:false}, "Config_file_doesnt_have_root_configuration", "Config_file_doesnt_have_root_configuration"); 
    $.Constant({Static:true , Public:false}, "Config_file_has_changed", "Config_file_has_changed"); 
    $.Constant({Static:true , Public:false}, "Config_getparentconfigurationsection_first_instance", "Config_getparentconfigurationsection_first_instance"); 
    $.Constant({Static:true , Public:false}, "Config_inconsistent_location_attributes", "Config_inconsistent_location_attributes"); 
    $.Constant({Static:true , Public:false}, "Config_invalid_attributes_for_write", "Config_invalid_attributes_for_write"); 
    $.Constant({Static:true , Public:false}, "Config_invalid_boolean_attribute", "Config_invalid_boolean_attribute"); 
    $.Constant({Static:true , Public:false}, "Config_invalid_configurationsection_constructor", "Config_invalid_configurationsection_constructor"); 
    $.Constant({Static:true , Public:false}, "Config_invalid_node_type", "Config_invalid_node_type"); 
    $.Constant({Static:true , Public:false}, "Config_location_location_not_allowed", "Config_location_location_not_allowed"); 
    $.Constant({Static:true , Public:false}, "Config_location_path_invalid_character", "Config_location_path_invalid_character"); 
    $.Constant({Static:true , Public:false}, "Config_location_path_invalid_first_character", "Config_location_path_invalid_first_character"); 
    $.Constant({Static:true , Public:false}, "Config_location_path_invalid_last_character", "Config_location_path_invalid_last_character"); 
    $.Constant({Static:true , Public:false}, "Config_missing_required_attribute", "Config_missing_required_attribute"); 
    $.Constant({Static:true , Public:false}, "Config_more_data_than_expected", "Config_more_data_than_expected"); 
    $.Constant({Static:true , Public:false}, "Config_name_value_file_section_file_invalid_root", "Config_name_value_file_section_file_invalid_root"); 
    $.Constant({Static:true , Public:false}, "Config_namespace_invalid", "Config_namespace_invalid"); 
    $.Constant({Static:true , Public:false}, "Config_no_stream_to_write", "Config_no_stream_to_write"); 
    $.Constant({Static:true , Public:false}, "Config_not_allowed_to_encrypt_this_section", "Config_not_allowed_to_encrypt_this_section"); 
    $.Constant({Static:true , Public:false}, "Config_object_is_null", "Config_object_is_null"); 
    $.Constant({Static:true , Public:false}, "Config_operation_not_runtime", "Config_operation_not_runtime"); 
    $.Constant({Static:true , Public:false}, "Config_properties_may_not_be_derived_from_configuration_section", "Config_properties_may_not_be_derived_from_configuration_section"); 
    $.Constant({Static:true , Public:false}, "Config_protection_section_not_found", "Config_protection_section_not_found"); 
    $.Constant({Static:true , Public:false}, "Config_provider_must_implement_type", "Config_provider_must_implement_type"); 
    $.Constant({Static:true , Public:false}, "Config_root_section_group_cannot_be_edited", "Config_root_section_group_cannot_be_edited"); 
    $.Constant({Static:true , Public:false}, "Config_section_allow_definition_attribute_invalid", "Config_section_allow_definition_attribute_invalid"); 
    $.Constant({Static:true , Public:false}, "Config_section_allow_exe_definition_attribute_invalid", "Config_section_allow_exe_definition_attribute_invalid"); 
    $.Constant({Static:true , Public:false}, "Config_section_cannot_be_used_in_location", "Config_section_cannot_be_used_in_location"); 
    $.Constant({Static:true , Public:false}, "Config_section_group_missing_public_constructor", "Config_section_group_missing_public_constructor"); 
    $.Constant({Static:true , Public:false}, "Config_section_locked", "Config_section_locked"); 
    $.Constant({Static:true , Public:false}, "Config_sections_must_be_unique", "Config_sections_must_be_unique"); 
    $.Constant({Static:true , Public:false}, "Config_source_cannot_be_shared", "Config_source_cannot_be_shared"); 
    $.Constant({Static:true , Public:false}, "Config_source_parent_conflict", "Config_source_parent_conflict"); 
    $.Constant({Static:true , Public:false}, "Config_source_file_format", "Config_source_file_format"); 
    $.Constant({Static:true , Public:false}, "Config_source_invalid_format", "Config_source_invalid_format"); 
    $.Constant({Static:true , Public:false}, "Config_source_invalid_chars", "Config_source_invalid_chars"); 
    $.Constant({Static:true , Public:false}, "Config_source_requires_file", "Config_source_requires_file"); 
    $.Constant({Static:true , Public:false}, "Config_source_syntax_error", "Config_source_syntax_error"); 
    $.Constant({Static:true , Public:false}, "Config_system_already_set", "Config_system_already_set"); 
    $.Constant({Static:true , Public:false}, "Config_tag_name_already_defined", "Config_tag_name_already_defined"); 
    $.Constant({Static:true , Public:false}, "Config_tag_name_already_defined_at_this_level", "Config_tag_name_already_defined_at_this_level"); 
    $.Constant({Static:true , Public:false}, "Config_tag_name_cannot_be_location", "Config_tag_name_cannot_be_location"); 
    $.Constant({Static:true , Public:false}, "Config_tag_name_cannot_begin_with_config", "Config_tag_name_cannot_begin_with_config"); 
    $.Constant({Static:true , Public:false}, "Config_type_doesnt_inherit_from_type", "Config_type_doesnt_inherit_from_type"); 
    $.Constant({Static:true , Public:false}, "Config_unexpected_element_end", "Config_unexpected_element_end"); 
    $.Constant({Static:true , Public:false}, "Config_unexpected_element_name", "Config_unexpected_element_name"); 
    $.Constant({Static:true , Public:false}, "Config_unexpected_node_type", "Config_unexpected_node_type"); 
    $.Constant({Static:true , Public:false}, "Config_unrecognized_configuration_section", "Config_unrecognized_configuration_section"); 
    $.Constant({Static:true , Public:false}, "Config_write_failed", "Config_write_failed"); 
    $.Constant({Static:true , Public:false}, "Converter_timespan_not_in_second", "Converter_timespan_not_in_second"); 
    $.Constant({Static:true , Public:false}, "Converter_unsupported_value_type", "Converter_unsupported_value_type"); 
    $.Constant({Static:true , Public:false}, "Decryption_failed", "Decryption_failed"); 
    $.Constant({Static:true , Public:false}, "Default_value_conversion_error_from_string", "Default_value_conversion_error_from_string"); 
    $.Constant({Static:true , Public:false}, "Default_value_wrong_type", "Default_value_wrong_type"); 
    $.Constant({Static:true , Public:false}, "DPAPI_bad_data", "DPAPI_bad_data"); 
    $.Constant({Static:true , Public:false}, "Empty_attribute", "Empty_attribute"); 
    $.Constant({Static:true , Public:false}, "EncryptedNode_not_found", "EncryptedNode_not_found"); 
    $.Constant({Static:true , Public:false}, "EncryptedNode_is_in_invalid_format", "EncryptedNode_is_in_invalid_format"); 
    $.Constant({Static:true , Public:false}, "Encryption_failed", "Encryption_failed"); 
    $.Constant({Static:true , Public:false}, "Expect_bool_value_for_DoNotShowUI", "Expect_bool_value_for_DoNotShowUI"); 
    $.Constant({Static:true , Public:false}, "Expect_bool_value_for_useMachineProtection", "Expect_bool_value_for_useMachineProtection"); 
    $.Constant({Static:true , Public:false}, "IndexOutOfRange", "IndexOutOfRange"); 
    $.Constant({Static:true , Public:false}, "Invalid_enum_value", "Invalid_enum_value"); 
    $.Constant({Static:true , Public:false}, "Key_container_doesnt_exist_or_access_denied", "Key_container_doesnt_exist_or_access_denied"); 
    $.Constant({Static:true , Public:false}, "Must_add_to_config_before_protecting_it", "Must_add_to_config_before_protecting_it"); 
    $.Constant({Static:true , Public:false}, "No_converter", "No_converter"); 
    $.Constant({Static:true , Public:false}, "No_exception_information_available", "No_exception_information_available"); 
    $.Constant({Static:true , Public:false}, "Property_name_reserved", "Property_name_reserved"); 
    $.Constant({Static:true , Public:false}, "Item_name_reserved", "Item_name_reserved"); 
    $.Constant({Static:true , Public:false}, "Basicmap_item_name_reserved", "Basicmap_item_name_reserved"); 
    $.Constant({Static:true , Public:false}, "ProtectedConfigurationProvider_not_found", "ProtectedConfigurationProvider_not_found"); 
    $.Constant({Static:true , Public:false}, "Regex_validator_error", "Regex_validator_error"); 
    $.Constant({Static:true , Public:false}, "String_null_or_empty", "String_null_or_empty"); 
    $.Constant({Static:true , Public:false}, "Subclass_validator_error", "Subclass_validator_error"); 
    $.Constant({Static:true , Public:false}, "Top_level_conversion_error_from_string", "Top_level_conversion_error_from_string"); 
    $.Constant({Static:true , Public:false}, "Top_level_conversion_error_to_string", "Top_level_conversion_error_to_string"); 
    $.Constant({Static:true , Public:false}, "Top_level_validation_error", "Top_level_validation_error"); 
    $.Constant({Static:true , Public:false}, "Type_cannot_be_resolved", "Type_cannot_be_resolved"); 
    $.Constant({Static:true , Public:false}, "TypeNotPublic", "TypeNotPublic"); 
    $.Constant({Static:true , Public:false}, "Unrecognized_initialization_value", "Unrecognized_initialization_value"); 
    $.Constant({Static:true , Public:false}, "UseMachineContainer_must_be_bool", "UseMachineContainer_must_be_bool"); 
    $.Constant({Static:true , Public:false}, "UseOAEP_must_be_bool", "UseOAEP_must_be_bool"); 
    $.Constant({Static:true , Public:false}, "Validation_scalar_range_violation_not_different", "Validation_scalar_range_violation_not_different"); 
    $.Constant({Static:true , Public:false}, "Validation_scalar_range_violation_not_equal", "Validation_scalar_range_violation_not_equal"); 
    $.Constant({Static:true , Public:false}, "Validation_scalar_range_violation_not_in_range", "Validation_scalar_range_violation_not_in_range"); 
    $.Constant({Static:true , Public:false}, "Validation_scalar_range_violation_not_outside_range", "Validation_scalar_range_violation_not_outside_range"); 
    $.Constant({Static:true , Public:false}, "Validator_Attribute_param_not_validator", "Validator_Attribute_param_not_validator"); 
    $.Constant({Static:true , Public:false}, "Validator_does_not_support_elem_type", "Validator_does_not_support_elem_type"); 
    $.Constant({Static:true , Public:false}, "Validator_does_not_support_prop_type", "Validator_does_not_support_prop_type"); 
    $.Constant({Static:true , Public:false}, "Validator_element_not_valid", "Validator_element_not_valid"); 
    $.Constant({Static:true , Public:false}, "Validator_method_not_found", "Validator_method_not_found"); 
    $.Constant({Static:true , Public:false}, "Validator_min_greater_than_max", "Validator_min_greater_than_max"); 
    $.Constant({Static:true , Public:false}, "Validator_scalar_resolution_violation", "Validator_scalar_resolution_violation"); 
    $.Constant({Static:true , Public:false}, "Validator_string_invalid_chars", "Validator_string_invalid_chars"); 
    $.Constant({Static:true , Public:false}, "Validator_string_max_length", "Validator_string_max_length"); 
    $.Constant({Static:true , Public:false}, "Validator_string_min_length", "Validator_string_min_length"); 
    $.Constant({Static:true , Public:false}, "Validator_value_type_invalid", "Validator_value_type_invalid"); 
    $.Constant({Static:true , Public:false}, "Validator_multiple_validator_attributes", "Validator_multiple_validator_attributes"); 
    $.Constant({Static:true , Public:false}, "Validator_timespan_value_must_be_positive", "Validator_timespan_value_must_be_positive"); 
    $.Constant({Static:true , Public:false}, "WrongType_of_Protected_provider", "WrongType_of_Protected_provider"); 
    $.Constant({Static:true , Public:false}, "Type_from_untrusted_assembly", "Type_from_untrusted_assembly"); 
    $.Constant({Static:true , Public:false}, "Config_element_locking_not_supported", "Config_element_locking_not_supported"); 
    $.Constant({Static:true , Public:false}, "Config_element_null_instance", "Config_element_null_instance"); 
    $.Constant({Static:true , Public:false}, "ConfigurationPermissionBadXml", "ConfigurationPermissionBadXml"); 
    $.Constant({Static:true , Public:false}, "ConfigurationPermission_Denied", "ConfigurationPermission_Denied"); 
    $.Constant({Static:true , Public:false}, "Section_from_untrusted_assembly", "Section_from_untrusted_assembly"); 
    $.Constant({Static:true , Public:false}, "Protection_provider_syntax_error", "Protection_provider_syntax_error"); 
    $.Constant({Static:true , Public:false}, "Protection_provider_invalid_format", "Protection_provider_invalid_format"); 
    $.Constant({Static:true , Public:false}, "Cannot_declare_or_remove_implicit_section", "Cannot_declare_or_remove_implicit_section"); 
    $.Constant({Static:true , Public:false}, "Config_reserved_attribute", "Config_reserved_attribute"); 
    $.Constant({Static:true , Public:false}, "Filename_in_SaveAs_is_used_already", "Filename_in_SaveAs_is_used_already"); 
    $.Constant({Static:true , Public:false}, "Provider_Already_Initialized", "Provider_Already_Initialized"); 
    $.Constant({Static:true , Public:false}, "Config_provider_name_null_or_empty", "Config_provider_name_null_or_empty"); 
    $.Constant({Static:true , Public:false}, "CollectionReadOnly", "CollectionReadOnly"); 
    $.Constant({Static:true , Public:false}, "Config_source_not_under_config_dir", "Config_source_not_under_config_dir"); 
    $.Constant({Static:true , Public:false}, "Config_source_invalid", "Config_source_invalid"); 
    $.Constant({Static:true , Public:false}, "Location_invalid_inheritInChildApplications_in_machine_or_root_web_config", "Location_invalid_inheritInChildApplications_in_machine_or_root_web_config"); 
    $.Constant({Static:true , Public:false}, "Cannot_change_both_AllowOverride_and_OverrideMode", "Cannot_change_both_AllowOverride_and_OverrideMode"); 
    $.Constant({Static:true , Public:false}, "Config_section_override_mode_attribute_invalid", "Config_section_override_mode_attribute_invalid"); 
    $.Constant({Static:true , Public:false}, "Invalid_override_mode_declaration", "Invalid_override_mode_declaration"); 
    $.Constant({Static:true , Public:false}, "Config_cannot_edit_locked_configurationsection_when_mode_is_not_allow", "Config_cannot_edit_locked_configurationsection_when_mode_is_not_allow"); 
    $.Field({Static:true , Public:false}, "loader", $.Type); 
    $.Field({Static:false, Public:false}, "resources", $asm01.TypeRef("System.Resources.ResourceManager")); 
    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object); 
    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "Culture", $asm01.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm01.TypeRef("System.Resources.ResourceManager"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ExternDll$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.ExternDll", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "Activeds", "activeds.dll"); 
    $.Constant({Static:true , Public:true }, "Advapi32", "advapi32.dll"); 
    $.Constant({Static:true , Public:true }, "Comctl32", "comctl32.dll"); 
    $.Constant({Static:true , Public:true }, "Comdlg32", "comdlg32.dll"); 
    $.Constant({Static:true , Public:true }, "Gdi32", "gdi32.dll"); 
    $.Constant({Static:true , Public:true }, "Gdiplus", "gdiplus.dll"); 
    $.Constant({Static:true , Public:true }, "Hhctrl", "hhctrl.ocx"); 
    $.Constant({Static:true , Public:true }, "Imm32", "imm32.dll"); 
    $.Constant({Static:true , Public:true }, "Kernel32", "kernel32.dll"); 
    $.Constant({Static:true , Public:true }, "Loadperf", "Loadperf.dll"); 
    $.Constant({Static:true , Public:true }, "Mscoree", "mscoree.dll"); 
    $.Constant({Static:true , Public:true }, "Mscorwks", "mscorwks.dll"); 
    $.Constant({Static:true , Public:true }, "Msi", "msi.dll"); 
    $.Constant({Static:true , Public:true }, "Mqrt", "mqrt.dll"); 
    $.Constant({Static:true , Public:true }, "Ntdll", "ntdll.dll"); 
    $.Constant({Static:true , Public:true }, "Ole32", "ole32.dll"); 
    $.Constant({Static:true , Public:true }, "Oleacc", "oleacc.dll"); 
    $.Constant({Static:true , Public:true }, "Oleaut32", "oleaut32.dll"); 
    $.Constant({Static:true , Public:true }, "Olepro32", "olepro32.dll"); 
    $.Constant({Static:true , Public:true }, "PerfCounter", "perfcounter.dll"); 
    $.Constant({Static:true , Public:true }, "Powrprof", "Powrprof.dll"); 
    $.Constant({Static:true , Public:true }, "Psapi", "psapi.dll"); 
    $.Constant({Static:true , Public:true }, "Shell32", "shell32.dll"); 
    $.Constant({Static:true , Public:true }, "Shfolder", "shfolder.dll"); 
    $.Constant({Static:true , Public:true }, "User32", "user32.dll"); 
    $.Constant({Static:true , Public:true }, "Uxtheme", "uxtheme.dll"); 
    $.Constant({Static:true , Public:true }, "WinMM", "winmm.dll"); 
    $.Constant({Static:true , Public:true }, "Winspool", "winspool.drv"); 
    $.Constant({Static:true , Public:true }, "Wtsapi32", "wtsapi32.dll"); 
    $.Constant({Static:true , Public:true }, "Version", "version.dll"); 
    $.Constant({Static:true , Public:true }, "Vsassert", "vsassert.dll"); 
    $.Constant({Static:true , Public:true }, "Shlwapi", "shlwapi.dll"); 
    $.Constant({Static:true , Public:true }, "Crypt32", "crypt32.dll"); 
    $.Constant({Static:true , Public:false}, "Odbc32", "odbc32.dll"); 
    $.Constant({Static:true , Public:false}, "SNI", "System.Data.dll"); 
    $.Constant({Static:true , Public:false}, "OciDll", "oci.dll"); 
    $.Constant({Static:true , Public:false}, "OraMtsDll", "oramts.dll"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function HResults$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.HResults", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Configuration", -2146232062); 
    $.Constant({Static:true , Public:false}, "Xml", -2146232000); 
    $.Constant({Static:true , Public:false}, "XmlSchema", -2146231999); 
    $.Constant({Static:true , Public:false}, "XmlXslt", -2146231998); 
    $.Constant({Static:true , Public:false}, "XmlXPath", -2146231997); 
    $.Constant({Static:true , Public:false}, "Data", -2146232032); 
    $.Constant({Static:true , Public:false}, "DataDeletedRowInaccessible", -2146232031); 
    $.Constant({Static:true , Public:false}, "DataDuplicateName", -2146232030); 
    $.Constant({Static:true , Public:false}, "DataInRowChangingEvent", -2146232029); 
    $.Constant({Static:true , Public:false}, "DataInvalidConstraint", -2146232028); 
    $.Constant({Static:true , Public:false}, "DataMissingPrimaryKey", -2146232027); 
    $.Constant({Static:true , Public:false}, "DataNoNullAllowed", -2146232026); 
    $.Constant({Static:true , Public:false}, "DataReadOnly", -2146232025); 
    $.Constant({Static:true , Public:false}, "DataRowNotInTable", -2146232024); 
    $.Constant({Static:true , Public:false}, "DataVersionNotFound", -2146232023); 
    $.Constant({Static:true , Public:false}, "DataConstraint", -2146232022); 
    $.Constant({Static:true , Public:false}, "StrongTyping", -2146232021); 
    $.Constant({Static:true , Public:false}, "SqlType", -2146232016); 
    $.Constant({Static:true , Public:false}, "SqlNullValue", -2146232015); 
    $.Constant({Static:true , Public:false}, "SqlTruncate", -2146232014); 
    $.Constant({Static:true , Public:false}, "AdapterMapping", -2146232013); 
    $.Constant({Static:true , Public:false}, "DataAdapter", -2146232012); 
    $.Constant({Static:true , Public:false}, "DBConcurrency", -2146232011); 
    $.Constant({Static:true , Public:false}, "OperationAborted", -2146232010); 
    $.Constant({Static:true , Public:false}, "InvalidUdt", -2146232009); 
    $.Constant({Static:true , Public:false}, "SqlException", -2146232060); 
    $.Constant({Static:true , Public:false}, "OdbcException", -2146232009); 
    $.Constant({Static:true , Public:false}, "OracleException", -2146232008); 
    $.Constant({Static:true , Public:false}, "NteBadKeySet", -2146893802); 
    $.Constant({Static:true , Public:false}, "Win32AccessDenied", -2147024891); 
    $.Constant({Static:true , Public:false}, "Win32InvalidHandle", -2147024890); 
    $.Constant({Static:true , Public:false}, "License", -2146232063); 
    $.Constant({Static:true , Public:false}, "InternalBufferOverflow", -2146232059); 
    $.Constant({Static:true , Public:false}, "ServiceControllerTimeout", -2146232058); 
    $.Constant({Static:true , Public:false}, "Install", -2146232057); 
    $.Constant({Static:true , Public:false}, "EFail", -2147467259); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigPathUtility$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Configuration.ConfigPathUtility", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "Combine", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParts", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValid", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "SeparatorChar", "/"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PrivilegedConfigurationManager$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Configuration.PrivilegedConfigurationManager", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "get_ConnectionStrings", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConnectionStringSettingsCollection"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.Property({Static:true , Public:false}, "ConnectionStrings", $asm03.TypeRef("System.Configuration.ConnectionStringSettingsCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigurationElement$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationElement", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ApplyInstanceAttributes", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ApplyValidator", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ApplyValidatorsRecursive", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AssociateContext", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.BaseConfigurationRecord")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CachePerTypeValidator", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallInit", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckLockedElement", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateConfigurationPropertyFromAttributes", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationProperty"), [$asm01.TypeRef("System.Reflection.PropertyInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateElement", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatePropertyBagFromType", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeserializeElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializePropertyValue", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Configuration.ConfigurationProperty"), $asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dump", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureRequiredProperties", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataToWriteInternal", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementInformation", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ElementInformation"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementPresent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementProperty", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationElementProperty"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementTagName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EvaluationContext", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ContextInformation"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Configuration.ConfigurationProperty")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemLocked", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValueFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LockAllAttributesExcept", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationLockCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LockAllElementsExcept", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationLockCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LockAttributes", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationLockCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LockedAllExceptAttributesList", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationLockCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LockedAttributesList", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationLockCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LockElements", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationLockCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LockItem", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Values", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValues"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetErrors", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationErrorsException"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetErrorsList", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleLockedAttributes", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Init", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeDefault", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IntersectLockCollections", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Specialized.StringCollection"), [$asm03.TypeRef("System.Configuration.ConfigurationLockCollection"), $asm03.TypeRef("System.Configuration.ConfigurationLockCollection")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLockAttributeName", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ListErrors", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.IList")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeLocks", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeserializeUnrecognizedAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeserializeUnrecognizedElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRequiredPropertyNotFound", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseLockedAttributes", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationLockCollection"), [$asm03.TypeRef("System.Configuration.ConfigurationValue"), $asm03.TypeRef("System.Configuration.ConfigurationLockCollectionType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostDeserialize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PreSerialize", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertiesFromType", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyFileName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyInfoInternal", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.PropertySourceInfo"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyLineNumber", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveAllInheritedLocks", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReportInvalidLock", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Configuration.ConfigurationLockCollectionType"), 
          $asm03.TypeRef("System.Configuration.ConfigurationValue"), $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetLockLists", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResetModified", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeElement", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlWriter"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeLockList", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Configuration.ConfigurationLockCollection"), $.String, 
          $asm05.TypeRef("System.Xml.XmlWriter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeToXmlElement", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlWriter"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DataToWriteInternal", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ElementPresent", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationProperty"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LockItem", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLocked", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPropertyValue", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.ConfigurationProperty"), $.Object, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetReadOnly", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Unmerge", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Type, 
          $asm03.TypeRef("System.Configuration.ConfigurationSaveMode")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnMergeLockList", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationLockCollection"), [
          $asm03.TypeRef("System.Configuration.ConfigurationLockCollection"), $asm03.TypeRef("System.Configuration.ConfigurationLockCollection"), 
          $asm03.TypeRef("System.Configuration.ConfigurationSaveMode")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateElement", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), 
          $.Boolean
        ], [])
    );

    $.Constant({Static:true , Public:false}, "LockAttributesKey", "lockAttributes"); 
    $.Constant({Static:true , Public:false}, "LockAllAttributesExceptKey", "lockAllAttributesExcept"); 
    $.Constant({Static:true , Public:false}, "LockElementsKey", "lockElements"); 
    $.Constant({Static:true , Public:false}, "LockAll", "*"); 
    $.Constant({Static:true , Public:false}, "LockAllElementsExceptKey", "lockAllElementsExcept"); 
    $.Constant({Static:true , Public:false}, "LockItemKey", "lockItem"); 
    $.Constant({Static:true , Public:false}, "DefaultCollectionPropertyName", ""); 
    $.Field({Static:true , Public:false}, "s_lockAttributeNames", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:true , Public:false}, "s_propertyBags", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:true , Public:false}, "s_perTypeValidators", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("System.Type"), $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "s_nullPropertyValue", $.Object); 
    $.Field({Static:true , Public:false}, "s_ElementProperty", $asm03.TypeRef("System.Configuration.ConfigurationElementProperty")); 
    $.Field({Static:false, Public:false}, "_bDataToWrite", $.Boolean); 
    $.Field({Static:false, Public:false}, "_bModified", $.Boolean); 
    $.Field({Static:false, Public:false}, "_bReadOnly", $.Boolean); 
    $.Field({Static:false, Public:false}, "_bElementPresent", $.Boolean); 
    $.Field({Static:false, Public:false}, "_bInited", $.Boolean); 
    $.Field({Static:false, Public:false}, "_lockedAttributesList", $asm03.TypeRef("System.Configuration.ConfigurationLockCollection")); 
    $.Field({Static:false, Public:false}, "_lockedAllExceptAttributesList", $asm03.TypeRef("System.Configuration.ConfigurationLockCollection")); 
    $.Field({Static:false, Public:false}, "_lockedElementsList", $asm03.TypeRef("System.Configuration.ConfigurationLockCollection")); 
    $.Field({Static:false, Public:false}, "_lockedAllExceptElementsList", $asm03.TypeRef("System.Configuration.ConfigurationLockCollection")); 
    $.Field({Static:false, Public:false}, "_values", $asm03.TypeRef("System.Configuration.ConfigurationValues")); 
    $.Field({Static:false, Public:false}, "_elementTagName", $.String); 
    $.Field({Static:false, Public:false}, "_evaluationElement", $asm03.TypeRef("System.Configuration.ElementInformation")); 
    $.Field({Static:false, Public:false}, "_elementProperty", $asm03.TypeRef("System.Configuration.ConfigurationElementProperty")); 
    $.Field({Static:false, Public:false}, "_fItemLocked", $asm03.TypeRef("System.Configuration.ConfigurationValueFlags")); 
    $.Field({Static:false, Public:false}, "_evalContext", $asm03.TypeRef("System.Configuration.ContextInformation")); 
    $.Field({Static:false, Public:false}, "_configRecord", $asm03.TypeRef("System.Configuration.BaseConfigurationRecord")); 
    $.Property({Static:false, Public:false}, "DataToWriteInternal", $.Boolean);

    $.Property({Static:false, Public:false}, "ElementPresent", $.Boolean);

    $.Property({Static:false, Public:false}, "ElementTagName", $.String);

    $.Property({Static:false, Public:false}, "LockedAttributesList", $asm03.TypeRef("System.Configuration.ConfigurationLockCollection"));

    $.Property({Static:false, Public:false}, "LockedAllExceptAttributesList", $asm03.TypeRef("System.Configuration.ConfigurationLockCollection"));

    $.Property({Static:false, Public:false}, "ItemLocked", $asm03.TypeRef("System.Configuration.ConfigurationValueFlags"));

    $.Property({Static:false, Public:true }, "LockAttributes", $asm03.TypeRef("System.Configuration.ConfigurationLockCollection"));

    $.Property({Static:false, Public:true }, "LockAllAttributesExcept", $asm03.TypeRef("System.Configuration.ConfigurationLockCollection"));

    $.Property({Static:false, Public:true }, "LockElements", $asm03.TypeRef("System.Configuration.ConfigurationLockCollection"));

    $.Property({Static:false, Public:true }, "LockAllElementsExcept", $asm03.TypeRef("System.Configuration.ConfigurationLockCollection"));

    $.Property({Static:false, Public:true }, "LockItem", $.Boolean);

    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false}, "Values", $asm03.TypeRef("System.Configuration.ConfigurationValues"));

    $.Property({Static:false, Public:true }, "ElementInformation", $asm03.TypeRef("System.Configuration.ElementInformation"));

    $.Property({Static:false, Public:false}, "EvaluationContext", $asm03.TypeRef("System.Configuration.ContextInformation"));

    $.Property({Static:false, Public:false, Virtual:true }, "ElementProperty", $asm03.TypeRef("System.Configuration.ConfigurationElementProperty"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function ConfigurationSection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationElement"), "System.Configuration.ConfigurationSection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeserializeSection", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SectionInformation", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.SectionInformation"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetRuntimeObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResetModified", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeSection", 
      new JSIL.MethodSignature($.String, [
          $asm03.TypeRef("System.Configuration.ConfigurationElement"), $.String, 
          $asm03.TypeRef("System.Configuration.ConfigurationSaveMode")
        ], [])
    );

    $.Field({Static:false, Public:false}, "_section", $asm03.TypeRef("System.Configuration.SectionInformation")); 
    $.Property({Static:false, Public:true }, "SectionInformation", $asm03.TypeRef("System.Configuration.SectionInformation"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AppSettingsSection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationSection"), "System.Configuration.AppSettingsSection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeserializeElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureStaticPropertyBag", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_File", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalSettings", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Specialized.NameValueCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Settings", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.KeyValueConfigurationCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetRuntimeObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeSection", 
      new JSIL.MethodSignature($.String, [
          $asm03.TypeRef("System.Configuration.ConfigurationElement"), $.String, 
          $asm03.TypeRef("System.Configuration.ConfigurationSaveMode")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_File", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:true , Public:false}, "s_properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Field({Static:true , Public:false}, "s_propAppSettings", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Field({Static:true , Public:false}, "s_propFile", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Field({Static:false, Public:false}, "_KeyValueCollection", $asm03.TypeRef("System.Configuration.KeyValueInternalCollection")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false}, "InternalSettings", $asm02.TypeRef("System.Collections.Specialized.NameValueCollection"));

    $.Property({Static:false, Public:true }, "Settings", $asm03.TypeRef("System.Configuration.KeyValueConfigurationCollection"))
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true }, "File", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["file"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Configuration.Internal");
JSIL.MakeInterface(
  "System.Configuration.Internal.IInternalConfigRecord", true, [], function ($) {
    $.Method({}, "get_ConfigPath", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "get_StreamName", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "get_HasInitErrors", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "ThrowIfInitErrors", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "GetSection", new JSIL.MethodSignature($.Object, [$.String], []));
    $.Method({}, "GetLkgSection", new JSIL.MethodSignature($.Object, [$.String], []));
    $.Method({}, "RefreshSection", new JSIL.MethodSignature(null, [$.String], []));
    $.Method({}, "Remove", new JSIL.MethodSignature(null, [], []));
    $.Property({}, "ConfigPath");
    $.Property({}, "StreamName");
    $.Property({}, "HasInitErrors");
  }, []);

(function BaseConfigurationRecord$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.BaseConfigurationRecord", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddImplicitSections", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Hashtable")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddLocation", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AllowDefinitionToEnum", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"), [$.String, $asm03.TypeRef("System.Configuration.XmlUtil")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AllowExeDefinitionToEnum", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), [$.String, $asm03.TypeRef("System.Configuration.XmlUtil")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallCreateSection", 
      new JSIL.MethodSignature($.Object, [
          $.Boolean, $asm03.TypeRef("System.Configuration.FactoryRecord"), 
          $asm03.TypeRef("System.Configuration.SectionRecord"), $.Object, 
          $asm03.TypeRef("System.Configuration.ConfigXmlReader"), $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CallHostDecryptSection", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), 
          $asm03.TypeRef("System.Configuration.ProtectedConfigurationSection")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckPermissionAllowed", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseRecursive", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CombineConfigKey", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSection", 
      new JSIL.MethodSignature($.Object, [
          $.Boolean, $asm03.TypeRef("System.Configuration.FactoryRecord"), 
          $asm03.TypeRef("System.Configuration.SectionRecord"), $.Object, 
          $asm03.TypeRef("System.Configuration.ConfigXmlReader")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSectionDefault", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $asm03.TypeRef("System.Configuration.FactoryRecord"), $asm03.TypeRef("System.Configuration.SectionRecord"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSectionFactory", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Configuration.FactoryRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DebugValidateIndirectInputs", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.SectionRecord")], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:false, Public:false}, "DecryptConfigSection", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigXmlReader"), [$asm03.TypeRef("System.Configuration.ConfigXmlReader"), $asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureFactories", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureLocationSections", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureSectionRecord", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.SectionRecord"), [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureSectionRecordImpl", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.SectionRecord"), [
          $.String, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureSectionRecordUnsafe", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.SectionRecord"), [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Evaluate", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Configuration.FactoryRecord"), $asm03.TypeRef("System.Configuration.SectionRecord"), 
          $.Object, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EvaluateOne", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("System.Array", [$.String]), $asm03.TypeRef("System.Configuration.SectionInput"), 
          $.Boolean, $asm03.TypeRef("System.Configuration.FactoryRecord"), 
          $asm03.TypeRef("System.Configuration.SectionRecord"), $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAndEnsureFactoryRecord", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.FactoryRecord"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindChangedConfigurationStream", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindFactoryRecord", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.FactoryRecord"), [
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindFactoryRecord", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.FactoryRecord"), [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSection", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigXmlReader"), [
          $jsilcore.TypeRef("System.Array", [$.String]), $asm03.TypeRef("System.Configuration.SectionXmlInfo"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSectionRecursive", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigXmlReader"), [
          $jsilcore.TypeRef("System.Array", [$.String]), $.Int32, 
          $asm03.TypeRef("System.Configuration.XmlUtil"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ClassFlags", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.SimpleBitVector32"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigContext", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ConfigPath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigStreamInfo", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.BaseConfigurationRecord/ConfigRecordStreamInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultProviderName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasFactoryRecords", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasInitErrors", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasStream", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Host", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsInitDelayed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLocationConfig", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsMachineConfig", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRootConfig", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocationSubPath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parent", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProtectedConfig", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ProtectedConfigurationSection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RecordSupportsLocation", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StreamName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnrestrictedConfigPermission", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPermission"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFactoryRecord", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.FactoryRecord"), [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetLkgSection", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProtectionProviderFromName", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRestrictedPermissions", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.PermissionSet"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetRuntimeObject", 
      new JSIL.MethodSignature($.Object, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSection", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSection", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSectionLockedMode", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.OverrideMode"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSectionLockedMode", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.OverrideMode"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Configuration.OverrideMode")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSectionRecord", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.SectionRecord"), [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSectionRecursive", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSectionXmlReader", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigXmlReader"), [$jsilcore.TypeRef("System.Array", [$.String]), $asm03.TypeRef("System.Configuration.SectionInput")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasStreamChanged", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "hlAddChild", 
      new JSIL.MethodSignature(null, [$.String, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "hlClearResultRecursive", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "hlGetChild", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "hlNeedsChildFor", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "hlRemoveChild", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Impersonate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IDisposable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), $.Type, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitConfigFromFile", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitProtectedConfigurationSection", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDefinitionAllowed", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"), $asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitSection", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsReservedAttributeName", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRootDeclaration", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadConfigSource", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigXmlReader"), [$.String, $asm03.TypeRef("System.Configuration.SectionXmlInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MonitorStream", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NormalizeConfigSource", 
      new JSIL.MethodSignature($.String, [$.String, $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NormalizeLocationSubPath", 
      new JSIL.MethodSignature($.String, [$.String, $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnStreamChanged", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RefreshFactoryRecord", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RefreshSection", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveLocationSections", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveOverrideModeFromParent", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.OverrideMode"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Configuration.OverrideMode")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanFactories", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [$asm03.TypeRef("System.Configuration.XmlUtil")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanFactoriesRecursive", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.XmlUtil"), $.String, 
          $asm01.TypeRef("System.Collections.Hashtable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanLocationSection", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.XmlUtil")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanSections", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.XmlUtil")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanSectionsRecursive", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.XmlUtil"), $.String, 
          $.Boolean, $.String, 
          $asm03.TypeRef("System.Configuration.OverrideModeSetting"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldPrefetchRawXml", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.FactoryRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSkipDueToInheritInChildApplications", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldSkipDueToInheritInChildApplications", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SplitConfigKey", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ThrowIfInitErrors", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfParseErrors", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationSchemaErrors")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UseParentResult", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Object, 
          $asm03.TypeRef("System.Configuration.SectionRecord")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateProtectionProviderAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateUniqueChildConfigSource", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateUniqueConfigSource", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyDefinitionAllowed", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.FactoryRecord"), $.String, 
          $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifySectionName", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Configuration.XmlUtil"), 
          $asm03.TypeRef("System.Configuration.ExceptionAction"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifySectionName", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo"), 
          $.Boolean
        ], [])
    );

    $.Constant({Static:true , Public:false}, "NL", "\r\n"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_TRUE", "true"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_FALSE", "false"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_CONFIGURATION", "configuration"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_CONFIGURATION_NAMESPACE", "http://schemas.microsoft.com/.NetConfiguration/v2.0"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_CONFIGSECTIONS", "configSections"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTION", "section"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTION_NAME", "name"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTION_TYPE", "type"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTION_ALLOWLOCATION", "allowLocation"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTION_ALLOWDEFINITION", "allowDefinition"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTION_ALLOWDEFINITION_EVERYWHERE", "Everywhere"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTION_ALLOWDEFINITION_MACHINEONLY", "MachineOnly"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTION_ALLOWDEFINITION_MACHINETOAPPLICATION", "MachineToApplication"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTION_ALLOWDEFINITION_MACHINETOWEBROOT", "MachineToWebRoot"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTION_ALLOWEXEDEFINITION", "allowExeDefinition"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTION_ALLOWEXEDEFINITION_MACHTOROAMING", "MachineToRoamingUser"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTION_ALLOWEXEDEFINITION_MACHTOLOCAL", "MachineToLocalUser"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTION_RESTARTONEXTERNALCHANGES", "restartOnExternalChanges"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTION_REQUIREPERMISSION", "requirePermission"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTIONGROUP", "sectionGroup"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTIONGROUP_NAME", "name"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTIONGROUP_TYPE", "type"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_REMOVE", "remove"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_CLEAR", "clear"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_LOCATION", "location"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_LOCATION_PATH", "path"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_LOCATION_ALLOWOVERRIDE", "allowOverride"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_LOCATION_INHERITINCHILDAPPLICATIONS", "inheritInChildApplications"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_CONFIGSOURCE", "configSource"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_XMLNS", "xmlns"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_PROTECTION_PROVIDER", "configProtectionProvider"); 
    $.Constant({Static:true , Public:false}, "FORMAT_NEWCONFIGFILE", "<?xml version=\"1.0\" encoding=\"{0}\"?>\r\n"); 
    $.Constant({Static:true , Public:false}, "FORMAT_CONFIGURATION", "<configuration>\r\n"); 
    $.Constant({Static:true , Public:false}, "FORMAT_CONFIGURATION_NAMESPACE", "<configuration xmlns=\"{0}\">\r\n"); 
    $.Constant({Static:true , Public:false}, "FORMAT_CONFIGURATION_ENDELEMENT", "</configuration>"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_SECTION_OVERRIDEMODEDEFAULT", "overrideModeDefault"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_LOCATION_OVERRIDEMODE", "overrideMode"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_OVERRIDEMODE_INHERIT", "Inherit"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_OVERRIDEMODE_ALLOW", "Allow"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_OVERRIDEMODE_DENY", "Deny"); 
    $.Constant({Static:true , Public:false}, "FORMAT_LOCATION_NOPATH", "<location {0} inheritInChildApplications=\"{1}\">\r\n"); 
    $.Constant({Static:true , Public:false}, "FORMAT_LOCATION_PATH", "<location path=\"{2}\" {0} inheritInChildApplications=\"{1}\">\r\n"); 
    $.Constant({Static:true , Public:false}, "FORMAT_LOCATION_ENDELEMENT", "</location>"); 
    $.Constant({Static:true , Public:false}, "KEYWORD_LOCATION_OVERRIDEMODE_STRING", "{0}=\"{1}\""); 
    $.Constant({Static:true , Public:false}, "FORMAT_SECTION_CONFIGSOURCE", "<{0} configSource=\"{1}\" />"); 
    $.Constant({Static:true , Public:false}, "FORMAT_CONFIGSOURCE_FILE", "<?xml version=\"1.0\" encoding=\"{0}\"?>\r\n"); 
    $.Constant({Static:true , Public:false}, "FORMAT_SECTIONGROUP_ENDELEMENT", "</sectionGroup>"); 
    $.Constant({Static:true , Public:false}, "ClassSupportsChangeNotifications", 1); 
    $.Constant({Static:true , Public:false}, "ClassSupportsRefresh", 2); 
    $.Constant({Static:true , Public:false}, "ClassSupportsImpersonation", 4); 
    $.Constant({Static:true , Public:false}, "ClassSupportsRestrictedPermissions", 8); 
    $.Constant({Static:true , Public:false}, "ClassSupportsKeepInputs", 16); 
    $.Constant({Static:true , Public:false}, "ClassSupportsDelayedInit", 32); 
    $.Constant({Static:true , Public:false}, "ClassIgnoreLocalErrors", 64); 
    $.Constant({Static:true , Public:false}, "ProtectedDataInitialized", 1); 
    $.Constant({Static:true , Public:false}, "Closed", 2); 
    $.Constant({Static:true , Public:false}, "PrefetchAll", 8); 
    $.Constant({Static:true , Public:false}, "IsAboveApplication", 32); 
    $.Constant({Static:true , Public:false}, "ContextEvaluated", 128); 
    $.Constant({Static:true , Public:false}, "IsLocationListResolved", 256); 
    $.Constant({Static:true , Public:false}, "NamespacePresentInFile", 512); 
    $.Constant({Static:true , Public:false}, "RestrictedPermissionsResolved", 2048); 
    $.Constant({Static:true , Public:false}, "IsTrusted", 8192); 
    $.Constant({Static:true , Public:false}, "SupportsChangeNotifications", 65536); 
    $.Constant({Static:true , Public:false}, "SupportsRefresh", 131072); 
    $.Constant({Static:true , Public:false}, "SupportsPath", 262144); 
    $.Constant({Static:true , Public:false}, "SupportsKeepInputs", 524288); 
    $.Constant({Static:true , Public:false}, "SupportsLocation", 1048576); 
    $.Constant({Static:true , Public:false}, "ForceLocationWritten", 16777216); 
    $.Constant({Static:true , Public:false}, "SuggestLocationRemoval", 33554432); 
    $.Constant({Static:true , Public:false}, "NamespacePresentCurrent", 67108864); 
    $.Constant({Static:true , Public:false}, "ConfigPathSeparatorChar", "/"); 
    $.Constant({Static:true , Public:false}, "ConfigPathSeparatorString", "/"); 
    $.Constant({Static:true , Public:false}, "invalidFirstSubPathCharacters", "\\./"); 
    $.Constant({Static:true , Public:false}, "invalidLastSubPathCharacters", "\\./"); 
    $.Constant({Static:true , Public:false}, "invalidSubPathCharactersString", "\\?:*\"<>|"); 
    $.Constant({Static:true , Public:false}, "ProtectedConfigurationSectionTypeName", "System.Configuration.ProtectedConfigurationSection, System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "RESERVED_SECTION_PROTECTED_CONFIGURATION", "configProtectedData"); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ConfigPathSeparatorParams", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:true , Public:false}, "s_unrestrictedConfigPermission", $asm03.TypeRef("System.Configuration.ConfigurationPermission")); 
    $.Field({Static:false, Public:false}, "_flags", $asm03.TypeRef("System.Configuration.SafeBitVector32")); 
    $.Field({Static:false, Public:false}, "_parent", $.Type); 
    $.Field({Static:false, Public:false}, "_children", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "_configRoot", $asm03.TypeRef("System.Configuration.Internal.InternalConfigRoot")); 
    $.Field({Static:false, Public:false}, "_configName", $.String); 
    $.Field({Static:false, Public:false}, "_configPath", $.String); 
    $.Field({Static:false, Public:false}, "_locationSubPath", $.String); 
    $.Field({Static:false, Public:false}, "_configStreamInfo", $asm03.TypeRef("System.Configuration.BaseConfigurationRecord/ConfigRecordStreamInfo")); 
    $.Field({Static:false, Public:false}, "_configContext", $.Object); 
    $.Field({Static:false, Public:false}, "_protectedConfig", $asm03.TypeRef("System.Configuration.ProtectedConfigurationSection")); 
    $.Field({Static:false, Public:false}, "_restrictedPermissions", $asm01.TypeRef("System.Security.PermissionSet")); 
    $.Field({Static:false, Public:false}, "_initErrors", $asm03.TypeRef("System.Configuration.ConfigurationSchemaErrors")); 
    $.Field({Static:false, Public:false}, "_initDelayedRoot", $.Type); 
    $.Field({Static:false, Public:false}, "_factoryRecords", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "_sectionRecords", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "_locationSections", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:true , Public:false}, "s_appConfigPath", $.String); 
    $.Field({Static:true , Public:false}, "s_indirectInputsComparer", $asm01.TypeRef("System.Collections.Generic.IComparer`1", [$asm03.TypeRef("System.Configuration.SectionInput")])); 
    $.Field({Static:true , Public:false}, "s_invalidSubPathCharactersArray", $jsilcore.TypeRef("System.Array", [$.Char]), JSIL.StringToCharArray("\\?:*\"<>|")); 
    $.Property({Static:false, Public:false, Virtual:true }, "ClassFlags", $asm03.TypeRef("System.Configuration.SimpleBitVector32"));

    $.Property({Static:false, Public:true , Virtual:true }, "ConfigPath", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "StreamName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasInitErrors", $.Boolean);

    $.Property({Static:false, Public:false}, "HasStream", $.Boolean);

    $.Property({Static:false, Public:false}, "IsInitDelayed", $.Boolean);

    $.Property({Static:false, Public:false}, "Host", $asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost"));

    $.Property({Static:false, Public:false}, "Parent", $.Type);

    $.Property({Static:false, Public:false}, "IsRootConfig", $.Boolean);

    $.Property({Static:false, Public:false}, "IsMachineConfig", $.Boolean);

    $.Property({Static:false, Public:false}, "LocationSubPath", $.String);

    $.Property({Static:false, Public:false}, "IsLocationConfig", $.Boolean);

    $.Property({Static:false, Public:false}, "ConfigStreamInfo", $asm03.TypeRef("System.Configuration.BaseConfigurationRecord/ConfigRecordStreamInfo"));

    $.Property({Static:true , Public:false}, "UnrestrictedConfigPermission", $asm03.TypeRef("System.Configuration.ConfigurationPermission"));

    $.Property({Static:false, Public:false}, "DefaultProviderName", $.String);

    $.Property({Static:false, Public:false}, "ProtectedConfig", $asm03.TypeRef("System.Configuration.ProtectedConfigurationSection"));

    $.Property({Static:false, Public:false}, "HasFactoryRecords", $.Boolean);

    $.Property({Static:false, Public:false}, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:false}, "ConfigContext", $.Object);

    $.Property({Static:false, Public:false}, "RecordSupportsLocation", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["ConfigPath = {ConfigPath}"]; });

})();

(function ConfigRecordStreamInfo$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.BaseConfigurationRecord/ConfigRecordStreamInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearStreamInfos", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CallbackDelegate", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Internal.StreamChangeCallback"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasStream", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasStreamInfos", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StreamEncoding", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StreamInfos", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Specialized.HybridDictionary"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StreamName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StreamVersion", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CallbackDelegate", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.StreamChangeCallback")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasStream", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_StreamEncoding", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_StreamName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_StreamVersion", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Field({Static:false, Public:false}, "_hasStream", $.Boolean); 
    $.Field({Static:false, Public:false}, "_streamname", $.String); 
    $.Field({Static:false, Public:false}, "_streamVersion", $.Object); 
    $.Field({Static:false, Public:false}, "_encoding", $asm01.TypeRef("System.Text.Encoding")); 
    $.Field({Static:false, Public:false}, "_callbackDelegate", $asm03.TypeRef("System.Configuration.Internal.StreamChangeCallback")); 
    $.Field({Static:false, Public:false}, "_streamInfos", $asm02.TypeRef("System.Collections.Specialized.HybridDictionary")); 
    $.Property({Static:false, Public:false}, "HasStream", $.Boolean);

    $.Property({Static:false, Public:false}, "StreamName", $.String);

    $.Property({Static:false, Public:false}, "StreamVersion", $.Object);

    $.Property({Static:false, Public:false}, "StreamEncoding", $asm01.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false}, "CallbackDelegate", $asm03.TypeRef("System.Configuration.Internal.StreamChangeCallback"));

    $.Property({Static:false, Public:false}, "StreamInfos", $asm02.TypeRef("System.Collections.Specialized.HybridDictionary"));

    $.Property({Static:false, Public:false}, "HasStreamInfos", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function IndirectLocationInputComparer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.BaseConfigurationRecord/IndirectLocationInputComparer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("System.Configuration.SectionInput"), $asm03.TypeRef("System.Configuration.SectionInput")], [])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IComparer`1", [$asm03.TypeRef("System.Configuration.SectionInput")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigurationValidatorBase$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationValidatorBase", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CallbackValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), "System.Configuration.CallbackValidator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $asm03.TypeRef("System.Configuration.ValidatorCallback")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ValidatorCallback")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Field({Static:false, Public:false}, "_type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "_callback", $asm03.TypeRef("System.Configuration.ValidatorCallback")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigurationValidatorAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Configuration.ConfigurationValidatorAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidatorInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidatorType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDeclaringType", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "_declaringType", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_validator", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ValidatorInstance", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Property({Static:false, Public:true }, "ValidatorType", $asm01.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Property]; });

})();

(function CallbackValidatorAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorAttribute"), "System.Configuration.CallbackValidatorAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CallbackMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidatorInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CallbackMethodName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "_type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "_callbackMethodName", $.String); 
    $.Field({Static:false, Public:false}, "_callbackMethod", $asm03.TypeRef("System.Configuration.ValidatorCallback")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ValidatorInstance", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "CallbackMethodName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Property]; });

})();

(function ClientConfigPaths$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ClientConfigPaths", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CombineIfValid", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ApplicationConfigUri", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ApplicationUri", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ControlEvidencePermission", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Permissions.SecurityPermission"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Current", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasEntryAssembly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasLocalConfig", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasRoamingConfig", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalConfigDirectory", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalConfigFilename", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProductName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProductVersion", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RoamingConfigDirectory", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RoamingConfigFilename", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SerializationFormatterPermission", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Permissions.SecurityPermission"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEvidenceInfo", 
      new JSIL.MethodSignature($.Object, [
          $asm01.TypeRef("System.AppDomain"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHash", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPaths", 
      new JSIL.MethodSignature($.Type, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeAndHashSuffix", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.AppDomain"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsClickOnceDeployed", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.AppDomain")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeVersionIndependent", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Policy.StrongName"), [$asm01.TypeRef("System.Security.Policy.StrongName")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RefreshCurrent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNamesAndVersion", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Reflection.Assembly"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToBase32StringSuitableForDirName", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean], [])
    );

    $.Constant({Static:true , Public:false}, "UserConfigFilename", "user.config"); 
    $.Constant({Static:true , Public:false}, "ClickOnceDataDirectory", "DataDirectory"); 
    $.Constant({Static:true , Public:false}, "ConfigExtension", ".config"); 
    $.Constant({Static:true , Public:false}, "MAX_PATH", 260); 
    $.Constant({Static:true , Public:false}, "MAX_LENGTH_TO_USE", 25); 
    $.Constant({Static:true , Public:false}, "FILE_URI_LOCAL", "file:///"); 
    $.Constant({Static:true , Public:false}, "FILE_URI_UNC", "file://"); 
    $.Constant({Static:true , Public:false}, "FILE_URI", "file:"); 
    $.Constant({Static:true , Public:false}, "HTTP_URI", "http://"); 
    $.Constant({Static:true , Public:false}, "StrongNameDesc", "StrongName"); 
    $.Constant({Static:true , Public:false}, "UrlDesc", "Url"); 
    $.Constant({Static:true , Public:false}, "PathDesc", "Path"); 
    $.Field({Static:true , Public:false}, "s_Base32Char", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:true , Public:false}, "s_current", $.Type); 
    $.Field({Static:true , Public:false}, "s_currentIncludesUserConfig", $asm01.TypeRef("System.Boolean")); 
    $.Field({Static:true , Public:false}, "s_serializationPerm", $asm01.TypeRef("System.Security.Permissions.SecurityPermission")); 
    $.Field({Static:true , Public:false}, "s_controlEvidencePerm", $asm01.TypeRef("System.Security.Permissions.SecurityPermission")); 
    $.Field({Static:false, Public:false}, "_hasEntryAssembly", $.Boolean); 
    $.Field({Static:false, Public:false}, "_includesUserConfig", $.Boolean); 
    $.Field({Static:false, Public:false}, "_applicationUri", $.String); 
    $.Field({Static:false, Public:false}, "_applicationConfigUri", $.String); 
    $.Field({Static:false, Public:false}, "_roamingConfigDirectory", $.String); 
    $.Field({Static:false, Public:false}, "_roamingConfigFilename", $.String); 
    $.Field({Static:false, Public:false}, "_localConfigDirectory", $.String); 
    $.Field({Static:false, Public:false}, "_localConfigFilename", $.String); 
    $.Field({Static:false, Public:false}, "_companyName", $.String); 
    $.Field({Static:false, Public:false}, "_productName", $.String); 
    $.Field({Static:false, Public:false}, "_productVersion", $.String); 
    $.Property({Static:true , Public:false}, "Current", $.Type);

    $.Property({Static:false, Public:false}, "HasEntryAssembly", $.Boolean);

    $.Property({Static:false, Public:false}, "ApplicationUri", $.String);

    $.Property({Static:false, Public:false}, "ApplicationConfigUri", $.String);

    $.Property({Static:false, Public:false}, "RoamingConfigFilename", $.String);

    $.Property({Static:false, Public:false}, "RoamingConfigDirectory", $.String);

    $.Property({Static:false, Public:false}, "HasRoamingConfig", $.Boolean);

    $.Property({Static:false, Public:false}, "LocalConfigFilename", $.String);

    $.Property({Static:false, Public:false}, "LocalConfigDirectory", $.String);

    $.Property({Static:false, Public:false}, "HasLocalConfig", $.Boolean);

    $.Property({Static:false, Public:false}, "ProductName", $.String);

    $.Property({Static:false, Public:false}, "ProductVersion", $.String);

    $.Property({Static:true , Public:false}, "ControlEvidencePermission", $asm01.TypeRef("System.Security.Permissions.SecurityPermission"));

    $.Property({Static:true , Public:false}, "SerializationFormatterPermission", $asm01.TypeRef("System.Security.Permissions.SecurityPermission"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeInterface(
  "System.Configuration.Internal.IInternalConfigHost", true, [], function ($) {
    $.Method({}, "Init", new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), $jsilcore.TypeRef("System.Array", [$.Object])], []));
    $.Method({}, "InitForConfiguration", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], []));
    $.Method({}, "IsConfigRecordRequired", new JSIL.MethodSignature($.Boolean, [$.String], []));
    $.Method({}, "IsInitDelayed", new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord")], []));
    $.Method({}, "RequireCompleteInit", new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord")], []));
    $.Method({}, "IsSecondaryRoot", new JSIL.MethodSignature($.Boolean, [$.String], []));
    $.Method({}, "GetStreamName", new JSIL.MethodSignature($.String, [$.String], []));
    $.Method({}, "GetStreamNameForConfigSource", new JSIL.MethodSignature($.String, [$.String, $.String], []));
    $.Method({}, "GetStreamVersion", new JSIL.MethodSignature($.Object, [$.String], []));
    $.Method({}, "OpenStreamForRead", new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$.String], []));
    $.Method({}, "OpenStreamForRead", new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$.String, $.Boolean], []));
    $.Method({}, "OpenStreamForWrite", new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], []));
    $.Method({}, "OpenStreamForWrite", new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $.Boolean
        ], []));
    $.Method({}, "WriteCompleted", new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Object
        ], []));
    $.Method({}, "WriteCompleted", new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Object, $.Boolean
        ], []));
    $.Method({}, "DeleteStream", new JSIL.MethodSignature(null, [$.String], []));
    $.Method({}, "IsFile", new JSIL.MethodSignature($.Boolean, [$.String], []));
    $.Method({}, "get_SupportsChangeNotifications", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "StartMonitoringStreamForChanges", new JSIL.MethodSignature($.Object, [$.String, $asm03.TypeRef("System.Configuration.Internal.StreamChangeCallback")], []));
    $.Method({}, "StopMonitoringStreamForChanges", new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Configuration.Internal.StreamChangeCallback")], []));
    $.Method({}, "get_SupportsRefresh", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_SupportsPath", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_SupportsLocation", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "IsAboveApplication", new JSIL.MethodSignature($.Boolean, [$.String], []));
    $.Method({}, "GetConfigPathFromLocationSubPath", new JSIL.MethodSignature($.String, [$.String, $.String], []));
    $.Method({}, "IsLocationApplicable", new JSIL.MethodSignature($.Boolean, [$.String], []));
    $.Method({}, "IsDefinitionAllowed", new JSIL.MethodSignature($.Boolean, [
          $.String, $asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition")
        ], []));
    $.Method({}, "VerifyDefinitionAllowed", new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
        ], []));
    $.Method({}, "IsTrustedConfigPath", new JSIL.MethodSignature($.Boolean, [$.String], []));
    $.Method({}, "IsFullTrustSectionWithoutAptcaAllowed", new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord")], []));
    $.Method({}, "GetRestrictedPermissions", new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Security.PermissionSet")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], []));
    $.Method({}, "Impersonate", new JSIL.MethodSignature($asm01.TypeRef("System.IDisposable"), [], []));
    $.Method({}, "PrefetchAll", new JSIL.MethodSignature($.Boolean, [$.String, $.String], []));
    $.Method({}, "PrefetchSection", new JSIL.MethodSignature($.Boolean, [$.String, $.String], []));
    $.Method({}, "CreateDeprecatedConfigContext", new JSIL.MethodSignature($.Object, [$.String], []));
    $.Method({}, "CreateConfigurationContext", new JSIL.MethodSignature($.Object, [$.String, $.String], []));
    $.Method({}, "DecryptSection", new JSIL.MethodSignature($.String, [
          $.String, $asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), 
          $asm03.TypeRef("System.Configuration.ProtectedConfigurationSection")
        ], []));
    $.Method({}, "EncryptSection", new JSIL.MethodSignature($.String, [
          $.String, $asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), 
          $asm03.TypeRef("System.Configuration.ProtectedConfigurationSection")
        ], []));
    $.Method({}, "GetConfigType", new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$.String, $.Boolean], []));
    $.Method({}, "GetConfigTypeName", new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Type")], []));
    $.Method({}, "get_IsRemote", new JSIL.MethodSignature($.Boolean, [], []));
    $.Property({}, "SupportsChangeNotifications");
    $.Property({}, "SupportsRefresh");
    $.Property({}, "SupportsPath");
    $.Property({}, "SupportsLocation");
    $.Property({}, "IsRemote");
  }, []);

(function DelegatingConfigHost$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.Internal.DelegatingConfigHost", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateConfigurationContext", 
      new JSIL.MethodSignature($.Object, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDeprecatedConfigContext", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DecryptSection", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), 
          $asm03.TypeRef("System.Configuration.ProtectedConfigurationSection")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeleteStream", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EncryptSection", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), 
          $asm03.TypeRef("System.Configuration.ProtectedConfigurationSection")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Host", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsRemote", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsChangeNotifications", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsLocation", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsPath", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsRefresh", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetConfigPathFromLocationSubPath", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetConfigType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetConfigTypeName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetRestrictedPermissions", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Security.PermissionSet")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStreamName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStreamNameForConfigSource", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStreamVersion", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Impersonate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IDisposable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Init", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitForConfiguration", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsAboveApplication", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsConfigRecordRequired", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefinitionAllowed", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsFile", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsFullTrustSectionWithoutAptcaAllowed", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsInitDelayed", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocationApplicable", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSecondaryRoot", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsTrustedConfigPath", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OpenStreamForRead", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OpenStreamForRead", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OpenStreamForWrite", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OpenStreamForWrite", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrefetchAll", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrefetchSection", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RequireCompleteInit", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Host", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StartMonitoringStreamForChanges", 
      new JSIL.MethodSignature($.Object, [$.String, $asm03.TypeRef("System.Configuration.Internal.StreamChangeCallback")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StopMonitoringStreamForChanges", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Configuration.Internal.StreamChangeCallback")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifyDefinitionAllowed", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCompleted", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCompleted", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Object, $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:false}, "_host", $asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost")); 
    $.Property({Static:false, Public:false}, "Host", $asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost"));

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsChangeNotifications", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsRefresh", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsPath", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsLocation", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsRemote", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeInterface(
  "System.Configuration.Internal.IInternalConfigClientHost", true, [], function ($) {
    $.Method({}, "IsExeConfig", new JSIL.MethodSignature($.Boolean, [$.String], []));
    $.Method({}, "IsRoamingUserConfig", new JSIL.MethodSignature($.Boolean, [$.String], []));
    $.Method({}, "IsLocalUserConfig", new JSIL.MethodSignature($.Boolean, [$.String], []));
    $.Method({}, "GetExeConfigPath", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "GetRoamingUserConfigPath", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "GetLocalUserConfigPath", new JSIL.MethodSignature($.String, [], []));
  }, []);

(function ClientConfigurationHost$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.Internal.DelegatingConfigHost"), "System.Configuration.ClientConfigurationHost", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateConfigurationContext", 
      new JSIL.MethodSignature($.Object, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDeprecatedConfigContext", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeleteStream", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigPaths", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ClientConfigPaths"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasLocalConfig", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasRoamingConfig", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAppConfigHttp", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MachineConfigFilePath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsLocation", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsPath", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SupportsRefresh", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetRestrictedPermissions", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Security.PermissionSet")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStreamName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStreamNameForConfigSource", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStreamVersion", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUserLevel", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationUserLevel"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Impersonate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IDisposable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Init", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitForConfiguration", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsConfigRecordRequired", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefinitionAllowed", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsInitDelayed", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsTrustedConfigPath", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsUserConfig", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenExeConfiguration", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Configuration"), [
          $asm03.TypeRef("System.Configuration.ConfigurationFileMap"), $.Boolean, 
          $asm03.TypeRef("System.Configuration.ConfigurationUserLevel"), $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OpenStreamForRead", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OpenStreamForWrite", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrefetchAll", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrefetchSection", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RefreshConfigPaths", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RequireCompleteInit", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigClientHost.GetExeConfigPath", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(1, "GetExeConfigPath");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigClientHost.GetLocalUserConfigPath", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(1, "GetLocalUserConfigPath");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigClientHost.GetRoamingUserConfigPath", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(1, "GetRoamingUserConfigPath");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigClientHost.IsExeConfig", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    )
      .Overrides(1, "IsExeConfig");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigClientHost.IsLocalUserConfig", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    )
      .Overrides(1, "IsLocalUserConfig");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigClientHost.IsRoamingUserConfig", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    )
      .Overrides(1, "IsRoamingUserConfig");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifyDefinitionAllowed", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
        ], [])
    );

    $.Constant({Static:true , Public:false}, "MachineConfigName", "MACHINE"); 
    $.Constant({Static:true , Public:false}, "ExeConfigName", "EXE"); 
    $.Constant({Static:true , Public:false}, "RoamingUserConfigName", "ROAMING_USER"); 
    $.Constant({Static:true , Public:false}, "LocalUserConfigName", "LOCAL_USER"); 
    $.Constant({Static:true , Public:false}, "MachineConfigPath", "MACHINE"); 
    $.Constant({Static:true , Public:false}, "ExeConfigPath", "MACHINE/EXE"); 
    $.Constant({Static:true , Public:false}, "RoamingUserConfigPath", "MACHINE/EXE/ROAMING_USER"); 
    $.Constant({Static:true , Public:false}, "LocalUserConfigPath", "MACHINE/EXE/ROAMING_USER/LOCAL_USER"); 
    $.Constant({Static:true , Public:false}, "ConfigExtension", ".config"); 
    $.Constant({Static:true , Public:false}, "MachineConfigFilename", "machine.config"); 
    $.Constant({Static:true , Public:false}, "MachineConfigSubdirectory", "Config"); 
    $.Field({Static:true , Public:false}, "s_init", $.Object); 
    $.Field({Static:true , Public:false}, "s_version", $.Object); 
    $.Field({Static:true , Public:false}, "s_machineConfigFilePath", $.String); 
    $.Field({Static:false, Public:false}, "_exePath", $.String); 
    $.Field({Static:false, Public:false}, "_configPaths", $asm03.TypeRef("System.Configuration.ClientConfigPaths")); 
    $.Field({Static:false, Public:false}, "_fileMap", $asm03.TypeRef("System.Configuration.ExeConfigurationFileMap")); 
    $.Field({Static:false, Public:false}, "_initComplete", $.Boolean); 
    $.Property({Static:false, Public:false}, "ConfigPaths", $asm03.TypeRef("System.Configuration.ClientConfigPaths"));

    $.Property({Static:true , Public:false}, "MachineConfigFilePath", $.String);

    $.Property({Static:false, Public:false}, "HasRoamingConfig", $.Boolean);

    $.Property({Static:false, Public:false}, "HasLocalConfig", $.Boolean);

    $.Property({Static:false, Public:false}, "IsAppConfigHttp", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsRefresh", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsPath", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SupportsLocation", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm03.TypeRef("System.Configuration.Internal.IInternalConfigClientHost")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeInterface(
  "System.Configuration.Internal.IInternalConfigSystem", true, [], function ($) {
    $.Method({}, "GetSection", new JSIL.MethodSignature($.Object, [$.String], []));
    $.Method({}, "RefreshConfig", new JSIL.MethodSignature(null, [$.String], []));
    $.Method({}, "get_SupportsUserConfig", new JSIL.MethodSignature($.Boolean, [], []));
    $.Property({}, "SupportsUserConfig");
  }, []);

(function ClientConfigurationSystem$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ClientConfigurationSystem", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoesSectionOnlyUseMachineConfig", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureInit", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSectionUsedInInit", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnConfigRemoved", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("System.Configuration.Internal.InternalConfigEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareClientConfigSystem", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigSystem.get_SupportsUserConfig", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_SupportsUserConfig");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigSystem.GetSection", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    )
      .Overrides(0, "GetSection");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigSystem.RefreshConfig", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Overrides(0, "RefreshConfig");

    $.Constant({Static:true , Public:false}, "SystemDiagnosticsConfigKey", "system.diagnostics"); 
    $.Constant({Static:true , Public:false}, "SystemNetGroupKey", "system.net/"); 
    $.Field({Static:false, Public:false}, "_configSystem", $asm03.TypeRef("System.Configuration.Internal.IConfigSystem")); 
    $.Field({Static:false, Public:false}, "_configRoot", $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot")); 
    $.Field({Static:false, Public:false}, "_configHost", $asm03.TypeRef("System.Configuration.ClientConfigurationHost")); 
    $.Field({Static:false, Public:false}, "_machineConfigRecord", $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord")); 
    $.Field({Static:false, Public:false}, "_completeConfigRecord", $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord")); 
    $.Field({Static:false, Public:false}, "_initError", $asm01.TypeRef("System.Exception")); 
    $.Field({Static:false, Public:false}, "_isInitInProgress", $.Boolean); 
    $.Field({Static:false, Public:false}, "_isMachineConfigInited", $.Boolean); 
    $.Field({Static:false, Public:false}, "_isUserConfigInited", $.Boolean); 
    $.Field({Static:false, Public:false}, "_isAppConfigHttp", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigSystem.SupportsUserConfig", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("System.Configuration.Internal.IInternalConfigSystem")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigurationConverterBase$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.ComponentModel.TypeConverter"), "System.Configuration.ConfigurationConverterBase", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateType", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.Type")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CommaDelimitedStringCollectionConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationConverterBase"), "System.Configuration.CommaDelimitedStringCollectionConverter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm01.TypeRef("System.Type")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigDefinitionUpdates$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigDefinitionUpdates", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUpdate", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.DefinitionUpdate"), [
          $asm03.TypeRef("System.Configuration.OverrideModeSetting"), $.Boolean, 
          $.Boolean, $.String, 
          $asm03.TypeRef("System.Configuration.SectionRecord")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteUpdates", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindLocationUpdates", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.LocationUpdates"), [$asm03.TypeRef("System.Configuration.OverrideModeSetting"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlagLocationWritten", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocationUpdatesList", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequireLocation", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RequireLocation", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "_locationUpdatesList", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "_requireLocationWritten", $.Boolean); 
    $.Property({Static:false, Public:false}, "LocationUpdatesList", $asm01.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "RequireLocation", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Configuration$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.Configuration", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ForceGroupsRecursive", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationSectionGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AppSettings", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.AppSettingsSection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectionStrings", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConnectionStringsSection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EvaluationContext", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ContextInformation"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FilePath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasFile", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Locations", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationLocationCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceDeclared", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RootSectionGroup", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSectionGroup"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SectionGroups", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSectionGroupCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sections", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSectionCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSection", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSection"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSectionGroup", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSectionGroup"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenLocationConfiguration", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationSaveMode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Save", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationSaveMode"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SaveAs", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SaveAs", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Configuration.ConfigurationSaveMode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SaveAs", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Configuration.ConfigurationSaveMode"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveAsImpl", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Configuration.ConfigurationSaveMode"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NamespaceDeclared", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "_typeConfigHost", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "_hostInitConfigurationParams", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:false}, "_configRoot", $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot")); 
    $.Field({Static:false, Public:false}, "_configRecord", $asm03.TypeRef("System.Configuration.MgmtConfigurationRecord")); 
    $.Field({Static:false, Public:false}, "_rootSectionGroup", $asm03.TypeRef("System.Configuration.ConfigurationSectionGroup")); 
    $.Field({Static:false, Public:false}, "_locations", $asm03.TypeRef("System.Configuration.ConfigurationLocationCollection")); 
    $.Field({Static:false, Public:false}, "_evalContext", $asm03.TypeRef("System.Configuration.ContextInformation")); 
    $.Property({Static:false, Public:true }, "AppSettings", $asm03.TypeRef("System.Configuration.AppSettingsSection"));

    $.Property({Static:false, Public:true }, "ConnectionStrings", $asm03.TypeRef("System.Configuration.ConnectionStringsSection"));

    $.Property({Static:false, Public:true }, "FilePath", $.String);

    $.Property({Static:false, Public:true }, "HasFile", $.Boolean);

    $.Property({Static:false, Public:true }, "Locations", $asm03.TypeRef("System.Configuration.ConfigurationLocationCollection"));

    $.Property({Static:false, Public:true }, "EvaluationContext", $asm03.TypeRef("System.Configuration.ContextInformation"));

    $.Property({Static:false, Public:true }, "RootSectionGroup", $asm03.TypeRef("System.Configuration.ConfigurationSectionGroup"));

    $.Property({Static:false, Public:true }, "Sections", $asm03.TypeRef("System.Configuration.ConfigurationSectionCollection"));

    $.Property({Static:false, Public:true }, "SectionGroups", $asm03.TypeRef("System.Configuration.ConfigurationSectionGroupCollection"));

    $.Property({Static:false, Public:true }, "NamespaceDeclared", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Configuration.ConfigurationAllowDefinition", true, {
    MachineOnly: 0, 
    MachineToWebRoot: 100, 
    MachineToApplication: 200, 
    Everywhere: 300
  }, false
);

JSIL.MakeEnum(
  "System.Configuration.ConfigurationAllowExeDefinition", true, {
    MachineOnly: 0, 
    MachineToApplication: 100, 
    MachineToRoamingUser: 200, 
    MachineToLocalUser: 300
  }, false
);

(function ConfigurationCollectionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Configuration.ConfigurationCollectionAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AddItemName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClearItemsName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CollectionType", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationElementCollectionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RemoveItemName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AddItemName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ClearItemsName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CollectionType", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationElementCollectionType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RemoveItemName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "_addItemName", $.String); 
    $.Field({Static:false, Public:false}, "_removeItemName", $.String); 
    $.Field({Static:false, Public:false}, "_clearItemsName", $.String); 
    $.Field({Static:false, Public:false}, "_itemType", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "_collectionType", $asm03.TypeRef("System.Configuration.ConfigurationElementCollectionType")); 
    $.Property({Static:false, Public:true }, "ItemType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "AddItemName", $.String);

    $.Property({Static:false, Public:true }, "RemoveItemName", $.String);

    $.Property({Static:false, Public:true }, "ClearItemsName", $.String);

    $.Property({Static:false, Public:true }, "CollectionType", $asm03.TypeRef("System.Configuration.ConfigurationElementCollectionType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Class", "Property")]; });

})();

(function ConfigurationElementCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationElement"), "System.Configuration.ConfigurationElementCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.IComparer")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AssociateContext", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.BaseConfigurationRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BaseAdd", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseAdd", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationElement"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseAdd", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.ConfigurationElement"), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BaseAdd", 
      new JSIL.MethodSignature(null, [$.Int32, $asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseAdd", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm03.TypeRef("System.Configuration.ConfigurationElement"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseAddInternal", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm03.TypeRef("System.Configuration.ConfigurationElement"), 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseClear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseGet", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationElement"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseGet", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationElement"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseGetAllKeys", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseGetKey", 
      new JSIL.MethodSignature($.Object, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseIndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseIsRemoved", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseRemove", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseRemove", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BaseRemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallCreateNewElement", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationElement"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallCreateNewElement", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareKeys", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Configuration.ConfigurationElement")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationElement"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AddElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ClearElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CollectionType", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationElementCollectionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EmitClear", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Items", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LockableElements", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RemoveElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ThrowOnDuplicate", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetElementKeyInternal", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetElementsEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumeratorImpl", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsElementName", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsElementRemovable", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsLockableElement", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeserializeUnrecognizedElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RealIndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResetModified", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeElement", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlWriter"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AddElementName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ClearElementName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EmitClear", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RemoveElementName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetReadOnly", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Array"), $.Int32], [])
    )
      .Overrides(0, "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Unmerge", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.ConfigurationElement"), $asm03.TypeRef("System.Configuration.ConfigurationElement"), 
          $asm03.TypeRef("System.Configuration.ConfigurationSaveMode")
        ], [])
    );

    $.Constant({Static:true , Public:false}, "DefaultAddItemName", "add"); 
    $.Constant({Static:true , Public:false}, "DefaultRemoveItemName", "remove"); 
    $.Constant({Static:true , Public:false}, "DefaultClearItemsName", "clear"); 
    $.Field({Static:false, Public:false}, "_removedItemCount", $.Int32); 
    $.Field({Static:false, Public:false}, "_inheritedCount", $.Int32); 
    $.Field({Static:false, Public:false}, "_items", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "_addElement", $.String); 
    $.Field({Static:false, Public:false}, "_removeElement", $.String); 
    $.Field({Static:false, Public:false}, "_clearElement", $.String); 
    $.Field({Static:false, Public:false}, "bEmitClearTag", $.Boolean); 
    $.Field({Static:false, Public:false}, "bCollectionCleared", $.Boolean); 
    $.Field({Static:false, Public:false}, "bModified", $.Boolean); 
    $.Field({Static:false, Public:false}, "bReadOnly", $.Boolean); 
    $.Field({Static:false, Public:false}, "_comparer", $asm01.TypeRef("System.Collections.IComparer")); 
    $.Field({Static:false, Public:false}, "internalAddToEnd", $.Boolean); 
    $.Field({Static:false, Public:false}, "internalElementTagName", $.String); 
    $.Property({Static:false, Public:false}, "Items", $asm01.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "AddElementName", $.String);

    $.Property({Static:false, Public:false}, "RemoveElementName", $.String);

    $.Property({Static:false, Public:false}, "ClearElementName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "EmitClear", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementName", $.String);

    $.Property({Static:false, Public:false}, "LockableElements", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ThrowOnDuplicate", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CollectionType", $asm03.TypeRef("System.Configuration.ConfigurationElementCollectionType"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; });

})();

JSIL.MakeEnum(
  "System.Configuration.ConfigurationElementCollection/InheritedType", false, {
    inNeither: 0, 
    inParent: 1, 
    inSelf: 2, 
    inBothSame: 3, 
    inBothDiff: 4, 
    inBothCopyNoRemove: 5
  }, false
);

JSIL.MakeEnum(
  "System.Configuration.ConfigurationElementCollection/EntryType", false, {
    Inherited: 0, 
    Replaced: 1, 
    Removed: 2, 
    Added: 3
  }, false
);

(function Entry$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationElementCollection/Entry", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.ConfigurationElementCollection/EntryType"), $.Object, 
          $asm03.TypeRef("System.Configuration.ConfigurationElement")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKey", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Configuration.ConfigurationElementCollection")], [])
    );

    $.Field({Static:false, Public:false}, "_entryType", $asm03.TypeRef("System.Configuration.ConfigurationElementCollection/EntryType")); 
    $.Field({Static:false, Public:false}, "_key", $.Object); 
    $.Field({Static:false, Public:false}, "_value", $asm03.TypeRef("System.Configuration.ConfigurationElement")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Enumerator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationElementCollection/Enumerator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.ArrayList"), $asm03.TypeRef("System.Configuration.ConfigurationElementCollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.get_Entry", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.DictionaryEntry"), [], [])
    )
      .Overrides(0, "get_Entry");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.get_Key", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Key");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.get_Value", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Value");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset");

    $.Field({Static:false, Public:false}, "_itemsEnumerator", $asm01.TypeRef("System.Collections.IEnumerator")); 
    $.Field({Static:false, Public:false}, "_current", $asm01.TypeRef("System.Collections.DictionaryEntry")); 
    $.Field({Static:false, Public:false}, "ThisCollection", $asm03.TypeRef("System.Configuration.ConfigurationElementCollection")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.Entry", $asm01.TypeRef("System.Collections.DictionaryEntry"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.Key", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionaryEnumerator.Value", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IDictionaryEnumerator"), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Configuration.ConfigurationElementCollectionType", true, {
    BasicMap: 0, 
    AddRemoveClearMap: 1, 
    BasicMapAlternate: 2, 
    AddRemoveClearMapAlternate: 3
  }, false
);

(function ConfigurationElementProperty$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationElementProperty", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationValidatorBase")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Validator", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), [], [])
    );

    $.Field({Static:false, Public:false}, "_validator", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase")); 
    $.Property({Static:false, Public:true }, "Validator", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigurationErrorsException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.Configuration.ConfigurationException"), "System.Configuration.ConfigurationErrorsException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Exception"), 
          $.String, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Exception"), 
          $asm05.TypeRef("System.Xml.XmlNode")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Exception"), 
          $asm05.TypeRef("System.Xml.XmlReader")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Exception"), 
          $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Configuration.ConfigurationException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.ArrayList")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AlwaysSafeFilename", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FullPathWithAssert", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BareMessage", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Errors", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ICollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorsGeneric", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Filename", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Line", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBareMessage", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Configuration.ConfigurationException")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConfigErrorInfoLineNumber", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFilename", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFilename", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFirstException", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Configuration.ConfigurationException"), [$asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInnerException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm02.TypeRef("System.Configuration.ConfigurationException")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLineNumber", 
      new JSIL.MethodSignature($.Int32, [$asm02.TypeRef("System.Configuration.ConfigurationException")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetLineNumber", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetLineNumber", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUnsafeConfigErrorInfoFilename", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUnsafeFilename", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Configuration.ConfigurationException")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUnsafeFilename", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUnsafeFilename", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$.String, $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SafeFilename", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "HTTP_PREFIX", "http:"); 
    $.Constant({Static:true , Public:false}, "SERIALIZATION_PARAM_FILENAME", "firstFilename"); 
    $.Constant({Static:true , Public:false}, "SERIALIZATION_PARAM_LINE", "firstLine"); 
    $.Constant({Static:true , Public:false}, "SERIALIZATION_PARAM_ERROR_COUNT", "count"); 
    $.Constant({Static:true , Public:false}, "SERIALIZATION_PARAM_ERROR_DATA", "_errors"); 
    $.Constant({Static:true , Public:false}, "SERIALIZATION_PARAM_ERROR_TYPE", "_errors_type"); 
    $.Field({Static:false, Public:false}, "_firstFilename", $.String); 
    $.Field({Static:false, Public:false}, "_firstLine", $.Int32); 
    $.Field({Static:false, Public:false}, "_errors", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Configuration.ConfigurationException")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BareMessage", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Filename", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Line", $.Int32);

    $.Property({Static:false, Public:true }, "Errors", $asm01.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false}, "ErrorsGeneric", $asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigurationFileMap$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationFileMap", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MachineConfigFilename", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MachineConfigFilename", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "_machineConfigFilename", $.String); 
    $.Field({Static:false, Public:false}, "_requirePathDiscovery", $.Boolean); 
    $.Property({Static:false, Public:true }, "MachineConfigFilename", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.ICloneable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigurationLocation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationLocation", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Configuration"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Path", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenConfiguration", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Configuration"), [], [])
    );

    $.Field({Static:false, Public:false}, "_config", $asm03.TypeRef("System.Configuration.Configuration")); 
    $.Field({Static:false, Public:false}, "_locationSubPath", $.String); 
    $.Property({Static:false, Public:true }, "Path", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigurationLocationCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Collections.ReadOnlyCollectionBase"), "System.Configuration.ConfigurationLocationCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.ICollection")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationLocation"), [$.Int32], [])
    );

    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Configuration.ConfigurationLocation"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function ConfigurationLockCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationLockCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationElement"), $asm03.TypeRef("System.Configuration.ConfigurationLockCollectionType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.ConfigurationElement"), $asm03.TypeRef("System.Configuration.ConfigurationLockCollectionType"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.ConfigurationElement"), $asm03.TypeRef("System.Configuration.ConfigurationLockCollectionType"), 
          $.String, $.Type
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Configuration.ConfigurationValueFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearInternal", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearSeedList", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefinedInParent", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeList", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExceptionList", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasParentElements", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LockType", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationLockCollectionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValueModified", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveInheritedLocks", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetModified", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetFromList", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Array"), $.Int32], [])
    )
      .Overrides(0, "CopyTo");

    $.Constant({Static:true , Public:false}, "LockAll", "*"); 
    $.Field({Static:false, Public:false}, "internalDictionary", $asm02.TypeRef("System.Collections.Specialized.HybridDictionary")); 
    $.Field({Static:false, Public:false}, "internalArraylist", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "_bModified", $.Boolean); 
    $.Field({Static:false, Public:false}, "_bExceptionList", $.Boolean); 
    $.Field({Static:false, Public:false}, "_ignoreName", $.String); 
    $.Field({Static:false, Public:false}, "_thisElement", $asm03.TypeRef("System.Configuration.ConfigurationElement")); 
    $.Field({Static:false, Public:false}, "_lockType", $asm03.TypeRef("System.Configuration.ConfigurationLockCollectionType")); 
    $.Field({Static:false, Public:false}, "SeedList", $.String); 
    $.Property({Static:false, Public:false}, "LockType", $asm03.TypeRef("System.Configuration.ConfigurationLockCollectionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:true }, "IsModified", $.Boolean);

    $.Property({Static:false, Public:false}, "ExceptionList", $.Boolean);

    $.Property({Static:false, Public:true }, "AttributeList", $.String);

    $.Property({Static:false, Public:true }, "HasParentElements", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Configuration.ConfigurationLockCollectionType", false, {
    LockedAttributes: 1, 
    LockedExceptionList: 2, 
    LockedElements: 3, 
    LockedElementsExceptionList: 4
  }, false
);

(function ConfigurationManager$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Configuration.ConfigurationManager", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "CompleteConfigInit", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureConfigurationSystem", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AppSettings", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Specialized.NameValueCollection"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ConnectionStrings", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConnectionStringSettingsCollection"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SetConfigurationSystemInProgress", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SupportsUserConfig", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSection", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "OpenExeConfiguration", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Configuration"), [$asm03.TypeRef("System.Configuration.ConfigurationUserLevel")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "OpenExeConfiguration", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Configuration"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenExeConfigurationImpl", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Configuration"), [
          $asm03.TypeRef("System.Configuration.ConfigurationFileMap"), $.Boolean, 
          $asm03.TypeRef("System.Configuration.ConfigurationUserLevel"), $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "OpenMachineConfiguration", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Configuration"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "OpenMappedExeConfiguration", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Configuration"), [$asm03.TypeRef("System.Configuration.ExeConfigurationFileMap"), $asm03.TypeRef("System.Configuration.ConfigurationUserLevel")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "OpenMappedMachineConfiguration", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Configuration"), [$asm03.TypeRef("System.Configuration.ConfigurationFileMap")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrepareConfigSystem", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "RefreshSection", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetConfigurationSystem", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigSystem"), $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetInitError", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Exception")], [])
    );

    $.Field({Static:true , Public:false}, "s_configSystem", $asm03.TypeRef("System.Configuration.Internal.IInternalConfigSystem")); 
    $.Field({Static:true , Public:false}, "s_initState", $asm03.TypeRef("System.Configuration.ConfigurationManager/InitState"), function ($pi) {
        return $asm03.System.Configuration.ConfigurationManager_InitState.NotStarted;
      }); 
    $.Field({Static:true , Public:false}, "s_initLock", $.Object); 
    $.Field({Static:true , Public:false}, "s_initError", $asm01.TypeRef("System.Exception")); 
    $.Property({Static:true , Public:false}, "SetConfigurationSystemInProgress", $.Boolean);

    $.Property({Static:true , Public:false}, "SupportsUserConfig", $.Boolean);

    $.Property({Static:true , Public:true }, "AppSettings", $asm02.TypeRef("System.Collections.Specialized.NameValueCollection"));

    $.Property({Static:true , Public:true }, "ConnectionStrings", $asm03.TypeRef("System.Configuration.ConnectionStringSettingsCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Configuration.ConfigurationManager/InitState", false, {
    NotStarted: 0, 
    Started: 1, 
    Usable: 2, 
    Completed: 3
  }, false
);

(function ConfigurationManagerHelperFactory$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Configuration.ConfigurationManagerHelperFactory", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "CreateConfigurationManagerHelper", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Internal.IConfigurationManagerHelper"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Internal.IConfigurationManagerHelper"), [], [])
    );

    $.Constant({Static:true , Public:false}, "ConfigurationManagerHelperTypeString", "System.Configuration.Internal.ConfigurationManagerHelper, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Field({Static:true , Public:false}, "s_instance", $asm03.TypeRef("System.Configuration.Internal.IConfigurationManagerHelper")); 
    $.Property({Static:true , Public:false}, "Instance", $asm03.TypeRef("System.Configuration.Internal.IConfigurationManagerHelper"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigurationPermissionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Security.Permissions.CodeAccessSecurityAttribute"), "System.Configuration.ConfigurationPermissionAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Security.Permissions.SecurityAction")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreatePermission", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.IPermission"), [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

(function ConfigurationPermission$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Security.CodeAccessPermission"), "System.Configuration.ConfigurationPermission", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Security.Permissions.PermissionState")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Copy", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.IPermission"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXml", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Security.SecurityElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Intersect", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.IPermission"), [$asm01.TypeRef("System.Security.IPermission")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Security.IPermission")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsUnrestricted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.SecurityElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Union", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.IPermission"), [$asm01.TypeRef("System.Security.IPermission")], [])
    );

    $.Field({Static:false, Public:false}, "_permissionState", $asm01.TypeRef("System.Security.Permissions.PermissionState")); 
    $.ImplementInterfaces(
      /* 3 */ $asm01.TypeRef("System.Security.Permissions.IUnrestrictedPermission")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigurationProperty$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationProperty", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Type"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Type"), 
          $.Object, $asm03.TypeRef("System.Configuration.ConfigurationPropertyOptions")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Type"), 
          $.Object, $asm02.TypeRef("System.ComponentModel.TypeConverter"), 
          $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), $asm03.TypeRef("System.Configuration.ConfigurationPropertyOptions")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Type"), 
          $.Object, $asm02.TypeRef("System.ComponentModel.TypeConverter"), 
          $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), $asm03.TypeRef("System.Configuration.ConfigurationPropertyOptions"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.PropertyInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructorInit", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Type"), 
          $asm03.TypeRef("System.Configuration.ConfigurationPropertyOptions"), $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), 
          $asm02.TypeRef("System.ComponentModel.TypeConverter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertFromString", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToString", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateConverter", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AddElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ClearElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Converter", 
      new JSIL.MethodSignature($asm02.TypeRef("System.ComponentModel.TypeConverter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDefaultCollection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsKey", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsRequired", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProvidedName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RemoveElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Validator", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitDefaultValueFromTypeInfo", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), $asm02.TypeRef("System.ComponentModel.DefaultValueAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDefaultValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidatePropertyName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "NonEmptyStringValidator", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultValidatorInstance", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultCollectionPropertyName", $.String, ""); 
    $.Field({Static:false, Public:false}, "_name", $.String); 
    $.Field({Static:false, Public:false}, "_providedName", $.String); 
    $.Field({Static:false, Public:false}, "_description", $.String); 
    $.Field({Static:false, Public:false}, "_type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "_defaultValue", $.Object); 
    $.Field({Static:false, Public:false}, "_converter", $asm02.TypeRef("System.ComponentModel.TypeConverter")); 
    $.Field({Static:false, Public:false}, "_options", $asm03.TypeRef("System.Configuration.ConfigurationPropertyOptions")); 
    $.Field({Static:false, Public:false}, "_validator", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase")); 
    $.Field({Static:false, Public:false}, "_addElementName", $.String); 
    $.Field({Static:false, Public:false}, "_removeElementName", $.String); 
    $.Field({Static:false, Public:false}, "_clearElementName", $.String); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:false}, "ProvidedName", $.String);

    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "DefaultValue", $.Object);

    $.Property({Static:false, Public:true }, "IsRequired", $.Boolean);

    $.Property({Static:false, Public:true }, "IsKey", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDefaultCollection", $.Boolean);

    $.Property({Static:false, Public:true }, "Converter", $asm02.TypeRef("System.ComponentModel.TypeConverter"));

    $.Property({Static:false, Public:true }, "Validator", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Property({Static:false, Public:false}, "AddElementName", $.String);

    $.Property({Static:false, Public:false}, "RemoveElementName", $.String);

    $.Property({Static:false, Public:false}, "ClearElementName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigurationPropertyAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Configuration.ConfigurationPropertyAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDefaultCollection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsKey", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsRequired", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyOptions"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsDefaultCollection", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsKey", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsRequired", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Options", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationPropertyOptions")], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "DefaultCollectionPropertyName", $.String, ""); 
    $.Field({Static:false, Public:false}, "_Name", $.String); 
    $.Field({Static:false, Public:false}, "_DefaultValue", $.Object); 
    $.Field({Static:false, Public:false}, "_Flags", $asm03.TypeRef("System.Configuration.ConfigurationPropertyOptions")); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "DefaultValue", $.Object);

    $.Property({Static:false, Public:true }, "Options", $asm03.TypeRef("System.Configuration.ConfigurationPropertyOptions"));

    $.Property({Static:false, Public:true }, "IsDefaultCollection", $.Boolean);

    $.Property({Static:false, Public:true }, "IsRequired", $.Boolean);

    $.Property({Static:false, Public:true }, "IsKey", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Property]; });

})();

(function ConfigurationPropertyCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationPropertyCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationProperty")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Configuration.ConfigurationProperty")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultCollectionProperty", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationProperty"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationProperty"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Array"), $.Int32], [])
    )
      .Overrides(0, "CopyTo");

    $.Field({Static:false, Public:false}, "_items", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:false}, "DefaultCollectionProperty", $asm03.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Configuration.ConfigurationProperty"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

JSIL.MakeEnum(
  "System.Configuration.ConfigurationPropertyOptions", true, {
    None: 0, 
    IsDefaultCollection: 1, 
    IsRequired: 2, 
    IsKey: 4
  }, true
);

JSIL.MakeEnum(
  "System.Configuration.ConfigurationSaveMode", true, {
    Modified: 0, 
    Minimal: 1, 
    Full: 2
  }, false
);

(function ConfigurationSchemaErrors$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationSchemaErrors", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddError", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Configuration.ConfigurationException"), $asm03.TypeRef("System.Configuration.ExceptionAction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSavedLocalErrors", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GlobalErrorCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasAllErrors", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasGlobalErrors", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasLocalErrors", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasErrors", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetLocalErrors", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RetrieveAndResetLocalErrors", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")]), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSingleGlobalError", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Configuration.ConfigurationException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfErrors", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "_errorsLocal", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])); 
    $.Field({Static:false, Public:false}, "_errorsGlobal", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])); 
    $.Field({Static:false, Public:false}, "_errorsAll", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])); 
    $.Property({Static:false, Public:false}, "HasLocalErrors", $.Boolean);

    $.Property({Static:false, Public:false}, "HasGlobalErrors", $.Boolean);

    $.Property({Static:false, Public:false}, "HasAllErrors", $.Boolean);

    $.Property({Static:false, Public:false}, "GlobalErrorCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigurationSectionCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.Collections.Specialized.NameObjectCollectionBase"), "System.Configuration.ConfigurationSectionCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.MgmtConfigurationRecord"), $asm03.TypeRef("System.Configuration.ConfigurationSectionGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Configuration.ConfigurationSection")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Configuration.ConfigurationSection")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DetachFromConfigurationRecord", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Get", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSection"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Get", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSection"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSection"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSection"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Specialized.NameObjectCollectionBase/KeysCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetKey", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyIsAttachedToConfigRecord", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "_configRecord", $asm03.TypeRef("System.Configuration.MgmtConfigurationRecord")); 
    $.Field({Static:false, Public:false}, "_configSectionGroup", $asm03.TypeRef("System.Configuration.ConfigurationSectionGroup")); 
    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Configuration.ConfigurationSection"));

    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Configuration.ConfigurationSection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm02.TypeRef("System.Collections.Specialized.NameObjectCollectionBase/KeysCollection"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationSectionCollection/<GetEnumerator>d__0", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.Object); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm03.TypeRef("System.Configuration.ConfigurationSectionCollection")); 
    $.Field({Static:false, Public:true }, "c", $.Int32); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function ConfigurationSectionGroup$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationSectionGroup", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AttachToConfigurationRecord", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.MgmtConfigurationRecord"), $asm03.TypeRef("System.Configuration.FactoryRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DetachFromConfigurationRecord", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindParentFactoryRecord", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.FactoryRecord"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ForceDeclaration", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ForceDeclaration", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Attached", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDeclarationRequired", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDeclared", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRoot", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SectionGroupName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SectionGroups", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSectionGroupCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sections", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSectionCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RootAttachToConfigurationRecord", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.MgmtConfigurationRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyIsAttachedToConfigRecord", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "_configKey", $.String); 
    $.Field({Static:false, Public:false}, "_group", $.String); 
    $.Field({Static:false, Public:false}, "_name", $.String); 
    $.Field({Static:false, Public:false}, "_configSections", $asm03.TypeRef("System.Configuration.ConfigurationSectionCollection")); 
    $.Field({Static:false, Public:false}, "_configSectionGroups", $asm03.TypeRef("System.Configuration.ConfigurationSectionGroupCollection")); 
    $.Field({Static:false, Public:false}, "_configRecord", $asm03.TypeRef("System.Configuration.MgmtConfigurationRecord")); 
    $.Field({Static:false, Public:false}, "_typeName", $.String); 
    $.Field({Static:false, Public:false}, "_declared", $.Boolean); 
    $.Field({Static:false, Public:false}, "_declarationRequired", $.Boolean); 
    $.Field({Static:false, Public:false}, "_isRoot", $.Boolean); 
    $.Property({Static:false, Public:false}, "Attached", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDeclared", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDeclarationRequired", $.Boolean);

    $.Property({Static:false, Public:true }, "SectionGroupName", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Type", $.String);

    $.Property({Static:false, Public:true }, "Sections", $asm03.TypeRef("System.Configuration.ConfigurationSectionCollection"));

    $.Property({Static:false, Public:true }, "SectionGroups", $asm03.TypeRef("System.Configuration.ConfigurationSectionGroupCollection"));

    $.Property({Static:false, Public:false}, "IsRoot", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigurationSectionGroupCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.Collections.Specialized.NameObjectCollectionBase"), "System.Configuration.ConfigurationSectionGroupCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.MgmtConfigurationRecord"), $asm03.TypeRef("System.Configuration.ConfigurationSectionGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Configuration.ConfigurationSectionGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Configuration.ConfigurationSectionGroup")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DetachFromConfigurationRecord", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Get", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSectionGroup"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Get", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSectionGroup"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSectionGroup"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSectionGroup"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Specialized.NameObjectCollectionBase/KeysCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetKey", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyIsAttachedToConfigRecord", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "_configRecord", $asm03.TypeRef("System.Configuration.MgmtConfigurationRecord")); 
    $.Field({Static:false, Public:false}, "_configSectionGroup", $asm03.TypeRef("System.Configuration.ConfigurationSectionGroup")); 
    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Configuration.ConfigurationSectionGroup"));

    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Configuration.ConfigurationSectionGroup"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm02.TypeRef("System.Collections.Specialized.NameObjectCollectionBase/KeysCollection"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationSectionGroupCollection/<GetEnumerator>d__0", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.Object); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm03.TypeRef("System.Configuration.ConfigurationSectionGroupCollection")); 
    $.Field({Static:false, Public:true }, "c", $.Int32); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.MakeEnum(
  "System.Configuration.ConfigurationUserLevel", true, {
    None: 0, 
    PerUserRoaming: 10, 
    PerUserRoamingAndLocal: 20
  }, false
);

(function ConfigurationValue$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationValue", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm03.TypeRef("System.Configuration.ConfigurationValueFlags"), 
          $asm03.TypeRef("System.Configuration.PropertySourceInfo")
        ], [])
    );

    $.Field({Static:false, Public:false}, "ValueFlags", $asm03.TypeRef("System.Configuration.ConfigurationValueFlags")); 
    $.Field({Static:false, Public:false}, "Value", $.Object); 
    $.Field({Static:false, Public:false}, "SourceInfo", $asm03.TypeRef("System.Configuration.PropertySourceInfo")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Configuration.ConfigurationValueFlags", false, {
    Default: 0, 
    Inherited: 1, 
    Modified: 2, 
    Locked: 4, 
    XMLParentInherited: 8
  }, true
);

(function ConfigurationValues$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.Collections.Specialized.NameObjectCollectionBase"), "System.Configuration.ConfigurationValues", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssociateContext", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.BaseConfigurationRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeSourceInfo", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Configuration.PropertySourceInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateConfigValue", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValue"), [
          $.Object, $asm03.TypeRef("System.Configuration.ConfigurationValueFlags"), 
          $asm03.TypeRef("System.Configuration.PropertySourceInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigurationElements", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerable"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EmptyCollectionInstance", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InvalidValues", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SyncRoot", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConfigValue", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValue"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConfigValue", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValue"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKey", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSourceInfo", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.PropertySourceInfo"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsInherited", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsModified", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RetrieveFlags", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValueFlags"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $asm03.TypeRef("System.Configuration.ConfigurationValueFlags"), $asm03.TypeRef("System.Configuration.PropertySourceInfo")
        ], [])
    );

    $.Field({Static:false, Public:false}, "_configRecord", $asm03.TypeRef("System.Configuration.BaseConfigurationRecord")); 
    $.Field({Static:false, Public:false}, "_containsElement", $.Boolean); 
    $.Field({Static:false, Public:false}, "_containsInvalidValue", $.Boolean); 
    $.Field({Static:true , Public:false}, "s_emptyCollection", $asm01.TypeRef("System.Collections.IEnumerable")); 
    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false}, "SyncRoot", $.Object);

    $.Property({Static:false, Public:false}, "ConfigurationElements", $asm01.TypeRef("System.Collections.IEnumerable"));

    $.Property({Static:false, Public:false}, "InvalidValues", $asm01.TypeRef("System.Collections.IEnumerable"));

    $.Property({Static:true , Public:false}, "EmptyCollectionInstance", $asm01.TypeRef("System.Collections.IEnumerable"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function EmptyCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationValues/EmptyCollection", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(0, "GetEnumerator");

    $.Field({Static:false, Public:false}, "_emptyEnumerator", $asm01.TypeRef("System.Collections.IEnumerator")); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EmptyCollectionEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationValues/EmptyCollection/EmptyCollectionEnumerator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(0, "Reset");

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigurationElementsCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationValues/ConfigurationElementsCollection", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationValues")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(0, "GetEnumerator");

    $.Field({Static:false, Public:false}, "_values", $asm03.TypeRef("System.Configuration.ConfigurationValues")); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("$lSystem");
JSIL.DeclareNamespace("$lSystem.Collections");
JSIL.DeclareNamespace("$lSystem.Collections.IEnumerable");
(function GetEnumerator$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationValues/ConfigurationElementsCollection/GetEnumerator>d__0", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.Object); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm03.TypeRef("System.Configuration.ConfigurationValues/ConfigurationElementsCollection")); 
    $.Field({Static:false, Public:true }, "index", $.Int32); 
    $.Field({Static:false, Public:true }, "value", $.Object); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function InvalidValuesCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationValues/InvalidValuesCollection", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationValues")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(0, "GetEnumerator");

    $.Field({Static:false, Public:false}, "_values", $asm03.TypeRef("System.Configuration.ConfigurationValues")); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function GetEnumerator$gd__4$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ConfigurationValues/InvalidValuesCollection/GetEnumerator>d__4", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.Object); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm03.TypeRef("System.Configuration.ConfigurationValues/InvalidValuesCollection")); 
    $.Field({Static:false, Public:true }, "index", $.Int32); 
    $.Field({Static:false, Public:true }, "value", $.Object); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.MakeInterface(
  "System.Configuration.Internal.IConfigErrorInfo", true, [], function ($) {
    $.Method({}, "get_Filename", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "get_LineNumber", new JSIL.MethodSignature($.Int32, [], []));
    $.Property({}, "Filename");
    $.Property({}, "LineNumber");
  }, []);

(function ConfigXmlAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlAttribute"), "System.Configuration.ConfigXmlAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(3, "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(3, "get_LineNumber");

    $.Field({Static:false, Public:false}, "_line", $.Int32); 
    $.Field({Static:false, Public:false}, "_filename", $.String); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigXmlCDataSection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlCDataSection"), "System.Configuration.ConfigXmlCDataSection", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(3, "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(3, "get_LineNumber");

    $.Field({Static:false, Public:false}, "_line", $.Int32); 
    $.Field({Static:false, Public:false}, "_filename", $.String); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigXmlComment$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlComment"), "System.Configuration.ConfigXmlComment", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(3, "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(3, "get_LineNumber");

    $.Field({Static:false, Public:false}, "_line", $.Int32); 
    $.Field({Static:false, Public:false}, "_filename", $.String); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigXmlElement$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlElement"), "System.Configuration.ConfigXmlElement", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(3, "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(3, "get_LineNumber");

    $.Field({Static:false, Public:false}, "_line", $.Int32); 
    $.Field({Static:false, Public:false}, "_filename", $.String); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigXmlReader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlTextReader"), "System.Configuration.ConfigXmlReader", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RawXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(3, "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(3, "get_LineNumber");

    $.Field({Static:false, Public:false}, "_rawXml", $.String); 
    $.Field({Static:false, Public:false}, "_lineOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "_filename", $.String); 
    $.Field({Static:false, Public:false}, "_lineNumberIsConstant", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.Property({Static:false, Public:false}, "RawXml", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigXmlSignificantWhitespace$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlSignificantWhitespace"), "System.Configuration.ConfigXmlSignificantWhitespace", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(3, "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(3, "get_LineNumber");

    $.Field({Static:false, Public:false}, "_line", $.Int32); 
    $.Field({Static:false, Public:false}, "_filename", $.String); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigXmlText$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlText"), "System.Configuration.ConfigXmlText", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(3, "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(3, "get_LineNumber");

    $.Field({Static:false, Public:false}, "_line", $.Int32); 
    $.Field({Static:false, Public:false}, "_filename", $.String); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConfigXmlWhitespace$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlWhitespace"), "System.Configuration.ConfigXmlWhitespace", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(3, "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(3, "get_LineNumber");

    $.Field({Static:false, Public:false}, "_line", $.Int32); 
    $.Field({Static:false, Public:false}, "_filename", $.String); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConnectionStringSettings$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationElement"), "System.Configuration.ConnectionStringSettings", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectionString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConnectionString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProviderName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "_properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_propName", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_propConnectionString", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_propProviderName", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Property({Static:false, Public:false}, "Key", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "ConnectionString", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["connectionString"]; });

    $.Property({Static:false, Public:true }, "ProviderName", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["providerName"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConnectionStringSettingsCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationElementCollection"), "System.Configuration.ConnectionStringSettingsCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConnectionStringSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BaseAdd", 
      new JSIL.MethodSignature(null, [$.Int32, $asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConnectionStringSettings"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConnectionStringSettings"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("System.Configuration.ConnectionStringSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConnectionStringSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm03.TypeRef("System.Configuration.ConnectionStringSettings")], [])
    );

    $.Field({Static:true , Public:false}, "_properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Configuration.ConnectionStringSettings"));

    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Configuration.ConnectionStringSettings"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm03.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm03.System.Configuration.ConnectionStringSettings.__Type__]; });

})();

(function ConnectionStringsSection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationSection"), "System.Configuration.ConnectionStringsSection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConnectionStrings", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConnectionStringSettingsCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetRuntimeObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.Field({Static:true , Public:false}, "_properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_propConnectionStrings", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "ConnectionStrings", $asm03.TypeRef("System.Configuration.ConnectionStringSettingsCollection"))
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ContextInformation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ContextInformation", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.BaseConfigurationRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostingContext", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsMachineLevel", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSection", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "_hostingContextEvaluated", $.Boolean); 
    $.Field({Static:false, Public:false}, "_hostingContext", $.Object); 
    $.Field({Static:false, Public:false}, "_configRecord", $asm03.TypeRef("System.Configuration.BaseConfigurationRecord")); 
    $.Property({Static:false, Public:true }, "HostingContext", $.Object);

    $.Property({Static:false, Public:true }, "IsMachineLevel", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CRYPTPROTECT_PROMPTSTRUCT$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Configuration.CRYPTPROTECT_PROMPTSTRUCT", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(0, "Dispose");

    $.Field({Static:false, Public:true }, "cbSize", $.Int32); 
    $.Field({Static:false, Public:true }, "dwPromptFlags", $.Int32); 
    $.Field({Static:false, Public:true }, "hwndApp", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "szPrompt", $.String); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DATA_BLOB$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Configuration.DATA_BLOB", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(0, "Dispose");

    $.Field({Static:false, Public:true }, "cbData", $.Int32); 
    $.Field({Static:false, Public:true }, "pbData", $asm01.TypeRef("System.IntPtr")); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Debug$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Configuration.Debug", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "AlwaysValidate", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Assert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Assert", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Break", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "CheckValid", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Dump", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Fail", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "IsTagEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTagPresent", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm01.TypeRef("System.Exception")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm01.TypeRef("System.Exception"), $.Boolean
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Validate", 
      new JSIL.MethodSignature(null, [$.Object], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.ExternalMethod({Static:true , Public:false}, "Validate", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DBG"]; });

    $.Constant({Static:true , Public:false}, "TAG_INTERNAL", "Internal"); 
    $.Constant({Static:true , Public:false}, "TAG_EXTERNAL", "External"); 
    $.Constant({Static:true , Public:false}, "TAG_ALL", "*"); 
    $.Constant({Static:true , Public:false}, "DATE_FORMAT", "yyyy/MM/dd HH:mm:ss.ffff"); 
    $.Constant({Static:true , Public:false}, "TIME_FORMAT", "HH:mm:ss:ffff"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Update$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.Update", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigKey", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Moved", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Retrieved", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UpdatedXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Retrieved", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "_moved", $.Boolean); 
    $.Field({Static:false, Public:false}, "_retrieved", $.Boolean); 
    $.Field({Static:false, Public:false}, "_configKey", $.String); 
    $.Field({Static:false, Public:false}, "_updatedXml", $.String); 
    $.Property({Static:false, Public:false}, "ConfigKey", $.String);

    $.Property({Static:false, Public:false}, "Moved", $.Boolean);

    $.Property({Static:false, Public:false}, "UpdatedXml", $.String);

    $.Property({Static:false, Public:false}, "Retrieved", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DeclarationUpdate$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.Update"), "System.Configuration.DeclarationUpdate", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.String
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DefaultSection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationSection"), "System.Configuration.DefaultSection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeserializeSection", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureStaticPropertyBag", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResetModified", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeSection", 
      new JSIL.MethodSignature($.String, [
          $asm03.TypeRef("System.Configuration.ConfigurationElement"), $.String, 
          $asm03.TypeRef("System.Configuration.ConfigurationSaveMode")
        ], [])
    );

    $.Field({Static:true , Public:false}, "s_properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Field({Static:false, Public:false}, "_rawXml", $.String); 
    $.Field({Static:false, Public:false}, "_isModified", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DefaultValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), "System.Configuration.DefaultValidator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DefinitionUpdate$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.Update"), "System.Configuration.DefinitionUpdate", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.String, $asm03.TypeRef("System.Configuration.SectionRecord")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SectionRecord", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.SectionRecord"), [], [])
    );

    $.Field({Static:false, Public:false}, "_sectionRecord", $asm03.TypeRef("System.Configuration.SectionRecord")); 
    $.Property({Static:false, Public:false}, "SectionRecord", $asm03.TypeRef("System.Configuration.SectionRecord"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Configuration.Provider");
(function ProviderBase$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.Provider.ProviderBase", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Collections.Specialized.NameValueCollection")], [])
    );

    $.Field({Static:false, Public:false}, "_name", $.String); 
    $.Field({Static:false, Public:false}, "_Description", $.String); 
    $.Field({Static:false, Public:false}, "_Initialized", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ProtectedConfigurationProvider$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.Provider.ProviderBase"), "System.Configuration.ProtectedConfigurationProvider", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Decrypt", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Encrypt", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DpapiProtectedConfigurationProvider$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), "System.Configuration.DpapiProtectedConfigurationProvider", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Decrypt", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecryptText", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Encrypt", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EncryptText", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseMachineProtection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBooleanValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Collections.Specialized.NameValueCollection"), $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Collections.Specialized.NameValueCollection")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrepareDataBlob", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.DATA_BLOB"), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrepareDataBlob", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.DATA_BLOB"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PreparePromptStructure", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.CRYPTPROTECT_PROMPTSTRUCT"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraverseToChild", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [
          $asm05.TypeRef("System.Xml.XmlNode"), $.String, 
          $.Boolean
        ], [])
    );

    $.Constant({Static:true , Public:false}, "CRYPTPROTECT_UI_FORBIDDEN", 1); 
    $.Constant({Static:true , Public:false}, "CRYPTPROTECT_LOCAL_MACHINE", 4); 
    $.Field({Static:false, Public:false}, "_UseMachineProtection", $.Boolean); 
    $.Field({Static:false, Public:false}, "_KeyEntropy", $.String); 
    $.Property({Static:false, Public:true }, "UseMachineProtection", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ElementInformation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ElementInformation", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeSourceAndLineNumber", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.PropertySourceInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Errors", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ICollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsCollection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLocked", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPresent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.PropertyInformationCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Validator", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReadOnlyErrorsList", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Configuration.ConfigurationException")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PropertyInfoInternal", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.PropertySourceInfo"), [], [])
    );

    $.Field({Static:false, Public:false}, "_thisElement", $asm03.TypeRef("System.Configuration.ConfigurationElement")); 
    $.Field({Static:false, Public:false}, "_internalProperties", $asm03.TypeRef("System.Configuration.PropertyInformationCollection")); 
    $.Field({Static:false, Public:false}, "_errors", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.Configuration.ConfigurationException")])); 
    $.Property({Static:false, Public:true }, "Properties", $asm03.TypeRef("System.Configuration.PropertyInformationCollection"));

    $.Property({Static:false, Public:true }, "IsPresent", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLocked", $.Boolean);

    $.Property({Static:false, Public:true }, "IsCollection", $.Boolean);

    $.Property({Static:false, Public:true }, "Source", $.String);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Validator", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Property({Static:false, Public:true }, "Errors", $asm01.TypeRef("System.Collections.ICollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EmptyImpersonationContext$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.EmptyImpersonationContext", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStaticInstance", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IDisposable"), [], [])
    );

    $.Field({Static:true , Public:false}, "s_emptyImpersonationContext", $asm01.TypeRef("System.IDisposable")); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ErrorInfoXmlDocument$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlDocument"), "System.Configuration.ErrorInfoXmlDocument", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCDataSection", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlCDataSection"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateComment", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlComment"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlElement"), [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSectionXmlNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm03.TypeRef("System.Configuration.ConfigXmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSignificantWhitespace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSignificantWhitespace"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateTextNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlText"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateWhitespace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWhitespace"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadFromConfigXmlReader", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigXmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_Filename", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(3, "get_Filename");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(3, "get_LineNumber");

    $.Field({Static:false, Public:false}, "_reader", $asm05.TypeRef("System.Xml.XmlTextReader")); 
    $.Field({Static:false, Public:false}, "_lineOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "_filename", $.String); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigErrorInfo.Filename", $.String);

    $.ImplementInterfaces(
      /* 3 */ $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ErrorsHelper$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Configuration.ErrorsHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "AddError", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])]), $asm02.TypeRef("System.Configuration.ConfigurationException")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddErrors", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])]), $asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetErrorCount", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetErrorsException", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationErrorsException"), [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHasErrors", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowOnErrors", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Configuration.ExceptionAction", false, {
    NonSpecific: 0, 
    Local: 1, 
    Global: 2
  }, false
);

(function ExceptionUtil$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Configuration.ExceptionUtil", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "get_NoExceptionInformation", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterInvalid", 
      new JSIL.MethodSignature($asm01.TypeRef("System.ArgumentException"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterNullOrEmpty", 
      new JSIL.MethodSignature($asm01.TypeRef("System.ArgumentException"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyInvalid", 
      new JSIL.MethodSignature($asm01.TypeRef("System.ArgumentException"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyNullOrEmpty", 
      new JSIL.MethodSignature($asm01.TypeRef("System.ArgumentException"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedError", 
      new JSIL.MethodSignature($asm01.TypeRef("System.InvalidOperationException"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapAsConfigException", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationErrorsException"), [
          $.String, $asm01.TypeRef("System.Exception"), 
          $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapAsConfigException", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationErrorsException"), [
          $.String, $asm01.TypeRef("System.Exception"), 
          $.String, $.Int32
        ], [])
    );

    $.Property({Static:true , Public:false}, "NoExceptionInformation", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ExeConfigurationFileMap$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationFileMap"), "System.Configuration.ExeConfigurationFileMap", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExeConfigFilename", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalUserConfigFilename", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RoamingUserConfigFilename", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExeConfigFilename", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LocalUserConfigFilename", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RoamingUserConfigFilename", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "_exeConfigFilename", $.String); 
    $.Field({Static:false, Public:false}, "_roamingUserConfigFilename", $.String); 
    $.Field({Static:false, Public:false}, "_localUserConfigFilename", $.String); 
    $.Property({Static:false, Public:true }, "ExeConfigFilename", $.String);

    $.Property({Static:false, Public:true }, "RoamingUserConfigFilename", $.String);

    $.Property({Static:false, Public:true }, "LocalUserConfigFilename", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ExeContext$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.ExeContext", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationUserLevel"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExePath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UserLevel", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationUserLevel"), [], [])
    );

    $.Field({Static:false, Public:false}, "_userContext", $asm03.TypeRef("System.Configuration.ConfigurationUserLevel")); 
    $.Field({Static:false, Public:false}, "_exePath", $.String); 
    $.Property({Static:false, Public:true }, "UserLevel", $asm03.TypeRef("System.Configuration.ConfigurationUserLevel"));

    $.Property({Static:false, Public:true }, "ExePath", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function FactoryId$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.FactoryId", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigKey", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Group", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "_configKey", $.String); 
    $.Field({Static:false, Public:false}, "_group", $.String); 
    $.Field({Static:false, Public:false}, "_name", $.String); 
    $.Property({Static:false, Public:false}, "ConfigKey", $.String);

    $.Property({Static:false, Public:false}, "Group", $.String);

    $.Property({Static:false, Public:false}, "Name", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["FactoryId {ConfigKey}"]; });

})();

(function FactoryRecord$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.FactoryRecord", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Object, 
          $.String, $asm03.TypeRef("System.Configuration.SimpleBitVector32"), 
          $asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"), $asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), 
          $asm03.TypeRef("System.Configuration.OverrideModeSetting"), $.String, 
          $.Int32, $asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), $asm03.TypeRef("System.Configuration.OverrideModeSetting"), 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean, 
          $.String, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddErrors", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneSection", 
      new JSIL.MethodSignature($.Type, [$.String, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloneSectionGroup", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowDefinition", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowExeDefinition", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowLocation", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigKey", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Errors", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Factory", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FactoryTypeName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Filename", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Group", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasErrors", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasFile", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFactoryTrustedWithoutAptca", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFromTrustedConfigRecord", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsGroup", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUndeclared", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OverrideModeDefault", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.OverrideModeSetting"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequirePermission", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RestartOnExternalChanges", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEquivalentSectionFactory", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost"), $.String, 
          $.Boolean, $asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEquivalentSectionGroupFactory", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEquivalentType", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsIgnorable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AllowDefinition", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AllowExeDefinition", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AllowLocation", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Factory", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FactoryTypeName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Filename", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsFactoryTrustedWithoutAptca", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsFromTrustedConfigRecord", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsGroup", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsUndeclared", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LineNumber", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RequirePermission", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RestartOnExternalChanges", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowOnErrors", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "Flag_AllowLocation", 1); 
    $.Constant({Static:true , Public:false}, "Flag_RestartOnExternalChanges", 2); 
    $.Constant({Static:true , Public:false}, "Flag_RequirePermission", 4); 
    $.Constant({Static:true , Public:false}, "Flag_IsGroup", 8); 
    $.Constant({Static:true , Public:false}, "Flag_IsFromTrustedConfigRecord", 16); 
    $.Constant({Static:true , Public:false}, "Flag_IsFactoryTrustedWithoutAptca", 32); 
    $.Constant({Static:true , Public:false}, "Flag_IsUndeclared", 64); 
    $.Field({Static:false, Public:false}, "_configKey", $.String); 
    $.Field({Static:false, Public:false}, "_group", $.String); 
    $.Field({Static:false, Public:false}, "_name", $.String); 
    $.Field({Static:false, Public:false}, "_flags", $asm03.TypeRef("System.Configuration.SimpleBitVector32")); 
    $.Field({Static:false, Public:false}, "_factoryTypeName", $.String); 
    $.Field({Static:false, Public:false}, "_allowDefinition", $asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition")); 
    $.Field({Static:false, Public:false}, "_allowExeDefinition", $asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition")); 
    $.Field({Static:false, Public:false}, "_overrideModeDefault", $asm03.TypeRef("System.Configuration.OverrideModeSetting")); 
    $.Field({Static:false, Public:false}, "_filename", $.String); 
    $.Field({Static:false, Public:false}, "_lineNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "_factory", $.Object); 
    $.Field({Static:false, Public:false}, "_errors", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])); 
    $.Property({Static:false, Public:false}, "ConfigKey", $.String);

    $.Property({Static:false, Public:false}, "Group", $.String);

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Factory", $.Object);

    $.Property({Static:false, Public:false}, "FactoryTypeName", $.String);

    $.Property({Static:false, Public:false}, "AllowDefinition", $asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"));

    $.Property({Static:false, Public:false}, "AllowExeDefinition", $asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"));

    $.Property({Static:false, Public:false}, "OverrideModeDefault", $asm03.TypeRef("System.Configuration.OverrideModeSetting"));

    $.Property({Static:false, Public:false}, "AllowLocation", $.Boolean);

    $.Property({Static:false, Public:false}, "RestartOnExternalChanges", $.Boolean);

    $.Property({Static:false, Public:false}, "RequirePermission", $.Boolean);

    $.Property({Static:false, Public:false}, "IsGroup", $.Boolean);

    $.Property({Static:false, Public:false}, "IsFromTrustedConfigRecord", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUndeclared", $.Boolean);

    $.Property({Static:false, Public:false}, "IsFactoryTrustedWithoutAptca", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Filename", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "HasFile", $.Boolean);

    $.Property({Static:false, Public:false}, "Errors", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")]));

    $.Property({Static:false, Public:false}, "HasErrors", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["FactoryRecord {ConfigKey}"]; });

})();

(function FileUtil$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Configuration.FileUtil", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "FileExists", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean], [])
    );

    $.Constant({Static:true , Public:false}, "HRESULT_WIN32_FILE_NOT_FOUND", -2147024894); 
    $.Constant({Static:true , Public:false}, "HRESULT_WIN32_PATH_NOT_FOUND", -2147024893); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function GenericEnumConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationConverterBase"), "System.Configuration.GenericEnumConverter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm01.TypeRef("System.Type")
        ], [])
    );

    $.Field({Static:false, Public:false}, "_enumType", $asm01.TypeRef("System.Type")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function IgnoreSection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationSection"), "System.Configuration.IgnoreSection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeserializeSection", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureStaticPropertyBag", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResetModified", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeSection", 
      new JSIL.MethodSignature($.String, [
          $asm03.TypeRef("System.Configuration.ConfigurationElement"), $.String, 
          $asm03.TypeRef("System.Configuration.ConfigurationSaveMode")
        ], [])
    );

    $.Field({Static:true , Public:false}, "s_properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Field({Static:false, Public:false}, "_rawXml", $.String); 
    $.Field({Static:false, Public:false}, "_isModified", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function InfiniteIntConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationConverterBase"), "System.Configuration.InfiniteIntConverter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm01.TypeRef("System.Type")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function InfiniteTimeSpanConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationConverterBase"), "System.Configuration.InfiniteTimeSpanConverter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm01.TypeRef("System.Type")
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_TimeSpanConverter", $asm02.TypeRef("System.ComponentModel.TypeConverter")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function IntegerValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), "System.Configuration.IntegerValidator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Boolean, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Field({Static:false, Public:false}, "_flags", $asm03.TypeRef("System.Configuration.IntegerValidator/ValidationFlags")); 
    $.Field({Static:false, Public:false}, "_minValue", $.Int32); 
    $.Field({Static:false, Public:false}, "_maxValue", $.Int32); 
    $.Field({Static:false, Public:false}, "_resolution", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Configuration.IntegerValidator/ValidationFlags", false, {
    None: 0, 
    ExclusiveRange: 1
  }, false
);

(function IntegerValidatorAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorAttribute"), "System.Configuration.IntegerValidatorAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExcludeRange", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxValue", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinValue", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidatorInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExcludeRange", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxValue", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinValue", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "_min", $.Int32); 
    $.Field({Static:false, Public:false}, "_max", $.Int32); 
    $.Field({Static:false, Public:false}, "_excludeRange", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "ValidatorInstance", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Property({Static:false, Public:true }, "MinValue", $.Int32);

    $.Property({Static:false, Public:true }, "MaxValue", $.Int32);

    $.Property({Static:false, Public:true }, "ExcludeRange", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Property]; });

})();

(function InvalidPropValue$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.InvalidPropValue", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Configuration.ConfigurationException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Error", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Configuration.ConfigurationException"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "_value", $.String); 
    $.Field({Static:false, Public:false}, "_error", $asm02.TypeRef("System.Configuration.ConfigurationException")); 
    $.Property({Static:false, Public:false}, "Error", $asm02.TypeRef("System.Configuration.ConfigurationException"));

    $.Property({Static:false, Public:false}, "Value", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function KeyValueConfigurationCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationElementCollection"), "System.Configuration.KeyValueConfigurationCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.KeyValueConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllKeys", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.KeyValueConfigurationElement"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ThrowOnDuplicate", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:true , Public:false}, "_properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "ThrowOnDuplicate", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Configuration.KeyValueConfigurationElement"));

    $.Property({Static:false, Public:true }, "AllKeys", $jsilcore.TypeRef("System.Array", [$.String]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm03.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm03.System.Configuration.KeyValueConfigurationElement.__Type__]; })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function KeyValueConfigurationElement$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationElement"), "System.Configuration.KeyValueConfigurationElement", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Init", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:true , Public:false}, "_properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_propKey", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_propValue", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Field({Static:false, Public:false}, "_needsInit", $.Boolean); 
    $.Field({Static:false, Public:false}, "_initKey", $.String); 
    $.Field({Static:false, Public:false}, "_initValue", $.String); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Key", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["key"]; });

    $.Property({Static:false, Public:true }, "Value", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["value"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function KeyValueInternalCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.Collections.Specialized.NameValueCollection"), "System.Configuration.KeyValueInternalCollection", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.AppSettingsSection")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "_root", $asm03.TypeRef("System.Configuration.AppSettingsSection")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function LocationSectionRecord$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.LocationSectionRecord", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.SectionXmlInfo"), $asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddError", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Configuration.ConfigurationException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigKey", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Errors", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorsList", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasErrors", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SectionXmlInfo", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.SectionXmlInfo"), [], [])
    );

    $.Field({Static:false, Public:false}, "_sectionXmlInfo", $asm03.TypeRef("System.Configuration.SectionXmlInfo")); 
    $.Field({Static:false, Public:false}, "_errors", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])); 
    $.Property({Static:false, Public:false}, "ConfigKey", $.String);

    $.Property({Static:false, Public:false}, "SectionXmlInfo", $asm03.TypeRef("System.Configuration.SectionXmlInfo"));

    $.Property({Static:false, Public:false}, "Errors", $asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")]));

    $.Property({Static:false, Public:false}, "ErrorsList", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")]));

    $.Property({Static:false, Public:false}, "HasErrors", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["LocationSectionRecord {ConfigKey}"]; });

})();

(function LocationUpdates$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.LocationUpdates", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.OverrideModeSetting"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteUpdates", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InheritInChildApps", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OverrideMode", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.OverrideModeSetting"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SectionUpdates", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.SectionUpdates"), [], [])
    );

    $.Field({Static:false, Public:false}, "_overrideMode", $asm03.TypeRef("System.Configuration.OverrideModeSetting")); 
    $.Field({Static:false, Public:false}, "_inheritInChildApps", $.Boolean); 
    $.Field({Static:false, Public:false}, "_sectionUpdates", $asm03.TypeRef("System.Configuration.SectionUpdates")); 
    $.Property({Static:false, Public:false}, "OverrideMode", $asm03.TypeRef("System.Configuration.OverrideModeSetting"));

    $.Property({Static:false, Public:false}, "InheritInChildApps", $.Boolean);

    $.Property({Static:false, Public:false}, "SectionUpdates", $asm03.TypeRef("System.Configuration.SectionUpdates"));

    $.Property({Static:false, Public:false}, "IsDefault", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function LongValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), "System.Configuration.LongValidator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int64, $.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int64, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int64, 
          $.Boolean, $.Int64
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Field({Static:false, Public:false}, "_flags", $asm03.TypeRef("System.Configuration.LongValidator/ValidationFlags")); 
    $.Field({Static:false, Public:false}, "_minValue", $.Int64); 
    $.Field({Static:false, Public:false}, "_maxValue", $.Int64); 
    $.Field({Static:false, Public:false}, "_resolution", $.Int64); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Configuration.LongValidator/ValidationFlags", false, {
    None: 0, 
    ExclusiveRange: 1
  }, false
);

(function LongValidatorAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorAttribute"), "System.Configuration.LongValidatorAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExcludeRange", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxValue", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinValue", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidatorInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExcludeRange", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxValue", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinValue", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.Field({Static:false, Public:false}, "_min", $.Int64); 
    $.Field({Static:false, Public:false}, "_max", $.Int64); 
    $.Field({Static:false, Public:false}, "_excludeRange", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "ValidatorInstance", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Property({Static:false, Public:true }, "MinValue", $.Int64);

    $.Property({Static:false, Public:true }, "MaxValue", $.Int64);

    $.Property({Static:false, Public:true }, "ExcludeRange", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Property]; });

})();

(function MgmtConfigurationRecord$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.BaseConfigurationRecord"), "System.Configuration.MgmtConfigurationRecord", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddConfigurationSection", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm03.TypeRef("System.Configuration.ConfigurationSection")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddConfigurationSectionGroup", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm03.TypeRef("System.Configuration.ConfigurationSectionGroup")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddLocation", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendAttribute", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Text.StringBuilder"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AreDeclarationAttributesModified", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.FactoryRecord"), $asm03.TypeRef("System.Configuration.ConfigurationSection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AreLocationAttributesModified", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.SectionRecord"), $asm03.TypeRef("System.Configuration.ConfigurationSection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AreSectionAttributesModified", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.SectionRecord"), $asm03.TypeRef("System.Configuration.ConfigurationSection")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BoolToString", 
      new JSIL.MethodSignature($.String, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeConfigSource", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.SectionInformation"), $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckPreamble", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm03.TypeRef("System.Configuration.XmlUtilWriter"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyConfig", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.SectionUpdates"), $asm03.TypeRef("System.Configuration.ConfigDefinitionUpdates"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.String, 
          $asm03.TypeRef("System.Configuration.NamespaceChange"), $asm03.TypeRef("System.Configuration.XmlUtilWriter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyConfigDeclarationsRecursive", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Configuration.SectionUpdates"), $asm03.TypeRef("System.Configuration.XmlUtil"), 
          $asm03.TypeRef("System.Configuration.XmlUtilWriter"), $.String, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyConfigDefinitionsRecursive", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Configuration.ConfigDefinitionUpdates"), $asm03.TypeRef("System.Configuration.XmlUtil"), 
          $asm03.TypeRef("System.Configuration.XmlUtilWriter"), $.Boolean, 
          $asm03.TypeRef("System.Configuration.LocationUpdates"), $asm03.TypeRef("System.Configuration.SectionUpdates"), 
          $.Boolean, $.String, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyConfigSource", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.XmlUtilWriter"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateNewConfig", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.SectionUpdates"), $asm03.TypeRef("System.Configuration.ConfigDefinitionUpdates"), 
          $asm03.TypeRef("System.Configuration.NamespaceChange"), $asm03.TypeRef("System.Configuration.XmlUtilWriter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateNewConfigSource", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.XmlUtilWriter"), $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSection", 
      new JSIL.MethodSignature($.Object, [
          $.Boolean, $asm03.TypeRef("System.Configuration.FactoryRecord"), 
          $asm03.TypeRef("System.Configuration.SectionRecord"), $.Object, 
          $asm03.TypeRef("System.Configuration.ConfigXmlReader")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSectionFactory", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Configuration.FactoryRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSectionGroupFactory", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.ConstructorInfo"), [$asm03.TypeRef("System.Configuration.FactoryRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureSectionGroupFactory", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.ConstructorInfo"), [$asm03.TypeRef("System.Configuration.FactoryRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExeDefinitionToString", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAndCloneImmediateParentSection", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSection"), [$asm03.TypeRef("System.Configuration.ConfigurationSection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindImmediateParentSection", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSection"), [$asm03.TypeRef("System.Configuration.ConfigurationSection")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ClassFlags", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.SimpleBitVector32"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigurationFilePath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasRemovedSections", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasRemovedSectionsOrGroups", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MgmtParent", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceChangeNeeded", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.NamespaceChange"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespacePresent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RecordItselfRequiresUpdates", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RemovedSectionGroups", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RemovedSections", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SectionFactories", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SectionGroupFactories", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SectionGroups", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UpdateConfigHost", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.UpdateConfigHost"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAllFactories", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConfigDeclarationUpdates", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.SectionUpdates"), [$asm03.TypeRef("System.Configuration.ConfigurationSaveMode"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConfigDefinitionUpdates", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm03.TypeRef("System.Configuration.ConfigurationSaveMode"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Configuration.ConfigDefinitionUpdates")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Collections.ArrayList")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConfigSection", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSection"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDescendentSectionFactories", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDescendentSectionGroupFactories", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLocationCollection", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationLocationCollection"), [$asm03.TypeRef("System.Configuration.Configuration")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRawXml", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetRuntimeObject", 
      new JSIL.MethodSignature($.Object, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSectionGroup", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSectionGroup"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUpdatedSectionDeclarationXml", 
      new JSIL.MethodSignature($.String, [
          $asm03.TypeRef("System.Configuration.FactoryRecord"), $asm03.TypeRef("System.Configuration.ConfigurationSection"), 
          $asm03.TypeRef("System.Configuration.ConfigurationSaveMode")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUpdatedSectionGroupDeclarationXml", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("System.Configuration.FactoryRecord"), $asm03.TypeRef("System.Configuration.ConfigurationSectionGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitStreamInfoUpdates", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsConfigSectionMoved", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.SectionRecord"), $asm03.TypeRef("System.Configuration.ConfigurationSection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStreamUsed", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupSectionGroup", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSectionGroup"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveConfigurationSection", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveConfigurationSectionGroup", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveLocationWriteRequirement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RevertToParent", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationSection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveAs", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Configuration.ConfigurationSaveMode"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveConfigSource", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.DefinitionUpdate")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NamespacePresent", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRawXml", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationSection"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateIndent", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $asm03.TypeRef("System.Configuration.XmlUtil"), 
          $asm03.TypeRef("System.Configuration.XmlUtilWriter"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateRecords", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UseParentResult", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Object, 
          $asm03.TypeRef("System.Configuration.SectionRecord")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateSectionXml", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEmptyElement", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNewConfigDeclarations", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.SectionUpdates"), $asm03.TypeRef("System.Configuration.XmlUtilWriter"), 
          $.Int32, $.Int32, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNewConfigDefinitions", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.ConfigDefinitionUpdates"), $asm03.TypeRef("System.Configuration.XmlUtilWriter"), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNewConfigDefinitionsRecursive", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Configuration.XmlUtilWriter"), $asm03.TypeRef("System.Configuration.SectionUpdates"), 
          $.Int32, $.Int32, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSectionUpdate", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.XmlUtilWriter"), $asm03.TypeRef("System.Configuration.DefinitionUpdate"), 
          $.Int32, $.Int32, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUnwrittenConfigDeclarations", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.SectionUpdates"), $asm03.TypeRef("System.Configuration.XmlUtilWriter"), 
          $.Int32, $.Int32, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUnwrittenConfigDeclarationsRecursive", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.SectionUpdates"), $asm03.TypeRef("System.Configuration.XmlUtilWriter"), 
          $.Int32, $.Int32, 
          $.Boolean
        ], [])
    );

    $.Constant({Static:true , Public:false}, "DEFAULT_INDENT", 4); 
    $.Constant({Static:true , Public:false}, "MAX_INDENT", 10); 
    $.Field({Static:false, Public:false}, "_sectionGroups", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "_sectionFactories", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "_sectionGroupFactories", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "_removedSections", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "_removedSectionGroups", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "_locationTags", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "_streamInfoUpdates", $asm02.TypeRef("System.Collections.Specialized.HybridDictionary")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MgmtClassFlags", $asm03.TypeRef("System.Configuration.SimpleBitVector32")); 
    function MgmtConfigurationRecord__cctor () {
      $thisType.MgmtClassFlags = new $asm03.System.Configuration.SimpleBitVector32();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      MgmtConfigurationRecord__cctor
    );

    $.Property({Static:false, Public:false}, "MgmtParent", $.Type);

    $.Property({Static:false, Public:false}, "UpdateConfigHost", $asm03.TypeRef("System.Configuration.UpdateConfigHost"));

    $.Property({Static:false, Public:false, Virtual:true }, "ClassFlags", $asm03.TypeRef("System.Configuration.SimpleBitVector32"));

    $.Property({Static:false, Public:false}, "SectionGroups", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "RemovedSections", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "RemovedSectionGroups", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "SectionFactories", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "SectionGroupFactories", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "ConfigurationFilePath", $.String);

    $.Property({Static:false, Public:false}, "HasRemovedSectionsOrGroups", $.Boolean);

    $.Property({Static:false, Public:false}, "HasRemovedSections", $.Boolean);

    $.Property({Static:false, Public:false}, "NamespacePresent", $.Boolean);

    $.Property({Static:false, Public:false}, "NamespaceChangeNeeded", $asm03.TypeRef("System.Configuration.NamespaceChange"));

    $.Property({Static:false, Public:false}, "RecordItselfRequiresUpdates", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Configuration.NamespaceChange", false, {
    None: 0, 
    Add: 1, 
    Remove: 2
  }, false
);

(function NameValueConfigurationCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationElementCollection"), "System.Configuration.NameValueConfigurationCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.NameValueConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllKeys", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.NameValueConfigurationElement"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.NameValueConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Configuration.NameValueConfigurationElement")], [])
    );

    $.Field({Static:true , Public:false}, "_properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Configuration.NameValueConfigurationElement"));

    $.Property({Static:false, Public:true }, "AllKeys", $jsilcore.TypeRef("System.Array", [$.String]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm03.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm03.System.Configuration.NameValueConfigurationElement.__Type__]; });

})();

(function NameValueConfigurationElement$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationElement"), "System.Configuration.NameValueConfigurationElement", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:true , Public:false}, "_properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_propName", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_propValue", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "Value", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["value"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Configuration.OverrideMode", true, {
    Inherit: 0, 
    Allow: 1, 
    Deny: 2
  }, false
);

(function OverrideModeSetting$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Configuration.OverrideModeSetting", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "CanUseSameLocationTag", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeModeInternal", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.OverrideMode")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateFromXmlReadValue", 
      new JSIL.MethodSignature($.Type, [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateFromXmlReadValue", 
      new JSIL.MethodSignature($.Type, [$asm03.TypeRef("System.Configuration.OverrideMode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowOverride", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDefaultForLocationTag", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDefaultForSection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLocked", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocationTagXmlString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OverrideMode", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.OverrideMode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OverrideModeXmlValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMatchingApiChangedLocationTag", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseOverrideModeXmlValue", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.OverrideMode"), [$.String, $asm03.TypeRef("System.Configuration.XmlUtil")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AllowOverride", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_OverrideMode", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.OverrideMode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMode", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.OverrideMode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyConsistentChangeModel", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    );

    $.Constant({Static:true , Public:false}, "ApiDefinedLegacy", 16); 
    $.Constant({Static:true , Public:false}, "ApiDefinedNewMode", 32); 
    $.Constant({Static:true , Public:false}, "ApiDefinedAny", 48); 
    $.Constant({Static:true , Public:false}, "XmlDefinedLegacy", 64); 
    $.Constant({Static:true , Public:false}, "XmlDefinedNewMode", 128); 
    $.Constant({Static:true , Public:false}, "XmlDefinedAny", 192); 
    $.Constant({Static:true , Public:false}, "ModeMask", 15); 
    $.Field({Static:false, Public:false}, "_mode", $.Byte); 
    $.Field({Static:true , Public:false}, "SectionDefault", $.Type); 
    $.Field({Static:true , Public:false}, "LocationDefault", $.Type); 
    function OverrideModeSetting__cctor () {
      $thisType.SectionDefault = new $thisType();
      $thisType.LocationDefault = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      OverrideModeSetting__cctor
    );

    $.Property({Static:false, Public:false}, "IsDefaultForSection", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDefaultForLocationTag", $.Boolean);

    $.Property({Static:false, Public:false}, "IsLocked", $.Boolean);

    $.Property({Static:false, Public:false}, "LocationTagXmlString", $.String);

    $.Property({Static:false, Public:false}, "OverrideModeXmlValue", $.String);

    $.Property({Static:false, Public:false}, "OverrideMode", $asm03.TypeRef("System.Configuration.OverrideMode"));

    $.Property({Static:false, Public:false}, "AllowOverride", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PositiveTimeSpanValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), "System.Configuration.PositiveTimeSpanValidator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PositiveTimeSpanValidatorAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorAttribute"), "System.Configuration.PositiveTimeSpanValidatorAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidatorInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ValidatorInstance", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Property]; });

})();

(function PropertyInformation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.PropertyInformation", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationElement"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Converter", 
      new JSIL.MethodSignature($asm02.TypeRef("System.ComponentModel.TypeConverter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsKey", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLocked", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsRequired", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Prop", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationProperty"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProvidedName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Validator", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValueOrigin", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.PropertyValueOrigin"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Constant({Static:true , Public:false}, "LockAll", "*"); 
    $.Field({Static:false, Public:false}, "ThisElement", $asm03.TypeRef("System.Configuration.ConfigurationElement")); 
    $.Field({Static:false, Public:false}, "PropertyName", $.String); 
    $.Field({Static:false, Public:false}, "_Prop", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Property({Static:false, Public:false}, "Prop", $asm03.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:false}, "ProvidedName", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Object);

    $.Property({Static:false, Public:true }, "DefaultValue", $.Object);

    $.Property({Static:false, Public:true }, "ValueOrigin", $asm03.TypeRef("System.Configuration.PropertyValueOrigin"));

    $.Property({Static:false, Public:true }, "IsModified", $.Boolean);

    $.Property({Static:false, Public:true }, "IsKey", $.Boolean);

    $.Property({Static:false, Public:true }, "IsRequired", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLocked", $.Boolean);

    $.Property({Static:false, Public:true }, "Source", $.String);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Validator", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Property({Static:false, Public:true }, "Converter", $asm02.TypeRef("System.ComponentModel.TypeConverter"));

    $.Property({Static:false, Public:true }, "Description", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PropertyInformationCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.Collections.Specialized.NameObjectCollectionBase"), "System.Configuration.PropertyInformationCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Configuration.PropertyInformation")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.PropertyInformation"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.PropertyInformation"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.Field({Static:false, Public:false}, "ThisElement", $asm03.TypeRef("System.Configuration.ConfigurationElement")); 
    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Configuration.PropertyInformation"));

    $.Property({Static:false, Public:false}, "Item", $asm03.TypeRef("System.Configuration.PropertyInformation"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.PropertyInformationCollection/<GetEnumerator>d__0", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.Object); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm03.TypeRef("System.Configuration.PropertyInformationCollection")); 
    $.Field({Static:false, Public:true }, "c", $.Int32); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function PropertySourceInfo$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.PropertySourceInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FileName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFilename", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLineNumber", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.Field({Static:false, Public:false}, "_fileName", $.String); 
    $.Field({Static:false, Public:false}, "_lineNumber", $.Int32); 
    $.Property({Static:false, Public:false}, "FileName", $.String);

    $.Property({Static:false, Public:false}, "LineNumber", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Configuration.PropertyValueOrigin", true, {
    Default: 0, 
    Inherited: 1, 
    SetHere: 2
  }, false
);

(function ProtectedConfiguration$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Configuration.ProtectedConfiguration", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "get_DefaultProvider", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Providers", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ProtectedConfigurationProviderCollection"), [], [])
    );

    $.Constant({Static:true , Public:true }, "RsaProviderName", "RsaProtectedConfigurationProvider"); 
    $.Constant({Static:true , Public:true }, "DataProtectionProviderName", "DataProtectionConfigurationProvider"); 
    $.Constant({Static:true , Public:true }, "ProtectedDataSectionName", "configProtectedData"); 
    $.Property({Static:true , Public:true }, "Providers", $asm03.TypeRef("System.Configuration.ProtectedConfigurationProviderCollection"));

    $.Property({Static:true , Public:true }, "DefaultProvider", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ProviderCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.Provider.ProviderCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Provider.ProviderBase")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Configuration.Provider.ProviderBase")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Provider.ProviderBase"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetReadOnly", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Array"), $.Int32], [])
    )
      .Overrides(0, "CopyTo");

    $.Field({Static:false, Public:false}, "_Hashtable", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "_ReadOnly", $.Boolean); 
    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Configuration.Provider.ProviderBase"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function ProtectedConfigurationProviderCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.Provider.ProviderCollection"), "System.Configuration.ProtectedConfigurationProviderCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Provider.ProviderBase")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), [$.String], [])
    );

    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function ProtectedConfigurationSection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationSection"), "System.Configuration.ProtectedConfigurationSection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAndInitializeProviderWithAssert", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), [$asm01.TypeRef("System.Type"), $asm03.TypeRef("System.Configuration.ProviderSettings")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecryptSection", 
      new JSIL.MethodSignature($.String, [$.String, $asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncryptSection", 
      new JSIL.MethodSignature($.String, [$.String, $asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatEncryptedSection", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get__Providers", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ProtectedProviderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultProvider", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Providers", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ProviderSettingsCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAllProviders", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ProtectedConfigurationProviderCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProviderFromName", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InstantiateProvider", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), [$asm03.TypeRef("System.Configuration.ProviderSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultProvider", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "EncryptedSectionTemplate", "<{0} {1}=\"{2}\"> {3} </{0}>"); 
    $.Field({Static:true , Public:false}, "_properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_propProviders", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_propDefaultProvider", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false}, "_Providers", $asm03.TypeRef("System.Configuration.ProtectedProviderSettings"));

    $.Property({Static:false, Public:true }, "Providers", $asm03.TypeRef("System.Configuration.ProviderSettingsCollection"))
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["providers"]; });

    $.Property({Static:false, Public:true }, "DefaultProvider", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["defaultProvider"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ProtectedProviderSettings$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationElement"), "System.Configuration.ProtectedProviderSettings", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Providers", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ProviderSettingsCollection"), [], [])
    );

    $.Field({Static:false, Public:false}, "_properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_propProviders", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Providers", $asm03.TypeRef("System.Configuration.ProviderSettingsCollection"))
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ProviderException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Exception"), "System.Configuration.Provider.ProviderException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ProviderSettings$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationElement"), "System.Configuration.ProviderSettings", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Specialized.NameValueCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProperty", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDeserializeUnrecognizedAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetProperty", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Unmerge", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.ConfigurationElement"), $asm03.TypeRef("System.Configuration.ConfigurationElement"), 
          $asm03.TypeRef("System.Configuration.ConfigurationSaveMode")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdatePropertyCollection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_propName", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_propType", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Field({Static:false, Public:false}, "_properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Field({Static:false, Public:false}, "_PropertyNameCollection", $asm02.TypeRef("System.Collections.Specialized.NameValueCollection")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "Type", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; });

    $.Property({Static:false, Public:true }, "Parameters", $asm02.TypeRef("System.Collections.Specialized.NameValueCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ProviderSettingsCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationElementCollection"), "System.Configuration.ProviderSettingsCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ProviderSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ProviderSettings"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ProviderSettings"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm03.TypeRef("System.Configuration.ProviderSettings")], [])
    );

    $.Field({Static:true , Public:false}, "_properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Configuration.ProviderSettings"));

    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Configuration.ProviderSettings"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm03.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm03.System.Configuration.ProviderSettings.__Type__]; })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function RegexStringValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), "System.Configuration.RegexStringValidator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Field({Static:false, Public:false}, "_expression", $.String); 
    $.Field({Static:false, Public:false}, "_regex", $asm02.TypeRef("System.Text.RegularExpressions.Regex")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function RegexStringValidatorAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorAttribute"), "System.Configuration.RegexStringValidatorAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Regex", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidatorInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), [], [])
    );

    $.Field({Static:false, Public:false}, "_regex", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "ValidatorInstance", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Property({Static:false, Public:true }, "Regex", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Property]; });

})();

(function RsaProtectedConfigurationProvider$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), "System.Configuration.RsaProtectedConfigurationProvider", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddKey", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Decrypt", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteKey", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Encrypt", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportKey", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CspProviderName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyContainerName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RsaPublicKey", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Cryptography.RSAParameters"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseMachineContainer", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseOAEP", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBooleanValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Collections.Specialized.NameValueCollection"), $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCryptoServiceProvider", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Cryptography.RSACryptoServiceProvider"), [$.Boolean, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRandomKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportKey", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Collections.Specialized.NameValueCollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowBetterException", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Constant({Static:true , Public:false}, "DefaultRsaKeyContainerName", "NetFrameworkConfigurationKey"); 
    $.Constant({Static:true , Public:false}, "PROV_Rsa_FULL", 1); 
    $.Constant({Static:true , Public:false}, "CRYPT_MACHINE_KEYSET", 32); 
    $.Field({Static:false, Public:false}, "_KeyName", $.String); 
    $.Field({Static:false, Public:false}, "_KeyContainerName", $.String); 
    $.Field({Static:false, Public:false}, "_CspProviderName", $.String); 
    $.Field({Static:false, Public:false}, "_UseMachineContainer", $.Boolean); 
    $.Field({Static:false, Public:false}, "_UseOAEP", $.Boolean); 
    $.Property({Static:false, Public:true }, "KeyContainerName", $.String);

    $.Property({Static:false, Public:true }, "CspProviderName", $.String);

    $.Property({Static:false, Public:true }, "UseMachineContainer", $.Boolean);

    $.Property({Static:false, Public:true }, "UseOAEP", $.Boolean);

    $.Property({Static:false, Public:true }, "RsaPublicKey", $asm01.TypeRef("System.Security.Cryptography.RSAParameters"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function RuntimeConfigurationRecord$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.BaseConfigurationRecord"), "System.Configuration.RuntimeConfigurationRecord", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CallHostDecryptSection", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), 
          $asm03.TypeRef("System.Configuration.ProtectedConfigurationSection")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), [
          $asm03.TypeRef("System.Configuration.Internal.InternalConfigRoot"), $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSection", 
      new JSIL.MethodSignature($.Object, [
          $.Boolean, $asm03.TypeRef("System.Configuration.FactoryRecord"), 
          $asm03.TypeRef("System.Configuration.SectionRecord"), $.Object, 
          $asm03.TypeRef("System.Configuration.ConfigXmlReader")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSectionFactory", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Configuration.FactoryRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ClassFlags", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.SimpleBitVector32"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetRuntimeObject", 
      new JSIL.MethodSignature($.Object, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRuntimeObjectWithFullTrust", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Configuration.ConfigurationSection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRuntimeObjectWithRestrictedPermissions", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Configuration.ConfigurationSection")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "UseParentResult", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.Object, 
          $asm03.TypeRef("System.Configuration.SectionRecord")
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "RuntimeClassFlags", $asm03.TypeRef("System.Configuration.SimpleBitVector32")); 
    function RuntimeConfigurationRecord__cctor () {
      $thisType.RuntimeClassFlags = new $asm03.System.Configuration.SimpleBitVector32();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      RuntimeConfigurationRecord__cctor
    );

    $.Property({Static:false, Public:false, Virtual:true }, "ClassFlags", $asm03.TypeRef("System.Configuration.SimpleBitVector32"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function RuntimeConfigurationFactory$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.RuntimeConfigurationRecord/RuntimeConfigurationFactory", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.RuntimeConfigurationRecord"), $asm03.TypeRef("System.Configuration.FactoryRecord")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckForLockAttributes", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSection", 
      new JSIL.MethodSignature($.Object, [
          $.Boolean, $asm03.TypeRef("System.Configuration.RuntimeConfigurationRecord"), 
          $asm03.TypeRef("System.Configuration.FactoryRecord"), $asm03.TypeRef("System.Configuration.SectionRecord"), 
          $.Object, $asm03.TypeRef("System.Configuration.ConfigXmlReader")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSectionImpl", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("System.Configuration.RuntimeConfigurationRecord"), $asm03.TypeRef("System.Configuration.FactoryRecord"), 
          $asm03.TypeRef("System.Configuration.SectionRecord"), $.Object, 
          $asm03.TypeRef("System.Configuration.ConfigXmlReader")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSectionWithFullTrust", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("System.Configuration.RuntimeConfigurationRecord"), $asm03.TypeRef("System.Configuration.FactoryRecord"), 
          $asm03.TypeRef("System.Configuration.SectionRecord"), $.Object, 
          $asm03.TypeRef("System.Configuration.ConfigXmlReader")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSectionWithRestrictedPermissions", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("System.Configuration.RuntimeConfigurationRecord"), $asm03.TypeRef("System.Configuration.FactoryRecord"), 
          $asm03.TypeRef("System.Configuration.SectionRecord"), $.Object, 
          $asm03.TypeRef("System.Configuration.ConfigXmlReader")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.RuntimeConfigurationRecord"), $asm03.TypeRef("System.Configuration.FactoryRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitWithFullTrust", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.RuntimeConfigurationRecord"), $asm03.TypeRef("System.Configuration.FactoryRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitWithRestrictedPermissions", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.RuntimeConfigurationRecord"), $asm03.TypeRef("System.Configuration.FactoryRecord")], [])
    );

    $.Field({Static:false, Public:false}, "_sectionCtor", $asm01.TypeRef("System.Reflection.ConstructorInfo")); 
    $.Field({Static:false, Public:false}, "_sectionHandler", $asm02.TypeRef("System.Configuration.IConfigurationSectionHandler")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SafeBitVector32$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Configuration.SafeBitVector32", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "_data", $asm01.TypeRef("System.Int32")); 
    $.Property({Static:false, Public:false}, "Item", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function SectionInformation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.SectionInformation", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationSection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AttachToConfigurationRecord", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.MgmtConfigurationRecord"), $asm03.TypeRef("System.Configuration.FactoryRecord"), 
          $asm03.TypeRef("System.Configuration.SectionRecord")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DetachFromConfigurationRecord", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindParentFactoryRecord", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.FactoryRecord"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ForceDeclaration", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ForceDeclaration", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowDefinition", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowDefinitionModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowExeDefinition", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowExeDefinitionModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowLocation", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AllowLocationModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowOverride", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Attached", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigKey", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConfigSource", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigSourceModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigSourceStreamName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ForceSave", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InheritInChildApplications", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDeclarationRequired", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDeclared", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDefinitionAllowed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLocked", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsProtected", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRuntime", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocationAttributesAreDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OverrideMode", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.OverrideMode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OverrideModeDefault", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.OverrideMode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OverrideModeDefaultModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OverrideModeDefaultSetting", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.OverrideModeSetting"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OverrideModeEffective", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.OverrideMode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OverrideModeSetting", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.OverrideModeSetting"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtectionProvider", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProtectionProviderName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RawXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Removed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RequirePermission", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequirePermissionModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RestartOnExternalChanges", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RestartOnExternalChangesModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SectionName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParentSection", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRawXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsModifiedFlags", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ProtectSection", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetModifiedFlags", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RevertToParent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowDefinition", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowExeDefinition", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowLocation", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowOverride", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConfigSource", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ConfigSourceStreamName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ForceSave", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InheritInChildApplications", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OverrideMode", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.OverrideMode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OverrideModeDefault", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.OverrideMode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RawXml", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Removed", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RequirePermission", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RestartOnExternalChanges", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetRawXml", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRuntimeConfigurationInformation", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.BaseConfigurationRecord"), $asm03.TypeRef("System.Configuration.FactoryRecord"), 
          $asm03.TypeRef("System.Configuration.SectionRecord")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "UnprotectSection", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyDesigntime", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyIsAttachedToConfigRecord", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyIsEditable", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyIsEditableFactory", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyNotParentSection", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifySupportsLocation", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "Flag_Attached", 1); 
    $.Constant({Static:true , Public:false}, "Flag_Declared", 2); 
    $.Constant({Static:true , Public:false}, "Flag_DeclarationRequired", 4); 
    $.Constant({Static:true , Public:false}, "Flag_AllowLocation", 8); 
    $.Constant({Static:true , Public:false}, "Flag_RestartOnExternalChanges", 16); 
    $.Constant({Static:true , Public:false}, "Flag_RequirePermission", 32); 
    $.Constant({Static:true , Public:false}, "Flag_LocationLocked", 64); 
    $.Constant({Static:true , Public:false}, "Flag_ChildrenLocked", 128); 
    $.Constant({Static:true , Public:false}, "Flag_InheritInChildApps", 256); 
    $.Constant({Static:true , Public:false}, "Flag_IsParentSection", 512); 
    $.Constant({Static:true , Public:false}, "Flag_Removed", 1024); 
    $.Constant({Static:true , Public:false}, "Flag_ProtectionProviderDetermined", 2048); 
    $.Constant({Static:true , Public:false}, "Flag_ForceSave", 4096); 
    $.Constant({Static:true , Public:false}, "Flag_IsUndeclared", 8192); 
    $.Constant({Static:true , Public:false}, "Flag_ChildrenLockWithoutFileInput", 16384); 
    $.Constant({Static:true , Public:false}, "Flag_AllowExeDefinitionModified", 65536); 
    $.Constant({Static:true , Public:false}, "Flag_AllowDefinitionModified", 131072); 
    $.Constant({Static:true , Public:false}, "Flag_ConfigSourceModified", 262144); 
    $.Constant({Static:true , Public:false}, "Flag_ProtectionProviderModified", 524288); 
    $.Constant({Static:true , Public:false}, "Flag_OverrideModeDefaultModified", 1048576); 
    $.Constant({Static:true , Public:false}, "Flag_OverrideModeModified", 2097152); 
    $.Field({Static:false, Public:false}, "_configurationSection", $asm03.TypeRef("System.Configuration.ConfigurationSection")); 
    $.Field({Static:false, Public:false}, "_flags", $asm03.TypeRef("System.Configuration.SafeBitVector32")); 
    $.Field({Static:false, Public:false}, "_modifiedFlags", $asm03.TypeRef("System.Configuration.SimpleBitVector32")); 
    $.Field({Static:false, Public:false}, "_allowDefinition", $asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition")); 
    $.Field({Static:false, Public:false}, "_allowExeDefinition", $asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition")); 
    $.Field({Static:false, Public:false}, "_configRecord", $asm03.TypeRef("System.Configuration.MgmtConfigurationRecord")); 
    $.Field({Static:false, Public:false}, "_configKey", $.String); 
    $.Field({Static:false, Public:false}, "_group", $.String); 
    $.Field({Static:false, Public:false}, "_name", $.String); 
    $.Field({Static:false, Public:false}, "_typeName", $.String); 
    $.Field({Static:false, Public:false}, "_rawXml", $.String); 
    $.Field({Static:false, Public:false}, "_configSource", $.String); 
    $.Field({Static:false, Public:false}, "_configSourceStreamName", $.String); 
    $.Field({Static:false, Public:false}, "_protectionProvider", $asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider")); 
    $.Field({Static:false, Public:false}, "_protectionProviderName", $.String); 
    $.Field({Static:false, Public:false}, "_overrideModeDefault", $asm03.TypeRef("System.Configuration.OverrideModeSetting")); 
    $.Field({Static:false, Public:false}, "_overrideMode", $asm03.TypeRef("System.Configuration.OverrideModeSetting")); 
    $.Property({Static:false, Public:false}, "IsRuntime", $.Boolean);

    $.Property({Static:false, Public:false}, "Attached", $.Boolean);

    $.Property({Static:false, Public:false}, "ConfigKey", $.String);

    $.Property({Static:false, Public:false}, "Removed", $.Boolean);

    $.Property({Static:false, Public:true }, "SectionName", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "AllowDefinition", $asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"));

    $.Property({Static:false, Public:false}, "AllowDefinitionModified", $.Boolean);

    $.Property({Static:false, Public:true }, "AllowExeDefinition", $asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"));

    $.Property({Static:false, Public:false}, "AllowExeDefinitionModified", $.Boolean);

    $.Property({Static:false, Public:true }, "OverrideModeDefault", $asm03.TypeRef("System.Configuration.OverrideMode"));

    $.Property({Static:false, Public:false}, "OverrideModeDefaultSetting", $asm03.TypeRef("System.Configuration.OverrideModeSetting"));

    $.Property({Static:false, Public:false}, "OverrideModeDefaultModified", $.Boolean);

    $.Property({Static:false, Public:true }, "AllowLocation", $.Boolean);

    $.Property({Static:false, Public:false}, "AllowLocationModified", $.Boolean);

    $.Property({Static:false, Public:true }, "AllowOverride", $.Boolean);

    $.Property({Static:false, Public:true }, "OverrideMode", $asm03.TypeRef("System.Configuration.OverrideMode"));

    $.Property({Static:false, Public:true }, "OverrideModeEffective", $asm03.TypeRef("System.Configuration.OverrideMode"));

    $.Property({Static:false, Public:false}, "OverrideModeSetting", $asm03.TypeRef("System.Configuration.OverrideModeSetting"));

    $.Property({Static:false, Public:false}, "LocationAttributesAreDefault", $.Boolean);

    $.Property({Static:false, Public:true }, "ConfigSource", $.String);

    $.Property({Static:false, Public:false}, "ConfigSourceModified", $.Boolean);

    $.Property({Static:false, Public:false}, "ConfigSourceStreamName", $.String);

    $.Property({Static:false, Public:true }, "InheritInChildApplications", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDeclared", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDeclarationRequired", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDefinitionAllowed", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLocked", $.Boolean);

    $.Property({Static:false, Public:true }, "IsProtected", $.Boolean);

    $.Property({Static:false, Public:true }, "ProtectionProvider", $asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"));

    $.Property({Static:false, Public:false}, "ProtectionProviderName", $.String);

    $.Property({Static:false, Public:true }, "RestartOnExternalChanges", $.Boolean);

    $.Property({Static:false, Public:false}, "RestartOnExternalChangesModified", $.Boolean);

    $.Property({Static:false, Public:true }, "RequirePermission", $.Boolean);

    $.Property({Static:false, Public:false}, "RequirePermissionModified", $.Boolean);

    $.Property({Static:false, Public:true }, "Type", $.String);

    $.Property({Static:false, Public:false}, "RawXml", $.String);

    $.Property({Static:false, Public:true }, "ForceSave", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SectionInput$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.SectionInput", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.SectionXmlInfo"), $asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearResult", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Errors", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasErrors", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasResult", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasResultRuntimeObject", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsProtectionProviderDetermined", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProtectionProvider", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Result", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResultRuntimeObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SectionXmlInfo", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.SectionXmlInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ProtectionProvider", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Result", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResultRuntimeObject", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowOnErrors", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "s_unevaluated", $.Object); 
    $.Field({Static:false, Public:false}, "_sectionXmlInfo", $asm03.TypeRef("System.Configuration.SectionXmlInfo")); 
    $.Field({Static:false, Public:false}, "_protectionProvider", $asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider")); 
    $.Field({Static:false, Public:false}, "_isProtectionProviderDetermined", $.Boolean); 
    $.Field({Static:false, Public:false}, "_result", $.Object); 
    $.Field({Static:false, Public:false}, "_resultRuntimeObject", $.Object); 
    $.Field({Static:false, Public:false}, "_errors", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])); 
    $.Property({Static:false, Public:false}, "SectionXmlInfo", $asm03.TypeRef("System.Configuration.SectionXmlInfo"));

    $.Property({Static:false, Public:false}, "HasResult", $.Boolean);

    $.Property({Static:false, Public:false}, "HasResultRuntimeObject", $.Boolean);

    $.Property({Static:false, Public:false}, "Result", $.Object);

    $.Property({Static:false, Public:false}, "ResultRuntimeObject", $.Object);

    $.Property({Static:false, Public:false}, "IsProtectionProviderDetermined", $.Boolean);

    $.Property({Static:false, Public:false}, "ProtectionProvider", $asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"));

    $.Property({Static:false, Public:false}, "Errors", $asm01.TypeRef("System.Collections.Generic.ICollection`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")]));

    $.Property({Static:false, Public:false}, "HasErrors", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["SectionInput {_sectionXmlInfo.ConfigKey}"]; });

})();

(function SectionRecord$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.SectionRecord", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddFileInput", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.SectionInput")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIndirectLocationInput", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.SectionInput")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLocationInput", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.SectionInput")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLocationInputImpl", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.SectionInput"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeLockSettings", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.OverrideMode"), $asm03.TypeRef("System.Configuration.OverrideMode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearRawXml", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearResult", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AddUpdate", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigKey", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FileInput", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.SectionInput"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasErrors", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasFileInput", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasIndirectLocationInputs", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasInput", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasLocationInputs", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasResult", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasResultRuntimeObject", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IndirectLocationInputs", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("System.Configuration.SectionInput")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsResultTrustedWithoutAptca", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastIndirectLocationInput", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.SectionInput"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LastLocationInput", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.SectionInput"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocationInputs", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("System.Configuration.SectionInput")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LockChildren", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LockChildrenWithoutFileInput", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Locked", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RequirePermission", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Result", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResultRuntimeObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAllErrors", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveFileInput", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AddUpdate", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsResultTrustedWithoutAptca", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RequirePermission", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Result", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ResultRuntimeObject", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowOnErrors", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "Flag_Locked", 1); 
    $.Constant({Static:true , Public:false}, "Flag_LockChildren", 2); 
    $.Constant({Static:true , Public:false}, "Flag_IsResultTrustedWithoutAptca", 4); 
    $.Constant({Static:true , Public:false}, "Flag_RequirePermission", 8); 
    $.Constant({Static:true , Public:false}, "Flag_LocationInputLockApplied", 16); 
    $.Constant({Static:true , Public:false}, "Flag_IndirectLocationInputLockApplied", 32); 
    $.Constant({Static:true , Public:false}, "Flag_ChildrenLockWithoutFileInput", 64); 
    $.Constant({Static:true , Public:false}, "Flag_AddUpdate", 65536); 
    $.Field({Static:true , Public:false}, "s_unevaluated", $.Object); 
    $.Field({Static:false, Public:false}, "_flags", $asm03.TypeRef("System.Configuration.SafeBitVector32")); 
    $.Field({Static:false, Public:false}, "_configKey", $.String); 
    $.Field({Static:false, Public:false}, "_locationInputs", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("System.Configuration.SectionInput")])); 
    $.Field({Static:false, Public:false}, "_fileInput", $asm03.TypeRef("System.Configuration.SectionInput")); 
    $.Field({Static:false, Public:false}, "_indirectLocationInputs", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("System.Configuration.SectionInput")])); 
    $.Field({Static:false, Public:false}, "_result", $.Object); 
    $.Field({Static:false, Public:false}, "_resultRuntimeObject", $.Object); 
    $.Field({Static:false, Public:false}, "_errors", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("System.Configuration.ConfigurationException")])); 
    $.Property({Static:false, Public:false}, "ConfigKey", $.String);

    $.Property({Static:false, Public:false}, "Locked", $.Boolean);

    $.Property({Static:false, Public:false}, "LockChildren", $.Boolean);

    $.Property({Static:false, Public:false}, "LockChildrenWithoutFileInput", $.Boolean);

    $.Property({Static:false, Public:false}, "IsResultTrustedWithoutAptca", $.Boolean);

    $.Property({Static:false, Public:false}, "RequirePermission", $.Boolean);

    $.Property({Static:false, Public:false}, "AddUpdate", $.Boolean);

    $.Property({Static:false, Public:false}, "HasLocationInputs", $.Boolean);

    $.Property({Static:false, Public:false}, "LocationInputs", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("System.Configuration.SectionInput")]));

    $.Property({Static:false, Public:false}, "LastLocationInput", $asm03.TypeRef("System.Configuration.SectionInput"));

    $.Property({Static:false, Public:false}, "HasFileInput", $.Boolean);

    $.Property({Static:false, Public:false}, "FileInput", $asm03.TypeRef("System.Configuration.SectionInput"));

    $.Property({Static:false, Public:false}, "HasIndirectLocationInputs", $.Boolean);

    $.Property({Static:false, Public:false}, "IndirectLocationInputs", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("System.Configuration.SectionInput")]));

    $.Property({Static:false, Public:false}, "LastIndirectLocationInput", $asm03.TypeRef("System.Configuration.SectionInput"));

    $.Property({Static:false, Public:false}, "HasInput", $.Boolean);

    $.Property({Static:false, Public:false}, "HasResult", $.Boolean);

    $.Property({Static:false, Public:false}, "HasResultRuntimeObject", $.Boolean);

    $.Property({Static:false, Public:false}, "Result", $.Object);

    $.Property({Static:false, Public:false}, "ResultRuntimeObject", $.Object);

    $.Property({Static:false, Public:false}, "HasErrors", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["SectionRecord {ConfigKey}"]; });

})();

(function SectionUpdates$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.SectionUpdates", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSection", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Update")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSectionGroup", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Update")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompleteUpdates", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSectionUpdates", 
      new JSIL.MethodSignature($.Type, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNew", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDeclarationUpdate", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.DeclarationUpdate"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefinitionUpdate", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.DefinitionUpdate"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMovedSectionNames", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNewGroupNames", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSectionGroupUpdate", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.DeclarationUpdate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSectionUpdatesForGroup", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUnretrievedGroupNames", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUnretrievedSectionNames", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUpdate", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Update"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasNewSectionGroups", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasUnretrievedSections", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsNew", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "_name", $.String); 
    $.Field({Static:false, Public:false}, "_groups", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "_sections", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "_cUnretrieved", $.Int32); 
    $.Field({Static:false, Public:false}, "_cMoved", $.Int32); 
    $.Field({Static:false, Public:false}, "_sectionGroupUpdate", $asm03.TypeRef("System.Configuration.Update")); 
    $.Field({Static:false, Public:false}, "_isNew", $.Boolean); 
    $.Property({Static:false, Public:false}, "IsNew", $.Boolean);

    $.Property({Static:false, Public:false}, "IsEmpty", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SectionXmlInfo$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.SectionXmlInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.Int32, 
          $.Object, $.String, 
          $.String, $.String, 
          $.Object, $.String, 
          $asm03.TypeRef("System.Configuration.OverrideModeSetting"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigKey", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigSource", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigSourceStreamName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefinitionConfigPath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Filename", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OverrideModeSetting", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.OverrideModeSetting"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProtectionProviderName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RawXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SkipInChildApps", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StreamVersion", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SubPath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TargetConfigPath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ConfigSource", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ConfigSourceStreamName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ConfigSourceStreamVersion", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LineNumber", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_OverrideModeSetting", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.OverrideModeSetting")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ProtectionProviderName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_RawXml", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SkipInChildApps", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_StreamVersion", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TargetConfigPath", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "_configKey", $.String); 
    $.Field({Static:false, Public:false}, "_definitionConfigPath", $.String); 
    $.Field({Static:false, Public:false}, "_targetConfigPath", $.String); 
    $.Field({Static:false, Public:false}, "_subPath", $.String); 
    $.Field({Static:false, Public:false}, "_filename", $.String); 
    $.Field({Static:false, Public:false}, "_lineNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "_streamVersion", $.Object); 
    $.Field({Static:false, Public:false}, "_configSource", $.String); 
    $.Field({Static:false, Public:false}, "_configSourceStreamName", $.String); 
    $.Field({Static:false, Public:false}, "_configSourceStreamVersion", $.Object); 
    $.Field({Static:false, Public:false}, "_skipInChildApps", $.Boolean); 
    $.Field({Static:false, Public:false}, "_rawXml", $.String); 
    $.Field({Static:false, Public:false}, "_protectionProviderName", $.String); 
    $.Field({Static:false, Public:false}, "_overrideMode", $asm03.TypeRef("System.Configuration.OverrideModeSetting")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Filename", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "StreamVersion", $.Object);

    $.Property({Static:false, Public:false}, "ConfigSource", $.String);

    $.Property({Static:false, Public:false}, "ConfigSourceStreamName", $.String);

    $.Property({Static:false, Public:false}, "ConfigSourceStreamVersion", $.Object);

    $.Property({Static:false, Public:false}, "ConfigKey", $.String);

    $.Property({Static:false, Public:false}, "DefinitionConfigPath", $.String);

    $.Property({Static:false, Public:false}, "TargetConfigPath", $.String);

    $.Property({Static:false, Public:false}, "SubPath", $.String);

    $.Property({Static:false, Public:false}, "RawXml", $.String);

    $.Property({Static:false, Public:false}, "ProtectionProviderName", $.String);

    $.Property({Static:false, Public:false}, "OverrideModeSetting", $asm03.TypeRef("System.Configuration.OverrideModeSetting"));

    $.Property({Static:false, Public:false}, "SkipInChildApps", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SimpleBitVector32$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Configuration.SimpleBitVector32", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Data", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "data", $.Int32); 
    $.Property({Static:false, Public:false}, "Data", $.Int32);

    $.Property({Static:false, Public:false}, "Item", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function StreamInfo$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.StreamInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConfigSource", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsMonitored", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SectionName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StreamName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Version", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsMonitored", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Version", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Field({Static:false, Public:false}, "_sectionName", $.String); 
    $.Field({Static:false, Public:false}, "_configSource", $.String); 
    $.Field({Static:false, Public:false}, "_streamName", $.String); 
    $.Field({Static:false, Public:false}, "_isMonitored", $.Boolean); 
    $.Field({Static:false, Public:false}, "_version", $.Object); 
    $.Property({Static:false, Public:false}, "SectionName", $.String);

    $.Property({Static:false, Public:false}, "ConfigSource", $.String);

    $.Property({Static:false, Public:false}, "StreamName", $.String);

    $.Property({Static:false, Public:false}, "IsMonitored", $.Boolean);

    $.Property({Static:false, Public:false}, "Version", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function StreamUpdate$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.StreamUpdate", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NewStreamname", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriteCompleted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_WriteCompleted", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "_newStreamname", $.String); 
    $.Field({Static:false, Public:false}, "_writeCompleted", $.Boolean); 
    $.Property({Static:false, Public:false}, "NewStreamname", $.String);

    $.Property({Static:false, Public:false}, "WriteCompleted", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CommaDelimitedStringCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.Collections.Specialized.StringCollection"), "System.Configuration.CommaDelimitedStringCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddRange", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FromString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsModified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetReadOnly", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfContainsDelimiter", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfReadOnly", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "_Modified", $.Boolean); 
    $.Field({Static:false, Public:false}, "_ReadOnly", $.Boolean); 
    $.Field({Static:false, Public:false}, "_OriginalString", $.String); 
    $.Property({Static:false, Public:true }, "IsModified", $.Boolean);

    $.Property({Static:false, Public:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function StringUtil$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Configuration.StringUtil", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "EqualsIgnoreCase", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EqualsNE", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ObjectArrayToStringArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StartsWith", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StartsWithIgnoreCase", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function StringValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), "System.Configuration.StringValidator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Field({Static:false, Public:false}, "_minLength", $.Int32); 
    $.Field({Static:false, Public:false}, "_maxLength", $.Int32); 
    $.Field({Static:false, Public:false}, "_invalidChars", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function StringValidatorAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorAttribute"), "System.Configuration.StringValidatorAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InvalidCharacters", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxLength", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinLength", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidatorInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InvalidCharacters", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxLength", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinLength", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "_minLength", $.Int32); 
    $.Field({Static:false, Public:false}, "_maxLength", $.Int32); 
    $.Field({Static:false, Public:false}, "_invalidChars", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "ValidatorInstance", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Property({Static:false, Public:true }, "MinLength", $.Int32);

    $.Property({Static:false, Public:true }, "MaxLength", $.Int32);

    $.Property({Static:false, Public:true }, "InvalidCharacters", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Property]; });

})();

(function SubclassTypeValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), "System.Configuration.SubclassTypeValidator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Field({Static:false, Public:false}, "_base", $asm01.TypeRef("System.Type")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SubclassTypeValidatorAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorAttribute"), "System.Configuration.SubclassTypeValidatorAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseClass", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidatorInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), [], [])
    );

    $.Field({Static:false, Public:false}, "_baseClass", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ValidatorInstance", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Property({Static:false, Public:true }, "BaseClass", $asm01.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Property]; });

})();

(function TimeSpanMinutesConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationConverterBase"), "System.Configuration.TimeSpanMinutesConverter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm01.TypeRef("System.Type")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TimeSpanMinutesOrInfiniteConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.TimeSpanMinutesConverter"), "System.Configuration.TimeSpanMinutesOrInfiniteConverter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm01.TypeRef("System.Type")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TimeSpanSecondsConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationConverterBase"), "System.Configuration.TimeSpanSecondsConverter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm01.TypeRef("System.Type")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TimeSpanSecondsOrInfiniteConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.TimeSpanSecondsConverter"), "System.Configuration.TimeSpanSecondsOrInfiniteConverter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm01.TypeRef("System.Type")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TimeSpanValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), "System.Configuration.TimeSpanValidator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.TimeSpan"), $asm01.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.TimeSpan"), $asm01.TypeRef("System.TimeSpan"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.TimeSpan"), $asm01.TypeRef("System.TimeSpan"), 
          $.Boolean, $.Int64
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Field({Static:false, Public:false}, "_flags", $asm03.TypeRef("System.Configuration.TimeSpanValidator/ValidationFlags")); 
    $.Field({Static:false, Public:false}, "_minValue", $asm01.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "_maxValue", $asm01.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "_resolution", $.Int64); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Configuration.TimeSpanValidator/ValidationFlags", false, {
    None: 0, 
    ExclusiveRange: 1
  }, false
);

(function TimeSpanValidatorAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorAttribute"), "System.Configuration.TimeSpanValidatorAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExcludeRange", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxValueString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinValueString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidatorInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExcludeRange", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxValueString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinValueString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:true }, "TimeSpanMinValue", "-10675199.02:48:05.4775808"); 
    $.Constant({Static:true , Public:true }, "TimeSpanMaxValue", "10675199.02:48:05.4775807"); 
    $.Field({Static:false, Public:false}, "_min", $asm01.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "_max", $asm01.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "_excludeRange", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "ValidatorInstance", $asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.Property({Static:false, Public:true }, "MinValue", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "MaxValue", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "MinValueString", $.String);

    $.Property({Static:false, Public:true }, "MaxValueString", $.String);

    $.Property({Static:false, Public:true }, "ExcludeRange", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Property]; });

})();

(function TypeNameConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationConverterBase"), "System.Configuration.TypeNameConverter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm01.TypeRef("System.Type")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TypeUtil$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Configuration.TypeUtil", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "CallerHasMemberAccessOrAspNetPermission", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDelegateRestricted", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDynamicMethod", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.Emit.DynamicMethod"), [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDynamicMethodWithUnrestrictedPermission", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.Emit.DynamicMethod"), [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInstance", 
      new JSIL.MethodSignature("!!0", [$.String], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInstanceRestricted", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Type"), $.String], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInstanceRestricted", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInstanceWithReflectionPermission", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsCallerFullTrust", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConstructorWithReflectionPermission", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.ConstructorInfo"), [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLegacyType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeImpl", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeWithReflectionPermission", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [
          $asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost"), $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeWithReflectionPermission", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasAptcaBit", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.Assembly")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeCtorWithReflectionPermission", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Reflection.ConstructorInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeAllowedInConfig", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeFromTrustedAssemblyWithoutAptca", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyAssignableType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.Field({Static:true , Public:false}, "s_fullTrustPermissionSet", $asm01.TypeRef("System.Security.PermissionSet")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "s_memberAccessPermission", $asm01.TypeRef("System.Security.Permissions.ReflectionPermission")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "s_aspNetHostingPermission", $asm02.TypeRef("System.Web.AspNetHostingPermission")); 
    $.Property({Static:true , Public:false}, "IsCallerFullTrust", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.Configuration.TypeUtil/CreateInstanceInvoker", false, []);

JSIL.MakeDelegate("System.Configuration.TypeUtil/CreateDelegateInvoker", false, []);

(function UpdateConfigHost$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.Internal.DelegatingConfigHost"), "System.Configuration.UpdateConfigHost", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddStreamname", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeleteStream", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNewStreamname", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStreamUpdate", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.StreamUpdate"), [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetStreamVersion", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsConfigRecordRequired", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsFile", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OpenStreamForRead", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OpenStreamForWrite", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCompleted", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Object
        ], [])
    );

    $.Field({Static:false, Public:false}, "_streams", $asm02.TypeRef("System.Collections.Specialized.HybridDictionary")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function UrlPath$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Configuration.UrlPath", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "ConvertFileNameToUrl", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDirectoryOrRootName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAbsoluteLocalPhysicalPath", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAbsoluteUNCPhysicalPath", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDirectorySeparatorChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEqualOrSubdirectory", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEqualOrSubpath", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEqualOrSubpathImpl", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSubpath", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.Constant({Static:true , Public:false}, "FILE_URL_LOCAL", "file:///"); 
    $.Constant({Static:true , Public:false}, "FILE_URL_UNC", "file:"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.Configuration.ValidatorCallback", true, []);

(function ValidatorUtils$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Configuration.ValidatorUtils", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "HelperParamValidation", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateRangeImpl", 
      new JSIL.MethodSignature(null, [
          "!!0", "!!0", 
          "!!0", $.Boolean
        ], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateResolution", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int64, 
          $.Int64
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ValidateScalar", 
      new JSIL.MethodSignature(null, [
          "!!0", "!!0", 
          "!!0", "!!0", 
          $.Boolean
        ], ["T"])
    );

    $.ExternalMethod({Static:true , Public:true }, "ValidateScalar", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.TimeSpan"), $asm01.TypeRef("System.TimeSpan"), 
          $asm01.TypeRef("System.TimeSpan"), $.Int64, 
          $.Boolean
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function WhiteSpaceTrimStringConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationConverterBase"), "System.Configuration.WhiteSpaceTrimStringConverter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm01.TypeRef("System.Type")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlUtil$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.XmlUtil", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $.String, 
          $.Boolean, $asm03.TypeRef("System.Configuration.ConfigurationSchemaErrors")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddErrorRequiredAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Configuration.ExceptionAction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddErrorReservedAttribute", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ExceptionAction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddErrorUnrecognizedAttribute", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ExceptionAction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddErrorUnrecognizedElement", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ExceptionAction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyElement", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.XmlUtilWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyOuterXmlToNextElement", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.XmlUtilWriter"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyReaderToNextElement", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.XmlUtilWriter"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopySection", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyXmlNode", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.XmlUtilWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatXmlElement", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Int32, 
          $.Int32, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Filename", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Reader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTextReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaErrors", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationSchemaErrors"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TrueLinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPositionOffset", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadToNextElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseResources", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetCachedStringWriter", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RetrieveFullOpenElementTag", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipAndCopyReaderToNextElement", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.XmlUtilWriter"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipChildElementsAndCopyOuterXmlToNextElement", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.XmlUtilWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipToNextElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StrictReadToNextElement", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ExceptionAction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StrictSkipToNextElement", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ExceptionAction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StrictSkipToOurParentsEndElement", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ExceptionAction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateStartElement", 
      new JSIL.MethodSignature($.String, [
          $asm03.TypeRef("System.Configuration.XmlUtilWriter"), $.String, 
          $.Boolean, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAndGetBooleanAttribute", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.ExceptionAction"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAndGetNonEmptyStringAttribute", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ExceptionAction"), $jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyIgnorableNodeType", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ExceptionAction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyNoUnrecognizedAttributes", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.ExceptionAction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyRequiredAttribute", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.String, 
          $asm03.TypeRef("System.Configuration.ExceptionAction")
        ], [])
    );

    $.Constant({Static:true , Public:false}, "MAX_LINE_WIDTH", 60); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "s_positionOffset", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "_stream", $asm01.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "_streamName", $.String); 
    $.Field({Static:false, Public:false}, "_reader", $asm05.TypeRef("System.Xml.XmlTextReader")); 
    $.Field({Static:false, Public:false}, "_cachedStringWriter", $asm01.TypeRef("System.IO.StringWriter")); 
    $.Field({Static:false, Public:false}, "_schemaErrors", $asm03.TypeRef("System.Configuration.ConfigurationSchemaErrors")); 
    $.Field({Static:false, Public:false}, "_lastLineNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "_lastLinePosition", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Filename", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "TrueLinePosition", $.Int32);

    $.Property({Static:false, Public:false}, "Reader", $asm05.TypeRef("System.Xml.XmlTextReader"));

    $.Property({Static:false, Public:false}, "SchemaErrors", $asm03.TypeRef("System.Configuration.ConfigurationSchemaErrors"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable"), 
      /* 1 */ $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlUtilWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.XmlUtilWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendAttributeValue", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.XmlTextReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendCData", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendComment", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendEntityRef", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendEscapeTextString", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendEscapeXmlString", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Boolean, 
          $.Char
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendIndent", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendNewLine", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendProcessingInstruction", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendRequiredWhiteSpace", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendSpace", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendSpaces", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendSpacesToLinePosition", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendWhiteSpace", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateStreamCheckpoint", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLastLineBlank", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TrackPosition", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Writer", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.TextWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RestoreStreamCheckpoint", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SeekToLineStart", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdatePosition", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature($.Int32, [$.Char], [])
    );

    $.Constant({Static:true , Public:false}, "SPACE", " "); 
    $.Constant({Static:true , Public:false}, "NL", "\r\n"); 
    $.Field({Static:true , Public:false}, "SPACES_8", $.String); 
    $.Field({Static:true , Public:false}, "SPACES_4", $.String); 
    $.Field({Static:true , Public:false}, "SPACES_2", $.String); 
    $.Field({Static:false, Public:false}, "_writer", $asm01.TypeRef("System.IO.TextWriter")); 
    $.Field({Static:false, Public:false}, "_baseStream", $asm01.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "_trackPosition", $.Boolean); 
    $.Field({Static:false, Public:false}, "_lineNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "_linePosition", $.Int32); 
    $.Field({Static:false, Public:false}, "_isLastLineBlank", $.Boolean); 
    $.Field({Static:false, Public:false}, "_lineStartCheckpoint", $.Object); 
    $.Property({Static:false, Public:false}, "Writer", $asm01.TypeRef("System.IO.TextWriter"));

    $.Property({Static:false, Public:false}, "TrackPosition", $.Boolean);

    $.Property({Static:false, Public:false}, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "LinePosition", $.Int32);

    $.Property({Static:false, Public:false}, "IsLastLineBlank", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function StreamWriterCheckpoint$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.XmlUtilWriter/StreamWriterCheckpoint", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.XmlUtilWriter")], [])
    );

    $.Field({Static:false, Public:false}, "_lineNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "_linePosition", $.Int32); 
    $.Field({Static:false, Public:false}, "_isLastLineBlank", $.Boolean); 
    $.Field({Static:false, Public:false}, "_streamLength", $.Int64); 
    $.Field({Static:false, Public:false}, "_streamPosition", $.Int64); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeInterface(
  "System.Configuration.Internal.IConfigSystem", true, [], function ($) {
    $.Method({}, "Init", new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Object])], []));
    $.Method({}, "get_Host", new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost"), [], []));
    $.Method({}, "get_Root", new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), [], []));
    $.Property({}, "Host");
    $.Property({}, "Root");
  }, []);

(function ConfigSystem$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.Internal.ConfigSystem", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigSystem.get_Host", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost"), [], [])
    )
      .Overrides(0, "get_Host");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigSystem.get_Root", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), [], [])
    )
      .Overrides(0, "get_Root");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigSystem.Init", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Object])], [])
    )
      .Overrides(0, "Init");

    $.Field({Static:false, Public:false}, "_configRoot", $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot")); 
    $.Field({Static:false, Public:false}, "_configHost", $asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigSystem.Host", $asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigSystem.Root", $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot"));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("System.Configuration.Internal.IConfigSystem")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeInterface(
  "System.Configuration.Internal.IConfigurationManagerInternal", true, [], function ($) {
    $.Method({}, "get_SupportsUserConfig", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_SetConfigurationSystemInProgress", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_MachineConfigPath", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "get_ApplicationConfigUri", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "get_ExeProductName", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "get_ExeProductVersion", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "get_ExeRoamingConfigDirectory", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "get_ExeRoamingConfigPath", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "get_ExeLocalConfigDirectory", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "get_ExeLocalConfigPath", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "get_UserConfigFilename", new JSIL.MethodSignature($.String, [], []));
    $.Property({}, "SupportsUserConfig");
    $.Property({}, "SetConfigurationSystemInProgress");
    $.Property({}, "MachineConfigPath");
    $.Property({}, "ApplicationConfigUri");
    $.Property({}, "ExeProductName");
    $.Property({}, "ExeProductVersion");
    $.Property({}, "ExeRoamingConfigDirectory");
    $.Property({}, "ExeRoamingConfigPath");
    $.Property({}, "ExeLocalConfigDirectory");
    $.Property({}, "ExeLocalConfigPath");
    $.Property({}, "UserConfigFilename");
  }, []);

(function ConfigurationManagerInternal$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.Internal.ConfigurationManagerInternal", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.get_ApplicationConfigUri", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(0, "get_ApplicationConfigUri");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.get_ExeLocalConfigDirectory", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(0, "get_ExeLocalConfigDirectory");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.get_ExeLocalConfigPath", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(0, "get_ExeLocalConfigPath");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.get_ExeProductName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(0, "get_ExeProductName");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.get_ExeProductVersion", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(0, "get_ExeProductVersion");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.get_ExeRoamingConfigDirectory", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(0, "get_ExeRoamingConfigDirectory");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.get_ExeRoamingConfigPath", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(0, "get_ExeRoamingConfigPath");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.get_MachineConfigPath", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(0, "get_MachineConfigPath");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.get_SetConfigurationSystemInProgress", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_SetConfigurationSystemInProgress");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.get_SupportsUserConfig", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_SupportsUserConfig");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.get_UserConfigFilename", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(0, "get_UserConfigFilename");

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.SupportsUserConfig", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.SetConfigurationSystemInProgress", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.MachineConfigPath", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.ApplicationConfigUri", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.ExeProductName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.ExeProductVersion", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.ExeRoamingConfigDirectory", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.ExeRoamingConfigPath", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.ExeLocalConfigDirectory", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.ExeLocalConfigPath", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IConfigurationManagerInternal.UserConfigFilename", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("System.Configuration.Internal.IConfigurationManagerInternal")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function FileVersion$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.Internal.FileVersion", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Int64, 
          $asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.DateTime")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "_exists", $.Boolean); 
    $.Field({Static:false, Public:false}, "_fileSize", $.Int64); 
    $.Field({Static:false, Public:false}, "_utcCreationTime", $asm01.TypeRef("System.DateTime")); 
    $.Field({Static:false, Public:false}, "_utcLastWriteTime", $asm01.TypeRef("System.DateTime")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeInterface(
  "System.Configuration.Internal.IConfigurationManagerHelper", true, [], function ($) {
    $.Method({}, "EnsureNetConfigLoaded", new JSIL.MethodSignature(null, [], []));
  }, []);

JSIL.MakeInterface(
  "System.Configuration.Internal.IInternalConfigConfigurationFactory", true, [], function ($) {
    $.Method({}, "Create", new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Configuration"), [$asm01.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Object])], []));
    $.Method({}, "NormalizeLocationSubPath", new JSIL.MethodSignature($.String, [$.String, $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")], []));
  }, []);

JSIL.MakeInterface(
  "System.Configuration.Internal.IInternalConfigRoot", true, [], function ($) {
    $.Method({}, "Init", new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost"), $.Boolean], []));
    $.Method({}, "get_IsDesignTime", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "add_ConfigChanged", new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.InternalConfigEventHandler")], []));
    $.Method({}, "remove_ConfigChanged", new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.InternalConfigEventHandler")], []));
    $.Method({}, "add_ConfigRemoved", new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.InternalConfigEventHandler")], []));
    $.Method({}, "remove_ConfigRemoved", new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.InternalConfigEventHandler")], []));
    $.Method({}, "GetSection", new JSIL.MethodSignature($.Object, [$.String, $.String], []));
    $.Method({}, "GetUniqueConfigPath", new JSIL.MethodSignature($.String, [$.String], []));
    $.Method({}, "GetUniqueConfigRecord", new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), [$.String], []));
    $.Method({}, "GetConfigRecord", new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), [$.String], []));
    $.Method({}, "RemoveConfig", new JSIL.MethodSignature(null, [$.String], []));
    $.Property({}, "IsDesignTime");
  }, []);

JSIL.MakeInterface(
  "System.Configuration.Internal.IInternalConfigSettingsFactory", true, [], function ($) {
    $.Method({}, "SetConfigurationSystem", new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigSystem"), $.Boolean], []));
    $.Method({}, "CompleteInit", new JSIL.MethodSignature(null, [], []));
  }, []);

(function InternalConfigConfigurationFactory$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.Internal.InternalConfigConfigurationFactory", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigConfigurationFactory.Create", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Configuration"), [$asm01.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Object])], [])
    )
      .Overrides(0, "Create");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigConfigurationFactory.NormalizeLocationSubPath", 
      new JSIL.MethodSignature($.String, [$.String, $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")], [])
    )
      .Overrides(0, "NormalizeLocationSubPath");

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("System.Configuration.Internal.IInternalConfigConfigurationFactory")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function InternalConfigEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.EventArgs"), "System.Configuration.Internal.InternalConfigEventArgs", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConfigPath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConfigPath", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "_configPath", $.String); 
    $.Property({Static:false, Public:true }, "ConfigPath", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.Configuration.Internal.InternalConfigEventHandler", true, []);

(function InternalConfigHost$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.Internal.InternalConfigHost", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSecondaryRoot", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StaticDeleteStream", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StaticGetStreamNameForConfigSource", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StaticGetStreamVersion", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StaticIsFile", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StaticOpenStreamForRead", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StaticOpenStreamForWrite", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StaticWriteCompleted", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Object, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.CreateConfigurationContext", 
      new JSIL.MethodSignature($.Object, [$.String, $.String], [])
    )
      .Overrides(0, "CreateConfigurationContext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.CreateDeprecatedConfigContext", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    )
      .Overrides(0, "CreateDeprecatedConfigContext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.DecryptSection", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), 
          $asm03.TypeRef("System.Configuration.ProtectedConfigurationSection")
        ], [])
    )
      .Overrides(0, "DecryptSection");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.DeleteStream", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Overrides(0, "DeleteStream");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.EncryptSection", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm03.TypeRef("System.Configuration.ProtectedConfigurationProvider"), 
          $asm03.TypeRef("System.Configuration.ProtectedConfigurationSection")
        ], [])
    )
      .Overrides(0, "EncryptSection");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.get_IsRemote", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_IsRemote");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.get_SupportsChangeNotifications", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_SupportsChangeNotifications");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.get_SupportsLocation", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_SupportsLocation");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.get_SupportsPath", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_SupportsPath");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.get_SupportsRefresh", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_SupportsRefresh");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.GetConfigPathFromLocationSubPath", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    )
      .Overrides(0, "GetConfigPathFromLocationSubPath");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.GetConfigType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$.String, $.Boolean], [])
    )
      .Overrides(0, "GetConfigType");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.GetConfigTypeName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Type")], [])
    )
      .Overrides(0, "GetConfigTypeName");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.GetRestrictedPermissions", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Security.PermissionSet")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    )
      .Overrides(0, "GetRestrictedPermissions");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.GetStreamName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(0, "GetStreamName");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.GetStreamNameForConfigSource", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    )
      .Overrides(0, "GetStreamNameForConfigSource");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.GetStreamVersion", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    )
      .Overrides(0, "GetStreamVersion");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.Impersonate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IDisposable"), [], [])
    )
      .Overrides(0, "Impersonate");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.Init", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), $jsilcore.TypeRef("System.Array", [$.Object])], [])
    )
      .Overrides(0, "Init");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.InitForConfiguration", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    )
      .Overrides(0, "InitForConfiguration");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.IsAboveApplication", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    )
      .Overrides(0, "IsAboveApplication");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.IsConfigRecordRequired", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    )
      .Overrides(0, "IsConfigRecordRequired");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.IsDefinitionAllowed", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition")
        ], [])
    )
      .Overrides(0, "IsDefinitionAllowed");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.IsFile", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    )
      .Overrides(0, "IsFile");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.IsFullTrustSectionWithoutAptcaAllowed", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord")], [])
    )
      .Overrides(0, "IsFullTrustSectionWithoutAptcaAllowed");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.IsInitDelayed", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord")], [])
    )
      .Overrides(0, "IsInitDelayed");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.IsLocationApplicable", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    )
      .Overrides(0, "IsLocationApplicable");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.IsTrustedConfigPath", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    )
      .Overrides(0, "IsTrustedConfigPath");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.OpenStreamForRead", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$.String], [])
    )
      .Overrides(0, "OpenStreamForRead");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.OpenStreamForRead", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$.String, $.Boolean], [])
    )
      .Overrides(0, "OpenStreamForRead");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.OpenStreamForWrite", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    )
      .Overrides(0, "OpenStreamForWrite");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.OpenStreamForWrite", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $.Boolean
        ], [])
    )
      .Overrides(0, "OpenStreamForWrite");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.PrefetchAll", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    )
      .Overrides(0, "PrefetchAll");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.PrefetchSection", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    )
      .Overrides(0, "PrefetchSection");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.RequireCompleteInit", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord")], [])
    )
      .Overrides(0, "RequireCompleteInit");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.StartMonitoringStreamForChanges", 
      new JSIL.MethodSignature($.Object, [$.String, $asm03.TypeRef("System.Configuration.Internal.StreamChangeCallback")], [])
    )
      .Overrides(0, "StartMonitoringStreamForChanges");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.StopMonitoringStreamForChanges", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Configuration.Internal.StreamChangeCallback")], [])
    )
      .Overrides(0, "StopMonitoringStreamForChanges");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.VerifyDefinitionAllowed", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Configuration.ConfigurationAllowDefinition"), 
          $asm03.TypeRef("System.Configuration.ConfigurationAllowExeDefinition"), $asm03.TypeRef("System.Configuration.Internal.IConfigErrorInfo")
        ], [])
    )
      .Overrides(0, "VerifyDefinitionAllowed");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.WriteCompleted", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Object
        ], [])
    )
      .Overrides(0, "WriteCompleted");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.WriteCompleted", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.Object, $.Boolean
        ], [])
    )
      .Overrides(0, "WriteCompleted");

    $.Constant({Static:true , Public:false}, "InvalidAttributesForWrite", 3); 
    $.Field({Static:false, Public:false}, "_configRoot", $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.SupportsChangeNotifications", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.SupportsRefresh", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.SupportsPath", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.SupportsLocation", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigHost.IsRemote", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function InternalConfigRoot$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.Internal.InternalConfigRoot", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AcquireHierarchyLockForRead", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AcquireHierarchyLockForWrite", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_ConfigChanged", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.InternalConfigEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "add_ConfigRemoved", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.InternalConfigEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearResult", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Configuration.BaseConfigurationRecord"), $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FireConfigChanged", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Host", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RootConfigRecord", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.BaseConfigurationRecord"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetConfigRecord", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSection", 
      new JSIL.MethodSignature($.Object, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetUniqueConfigPath", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetUniqueConfigRecord", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.Internal.IInternalConfigRecord"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "hlFindConfigRecord", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Configuration.BaseConfigurationRecord")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnConfigChanged", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.InternalConfigEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnConfigRemoved", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.InternalConfigEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseHierarchyLockForRead", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReleaseHierarchyLockForWrite", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_ConfigChanged", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.InternalConfigEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "remove_ConfigRemoved", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.InternalConfigEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveConfig", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveConfigImpl", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Configuration.BaseConfigurationRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveConfigRecord", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.BaseConfigurationRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigRoot.get_IsDesignTime", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_IsDesignTime");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigRoot.Init", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost"), $.Boolean], [])
    )
      .Overrides(0, "Init");

    $.Field({Static:false, Public:false}, "_host", $asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost")); 
    $.Field({Static:false, Public:false}, "_hierarchyLock", $asm01.TypeRef("System.Threading.ReaderWriterLock")); 
    $.Field({Static:false, Public:false}, "_rootConfigRecord", $asm03.TypeRef("System.Configuration.BaseConfigurationRecord")); 
    $.Field({Static:false, Public:false}, "_isDesignTime", $.Boolean); 
    $.Field({Static:false, Public:false}, "ConfigChanged", $asm03.TypeRef("System.Configuration.Internal.InternalConfigEventHandler")); 
    $.Field({Static:false, Public:false}, "ConfigRemoved", $asm03.TypeRef("System.Configuration.Internal.InternalConfigEventHandler")); 
    $.Property({Static:false, Public:false}, "Host", $asm03.TypeRef("System.Configuration.Internal.IInternalConfigHost"));

    $.Property({Static:false, Public:false}, "RootConfigRecord", $asm03.TypeRef("System.Configuration.BaseConfigurationRecord"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigRoot.IsDesignTime", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("System.Configuration.Internal.IInternalConfigRoot")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function InternalConfigSettingsFactory$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.Internal.InternalConfigSettingsFactory", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigSettingsFactory.CompleteInit", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(0, "CompleteInit");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Configuration.Internal.IInternalConfigSettingsFactory.SetConfigurationSystem", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Configuration.Internal.IInternalConfigSystem"), $.Boolean], [])
    )
      .Overrides(0, "SetConfigurationSystem");

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("System.Configuration.Internal.IInternalConfigSettingsFactory")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.Configuration.Internal.StreamChangeCallback", true, []);

(function WriteFileContext$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Configuration.Internal.WriteFileContext", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AttemptMove", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Complete", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DuplicateFileAttributes", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DuplicateTemplateAttributes", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FileIsWriteLocked", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsWinNT", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TempNewFilename", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceFile", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateWriteAccess", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "SAVING_TIMEOUT", 10000); 
    $.Constant({Static:true , Public:false}, "SAVING_RETRY_INTERVAL", 100); 
    $.Field({Static:true , Public:false}, "_osPlatformDetermined", $.Boolean, false); 
    $.Field({Static:true , Public:false}, "_osPlatform", $asm01.TypeRef("System.PlatformID")); 
    $.Field({Static:false, Public:false}, "_tempFiles", $asm02.TypeRef("System.CodeDom.Compiler.TempFileCollection")); 
    $.Field({Static:false, Public:false}, "_tempNewFilename", $.String); 
    $.Field({Static:false, Public:false}, "_templateFilename", $.String); 
    $.Property({Static:false, Public:false}, "TempNewFilename", $.String);

    $.Property({Static:false, Public:false}, "IsWinNT", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Win32");
(function SafeCryptContextHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeCryptContextHandle", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

(function SafeNativeMemoryHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeNativeMemoryHandle", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDataHandle", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr")], [])
    );

    $.Field({Static:false, Public:false}, "_useLocalFree", $.Boolean); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

(function SafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Win32.SafeNativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

(function UnsafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Win32.UnsafeNativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "CryptAcquireContext", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeCryptContextHandle")]), $.String, 
          $.String, $.UInt32, 
          $.UInt32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CryptProtectData", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Configuration.DATA_BLOB")]), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Configuration.DATA_BLOB")]), $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Configuration.CRYPTPROTECT_PROMPTSTRUCT")]), $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Configuration.DATA_BLOB")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CryptReleaseContext", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("Microsoft.Win32.SafeCryptContextHandle"), $.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CryptUnprotectData", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Configuration.DATA_BLOB")]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Configuration.DATA_BLOB")]), $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Configuration.CRYPTPROTECT_PROMPTSTRUCT")]), $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Configuration.DATA_BLOB")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileAttributesEx", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods/WIN32_FILE_ATTRIBUTE_DATA")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetModuleFileName", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.Runtime.InteropServices.HandleRef"), $asm01.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LocalFree", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [$asm01.TypeRef("System.IntPtr")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MoveFileEx", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Int32
        ], [])
    );

    $.Constant({Static:true , Public:false}, "GetFileExInfoStandard", 0); 
    $.Constant({Static:true , Public:false}, "MOVEFILE_REPLACE_EXISTING", 1); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

(function WIN32_FILE_ATTRIBUTE_DATA$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "Microsoft.Win32.UnsafeNativeMethods/WIN32_FILE_ATTRIBUTE_DATA", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "fileAttributes", $.Int32); 
    $.Field({Static:false, Public:false}, "ftCreationTimeLow", $.UInt32); 
    $.Field({Static:false, Public:false}, "ftCreationTimeHigh", $.UInt32); 
    $.Field({Static:false, Public:false}, "ftLastAccessTimeLow", $.UInt32); 
    $.Field({Static:false, Public:false}, "ftLastAccessTimeHigh", $.UInt32); 
    $.Field({Static:false, Public:false}, "ftLastWriteTimeLow", $.UInt32); 
    $.Field({Static:false, Public:false}, "ftLastWriteTimeHigh", $.UInt32); 
    $.Field({Static:false, Public:false}, "fileSizeHigh", $.UInt32); 
    $.Field({Static:false, Public:false}, "fileSizeLow", $.UInt32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

