/* Generated by JSIL v0.7.6 build 24569. See http://jsil.org/ for more information. */ 
/* Generating type stubs only */ 
var $asm04 = JSIL.DeclareAssembly("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Contracts");
(function PureAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "Microsoft.Contracts.PureAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Class", "Event", "Method", "Property")]; });

})();

(function ContractClassAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "Microsoft.Contracts.ContractClassAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false}, "_typeWithContracts", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Class", "Interface")]; });

})();

(function InvariantMethodAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "Microsoft.Contracts.InvariantMethodAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Method]; });

})();

(function RuntimeContractsAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "Microsoft.Contracts.RuntimeContractsAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Assembly]; });

})();

(function ImmutableAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "Microsoft.Contracts.ImmutableAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Class", "Struct")]; });

})();

(function VerifyAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "Microsoft.Contracts.VerifyAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "_value", $.Boolean); 
    $.Property({Static:false, Public:true }, "Value", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags(
          "Assembly", "Class", "Constructor", "Method", 
          "Property", "Struct"
      )]; });

})();

(function Contract$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Contracts.Contract", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Assert", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Assert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"))
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "AssertOnException", 
      new JSIL.MethodSignature(null, [$.Boolean], ["E"])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["USE_SPECSHARP_ASSEMBLY_REWRITER"]; })
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AssertOnReturn", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["USE_SPECSHARP_ASSEMBLY_REWRITER"]; })
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Assume", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Assume", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"))
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "DebugRequires", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Ensures", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"))
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["USE_SPECSHARP_ASSEMBLY_REWRITER"]; });

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $asm01.TypeRef("System.Predicate`1", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ForAll", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $asm01.TypeRef("System.Predicate`1", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Invariant", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"))
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["USE_SPECSHARP_ASSEMBLY_REWRITER"]; });

    $.ExternalMethod({Static:true , Public:true }, "Old", 
      new JSIL.MethodSignature("!!0", ["!!0"], ["T"])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parameter", 
      new JSIL.MethodSignature("!!0", [$jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["T"])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Requires", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Requires", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Exception")], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Result", 
      new JSIL.MethodSignature("!!0", [], ["T"])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "RewriterEnsures", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "RewriterInvariant", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Throws", 
      new JSIL.MethodSignature(null, [], ["E"])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"))
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["USE_SPECSHARP_ASSEMBLY_REWRITER"]; });

    $.ExternalMethod({Static:true , Public:true }, "ThrowsEnsures", 
      new JSIL.MethodSignature(null, [$.Boolean], ["E"])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"))
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["USE_SPECSHARP_ASSEMBLY_REWRITER"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PreconditionException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Exception"), "Microsoft.Contracts.Contract/PreconditionException", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PostconditionException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Exception"), "Microsoft.Contracts.Contract/PostconditionException", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function InvariantException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Exception"), "Microsoft.Contracts.Contract/InvariantException", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AssertionException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Exception"), "Microsoft.Contracts.Contract/AssertionException", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AssumptionException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Exception"), "Microsoft.Contracts.Contract/AssumptionException", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Diagnostics");
JSIL.DeclareNamespace("System.Diagnostics.Eventing");
(function EventDescriptor$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Diagnostics.Eventing.EventDescriptor", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte, $.Int32, 
          $.Int64
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Channel", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventId", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Level", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Opcode", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Task", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.Field({Static:false, Public:false}, "m_id", $.UInt16); 
    $.Field({Static:false, Public:false}, "m_version", $.Byte); 
    $.Field({Static:false, Public:false}, "m_channel", $.Byte); 
    $.Field({Static:false, Public:false}, "m_level", $.Byte); 
    $.Field({Static:false, Public:false}, "m_opcode", $.Byte); 
    $.Field({Static:false, Public:false}, "m_task", $.UInt16); 
    $.Field({Static:false, Public:false}, "m_keywords", $.Int64); 
    $.Property({Static:false, Public:true }, "EventId", $.Int32);

    $.Property({Static:false, Public:true }, "Version", $.Byte);

    $.Property({Static:false, Public:true }, "Channel", $.Byte);

    $.Property({Static:false, Public:true }, "Level", $.Byte);

    $.Property({Static:false, Public:true }, "Opcode", $.Byte);

    $.Property({Static:false, Public:true }, "Task", $.Int32);

    $.Property({Static:false, Public:true }, "Keywords", $.Int64);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventProvider$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.EventProvider", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Guid")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateActivityId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Guid"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Deregister", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EncodeObject", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $jsilcore.TypeRef("JSIL.Pointer", [$asm04.TypeRef("System.Diagnostics.Eventing.EventProvider/EventData")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EtwEnableCallBack", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Guid")]), $.Int32, 
          $.Byte, $.Int64, 
          $.Int64, $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Void")])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EtwRegister", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetActivityId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Guid"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetLastWriteEventError", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.EventProvider/WriteEventErrorCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEnabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.Byte, $.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetActivityId", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Guid")])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetLastError", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $jsilcore.TypeRef("System.Array", [$.Object])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $.String], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $.Int32, 
          $asm01.TypeRef("System.IntPtr")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteMessageEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Byte, 
          $.Int64
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteMessageEvent", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTransferEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $asm01.TypeRef("System.Guid"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteTransferEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $asm01.TypeRef("System.Guid"), 
          $.Int32, $asm01.TypeRef("System.IntPtr")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "s_basicTypeAllocationBufferSize", 16); 
    $.Constant({Static:true , Public:false}, "s_etwMaxMumberArguments", 32); 
    $.Constant({Static:true , Public:false}, "s_etwAPIMaxStringCount", 8); 
    $.Constant({Static:true , Public:false}, "s_maxEventDataDescriptors", 128); 
    $.Constant({Static:true , Public:false}, "s_traceEventMaximumSize", 65482); 
    $.Constant({Static:true , Public:false}, "s_traceEventMaximumStringSize", 32724); 
    $.Field({Static:false, Public:false}, "m_etwCallback", $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EtwEnableCallback")); 
    $.Field({Static:false, Public:false}, "m_regHandle", $.Int64); 
    $.Field({Static:false, Public:false}, "m_level", $.Byte); 
    $.Field({Static:false, Public:false}, "m_anyKeywordMask", $.Int64); 
    $.Field({Static:false, Public:false}, "m_allKeywordMask", $.Int64); 
    $.Field({Static:false, Public:false}, "m_enabled", $.Int32); 
    $.Field({Static:false, Public:false}, "m_providerId", $asm01.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "m_disposed", $.Int32); 
    $.Field({Static:true , Public:false}, "s_returnCodeSlot", $asm01.TypeRef("System.LocalDataStoreSlot")); 
    $.Field({Static:true , Public:false}, "s_platformNotSupported", $.Boolean); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.EventProvider/WriteEventErrorCode", false, {
    NoError: 0, 
    NoFreeBuffers: 1, 
    EventTooBig: 2
  }, false
);

(function EventData$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Diagnostics.Eventing.EventProvider/EventData", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "DataPointer", $.UInt64); 
    $.Field({Static:false, Public:false}, "Size", $.UInt32); 
    $.Field({Static:false, Public:false}, "Reserved", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.EventProvider/ActivityControl", false, {
    EVENT_ACTIVITY_CTRL_GET_ID: 1, 
    EVENT_ACTIVITY_CTRL_SET_ID: 2, 
    EVENT_ACTIVITY_CTRL_CREATE_ID: 3, 
    EVENT_ACTIVITY_CTRL_GET_SET_ID: 4, 
    EVENT_ACTIVITY_CTRL_CREATE_SET_ID: 5
  }, false
);

(function EventProviderTraceListener$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.Diagnostics.TraceListener"), "System.Diagnostics.Eventing.EventProviderTraceListener", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fail", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Delimiter", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsThreadSafe", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSupportedAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitProvider", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Delimiter", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm02.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm02.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm02.TypeRef("System.Diagnostics.TraceEventType"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm02.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm02.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceTransfer", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $.Int32, $.String, 
          $asm01.TypeRef("System.Guid")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteLine", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "s_nullStringValue", "null"); 
    $.Constant({Static:true , Public:false}, "s_nullStringComaValue", "null,"); 
    $.Constant({Static:true , Public:false}, "s_nullCStringValue", ": null"); 
    $.Constant({Static:true , Public:false}, "s_activityIdString", "activityId="); 
    $.Constant({Static:true , Public:false}, "s_relatedActivityIdString", "relatedActivityId="); 
    $.Constant({Static:true , Public:false}, "s_callStackString", " : CallStack:"); 
    $.Constant({Static:true , Public:false}, "s_optionDelimiter", "delimiter"); 
    $.Constant({Static:true , Public:false}, "s_keyWordMask", 4294967040); 
    $.Constant({Static:true , Public:false}, "s_defaultPayloadSize", 512); 
    $.Field({Static:false, Public:false}, "m_provider", $asm04.TypeRef("System.Diagnostics.Eventing.EventProvider")); 
    $.Field({Static:false, Public:false}, "m_delimiter", $.String); 
    $.Field({Static:false, Public:false}, "m_initializedDelim", $.Int32); 
    $.Field({Static:false, Public:false}, "m_Lock", $.Object); 
    $.Property({Static:false, Public:true }, "Delimiter", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsThreadSafe", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Management");
JSIL.DeclareNamespace("System.Management.Instrumentation");
(function ManagementEntityAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Management.Instrumentation.ManagementEntityAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_External", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Singleton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_External", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Singleton", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "_nounName", $.String); 
    $.Field({Static:false, Public:false}, "_isExternalClass", $.Boolean); 
    $.Field({Static:false, Public:false}, "_isSingleton", $.Boolean); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "External", $.Boolean);

    $.Property({Static:false, Public:true }, "Singleton", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Class]; });

})();

JSIL.MakeEnum(
  "System.Management.Instrumentation.ManagementHostingModel", true, {
    Decoupled: 0, 
    NetworkService: 1, 
    LocalService: 2, 
    LocalSystem: 3
  }, false
);

(function WmiConfigurationAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Management.Instrumentation.WmiConfigurationAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostingGroup", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostingModel", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Management.Instrumentation.ManagementHostingModel"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IdentifyLevel", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceSecurity", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Scope", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityRestriction", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HostingGroup", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HostingModel", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Management.Instrumentation.ManagementHostingModel")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IdentifyLevel", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NamespaceSecurity", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityRestriction", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "_Scope", $.String); 
    $.Field({Static:false, Public:false}, "_SecurityRestriction", $.String); 
    $.Field({Static:false, Public:false}, "_NamespaceSecurity", $.String); 
    $.Field({Static:false, Public:false}, "_HostingModel", $asm04.TypeRef("System.Management.Instrumentation.ManagementHostingModel")); 
    $.Field({Static:false, Public:false}, "_HostingGroup", $.String); 
    $.Field({Static:false, Public:false}, "_IdentifyLevel", $.Boolean); 
    $.Property({Static:false, Public:true }, "SecurityRestriction", $.String);

    $.Property({Static:false, Public:true }, "NamespaceSecurity", $.String);

    $.Property({Static:false, Public:true }, "IdentifyLevel", $.Boolean);

    $.Property({Static:false, Public:true }, "HostingModel", $asm04.TypeRef("System.Management.Instrumentation.ManagementHostingModel"));

    $.Property({Static:false, Public:true }, "HostingGroup", $.String);

    $.Property({Static:false, Public:true }, "Scope", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Assembly]; });

})();

(function ManagementMemberAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Management.Instrumentation.ManagementMemberAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "_Name", $.String); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

(function ManagementNewInstanceAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), "System.Management.Instrumentation.ManagementNewInstanceAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

(function ManagementBindAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Management.Instrumentation.ManagementNewInstanceAttribute"), "System.Management.Instrumentation.ManagementBindAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "_schema", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Schema", $asm01.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

(function ManagementCreateAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Management.Instrumentation.ManagementNewInstanceAttribute"), "System.Management.Instrumentation.ManagementCreateAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

(function ManagementRemoveAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), "System.Management.Instrumentation.ManagementRemoveAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "_schema", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Schema", $asm01.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Method]; });

})();

(function ManagementEnumeratorAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Management.Instrumentation.ManagementNewInstanceAttribute"), "System.Management.Instrumentation.ManagementEnumeratorAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "_schema", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Schema", $asm01.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

(function ManagementProbeAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), "System.Management.Instrumentation.ManagementProbeAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "_schema", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Schema", $asm01.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

(function ManagementTaskAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), "System.Management.Instrumentation.ManagementTaskAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "_schema", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Schema", $asm01.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Method]; });

})();

(function ManagementKeyAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), "System.Management.Instrumentation.ManagementKeyAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

(function ManagementReferenceAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Management.Instrumentation.ManagementReferenceAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "_Type", $.String); 
    $.Property({Static:false, Public:true }, "Type", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Parameter", "Property")]; });

})();

JSIL.MakeEnum(
  "System.Management.Instrumentation.ManagementConfigurationType", true, {
    Apply: 0, 
    OnCommit: 1
  }, false
);

(function ManagementConfigurationAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), "System.Management.Instrumentation.ManagementConfigurationAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Mode", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Management.Instrumentation.ManagementConfigurationType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Mode", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Management.Instrumentation.ManagementConfigurationType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "updateMode", $asm04.TypeRef("System.Management.Instrumentation.ManagementConfigurationType")); 
    $.Field({Static:false, Public:false}, "_schema", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Mode", $asm04.TypeRef("System.Management.Instrumentation.ManagementConfigurationType"));

    $.Property({Static:false, Public:true }, "Schema", $asm01.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

(function ManagementCommitAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), "System.Management.Instrumentation.ManagementCommitAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Method]; });

})();

(function ManagementNameAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Management.Instrumentation.ManagementNameAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "_Name", $.String); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Parameter]; });

})();

(function InstrumentationBaseException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Exception"), "System.Management.Instrumentation.InstrumentationBaseException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function InstrumentationException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Management.Instrumentation.InstrumentationBaseException"), "System.Management.Instrumentation.InstrumentationException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function InstanceNotFoundException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Management.Instrumentation.InstrumentationException"), "System.Management.Instrumentation.InstanceNotFoundException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Diagnostics.Eventing.Reader");
(function EventBookmark$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventBookmark", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BookmarkText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Overrides(0, "GetObjectData")
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "bookmark", $.String); 
    $.Property({Static:false, Public:false}, "BookmarkText", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Runtime.Serialization.ISerializable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.EventLogType", true, {
    Administrative: 0, 
    Operational: 1, 
    Analytical: 2, 
    Debug: 3
  }, false
);

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.EventLogIsolation", true, {
    Application: 0, 
    System: 1, 
    Custom: 2
  }, false
);

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.EventLogMode", true, {
    Circular: 0, 
    AutoBackup: 1, 
    Retain: 2
  }, false
);

(function EventLogConfiguration$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogConfiguration", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsClassicLog", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEnabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogFilePath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogIsolation", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogIsolation"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogMode", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogMode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogType", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumSizeInBytes", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OwningProviderName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderBufferSize", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderControlGuid", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderKeywords", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int64]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderLatency", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderLevel", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderMaximumNumberOfBuffers", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderMinimumNumberOfBuffers", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderNames", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityDescriptor", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SaveChanges", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsEnabled", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LogFilePath", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LogMode", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogMode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaximumSizeInBytes", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProviderKeywords", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Nullable`1", [$.Int64])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProviderLevel", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Nullable`1", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityDescriptor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "handle", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Field({Static:false, Public:false}, "session", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")); 
    $.Field({Static:false, Public:false}, "channelName", $.String); 
    $.Property({Static:false, Public:true }, "LogName", $.String);

    $.Property({Static:false, Public:true }, "LogType", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogType"));

    $.Property({Static:false, Public:true }, "LogIsolation", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogIsolation"));

    $.Property({Static:false, Public:true }, "IsEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "IsClassicLog", $.Boolean);

    $.Property({Static:false, Public:true }, "SecurityDescriptor", $.String);

    $.Property({Static:false, Public:true }, "LogFilePath", $.String);

    $.Property({Static:false, Public:true }, "MaximumSizeInBytes", $.Int64);

    $.Property({Static:false, Public:true }, "LogMode", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogMode"));

    $.Property({Static:false, Public:true }, "OwningProviderName", $.String);

    $.Property({Static:false, Public:true }, "ProviderNames", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Property({Static:false, Public:true }, "ProviderLevel", $asm01.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderKeywords", $asm01.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "ProviderBufferSize", $asm01.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderMinimumNumberOfBuffers", $asm01.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderMaximumNumberOfBuffers", $asm01.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderLatency", $asm01.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderControlGuid", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventLogLink$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogLink", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.String, $.UInt32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChannelId", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsImported", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "channelName", $.String); 
    $.Field({Static:false, Public:false}, "isImported", $.Boolean); 
    $.Field({Static:false, Public:false}, "displayName", $.String); 
    $.Field({Static:false, Public:false}, "channelId", $.UInt32); 
    $.Field({Static:false, Public:false}, "dataReady", $.Boolean); 
    $.Field({Static:false, Public:false}, "pmReference", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Property({Static:false, Public:true }, "LogName", $.String);

    $.Property({Static:false, Public:true }, "IsImported", $.Boolean);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:false}, "ChannelId", $.UInt32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventLogStatus$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogStatus", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StatusCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "channelName", $.String); 
    $.Field({Static:false, Public:false}, "win32ErrorCode", $.Int32); 
    $.Property({Static:false, Public:true }, "LogName", $.String);

    $.Property({Static:false, Public:true }, "StatusCode", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventProperty$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventProperty", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.Field({Static:false, Public:false}, "value", $.Object); 
    $.Property({Static:false, Public:true }, "Value", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventLogPropertySelector$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogPropertySelector", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [], [])
    );

    $.Field({Static:false, Public:false}, "renderContextHandleValues", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Property({Static:false, Public:false}, "Handle", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventRecord$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventRecord", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatDescription", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatDescription", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ActivityId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Bookmark", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keywords", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int64]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeywordsDisplayNames", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Level", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LevelDisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LogName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MachineName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Opcode", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int16]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OpcodeDisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProcessId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Qualifiers", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RecordId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int64]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RelatedActivityId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Task", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TaskDisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ThreadId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TimeCreated", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.DateTime")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UserId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Principal.SecurityIdentifier"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Version", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Version", $asm01.TypeRef("System.Nullable`1", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Level", $asm01.TypeRef("System.Nullable`1", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Task", $asm01.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Opcode", $asm01.TypeRef("System.Nullable`1", [$.Int16]));

    $.Property({Static:false, Public:true , Virtual:true }, "Keywords", $asm01.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "RecordId", $asm01.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderId", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "LogName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProcessId", $asm01.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "ThreadId", $asm01.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "MachineName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "UserId", $asm01.TypeRef("System.Security.Principal.SecurityIdentifier"));

    $.Property({Static:false, Public:true , Virtual:true }, "TimeCreated", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ActivityId", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "RelatedActivityId", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Qualifiers", $asm01.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "LevelDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "OpcodeDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "TaskDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "KeywordsDisplayNames", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "Bookmark", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventKeyword$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventKeyword", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int64, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int64, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "value", $.Int64); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "displayName", $.String); 
    $.Field({Static:false, Public:false}, "dataReady", $.Boolean); 
    $.Field({Static:false, Public:false}, "pmReference", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int64);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventLevel$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLevel", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "value", $.Int32); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "displayName", $.String); 
    $.Field({Static:false, Public:false}, "dataReady", $.Boolean); 
    $.Field({Static:false, Public:false}, "pmReference", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventLogRecord$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"), "System.Diagnostics.Eventing.Reader.EventLogRecord", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), 
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatDescription", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatDescription", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ActivityId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Bookmark", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ContainerLog", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keywords", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int64]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeywordsDisplayNames", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Level", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LevelDisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LogName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MachineName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MatchedQueryIds", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Opcode", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int16]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OpcodeDisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProcessId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Qualifiers", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RecordId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int64]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RelatedActivityId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Task", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TaskDisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ThreadId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TimeCreated", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.DateTime")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UserId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Principal.SecurityIdentifier"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Version", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBookmarkHandleFromBookmark", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetPropertyValues", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IList`1", [$.Object]), [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogPropertySelector")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareSystemData", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "SYSTEM_PROPERTY_COUNT", 18); 
    $.Field({Static:false, Public:false}, "handle", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute")); 
    $.Field({Static:false, Public:false}, "session", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")); 
    $.Field({Static:false, Public:false}, "systemProperties", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.NativeWrapper/SystemProperties")); 
    $.Field({Static:false, Public:false}, "containerChannel", $.String); 
    $.Field({Static:false, Public:false}, "matchedQueryIds", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Field({Static:false, Public:false}, "levelName", $.String); 
    $.Field({Static:false, Public:false}, "taskName", $.String); 
    $.Field({Static:false, Public:false}, "opcodeName", $.String); 
    $.Field({Static:false, Public:false}, "keywordsNames", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])); 
    $.Field({Static:false, Public:false}, "levelNameReady", $.Boolean); 
    $.Field({Static:false, Public:false}, "taskNameReady", $.Boolean); 
    $.Field({Static:false, Public:false}, "opcodeNameReady", $.Boolean); 
    $.Field({Static:false, Public:false}, "cachedMetadataInformation", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation")); 
    $.Property({Static:false, Public:false}, "Handle", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Version", $asm01.TypeRef("System.Nullable`1", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Qualifiers", $asm01.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Level", $asm01.TypeRef("System.Nullable`1", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Task", $asm01.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Opcode", $asm01.TypeRef("System.Nullable`1", [$.Int16]));

    $.Property({Static:false, Public:true , Virtual:true }, "Keywords", $asm01.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "RecordId", $asm01.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderId", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "LogName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProcessId", $asm01.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "ThreadId", $asm01.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "MachineName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "UserId", $asm01.TypeRef("System.Security.Principal.SecurityIdentifier"));

    $.Property({Static:false, Public:true , Virtual:true }, "TimeCreated", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ActivityId", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "RelatedActivityId", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true }, "ContainerLog", $.String);

    $.Property({Static:false, Public:true }, "MatchedQueryIds", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Bookmark", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"));

    $.Property({Static:false, Public:true , Virtual:true }, "LevelDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "OpcodeDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "TaskDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "KeywordsDisplayNames", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventLogReader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogReader", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.PathType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CancelReading", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_BatchSize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogStatus", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogStatus")]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetNextBatch", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.TimeSpan")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ReadEvent", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadEvent", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"), [$asm01.TypeRef("System.TimeSpan")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Seek", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Seek", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"), $.Int64], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Seek", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.SeekOrigin"), $.Int64], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SeekCommon", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SeekReset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_BatchSize", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "eventQuery", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery")); 
    $.Field({Static:false, Public:false}, "batchSize", $.Int32); 
    $.Field({Static:false, Public:false}, "handle", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Field({Static:false, Public:false}, "eventsBuffer", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.IntPtr")])); 
    $.Field({Static:false, Public:false}, "currentIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "eventCount", $.Int32); 
    $.Field({Static:false, Public:false}, "isEof", $.Boolean); 
    $.Field({Static:false, Public:false}, "cachedMetadataInformation", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation")); 
    $.Property({Static:false, Public:true }, "BatchSize", $.Int32);

    $.Property({Static:false, Public:true }, "LogStatus", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogStatus")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventLogWatcher$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogWatcher", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_EventRecordWritten", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.EventHandler`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Enabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleEventsRequestCompletion", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IssueCallback", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_EventRecordWritten", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.EventHandler`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RequestEvents", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Enabled", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartSubscribing", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "StopSubscribing", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SubscribedEventsAvailableCallback", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "EventRecordWritten", $asm01.TypeRef("System.EventHandler`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")])); 
    $.Field({Static:false, Public:false}, "eventQuery", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery")); 
    $.Field({Static:false, Public:false}, "bookmark", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")); 
    $.Field({Static:false, Public:false}, "readExistingEvents", $.Boolean); 
    $.Field({Static:false, Public:false}, "handle", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Field({Static:false, Public:false}, "eventsBuffer", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.IntPtr")])); 
    $.Field({Static:false, Public:false}, "numEventsInBuffer", $.Int32); 
    $.Field({Static:false, Public:false}, "isSubscribing", $.Boolean); 
    $.Field({Static:false, Public:false}, "callbackThreadId", $.Int32); 
    $.Field({Static:false, Public:false}, "subscriptionWaitHandle", $asm01.TypeRef("System.Threading.AutoResetEvent")); 
    $.Field({Static:false, Public:false}, "unregisterDoneHandle", $asm01.TypeRef("System.Threading.AutoResetEvent")); 
    $.Field({Static:false, Public:false}, "registeredWaitHandle", $asm01.TypeRef("System.Threading.RegisteredWaitHandle")); 
    $.Field({Static:false, Public:false}, "cachedMetadataInformation", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation")); 
    $.Field({Static:false, Public:false}, "asyncException", $asm01.TypeRef("System.Exception")); 
    $.Property({Static:false, Public:true }, "Enabled", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventRecordWrittenEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.EventArgs"), "System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventRecord", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"), [], [])
    );

    $.Field({Static:false, Public:false}, "record", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord")); 
    $.Field({Static:false, Public:false}, "exception", $asm01.TypeRef("System.Exception")); 
    $.Property({Static:false, Public:true }, "EventRecord", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"));

    $.Property({Static:false, Public:true }, "EventException", $asm01.TypeRef("System.Exception"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventLogQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogQuery", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.PathType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Path", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Query", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReverseDirection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Session", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ThePathType", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TolerateQueryErrors", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReverseDirection", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Session", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TolerateQueryErrors", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "query", $.String); 
    $.Field({Static:false, Public:false}, "path", $.String); 
    $.Field({Static:false, Public:false}, "session", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")); 
    $.Field({Static:false, Public:false}, "pathType", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.PathType")); 
    $.Field({Static:false, Public:false}, "tolerateErrors", $.Boolean); 
    $.Field({Static:false, Public:false}, "reverseDirection", $.Boolean); 
    $.Property({Static:false, Public:true }, "Session", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"));

    $.Property({Static:false, Public:true }, "TolerateQueryErrors", $.Boolean);

    $.Property({Static:false, Public:true }, "ReverseDirection", $.Boolean);

    $.Property({Static:false, Public:false}, "Path", $.String);

    $.Property({Static:false, Public:false}, "ThePathType", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.PathType"));

    $.Property({Static:false, Public:false}, "Query", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventLogHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Runtime.InteropServices.SafeHandle"), "System.Diagnostics.Eventing.Reader.EventLogHandle", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

(function EventLogPermissionHolder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogPermissionHolder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetEventLogPermission", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Diagnostics.EventLogPermission"), [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.SessionAuthentication", true, {
    Default: 0, 
    Negotiate: 1, 
    Kerberos: 2, 
    Ntlm: 3
  }, false
);

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.PathType", true, {
    LogName: 1, 
    FilePath: 2
  }, false
);

(function EventLogSession$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogSession", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm01.TypeRef("System.Security.SecureString"), 
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.SessionAuthentication")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CancelCurrentOperations", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearLog", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearLog", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ExportLog", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportLog", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportLogAndMessages", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportLogAndMessages", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String, $.String, 
          $.Boolean, $asm01.TypeRef("System.Globalization.CultureInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GlobalSession", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLogInformation", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogInformation"), [$.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.PathType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLogNames", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetProviderNames", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetupSystemContext", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetupUserContext", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.Field({Static:false, Public:false}, "renderContextHandleSystem", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Field({Static:false, Public:false}, "renderContextHandleUser", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Field({Static:false, Public:false}, "server", $.String); 
    $.Field({Static:false, Public:false}, "user", $.String); 
    $.Field({Static:false, Public:false}, "domain", $.String); 
    $.Field({Static:false, Public:false}, "logOnType", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.SessionAuthentication")); 
    $.Field({Static:false, Public:false}, "handle", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Field({Static:true , Public:false}, "globalSession", $.Type); 
    $.Property({Static:false, Public:false}, "Handle", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Property({Static:true , Public:true }, "GlobalSession", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventMetadata$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventMetadata", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte, $.Int16, 
          $.Int64, $.String, 
          $.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Level", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogLink", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Opcode", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Task", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventTask"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Template", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.Field({Static:false, Public:false}, "id", $.Int64); 
    $.Field({Static:false, Public:false}, "version", $.Byte); 
    $.Field({Static:false, Public:false}, "channelId", $.Byte); 
    $.Field({Static:false, Public:false}, "level", $.Byte); 
    $.Field({Static:false, Public:false}, "opcode", $.Int16); 
    $.Field({Static:false, Public:false}, "task", $.Int32); 
    $.Field({Static:false, Public:false}, "keywords", $.Int64); 
    $.Field({Static:false, Public:false}, "template", $.String); 
    $.Field({Static:false, Public:false}, "description", $.String); 
    $.Field({Static:false, Public:false}, "pmReference", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
    $.Property({Static:false, Public:true }, "Id", $.Int64);

    $.Property({Static:false, Public:true }, "Version", $.Byte);

    $.Property({Static:false, Public:true }, "LogLink", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink"));

    $.Property({Static:false, Public:true }, "Level", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel"));

    $.Property({Static:false, Public:true }, "Opcode", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode"));

    $.Property({Static:false, Public:true }, "Task", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventTask"));

    $.Property({Static:false, Public:true }, "Keywords", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]));

    $.Property({Static:false, Public:true }, "Template", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventOpcode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventOpcode", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "value", $.Int32); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "displayName", $.String); 
    $.Field({Static:false, Public:false}, "dataReady", $.Boolean); 
    $.Field({Static:false, Public:false}, "pmReference", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventTask$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventTask", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $asm01.TypeRef("System.Guid")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventGuid", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Guid"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "value", $.Int32); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "displayName", $.String); 
    $.Field({Static:false, Public:false}, "guid", $asm01.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "dataReady", $.Boolean); 
    $.Field({Static:false, Public:false}, "pmReference", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true }, "EventGuid", $asm01.TypeRef("System.Guid"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventLogException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Exception"), "System.Diagnostics.Eventing.Reader.EventLogException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "errorCode", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.ImplementInterfaces(
      /* 2 */ $asm01.TypeRef("System.Runtime.Serialization.ISerializable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventLogNotFoundException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), "System.Diagnostics.Eventing.Reader.EventLogNotFoundException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventLogReadingException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), "System.Diagnostics.Eventing.Reader.EventLogReadingException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventLogProviderDisabledException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), "System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventLogInvalidDataException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), "System.Diagnostics.Eventing.Reader.EventLogInvalidDataException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EventLogInformation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.EventLogInformation", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), $.String, 
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.PathType")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreationTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.DateTime")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FileSize", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int64]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLogFull", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Boolean]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastAccessTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.DateTime")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastWriteTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.DateTime")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OldestRecordNumber", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int64]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecordCount", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int64]), [], [])
    );

    $.Field({Static:false, Public:false}, "creationTime", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.DateTime")])); 
    $.Field({Static:false, Public:false}, "lastAccessTime", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.DateTime")])); 
    $.Field({Static:false, Public:false}, "lastWriteTime", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.DateTime")])); 
    $.Field({Static:false, Public:false}, "fileSize", $asm01.TypeRef("System.Nullable`1", [$.Int64])); 
    $.Field({Static:false, Public:false}, "fileAttributes", $asm01.TypeRef("System.Nullable`1", [$.Int32])); 
    $.Field({Static:false, Public:false}, "recordCount", $asm01.TypeRef("System.Nullable`1", [$.Int64])); 
    $.Field({Static:false, Public:false}, "oldestRecordNumber", $asm01.TypeRef("System.Nullable`1", [$.Int64])); 
    $.Field({Static:false, Public:false}, "isLogFull", $asm01.TypeRef("System.Nullable`1", [$.Boolean])); 
    $.Property({Static:false, Public:true }, "CreationTime", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "LastAccessTime", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "LastWriteTime", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "FileSize", $asm01.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "Attributes", $asm01.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "RecordCount", $asm01.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "OldestRecordNumber", $asm01.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "IsLogFull", $asm01.TypeRef("System.Nullable`1", [$.Boolean]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NativeWrapper$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.NativeWrapper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertFileTimeToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtVariant")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToAnsiString", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtVariant")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToBinaryArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtVariant")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToGuid", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Guid"), [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtVariant")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToIntArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtVariant")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ConvertToObject", 
      new JSIL.MethodSignature($.Object, [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtVariant")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToObject", 
      new JSIL.MethodSignature($.Object, [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtVariant"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtVariantType")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSafeHandle", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtVariant")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSid", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Principal.SecurityIdentifier"), [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtVariant")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToString", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtVariant")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToStringArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtVariant")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtArchiveExportedLog", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtCancel", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtClearLog", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtClose", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtCreateBookmark", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$.String], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtCreateRenderContext", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtRenderContextFlags")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtExportLog", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.String, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtFormatMessage", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.UInt32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtFormatMessageFormatDescription", 
      new JSIL.MethodSignature($.String, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtFormatMessageRenderKeywords", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtFormatMessageFlags")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtFormatMessageRenderName", 
      new JSIL.MethodSignature($.String, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtFormatMessageFlags")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetChannelConfigProperty", 
      new JSIL.MethodSignature($.Object, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtChannelConfigPropertyId")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetEventInfo", 
      new JSIL.MethodSignature($.Object, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtEventPropertyId")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetEventMetadataProperty", 
      new JSIL.MethodSignature($.Object, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtEventMetadataPropertyId")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetLogInfo", 
      new JSIL.MethodSignature($.Object, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtLogPropertyId")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetObjectArrayProperty", 
      new JSIL.MethodSignature($.Object, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetObjectArraySize", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetPublisherMetadataProperty", 
      new JSIL.MethodSignature($.Object, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtPublisherMetadataPropertyId")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EvtGetPublisherMetadataPropertyHandle", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtPublisherMetadataPropertyId")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetQueryInfo", 
      new JSIL.MethodSignature($.Object, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtQueryPropertyId")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtNext", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.IntPtr")]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtNextChannelPath", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtNextEventMetadata", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtNextPublisherId", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenChannelConfig", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenChannelEnum", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenEventMetadataEnum", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenLog", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.PathType")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenProviderEnum", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenProviderMetadata", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenSession", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtLoginClass"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtRpcLogin")]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtQuery", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtRender", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtRenderFlags"), $asm01.TypeRef("System.Text.StringBuilder")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtRenderBookmark", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtRenderBufferWithContextSystem", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtRenderFlags"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.NativeWrapper/SystemProperties"), 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtRenderBufferWithContextUserOrValues", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IList`1", [$.Object]), [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtSaveChannelConfig", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtSeek", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int64, 
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtSeekFlags")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtSetChannelConfigProperty", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtChannelConfigPropertyId"), 
          $.Object
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtSubscribe", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), 
          $.String, $.String, 
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr"), $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtUpdateBookmark", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_platformNotSupported", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SystemProperties$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.NativeWrapper/SystemProperties", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "filled", $.Boolean); 
    $.Field({Static:false, Public:true }, "Id", $asm01.TypeRef("System.Nullable`1", [$.UInt16])); 
    $.Field({Static:false, Public:true }, "Version", $asm01.TypeRef("System.Nullable`1", [$.Byte])); 
    $.Field({Static:false, Public:true }, "Qualifiers", $asm01.TypeRef("System.Nullable`1", [$.UInt16])); 
    $.Field({Static:false, Public:true }, "Level", $asm01.TypeRef("System.Nullable`1", [$.Byte])); 
    $.Field({Static:false, Public:true }, "Task", $asm01.TypeRef("System.Nullable`1", [$.UInt16])); 
    $.Field({Static:false, Public:true }, "Opcode", $asm01.TypeRef("System.Nullable`1", [$.Byte])); 
    $.Field({Static:false, Public:true }, "Keywords", $asm01.TypeRef("System.Nullable`1", [$.UInt64])); 
    $.Field({Static:false, Public:true }, "RecordId", $asm01.TypeRef("System.Nullable`1", [$.UInt64])); 
    $.Field({Static:false, Public:true }, "ProviderName", $.String); 
    $.Field({Static:false, Public:true }, "ProviderId", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")])); 
    $.Field({Static:false, Public:true }, "ChannelName", $.String); 
    $.Field({Static:false, Public:true }, "ProcessId", $asm01.TypeRef("System.Nullable`1", [$.UInt32])); 
    $.Field({Static:false, Public:true }, "ThreadId", $asm01.TypeRef("System.Nullable`1", [$.UInt32])); 
    $.Field({Static:false, Public:true }, "ComputerName", $.String); 
    $.Field({Static:false, Public:true }, "UserId", $asm01.TypeRef("System.Security.Principal.SecurityIdentifier")); 
    $.Field({Static:false, Public:true }, "TimeCreated", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.DateTime")])); 
    $.Field({Static:false, Public:true }, "ActivityId", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")])); 
    $.Field({Static:false, Public:true }, "RelatedActivityId", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Guid")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ProviderMetadata$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.ProviderMetadata", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), 
          $asm01.TypeRef("System.Globalization.CultureInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), 
          $asm01.TypeRef("System.Globalization.CultureInfo"), $.String
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckReleased", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "FindStandardKeywordDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindStandardLevelDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindStandardOpcodeDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindStandardTaskDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Events", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventMetadata")]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HelpLink", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Uri"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Guid"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Levels", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogLinks", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink")]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MessageFilePath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Opcodes", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParameterFilePath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProviderMessageID", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResourceFilePath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Tasks", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProviderListProperty", 
      new JSIL.MethodSignature($.Object, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtPublisherMetadataPropertyId")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.Field({Static:false, Public:false}, "handle", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Field({Static:false, Public:false}, "defaultProviderHandle", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Field({Static:false, Public:false}, "session", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")); 
    $.Field({Static:false, Public:false}, "providerName", $.String); 
    $.Field({Static:false, Public:false}, "cultureInfo", $asm01.TypeRef("System.Globalization.CultureInfo")); 
    $.Field({Static:false, Public:false}, "logFilePath", $.String); 
    $.Field({Static:false, Public:false}, "levels", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")])); 
    $.Field({Static:false, Public:false}, "opcodes", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")])); 
    $.Field({Static:false, Public:false}, "tasks", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")])); 
    $.Field({Static:false, Public:false}, "keywords", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")])); 
    $.Field({Static:false, Public:false}, "standardLevels", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")])); 
    $.Field({Static:false, Public:false}, "standardOpcodes", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")])); 
    $.Field({Static:false, Public:false}, "standardTasks", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")])); 
    $.Field({Static:false, Public:false}, "standardKeywords", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")])); 
    $.Field({Static:false, Public:false}, "channelReferences", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink")])); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Property({Static:false, Public:false}, "Handle", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Id", $asm01.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "MessageFilePath", $.String);

    $.Property({Static:false, Public:true }, "ResourceFilePath", $.String);

    $.Property({Static:false, Public:true }, "ParameterFilePath", $.String);

    $.Property({Static:false, Public:true }, "HelpLink", $asm02.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false}, "ProviderMessageID", $.UInt32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true }, "LogLinks", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink")]));

    $.Property({Static:false, Public:true }, "Levels", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")]));

    $.Property({Static:false, Public:true }, "Opcodes", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")]));

    $.Property({Static:false, Public:true }, "Keywords", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]));

    $.Property({Static:false, Public:true }, "Tasks", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")]));

    $.Property({Static:false, Public:true }, "Events", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventMetadata")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.ProviderMetadata/ObjectTypeName", false, {
    Level: 0, 
    Opcode: 1, 
    Task: 2, 
    Keyword: 3
  }, false
);

(function ProviderMetadataCachedInformation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCacheEntry", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeleteCacheEntry", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushOldestEntry", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetFormatDescription", 
      new JSIL.MethodSignature($.String, [$.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetFormatDescription", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetKeywordDisplayNames", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [$.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetLevelDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetOpcodeDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetProviderMetadata", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"), [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTaskDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IsCacheFull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsProviderinCache", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateCacheValueInfoForHit", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/CacheItem")], [])
    );

    $.Field({Static:false, Public:false}, "cache", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/CacheItem")])); 
    $.Field({Static:false, Public:false}, "maximumCacheSize", $.Int32); 
    $.Field({Static:false, Public:false}, "session", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")); 
    $.Field({Static:false, Public:false}, "logfile", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ProviderMetadataId$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Globalization.CultureInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TheCultureInfo", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Globalization.CultureInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "providerName", $.String); 
    $.Field({Static:false, Public:false}, "cultureInfo", $asm01.TypeRef("System.Globalization.CultureInfo")); 
    $.Property({Static:false, Public:true }, "ProviderName", $.String);

    $.Property({Static:false, Public:true }, "TheCultureInfo", $asm01.TypeRef("System.Globalization.CultureInfo"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CacheItem$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/CacheItem", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderMetadata", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TheTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TheTime", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.Field({Static:false, Public:false}, "pm", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
    $.Field({Static:false, Public:false}, "theTime", $asm01.TypeRef("System.DateTime")); 
    $.Property({Static:false, Public:true }, "TheTime", $asm01.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "ProviderMetadata", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CoTaskMemUnicodeSafeHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Runtime.InteropServices.SafeHandle"), "System.Diagnostics.Eventing.Reader.CoTaskMemUnicodeSafeHandle", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemory", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMemory", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

(function CoTaskMemSafeHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Runtime.InteropServices.SafeHandle"), "System.Diagnostics.Eventing.Reader.CoTaskMemSafeHandle", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemory", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMemory", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.StandardEventLevel", true, {
    LogAlways: 0, 
    Critical: 1, 
    Error: 2, 
    Warning: 3, 
    Informational: 4, 
    Verbose: 5
  }, false
);

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.StandardEventTask", true, {
    None: 0
  }, false
);

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.StandardEventOpcode", true, {
    Info: 0, 
    Start: 1, 
    Stop: 2, 
    DataCollectionStart: 3, 
    DataCollectionStop: 4, 
    Extension: 5, 
    Reply: 6, 
    Resume: 7, 
    Suspend: 8, 
    Send: 9, 
    Receive: 240
  }, false
);

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.StandardEventKeywords", true, {
    None: 0, 
    WdiContext: 562949953421312, 
    WdiDiagnostic: 1125899906842624, 
    Sqm: 2251799813685248, 
    AuditFailure: 4503599627370496, 
    CorrelationHint: 4503599627370496, 
    AuditSuccess: 9007199254740992, 
    EventLogClassic: 36028797018963968
  }, true
);

JSIL.MakeDelegate("System.Action", true, []);

JSIL.MakeDelegate("System.Action`2", true, ["T1", "T2"]);

JSIL.MakeDelegate("System.Action`3", true, ["T1", "T2", "T3"]);

JSIL.MakeDelegate("System.Action`4", true, ["T1", "T2", "T3", "T4"]);

JSIL.MakeDelegate("System.Func`1", true, ["TResult"]);

JSIL.MakeDelegate("System.Func`2", true, ["T", "TResult"]);

JSIL.MakeDelegate("System.Func`3", true, ["T1", "T2", "TResult"]);

JSIL.MakeDelegate("System.Func`4", true, ["T1", "T2", "T3", "TResult"]);

JSIL.MakeDelegate("System.Func`5", true, [
    "T1", "T2", "T3", "T4", 
    "TResult"
  ]);

JSIL.DeclareNamespace("System.Linq");
JSIL.DeclareNamespace("System.Linq.Expressions");
JSIL.MakeEnum(
  "System.Linq.Expressions.ExpressionType", true, {
    Add: 0, 
    AddChecked: 1, 
    And: 2, 
    AndAlso: 3, 
    ArrayLength: 4, 
    ArrayIndex: 5, 
    Call: 6, 
    Coalesce: 7, 
    Conditional: 8, 
    Constant: 9, 
    Convert: 10, 
    ConvertChecked: 11, 
    Divide: 12, 
    Equal: 13, 
    ExclusiveOr: 14, 
    GreaterThan: 15, 
    GreaterThanOrEqual: 16, 
    Invoke: 17, 
    Lambda: 18, 
    LeftShift: 19, 
    LessThan: 20, 
    LessThanOrEqual: 21, 
    ListInit: 22, 
    MemberAccess: 23, 
    MemberInit: 24, 
    Modulo: 25, 
    Multiply: 26, 
    MultiplyChecked: 27, 
    Negate: 28, 
    UnaryPlus: 29, 
    NegateChecked: 30, 
    New: 31, 
    NewArrayInit: 32, 
    NewArrayBounds: 33, 
    Not: 34, 
    NotEqual: 35, 
    Or: 36, 
    OrElse: 37, 
    Parameter: 38, 
    Power: 39, 
    Quote: 40, 
    RightShift: 41, 
    Subtract: 42, 
    SubtractChecked: 43, 
    TypeAs: 44, 
    TypeIs: 45
  }, false
);

(function Expression$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Expressions.Expression", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddChecked", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddChecked", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "And", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "And", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AndAlso", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AndAlso", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ApplyTypeArgs", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreAssignable", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreReferenceAssignable", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayLength", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Bind", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm01.TypeRef("System.Reflection.MemberInfo"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Bind", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm01.TypeRef("System.Reflection.MethodInfo"), $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $asm01.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $asm01.TypeRef("System.Reflection.MethodInfo"), 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $asm01.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm01.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodInfo"), $asm01.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Coalesce", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm04.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Coalesce", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Condition", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ConditionalExpression"), [
          $.Type, $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Constant", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ConstantExpression"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Constant", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ConstantExpression"), [$.Object, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $.Type, $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertChecked", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertChecked", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $.Type, $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ElementInit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ElementInit"), [$asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ElementInit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ElementInit"), [$asm01.TypeRef("System.Reflection.MethodInfo"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equal", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equal", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOr", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOr", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Field", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm01.TypeRef("System.Reflection.FieldInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Field", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindBestMethod", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Reflection.MethodInfo")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindConversionOperator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.MethodInfo")]), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindMethod", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [
          $asm01.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $asm01.TypeRef("System.Reflection.BindingFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetActionType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetComparisonOperator", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEqualityComparisonOperator", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFuncType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedBinaryOperator", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $asm01.TypeRef("System.Reflection.MethodInfo"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedCoercionOperator", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedUnaryOperator", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNonNullableType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNullableType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProperty", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.PropertyInfo"), [$asm01.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type"), $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperator", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperatorOrThrow", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedCoercion", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedCoercionOrThrow", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedUnaryOperator", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedUnaryOperatorOrThrow", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasBuiltInEqualityOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasIdentityPrimitiveOrNullableConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasReferenceConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Invoke", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.InvocationExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Invoke", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.InvocationExpression"), [$.Type, $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsArithmetic", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBool", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCompatible", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsConvertible", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIdentityConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitBoxingConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitlyConvertible", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitNullableConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitNumericConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitReferenceConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInteger", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIntegerOrBool", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLiftingConditionalLogicalOperator", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Reflection.MethodInfo"), $asm04.TypeRef("System.Linq.Expressions.ExpressionType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullableType", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullComparison", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullConstant", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNumeric", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSameOrSubclass", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnSigned", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidLiftedConditionalLogicalOperator", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$.Type, $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])], ["TDelegate"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$.Type, $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])], ["TDelegate"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm01.TypeRef("System.Type"), $.Type, 
          $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm01.TypeRef("System.Type"), $.Type, 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.LambdaExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "LeftShift", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "LeftShift", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm01.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm01.TypeRef("System.Reflection.MemberInfo"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm01.TypeRef("System.Reflection.MethodInfo"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm04.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm04.TypeRef("System.Linq.Expressions.NewExpression"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ListInitExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.NewExpression"), $asm01.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ListInitExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.NewExpression"), $asm01.TypeRef("System.Reflection.MethodInfo"), 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm04.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm04.TypeRef("System.Linq.Expressions.NewExpression"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $.Boolean, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $.Boolean, 
          $asm01.TypeRef("System.Reflection.MethodInfo"), $asm04.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeMemberAccess", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm01.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeUnary", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeUnary", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm01.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm01.TypeRef("System.Reflection.MemberInfo"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm01.TypeRef("System.Reflection.MethodInfo"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberInit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberInitExpression"), [$asm04.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberInit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberInitExpression"), [$asm04.TypeRef("System.Linq.Expressions.NewExpression"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Modulo", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Modulo", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyChecked", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyChecked", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm01.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NegateChecked", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NegateChecked", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm01.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.NewExpression"), [$asm01.TypeRef("System.Reflection.ConstructorInfo"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.NewExpression"), [$asm01.TypeRef("System.Reflection.ConstructorInfo"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.NewExpression"), [
          $asm01.TypeRef("System.Reflection.ConstructorInfo"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]), 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Reflection.MemberInfo")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.NewExpression"), [
          $asm01.TypeRef("System.Reflection.ConstructorInfo"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.MemberInfo")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.NewExpression"), [$asm01.TypeRef("System.Reflection.ConstructorInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.NewExpression"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewArrayBounds", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm01.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewArrayBounds", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewArrayInit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm01.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewArrayInit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Not", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Not", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm01.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEqual", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEqual", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Or", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Or", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "OrElse", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "OrElse", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parameter", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm01.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterIsAssignable", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.ParameterInfo"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Power", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Power", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm01.TypeRef("System.Reflection.PropertyInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm01.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "PropertyOrField", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Quote", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "RightShift", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "RightShift", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubtractChecked", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubtractChecked", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeAs", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeIs", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.TypeBinaryExpression"), [$.Type, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnaryPlus", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnaryPlus", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm01.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateAnonymousTypeMember", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateArgumentTypes", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateBoolArg", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCallArgs", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm01.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCallInstanceType", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCoalesceArgTypes", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateConvertibleArg", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateElementInitAddMethodInfo", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateGettableFieldOrPropertyMember", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateIntegerArg", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateIntegerOrBoolArg", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateLambdaArgs", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateLift", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateListInitArgs", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateMemberInitArgs", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateMethodInfo", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateNewArgs", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.ConstructorInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])]), 
          $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm01.TypeRef("System.Reflection.MemberInfo")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateNewArgs", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.ConstructorInfo"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateNumericArg", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateOperator", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateParamswithOperandsOrThrow", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSameArgTypes", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSettableFieldOrPropertyMember", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateType", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateUserDefinedConditionalLogicOperator", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.Field({Static:false, Public:false}, "nodeType", $asm04.TypeRef("System.Linq.Expressions.ExpressionType")); 
    $.Field({Static:false, Public:false}, "type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:true , Public:false}, "lambdaTypes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "funcTypes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "actionTypes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])); 
    $.Property({Static:false, Public:true }, "NodeType", $asm04.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function BinaryExpression$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.BinaryExpression", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Reflection.MethodInfo"), 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm04.TypeRef("System.Linq.Expressions.LambdaExpression"), 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Reflection.MethodInfo"), 
          $asm04.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Conversion", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.LambdaExpression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOperator", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "left", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false}, "right", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false}, "method", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "conversion", $asm04.TypeRef("System.Linq.Expressions.LambdaExpression")); 
    $.Property({Static:false, Public:true }, "Left", $asm04.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Right", $asm04.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Method", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "Conversion", $asm04.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConditionalExpression$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.ConditionalExpression", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IfFalse", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IfTrue", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.Field({Static:false, Public:false}, "test", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false}, "ifTrue", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false}, "ifFalse", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:true }, "Test", $asm04.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "IfTrue", $asm04.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "IfFalse", $asm04.TypeRef("System.Linq.Expressions.Expression"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Linq.Expressions.MemberBindingType", true, {
    Assignment: 0, 
    MemberBinding: 1, 
    ListBinding: 2
  }, false
);

(function MemberBinding$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Expressions.MemberBinding", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.MemberBindingType"), $asm01.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BindingType", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberBindingType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Member", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MemberInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "type", $asm04.TypeRef("System.Linq.Expressions.MemberBindingType")); 
    $.Field({Static:false, Public:false}, "member", $asm01.TypeRef("System.Reflection.MemberInfo")); 
    $.Property({Static:false, Public:true }, "BindingType", $asm04.TypeRef("System.Linq.Expressions.MemberBindingType"));

    $.Property({Static:false, Public:true }, "Member", $asm01.TypeRef("System.Reflection.MemberInfo"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function MemberAssignment$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.MemberBinding"), "System.Linq.Expressions.MemberAssignment", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.MemberInfo"), $asm04.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.Field({Static:false, Public:false}, "expression", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:true }, "Expression", $asm04.TypeRef("System.Linq.Expressions.Expression"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function MemberMemberBinding$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.MemberBinding"), "System.Linq.Expressions.MemberMemberBinding", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.MemberInfo"), $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")]), [], [])
    );

    $.Field({Static:false, Public:false}, "bindings", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")])); 
    $.Property({Static:false, Public:true }, "Bindings", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function MemberListBinding$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.MemberBinding"), "System.Linq.Expressions.MemberListBinding", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.MemberInfo"), $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Initializers", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")]), [], [])
    );

    $.Field({Static:false, Public:false}, "initializers", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")])); 
    $.Property({Static:false, Public:true }, "Initializers", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ElementInit$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Expressions.ElementInit", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.MethodInfo"), $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AddMethod", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "addMethod", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "$arguments", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Property({Static:false, Public:true }, "AddMethod", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "Arguments", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConstantExpression$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.ConstantExpression", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.Field({Static:false, Public:false}, "value", $.Object); 
    $.Property({Static:false, Public:true }, "Value", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function InvocationExpression$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.InvocationExpression", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.Field({Static:false, Public:false}, "$arguments", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Field({Static:false, Public:false}, "lambda", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:true }, "Expression", $asm04.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function LambdaExpression$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.LambdaExpression", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
    );

    $.Field({Static:false, Public:false}, "parameters", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
    $.Field({Static:false, Public:false}, "body", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:true }, "Body", $asm04.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Parameters", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Expression$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.LambdaExpression"), "System.Linq.Expressions.Expression`1", true, ["TDelegate"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TDelegate", "System.Linq.Expressions.Expression`1"), [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function MemberExpression$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.MemberExpression", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Reflection.MemberInfo"), 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Member", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MemberInfo"), [], [])
    );

    $.Field({Static:false, Public:false}, "expr", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false}, "member", $asm01.TypeRef("System.Reflection.MemberInfo")); 
    $.Property({Static:false, Public:true }, "Expression", $asm04.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Member", $asm01.TypeRef("System.Reflection.MemberInfo"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function MethodCallExpression$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.MethodCallExpression", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm01.TypeRef("System.Reflection.MethodInfo"), 
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.Field({Static:false, Public:false}, "method", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "obj", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false}, "$arguments", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Property({Static:false, Public:true }, "Method", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "Object", $asm04.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NewExpression$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.NewExpression", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.ConstructorInfo"), 
          $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.ConstructorInfo"), 
          $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm01.TypeRef("System.Reflection.MemberInfo")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Constructor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.ConstructorInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Members", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm01.TypeRef("System.Reflection.MemberInfo")]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyNoThrow", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.PropertyInfo"), [$asm01.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.Field({Static:false, Public:false}, "$constructor", $asm01.TypeRef("System.Reflection.ConstructorInfo")); 
    $.Field({Static:false, Public:false}, "$arguments", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Field({Static:false, Public:false}, "members", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm01.TypeRef("System.Reflection.MemberInfo")])); 
    $.Property({Static:false, Public:true }, "Constructor", $asm01.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:true }, "Arguments", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "Members", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm01.TypeRef("System.Reflection.MemberInfo")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NewArrayExpression$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.NewArrayExpression", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.Field({Static:false, Public:false}, "expressions", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Property({Static:false, Public:true }, "Expressions", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function MemberInitExpression$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.MemberInitExpression", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.NewExpression"), $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.NewExpression"), [], [])
    );

    $.Field({Static:false, Public:false}, "newExpression", $asm04.TypeRef("System.Linq.Expressions.NewExpression")); 
    $.Field({Static:false, Public:false}, "bindings", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")])); 
    $.Property({Static:false, Public:true }, "NewExpression", $asm04.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Property({Static:false, Public:true }, "Bindings", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ListInitExpression$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.ListInitExpression", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.NewExpression"), $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Initializers", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.NewExpression"), [], [])
    );

    $.Field({Static:false, Public:false}, "newExpression", $asm04.TypeRef("System.Linq.Expressions.NewExpression")); 
    $.Field({Static:false, Public:false}, "initializers", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")])); 
    $.Property({Static:false, Public:true }, "NewExpression", $asm04.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Property({Static:false, Public:true }, "Initializers", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ParameterExpression$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.ParameterExpression", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TypeBinaryExpression$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.TypeBinaryExpression", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeOperand", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false}, "expression", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false}, "typeop", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Expression", $asm04.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "TypeOperand", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function UnaryExpression$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.Expression"), "System.Linq.Expressions.UnaryExpression", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $asm01.TypeRef("System.Reflection.MethodInfo"), $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operand", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.Field({Static:false, Public:false}, "operand", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false}, "method", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Property({Static:false, Public:true }, "Operand", $asm04.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Method", $asm01.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ReadOnlyCollectionExtensions$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Expressions.ReadOnlyCollectionExtensions", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "ToReadOnlyCollection", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

(function DefaultReadOnlyCollection$b1$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Expressions.ReadOnlyCollectionExtensions/DefaultReadOnlyCollection`1", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "get_Empty", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.ReadOnlyCollectionExtensions/DefaultReadOnlyCollection`1")]), [], [])
    );

    $.Field({Static:true , Public:false}, "_defaultCollection", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")])); 
    $.GenericProperty({Static:true , Public:false}, "Empty", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.ReadOnlyCollectionExtensions/DefaultReadOnlyCollection`1")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ExpressionCompiler$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Expressions.ExpressionCompiler", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddGlobal", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Type"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["D"])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$asm04.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileDynamicLambda", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$asm04.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Generate", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateAndAlso", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateArgAccess", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32, 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateArgs", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/WriteBack")]), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.ParameterInfo")]), 
          $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateArrayAccess", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Type"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateArrayAssign", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBinary", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBinaryMethod", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBinaryOp", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type"), $.Boolean, 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBinding", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.MemberBinding"), 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCastToType", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCoalesce", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConditional", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ConditionalExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConstant", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ConstantExpression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConstant", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Type"), 
          $.Object, $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConstInt", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConvert", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConvertToType", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCreateDelegate", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateFieldAccess", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Reflection.FieldInfo"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateGetValue", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateGetValueOrDefault", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateGlobalAccess", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32, 
          $asm01.TypeRef("System.Type"), $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateHasValue", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateHoistedLocalAccess", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32, 
          $asm01.TypeRef("System.Type"), $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateInitHoistedLocals", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateInitLocal", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateInvoke", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.InvocationExpression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLambda", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLambdaReferenceCoalesce", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLift", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm01.TypeRef("System.Type"), $asm04.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLiftedAndAlso", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLiftedBinaryArithmetic", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type"), $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLiftedBinaryOp", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type"), $.Boolean, 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLiftedBooleanAnd", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLiftedBooleanOr", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLiftedOrElse", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLiftedRelational", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type"), $.Boolean, 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateListInit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ListInitExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateListInit", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")]), 
          $.Boolean, $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateLoadExecutionScope", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLoadHoistedLocals", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberAccess", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.MemberExpression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberAccess", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $asm01.TypeRef("System.Reflection.MemberInfo"), $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberAccess", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Reflection.MemberInfo"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberAssignment", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.MemberAssignment"), 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberInit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.MemberInitExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberInit", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")]), 
          $.Boolean, $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberListBinding", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.MemberListBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberMemberBinding", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.MemberMemberBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberWriteBack", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.Expression"), 
          $asm01.TypeRef("System.Reflection.MemberInfo"), $asm01.TypeRef("System.Reflection.Emit.LocalBuilder")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMethodAndAlso", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMethodCall", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMethodCall", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Reflection.MethodInfo"), 
          $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMethodOrElse", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNew", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.NewExpression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNewArray", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.NewArrayExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNonNullableToNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNullableCoalesce", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNullableToNonNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNullableToNonNullableStructConversion", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNullableToNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNullableToReferenceConversion", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNullEquality", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm04.TypeRef("System.Linq.Expressions.Expression"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNumericConversion", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateOrElse", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateParameterAccess", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateQuote", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateReferenceCoalesceWithoutConversion", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateTypeIs", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.TypeBinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUnary", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUnaryMethod", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.UnaryExpression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUnaryOp", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUnliftedAndAlso", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUnliftedBinaryOp", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateUnliftedEquality", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUnliftedOrElse", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUserdefinedLiftedAndAlso", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUserdefinedLiftedOrElse", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUserDefinedReferenceCoalesce", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateWriteBack", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/WriteBack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemberType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNonNullableType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParameterTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), [$asm01.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsConvertible", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFloatingPoint", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsHoisted", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInteger", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLiftedLogicalBinaryOperator", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullable", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullConstant", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnsigned", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeStrongBoxType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareInitLocal", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReturnFromLocal", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), [
          $asm01.TypeRef("System.Reflection.Emit.ILGenerator"), $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/StackType"), 
          $asm01.TypeRef("System.Reflection.Emit.LocalBuilder")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UseVirtual", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.Field({Static:false, Public:false}, "lambdas", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/LambdaInfo")])); 
    $.Field({Static:false, Public:false}, "globals", $asm01.TypeRef("System.Collections.Generic.List`1", [$.Object])); 
    $.Field({Static:false, Public:false}, "scope", $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/CompileScope")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function LambdaInfo$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Expressions.ExpressionCompiler/LambdaInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm01.TypeRef("System.Reflection.MethodInfo"), 
          $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32]), $asm01.TypeRef("System.Collections.Generic.List`1", [$.Type])
        ], [])
    );

    $.Field({Static:false, Public:false}, "Lambda", $asm04.TypeRef("System.Linq.Expressions.LambdaExpression")); 
    $.Field({Static:false, Public:false}, "Lambdas", $asm01.TypeRef("System.Collections.Generic.List`1", [$.Type])); 
    $.Field({Static:false, Public:false}, "Method", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "HoistedLocals", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CompileScope$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Expressions.ExpressionCompiler/CompileScope", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm04.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.Field({Static:false, Public:false}, "Parent", $.Type); 
    $.Field({Static:false, Public:false}, "Lambda", $asm04.TypeRef("System.Linq.Expressions.LambdaExpression")); 
    $.Field({Static:false, Public:false}, "Locals", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm01.TypeRef("System.Reflection.Emit.LocalBuilder")])); 
    $.Field({Static:false, Public:false}, "HoistedLocals", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32])); 
    $.Field({Static:false, Public:false}, "HoistedLocalsVar", $asm01.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Linq.Expressions.ExpressionCompiler/StackType", false, {
    Value: 0, 
    Address: 1
  }, false
);

(function ExpressionVisitor$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Expressions.ExpressionVisitor", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Visit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinary", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinding", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberBinding"), [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBindingList", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")]), [$asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConditional", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.ConditionalExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.ConstantExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInitializer", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.ElementInit"), [$asm04.TypeRef("System.Linq.Expressions.ElementInit")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInitializerList", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")]), [$asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitExpressionList", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), [$asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.InvocationExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitListInit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.ListInitExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAccess", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.MemberExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAssignment", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm04.TypeRef("System.Linq.Expressions.MemberAssignment")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberInit", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.MemberInitExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberListBinding", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm04.TypeRef("System.Linq.Expressions.MemberListBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberMemberBinding", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm04.TypeRef("System.Linq.Expressions.MemberMemberBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.MethodCallExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNew", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.NewExpression"), [$asm04.TypeRef("System.Linq.Expressions.NewExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNewArray", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.NewArrayExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTypeIs", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.TypeBinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Hoister$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.ExpressionVisitor"), "System.Linq.Expressions.ExpressionCompiler/Hoister", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Hoist", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/CompileScope")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.InvocationExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.Field({Static:false, Public:false}, "expressionScope", $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/CompileScope")); 
    $.Field({Static:false, Public:false}, "current", $asm04.TypeRef("System.Linq.Expressions.LambdaExpression")); 
    $.Field({Static:false, Public:false}, "locals", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function WriteBack$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Linq.Expressions.ExpressionCompiler/WriteBack", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm04.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.Field({Static:false, Public:true }, "loc", $asm01.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:true }, "arg", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Strings$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Expressions.Strings", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BinaryOperatorNotDefined", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCastTypeToType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CoercionOperatorNotDefined", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeCannotInitializeCollectionType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchArrayType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeNotInvocable", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentCannotBeOfTypeVoid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeArray", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeArrayIndexType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeBoolean", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeCheckable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeComparable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeConvertible", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeFieldInfoOrPropertInfo", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeFieldInfoOrPropertInfoOrMethod", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeInstanceMember", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeInt32", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeInteger", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeIntegerOrBoolean", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeNumeric", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeSingleDimensionalArrayType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentTypesMustMatch", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CoalesceUsedOnNonNullType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodNotAdd", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodStatic", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodWithZeroArgs", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExpressionMayNotContainByrefParameters", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfArgumentsForMembers", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfConstructorArguments", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfIndexes", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfLambdaArguments", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfLambdaDeclarationParameters", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfMembersForGivenConstructor", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfTypeArgsForAction", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfTypeArgsForFunc", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LambdaParameterNotInScope", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LambdaTypeMustBeDerivedFromSystemDelegate", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ListInitializerWithZeroMembers", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OwningTeam", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParameterNotCaptured", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnexpectedCoalesceOperator", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnhandledBinding", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnknownBindingType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectTypeForTypeAs", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalOperatorMustHaveConsistentTypes", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MemberNotFieldOrProperty", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodContainsGenericParameters", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodDoesNotExistOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodIsGeneric", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodNotPropertyAccessor", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithMoreThanOneMatch", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotAMemberOfType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperatorNotImplementedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveGetter", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveSetter", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeContainsGenericParameters", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeIsGeneric", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeMissingDefaultConstructor", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeNotIEnumerable", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeParameterIsNotDelegate", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnaryOperatorNotDefined", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBinary", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBindingType", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledCall", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvert", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvertFromDecimal", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvertToDecimal", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExpressionType", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledMemberAccess", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledUnary", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.Property({Static:true , Public:false}, "OwningTeam", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeArray", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeBoolean", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeComparable", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeConvertible", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeInstanceMember", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeInteger", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeInt32", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeCheckable", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeIntegerOrBoolean", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeNumeric", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", $.String);

    $.Property({Static:true , Public:false}, "ArgumentTypesMustMatch", $.String);

    $.Property({Static:true , Public:false}, "CoalesceUsedOnNonNullType", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfIndexes", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", $.String);

    $.Property({Static:true , Public:false}, "LambdaParameterNotInScope", $.String);

    $.Property({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", $.String);

    $.Property({Static:true , Public:false}, "ParameterNotCaptured", $.String);

    $.Property({Static:true , Public:false}, "ListInitializerWithZeroMembers", $.String);

    $.Property({Static:true , Public:false}, "ElementInitializerMethodNotAdd", $.String);

    $.Property({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", $.String);

    $.Property({Static:true , Public:false}, "ElementInitializerMethodStatic", $.String);

    $.Property({Static:true , Public:false}, "UnexpectedCoalesceOperator", $.String);

    $.Property({Static:true , Public:false}, "UnhandledBinding", $.String);

    $.Property({Static:true , Public:false}, "UnknownBindingType", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", $.String);

    $.Property({Static:true , Public:false}, "ExpressionMayNotContainByrefParameters", $.String);

    $.Property({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Error$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Expressions.Error", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeArray", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeBoolean", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeCheckable", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeComparable", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeConvertible", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeInstanceMember", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeInt32", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeInteger", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeIntegerOrBoolean", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeNumeric", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypesMustMatch", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BinaryOperatorNotDefined", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCastTypeToType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CoalesceUsedOnNonNullType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CoercionOperatorNotDefined", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNotAdd", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodStatic", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionMayNotContainByrefParameters", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeCannotInitializeCollectionType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchArrayType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeNotInvocable", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldNotDefinedForType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfIndexes", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectTypeForTypeAs", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LambdaParameterNotInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ListInitializerWithZeroMembers", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalOperatorMustHaveConsistentTypes", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MemberNotFieldOrProperty", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodContainsGenericParameters", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodDoesNotExistOnType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodIsGeneric", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodNotDefinedForType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodNotPropertyAccessor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithMoreThanOneMatch", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotAMemberOfType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperatorNotImplementedForType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterNotCaptured", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveGetter", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveSetter", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyNotDefinedForType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeContainsGenericParameters", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeIsGeneric", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeMissingDefaultConstructor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeNotIEnumerable", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeParameterIsNotDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnaryOperatorNotDefined", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedCoalesceOperator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBinary", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBinding", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBindingType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledCall", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvert", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvertFromDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvertToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExpressionType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledMemberAccess", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledUnary", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownBindingType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeInterface(
  "System.Linq.IQueryable", true, [], function ($) {
    $.Method({}, "get_Expression", new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [], []));
    $.Method({}, "get_ElementType", new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], []));
    $.Method({}, "get_Provider", new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryProvider"), [], []));
    $.Property({}, "Expression");
    $.Property({}, "ElementType");
    $.Property({}, "Provider");
  }, [$asm01.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeInterface(
  "System.Linq.IQueryable`1", true, ["T"], function ($) {
  }, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.IQueryable`1")]), $asm04.TypeRef("System.Linq.IQueryable"), $asm01.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeInterface(
  "System.Linq.IQueryProvider", true, [], function ($) {
    $.Method({}, "CreateQuery", new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable"), [$asm04.TypeRef("System.Linq.Expressions.Expression")], []));
    $.Method({}, "CreateQuery", new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.Expressions.Expression")], ["TElement"]));
    $.Method({}, "Execute", new JSIL.MethodSignature($.Object, [$asm04.TypeRef("System.Linq.Expressions.Expression")], []));
    $.Method({}, "Execute", new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.Expressions.Expression")], ["TResult"]));
  }, []);

JSIL.MakeInterface(
  "System.Linq.IOrderedQueryable", true, [], function ($) {
  }, [$asm04.TypeRef("System.Linq.IQueryable"), $asm01.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeInterface(
  "System.Linq.IOrderedQueryable`1", true, ["T"], function ($) {
  }, [$asm04.TypeRef("System.Linq.IQueryable`1", [new JSIL.GenericParameter("T", "System.Linq.IOrderedQueryable`1")]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.IOrderedQueryable`1")]), $asm04.TypeRef("System.Linq.IOrderedQueryable"), $asm04.TypeRef("System.Linq.IQueryable"), $asm01.TypeRef("System.Collections.IEnumerable")]);

(function Queryable$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Queryable", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
              "!!0", "!!0", 
              "!!0"
            ])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!1", [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!1", 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
                "!!1", "!!0", 
                "!!1"
              ])])
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!1", 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
                "!!1", "!!0", 
                "!!1"
              ])]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!1", "!!2"])])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "All", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsQueryable", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TElement"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsQueryable", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable"), [$asm01.TypeRef("System.Collections.IEnumerable")], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm04.TypeRef("System.Linq.IQueryable`1", [$.Int32])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm04.TypeRef("System.Linq.IQueryable`1", [$asm01.TypeRef("System.Nullable`1", [$.Int32])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm04.TypeRef("System.Linq.IQueryable`1", [$.Int64])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm04.TypeRef("System.Linq.IQueryable`1", [$asm01.TypeRef("System.Nullable`1", [$.Int64])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm04.TypeRef("System.Linq.IQueryable`1", [$.Single])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm04.TypeRef("System.Linq.IQueryable`1", [$asm01.TypeRef("System.Nullable`1", [$.Single])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm04.TypeRef("System.Linq.IQueryable`1", [$.Double])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm04.TypeRef("System.Linq.IQueryable`1", [$asm01.TypeRef("System.Nullable`1", [$.Double])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm04.TypeRef("System.Linq.IQueryable`1", [$asm01.TypeRef("System.Decimal")])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")]), [$asm04.TypeRef("System.Linq.IQueryable`1", [$asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Int32])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Int32])])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Single])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Single])])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Int64])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Int64])])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Double])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Double])])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")])])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cast", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable")], ["TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0", 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAtOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetSourceExpression", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", [$asm04.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", [$asm04.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!2"])])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", [$asm04.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", [$asm04.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
                "!!1", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
                "!!3"
              ])])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
                "!!1", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
                "!!2"
              ])])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
                "!!1", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
                "!!2"
              ])]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
                "!!1", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
                "!!3"
              ])]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
                "!!0", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
                "!!3"
              ])])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
                "!!0", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
                "!!3"
              ])]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!3"
              ])])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!3"
              ])]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!1", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!1", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OfType", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable")], ["TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Reverse", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              "!!1"
            ])])], ["TSource", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])])], ["TSource", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ])])], ["TSource", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
                "!!0", $.Int32, 
                $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
              ])]), 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!2"
              ])])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])]), 
          $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!2"
              ])])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Skip", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $.Boolean
            ])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("System.Linq.IQueryable`1", [$.Int32])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [$asm04.TypeRef("System.Linq.IQueryable`1", [$asm01.TypeRef("System.Nullable`1", [$.Int32])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm04.TypeRef("System.Linq.IQueryable`1", [$.Int64])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int64]), [$asm04.TypeRef("System.Linq.IQueryable`1", [$asm01.TypeRef("System.Nullable`1", [$.Int64])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm04.TypeRef("System.Linq.IQueryable`1", [$.Single])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm04.TypeRef("System.Linq.IQueryable`1", [$asm01.TypeRef("System.Nullable`1", [$.Single])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm04.TypeRef("System.Linq.IQueryable`1", [$.Double])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm04.TypeRef("System.Linq.IQueryable`1", [$asm01.TypeRef("System.Nullable`1", [$.Double])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm04.TypeRef("System.Linq.IQueryable`1", [$asm01.TypeRef("System.Decimal")])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")]), [$asm04.TypeRef("System.Linq.IQueryable`1", [$asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Int32])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Int32])])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Int64])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int64]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Int64])])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Single])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Single])])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Double])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Double])])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")])])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Take", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $.Boolean
            ])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm04.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm04.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
          $asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm04.TypeRef("System.Linq.Expressions.Expression`1", [$asm04.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $.Boolean
            ])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

(function Enumerable$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Enumerable", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`3", [
            "!!0", "!!0", 
            "!!0"
          ])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!1", [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!1", 
          $asm04.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ])
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!1", 
          $asm04.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm04.TypeRef("System.Func`2", ["!!1", "!!2"])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "All", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsEnumerable", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$.Int32])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$.Int64])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$.Single])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$.Double])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Decimal")])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cast", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CastIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CombinePredicates", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Func`2", ["!!0", $.Boolean]), [$asm04.TypeRef("System.Func`2", ["!!0", $.Boolean]), $asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CombineSelectors", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Func`2", ["!!0", "!!2"]), [$asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), $asm04.TypeRef("System.Func`2", ["!!1", "!!2"])], ["TSource", "TMiddle", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ConcatIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0", 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DefaultIfEmptyIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DistinctIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAtOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Empty", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ExceptIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm04.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm04.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm04.TypeRef("System.Func`3", [
              "!!1", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm04.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm04.TypeRef("System.Func`3", [
              "!!1", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm04.TypeRef("System.Func`3", [
              "!!1", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm04.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm04.TypeRef("System.Func`3", [
              "!!1", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm04.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm04.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm04.TypeRef("System.Func`3", [
              "!!0", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm04.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm04.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm04.TypeRef("System.Func`3", [
              "!!0", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GroupJoinIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm04.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm04.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm04.TypeRef("System.Func`3", [
              "!!0", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IntersectIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm04.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm04.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm04.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm04.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm04.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm04.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "JoinIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm04.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm04.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm04.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$.Int32])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int64]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$.Int64])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$.Double])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$.Single])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Decimal")])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int64]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!1", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$.Int32])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int64]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$.Int64])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$.Single])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$.Double])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Decimal")])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int64]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!1", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OfType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OfTypeIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Range", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RangeIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Repeat", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), ["!!0", $.Int32], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "RepeatIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), ["!!0", $.Int32], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Reverse", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ReverseIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            "!!1"
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SelectIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            "!!1"
          ])], ["TSource", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ]), 
          $asm04.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])]), 
          $asm04.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ])], ["TSource", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ]), 
          $asm04.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])]), 
          $asm04.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Skip", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SkipIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SkipWhileIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SkipWhileIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$.Int32])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int64]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$.Int64])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$.Single])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$.Double])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Decimal")])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")])])], [])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int32]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Int64]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Double]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $asm01.TypeRef("System.Nullable`1", [$asm01.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Take", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TakeIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TakeWhileIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "TakeWhileIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm04.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm04.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm04.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm04.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToList", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm04.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm04.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnionIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WhereIterator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm04.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

(function Iterator$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/Iterator`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(4, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Reset");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1")]), [$asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1"), $.Boolean])], [])
    );

    $.Field({Static:false, Public:false}, "threadId", $.Int32); 
    $.Field({Static:false, Public:false}, "state", $.Int32); 
    $.Field({Static:false, Public:false}, "current", $.GenericParameter("TSource")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1")]), 
      /* 3 */ $asm01.TypeRef("System.IDisposable"), 
      /* 4 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function WhereEnumerableIterator$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1")]), "System.Linq.Enumerable/WhereEnumerableIterator`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1")]), $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1"), $.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1")]), [$asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1"), $.Boolean])], [])
    );

    $.Field({Static:false, Public:false}, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "predicate", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function WhereArrayIterator$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1")]), "System.Linq.Enumerable/WhereArrayIterator`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1")]), $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1"), $.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1")]), [$asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1"), $.Boolean])], [])
    );

    $.Field({Static:false, Public:false}, "source", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "predicate", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "index", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function WhereListIterator$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1")]), "System.Linq.Enumerable/WhereListIterator`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1")]), $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1"), $.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1")]), [$asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1"), $.Boolean])], [])
    );

    $.Field({Static:false, Public:false}, "source", $asm01.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "predicate", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("System.Collections.Generic.List`1/Enumerator", [$.GenericParameter("TSource")])); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function WhereSelectEnumerableIterator$b2$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2")]), "System.Linq.Enumerable/WhereSelectEnumerableIterator`2", false, ["TSource", "TResult"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2")]), $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2"), $.Boolean]), 
          $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2"), new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2")]), [$asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2"), $.Boolean])], [])
    );

    $.Field({Static:false, Public:false}, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "predicate", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "selector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])); 
    $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function WhereSelectArrayIterator$b2$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2")]), "System.Linq.Enumerable/WhereSelectArrayIterator`2", false, ["TSource", "TResult"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectArrayIterator`2")]), $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectArrayIterator`2"), $.Boolean]), 
          $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectArrayIterator`2"), new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2")]), [$asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2"), $.Boolean])], [])
    );

    $.Field({Static:false, Public:false}, "source", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "predicate", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "selector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])); 
    $.Field({Static:false, Public:false}, "index", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function WhereSelectListIterator$b2$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2")]), "System.Linq.Enumerable/WhereSelectListIterator`2", false, ["TSource", "TResult"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectListIterator`2")]), $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectListIterator`2"), $.Boolean]), 
          $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectListIterator`2"), new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2")]), [$asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2"), $.Boolean])], [])
    );

    $.Field({Static:false, Public:false}, "source", $asm01.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "predicate", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "selector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])); 
    $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("System.Collections.Generic.List`1/Enumerator", [$.GenericParameter("TSource")])); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function $lWhereIterator$gd__0$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<WhereIterator>d__0`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<WhereIterator>d__0`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<WhereIterator>d__0`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "predicate", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:true }, "$predicate", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:true }, "index", $.Int32); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap3", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<WhereIterator>d__0`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<WhereIterator>d__0`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<WhereIterator>d__0`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lSelectIterator$gd__7$b2$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<SelectIterator>d__7`2", false, ["TSource", "TResult"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallyb", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectIterator>d__7`2")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectIterator>d__7`2"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "selector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "$selector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "index", $.Int32); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrapa", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectIterator>d__7`2"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectIterator>d__7`2")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectIterator>d__7`2")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $l$gc__DisplayClassf$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<>c__DisplayClassf`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "predicate1", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:true }, "predicate2", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $l$gc__DisplayClass12$b3$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<>c__DisplayClass12`3", false, ["TSource", "TMiddle", "TResult"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "selector1", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TMiddle")])); 
    $.Field({Static:false, Public:true }, "selector2", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TMiddle"), $.GenericParameter("TResult")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lSelectManyIterator$gd__14$b2$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<SelectManyIterator>d__14`2", false, ["TSource", "TResult"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally18", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1a", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__14`2")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__14`2"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "selector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])])); 
    $.Field({Static:false, Public:true }, "$selector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])])); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "subElement", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:true }, "$wrap17", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$wrap19", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__14`2"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__14`2")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__14`2")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lSelectManyIterator$gd__1d$b2$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<SelectManyIterator>d__1d`2", false, ["TSource", "TResult"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally22", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally24", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__1d`2")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__1d`2"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "selector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])
        ])); 
    $.Field({Static:false, Public:true }, "$selector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])
        ])); 
    $.Field({Static:false, Public:true }, "index$1e", $.Int32); 
    $.Field({Static:false, Public:true }, "element$1f", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "subElement", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:true }, "$wrap21", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$wrap23", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__1d`2"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__1d`2")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__1d`2")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lSelectManyIterator$gd__27$b3$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<SelectManyIterator>d__27`3", false, ["TSource", "TCollection", "TResult"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2c", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2e", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__27`3")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__27`3"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "collectionSelector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])
        ])); 
    $.Field({Static:false, Public:true }, "$collectionSelector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])
        ])); 
    $.Field({Static:false, Public:true }, "resultSelector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "$resultSelector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "index", $.Int32); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "subElement$2a", $.GenericParameter("TCollection")); 
    $.Field({Static:false, Public:true }, "$wrap2b", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$wrap2d", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TCollection")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__27`3"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__27`3")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__27`3")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lSelectManyIterator$gd__31$b3$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<SelectManyIterator>d__31`3", false, ["TSource", "TCollection", "TResult"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally35", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally37", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__31`3")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__31`3"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "collectionSelector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])])); 
    $.Field({Static:false, Public:true }, "$collectionSelector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])])); 
    $.Field({Static:false, Public:true }, "resultSelector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "$resultSelector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "subElement", $.GenericParameter("TCollection")); 
    $.Field({Static:false, Public:true }, "$wrap34", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$wrap36", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TCollection")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__31`3"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__31`3")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__31`3")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lTakeIterator$gd__3a$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<TakeIterator>d__3a`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3d", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeIterator>d__3a`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeIterator>d__3a`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "count", $.Int32); 
    $.Field({Static:false, Public:true }, "$count", $.Int32); 
    $.Field({Static:false, Public:true }, "element$3b", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap3c", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeIterator>d__3a`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeIterator>d__3a`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeIterator>d__3a`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lTakeWhileIterator$gd__40$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<TakeWhileIterator>d__40`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally43", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__40`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__40`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "predicate", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:true }, "$predicate", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap42", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__40`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__40`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__40`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lTakeWhileIterator$gd__46$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<TakeWhileIterator>d__46`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4a", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__46`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__46`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "predicate", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:true }, "$predicate", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:true }, "index", $.Int32); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap49", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__46`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__46`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__46`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lSkipIterator$gd__4d$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<SkipIterator>d__4d`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4f", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipIterator>d__4d`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipIterator>d__4d`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "count", $.Int32); 
    $.Field({Static:false, Public:true }, "$count", $.Int32); 
    $.Field({Static:false, Public:true }, "e$4e", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipIterator>d__4d`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipIterator>d__4d`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipIterator>d__4d`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lSkipWhileIterator$gd__52$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<SkipWhileIterator>d__52`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally56", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__52`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__52`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "predicate", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:true }, "$predicate", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:true }, "yielding", $.Boolean); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap55", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__52`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__52`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__52`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lSkipWhileIterator$gd__59$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<SkipWhileIterator>d__59`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally5e", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__59`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__59`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "predicate", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:true }, "$predicate", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:true }, "index$5a", $.Int32); 
    $.Field({Static:false, Public:true }, "yielding$5b", $.Boolean); 
    $.Field({Static:false, Public:true }, "element$5c", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap5d", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__59`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__59`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__59`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lJoinIterator$gd__61$b4$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<JoinIterator>d__61`4", false, ["TOuter", "TInner", "TKey", "TResult"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally67", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<JoinIterator>d__61`4")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<JoinIterator>d__61`4"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "outer", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")])); 
    $.Field({Static:false, Public:true }, "$outer", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")])); 
    $.Field({Static:false, Public:true }, "inner", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")])); 
    $.Field({Static:false, Public:true }, "$inner", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")])); 
    $.Field({Static:false, Public:true }, "outerKeySelector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "$outerKeySelector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "innerKeySelector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "$innerKeySelector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "resultSelector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $.GenericParameter("TInner"), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "$resultSelector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $.GenericParameter("TInner"), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "$comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "lookup", $asm04.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TInner")])); 
    $.Field({Static:false, Public:true }, "item", $.GenericParameter("TOuter")); 
    $.Field({Static:false, Public:true }, "g", $asm04.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TInner")])); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Field({Static:false, Public:true }, "$wrap66", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOuter")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<JoinIterator>d__61`4"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<JoinIterator>d__61`4")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<JoinIterator>d__61`4")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lGroupJoinIterator$gd__6a$b4$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4", false, ["TOuter", "TInner", "TKey", "TResult"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally6e", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "outer", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")])); 
    $.Field({Static:false, Public:true }, "$outer", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")])); 
    $.Field({Static:false, Public:true }, "inner", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")])); 
    $.Field({Static:false, Public:true }, "$inner", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")])); 
    $.Field({Static:false, Public:true }, "outerKeySelector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "$outerKeySelector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "innerKeySelector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "$innerKeySelector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "resultSelector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "$resultSelector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "$comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "lookup$6b", $asm04.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TInner")])); 
    $.Field({Static:false, Public:true }, "item$6c", $.GenericParameter("TOuter")); 
    $.Field({Static:false, Public:true }, "$wrap6d", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOuter")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lConcatIterator$gd__71$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<ConcatIterator>d__71`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally75", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally77", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ConcatIterator>d__71`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ConcatIterator>d__71`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "first", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$first", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "second", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$second", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap74", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$wrap76", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ConcatIterator>d__71`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ConcatIterator>d__71`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ConcatIterator>d__71`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lDistinctIterator$gd__7a$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<DistinctIterator>d__7a`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally7e", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DistinctIterator>d__7a`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DistinctIterator>d__7a`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "set$7b", $asm04.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "element$7c", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap7d", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DistinctIterator>d__7a`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DistinctIterator>d__7a`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DistinctIterator>d__7a`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lUnionIterator$gd__81$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<UnionIterator>d__81`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally86", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally88", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<UnionIterator>d__81`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<UnionIterator>d__81`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "first", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$first", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "second", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$second", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "set", $asm04.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap85", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$wrap87", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<UnionIterator>d__81`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<UnionIterator>d__81`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<UnionIterator>d__81`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lIntersectIterator$gd__8b$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<IntersectIterator>d__8b`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally8f", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<IntersectIterator>d__8b`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<IntersectIterator>d__8b`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "first", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$first", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "second", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$second", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "set$8c", $asm04.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "element$8d", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap8e", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<IntersectIterator>d__8b`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<IntersectIterator>d__8b`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<IntersectIterator>d__8b`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lExceptIterator$gd__92$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<ExceptIterator>d__92`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally96", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ExceptIterator>d__92`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ExceptIterator>d__92`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "first", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$first", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "second", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$second", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "set", $asm04.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap95", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ExceptIterator>d__92`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ExceptIterator>d__92`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ExceptIterator>d__92`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lReverseIterator$gd__99$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<ReverseIterator>d__99`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ReverseIterator>d__99`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ReverseIterator>d__99`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "buffer$9a", $asm04.TypeRef("System.Linq.Buffer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "i$9b", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ReverseIterator>d__99`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ReverseIterator>d__99`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ReverseIterator>d__99`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lDefaultIfEmptyIterator$gd__9e$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__9e`1", false, ["TSource"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallya0", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__9e`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__9e`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "defaultValue", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$defaultValue", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "e$9f", $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__9e`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__9e`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__9e`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lOfTypeIterator$gd__a3$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<OfTypeIterator>d__a3`1", false, ["TResult"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallya7", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<OfTypeIterator>d__a3`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<OfTypeIterator>d__a3`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.IEnumerable")); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.IEnumerable")); 
    $.Field({Static:false, Public:true }, "obj$a4", $.Object); 
    $.Field({Static:false, Public:true }, "$wrapa5", $asm01.TypeRef("System.Collections.IEnumerator")); 
    $.Field({Static:false, Public:true }, "$wrapa6", $asm01.TypeRef("System.IDisposable")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<OfTypeIterator>d__a3`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<OfTypeIterator>d__a3`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<OfTypeIterator>d__a3`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lCastIterator$gd__aa$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<CastIterator>d__aa`1", false, ["TResult"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallyae", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<CastIterator>d__aa`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<CastIterator>d__aa`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm01.TypeRef("System.Collections.IEnumerable")); 
    $.Field({Static:false, Public:true }, "$source", $asm01.TypeRef("System.Collections.IEnumerable")); 
    $.Field({Static:false, Public:true }, "obj$ab", $.Object); 
    $.Field({Static:false, Public:true }, "$wrapac", $asm01.TypeRef("System.Collections.IEnumerator")); 
    $.Field({Static:false, Public:true }, "$wrapad", $asm01.TypeRef("System.IDisposable")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<CastIterator>d__aa`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<CastIterator>d__aa`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<CastIterator>d__aa`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lRangeIterator$gd__b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<RangeIterator>d__b1", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Int32$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Int32$g.get_Current", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.Int32); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "start", $.Int32); 
    $.Field({Static:false, Public:true }, "$start", $.Int32); 
    $.Field({Static:false, Public:true }, "count", $.Int32); 
    $.Field({Static:false, Public:true }, "$count", $.Int32); 
    $.Field({Static:false, Public:true }, "i$b2", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Int32$g.Current", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lRepeatIterator$gd__b5$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Enumerable/<RepeatIterator>d__b5`1", false, ["TResult"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<RepeatIterator>d__b5`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<RepeatIterator>d__b5`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:true }, "$element", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:true }, "count", $.Int32); 
    $.Field({Static:false, Public:true }, "$count", $.Int32); 
    $.Field({Static:false, Public:true }, "i$b6", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<RepeatIterator>d__b5`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<RepeatIterator>d__b5`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<RepeatIterator>d__b5`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function EmptyEnumerable$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.EmptyEnumerable`1", false, ["TElement"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.EmptyEnumerable`1")]), [], [])
    );

    $.Field({Static:true , Public:false}, "instance", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")])); 
    $.GenericProperty({Static:true , Public:true }, "Instance", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.EmptyEnumerable`1")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function IdentityFunction$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.IdentityFunction`1", false, ["TElement"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.IdentityFunction`1"), new JSIL.GenericParameter("TElement", "System.Linq.IdentityFunction`1")]), [], [])
    );

    $.GenericProperty({Static:true , Public:true }, "Instance", $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.IdentityFunction`1"), new JSIL.GenericParameter("TElement", "System.Linq.IdentityFunction`1")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeInterface(
  "System.Linq.IOrderedEnumerable`1", true, ["TElement"], function ($) {
    $.Method({}, "CreateOrderedEnumerable", new JSIL.MethodSignature($.Type, [
          $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.IOrderedEnumerable`1"), "!!0"]), $asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), 
          $.Boolean
        ], ["TKey"]));
  }, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.IOrderedEnumerable`1")]), $asm01.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeInterface(
  "System.Linq.IGrouping`2", true, ["TKey", "TElement"], function ($) {
    $.Method({}, "get_Key", new JSIL.MethodSignature(new JSIL.GenericParameter("TKey", "System.Linq.IGrouping`2"), [], []));
    $.Property({}, "Key");
  }, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.IGrouping`2")]), $asm01.TypeRef("System.Collections.IEnumerable")]);

JSIL.MakeInterface(
  "System.Linq.ILookup`2", true, ["TKey", "TElement"], function ($) {
    $.Method({}, "get_Count", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_Item", new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.ILookup`2")]), [new JSIL.GenericParameter("TKey", "System.Linq.ILookup`2")], []));
    $.Method({}, "Contains", new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Linq.ILookup`2")], []));
    $.Property({}, "Count");
    $.Property({}, "Item");
  }, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.ILookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.ILookup`2")])]), $asm01.TypeRef("System.Collections.IEnumerable")]);

(function Lookup$b2$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Lookup`2", true, ["TKey", "TElement"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ApplyResultSelector", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm04.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), 
            "!!0"
          ])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm04.TypeRef("System.Func`2", ["!!0", new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")]), 
          $asm04.TypeRef("System.Func`2", ["!!0", new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateForJoin", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2"), new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm04.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")])]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGrouping", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Lookup`2/Grouping", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(2, "GetEnumerator");

    $.Field({Static:false, Public:false}, "comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "groupings", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])])); 
    $.Field({Static:false, Public:false}, "lastGrouping", $asm04.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("System.Linq.ILookup`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")])]), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function Grouping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Lookup`2/Grouping", false, ["TKey", "TElement"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/Grouping"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
    )
      .Overrides(2, "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Clear", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
    )
      .Overrides(2, "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), $.Int32], [])
    )
      .Overrides(2, "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(2, "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(2, "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
    )
      .Overrides(2, "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.get_Item", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping"), [$.Int32], [])
    )
      .Overrides(1, "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.IndexOf", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
    )
      .Overrides(1, "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
    )
      .Overrides(1, "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Overrides(1, "RemoveAt");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
    )
      .Overrides(1, "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(4, "GetEnumerator");

    $.Field({Static:false, Public:false}, "key", $.GenericParameter("TKey")); 
    $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
    $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Field({Static:false, Public:false}, "hashNext", $.Type); 
    $.Field({Static:false, Public:false}, "next", $.Type); 
    $.Property({Static:false, Public:true , Virtual:true }, "Key", new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/Grouping"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.Item", new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/Grouping"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), 
      /* 4 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function $lGetEnumerator$gd__7$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Lookup`2/Grouping/<GetEnumerator>d__7", false, ["TKey", "TElement"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping/<GetEnumerator>d__7"), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TElement")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm04.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping/<GetEnumerator>d__7"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping/<GetEnumerator>d__7")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Lookup`2/<GetEnumerator>d__0", false, ["TKey", "TElement"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.get_Current", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/<GetEnumerator>d__0")]), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $asm04.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm04.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "g", $asm04.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.Current", $asm04.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/<GetEnumerator>d__0")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm04.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/<GetEnumerator>d__0")])]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $lApplyResultSelector$gd__3$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1", false, ["TKey", "TElement", "TResult"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm04.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "resultSelector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "$resultSelector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "g", $asm04.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function Set$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Set`1", false, ["TElement"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TElement", "System.Linq.Set`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Set`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Set`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Find", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Set`1"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("TElement", "System.Linq.Set`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Set`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "slots", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Linq.Set`1/Slot", [$.GenericParameter("TElement")])])); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Field({Static:false, Public:false}, "freeList", $.Int32); 
    $.Field({Static:false, Public:false}, "comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TElement")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Slot$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Linq.Set`1/Slot", false, ["TElement"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
    $.Field({Static:false, Public:false}, "value", $.GenericParameter("TElement")); 
    $.Field({Static:false, Public:false}, "next", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function GroupedEnumerable$b4$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.GroupedEnumerable`4", false, ["TSource", "TKey", "TElement", "TResult"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`4")]), $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`4"), new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`4")]), 
          $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`4"), new JSIL.GenericParameter("TElement", "System.Linq.GroupedEnumerable`4")]), $asm04.TypeRef("System.Func`3", [
              new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`4"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.GroupedEnumerable`4")]), 
              new JSIL.GenericParameter("TResult", "System.Linq.GroupedEnumerable`4")
            ]), 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`4")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.GroupedEnumerable`4")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.Field({Static:false, Public:false}, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "keySelector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "elementSelector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "resultSelector", $asm04.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ])); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.GroupedEnumerable`4")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function GroupedEnumerable$b3$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.GroupedEnumerable`3", false, ["TSource", "TKey", "TElement"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`3")]), $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`3"), new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`3")]), 
          $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`3"), new JSIL.GenericParameter("TElement", "System.Linq.GroupedEnumerable`3")]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`3")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm04.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`3"), new JSIL.GenericParameter("TElement", "System.Linq.GroupedEnumerable`3")])]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.Field({Static:false, Public:false}, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "keySelector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "elementSelector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`3"), new JSIL.GenericParameter("TElement", "System.Linq.GroupedEnumerable`3")])]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function OrderedEnumerable$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.OrderedEnumerable`1", false, ["TElement"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerableSorter", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")]), [$asm04.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(2, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IOrderedEnumerable$lTElement$g.CreateOrderedEnumerable", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IOrderedEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")]), [
          $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1"), "!!0"]), $asm01.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), 
          $.Boolean
        ], ["TKey"])
    )
      .Overrides(0, "CreateOrderedEnumerable");

    $.Field({Static:false, Public:false}, "source", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])); 
    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("System.Linq.IOrderedEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")]), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.OrderedEnumerable`1/<GetEnumerator>d__0", false, ["TElement"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1/<GetEnumerator>d__0"), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TElement")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm04.TypeRef("System.Linq.OrderedEnumerable`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "buffer", $asm04.TypeRef("System.Linq.Buffer`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "sorter", $asm04.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "map", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1/<GetEnumerator>d__0"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1/<GetEnumerator>d__0")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function OrderedEnumerable$b2$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.OrderedEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2")]), "System.Linq.OrderedEnumerable`2", false, ["TElement", "TKey"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2")]), $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2"), new JSIL.GenericParameter("TKey", "System.Linq.OrderedEnumerable`2")]), 
          $asm01.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.OrderedEnumerable`2")]), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerableSorter", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2")]), [$asm04.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2")])], [])
    );

    $.Field({Static:false, Public:false}, "parent", $asm04.TypeRef("System.Linq.OrderedEnumerable`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "keySelector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "comparer", $asm01.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "descending", $.Boolean); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EnumerableSorter$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.EnumerableSorter`1", false, ["TElement"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompareKeys", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ComputeKeys", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`1")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "QuickSort", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Sort", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`1")]), $.Int32], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EnumerableSorter$b2$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`2")]), "System.Linq.EnumerableSorter`2", false, ["TElement", "TKey"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`2"), new JSIL.GenericParameter("TKey", "System.Linq.EnumerableSorter`2")]), $asm01.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.EnumerableSorter`2")]), 
          $.Boolean, $asm04.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`2")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompareKeys", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ComputeKeys", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`2")]), $.Int32], [])
    );

    $.Field({Static:false, Public:false}, "keySelector", $asm04.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "comparer", $asm01.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "descending", $.Boolean); 
    $.Field({Static:false, Public:false}, "next", $asm04.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "keys", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Buffer$b1$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Linq.Buffer`1", false, ["TElement"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Buffer`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TElement", "System.Linq.Buffer`1")]), [], [])
    );

    $.Field({Static:false, Public:false}, "items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SystemCore_EnumerableDebugView$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.SystemCore_EnumerableDebugView`1", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.SystemCore_EnumerableDebugView`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.SystemCore_EnumerableDebugView`1")]), [], [])
    );

    $.Field({Static:false, Public:false}, "enumerable", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]))
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
    $.Field({Static:false, Public:false}, "cachedCollection", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]))
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
    $.Field({Static:false, Public:false}, "count", $.Int32)
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.SystemCore_EnumerableDebugView`1")]))
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SystemCore_EnumerableDebugViewEmptyException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Exception"), "System.Linq.SystemCore_EnumerableDebugViewEmptyException", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Empty", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Property({Static:false, Public:true }, "Empty", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SystemCore_EnumerableDebugView$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.SystemCore_EnumerableDebugView", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.IEnumerable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [], [])
    );

    $.Field({Static:false, Public:false}, "enumerable", $asm01.TypeRef("System.Collections.IEnumerable"))
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
    $.Field({Static:false, Public:false}, "cachedCollection", $jsilcore.TypeRef("System.Array", [$.Object]))
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
    $.Field({Static:false, Public:false}, "count", $.Int32)
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.Object]))
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EnumerableQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.EnumerableQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Collections.IEnumerable")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable"), [$asm01.TypeRef("System.Type"), $asm04.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Enumerable", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Expression", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Expression", $asm04.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "Enumerable", $asm01.TypeRef("System.Collections.IEnumerable"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EnumerableQuery$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.EnumerableQuery"), "System.Linq.EnumerableQuery`1", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Enumerable", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Expression", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")]), [], [])
    )
      .Overrides(5, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(6, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.get_ElementType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    )
      .Overrides(3, "get_ElementType");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.get_Expression", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Overrides(3, "get_Expression");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.get_Provider", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryProvider"), [], [])
    )
      .Overrides(3, "get_Provider");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.CreateQuery", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable"), [$asm04.TypeRef("System.Linq.Expressions.Expression")], [])
    )
      .Overrides(4, "CreateQuery");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.CreateQuery", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm04.TypeRef("System.Linq.Expressions.Expression")], ["S"])
    )
      .Overrides(4, "CreateQuery");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.Execute", 
      new JSIL.MethodSignature($.Object, [$asm04.TypeRef("System.Linq.Expressions.Expression")], [])
    )
      .Overrides(4, "Execute");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.Execute", 
      new JSIL.MethodSignature("!!0", [$asm04.TypeRef("System.Linq.Expressions.Expression")], ["S"])
    )
      .Overrides(4, "Execute");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "expression", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false}, "enumerable", $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.Provider", $asm04.TypeRef("System.Linq.IQueryProvider"));

    $.Property({Static:false, Public:false, Virtual:true }, "Expression", $asm04.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "Enumerable", $asm01.TypeRef("System.Collections.IEnumerable"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.Expression", $asm04.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.ElementType", $asm01.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("System.Linq.IOrderedQueryable`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")]), 
      /* 1 */ $asm04.TypeRef("System.Linq.IQueryable`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")]), 
      /* 2 */ $asm04.TypeRef("System.Linq.IOrderedQueryable"), 
      /* 3 */ $asm04.TypeRef("System.Linq.IQueryable"), 
      /* 4 */ $asm04.TypeRef("System.Linq.IQueryProvider"), 
      /* 5 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")]), 
      /* 6 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EnumerableExecutor$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.EnumerableExecutor", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$asm04.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteBoxed", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EnumerableExecutor$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.EnumerableExecutor"), "System.Linq.EnumerableExecutor`1", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Execute", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Linq.EnumerableExecutor`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteBoxed", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.Field({Static:false, Public:false}, "expression", $asm04.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false}, "func", $asm04.TypeRef("System.Func`1", [$.GenericParameter("T")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EnumerableRewriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.ExpressionVisitor"), "System.Linq.EnumerableRewriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgsMatch", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Reflection.MethodInfo"), $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindEnumerableMethod", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [
          $.String, $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindMethod", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [
          $asm01.TypeRef("System.Type"), $.String, 
          $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), 
          $asm01.TypeRef("System.Reflection.BindingFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupQuotedArgs", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")]), [$asm01.TypeRef("System.Reflection.MethodInfo"), $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupQuotedExpression", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm01.TypeRef("System.Type"), $asm04.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPublicType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StripExpression", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.ConstantExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.MethodCallExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.Field({Static:true , Public:false}, "_seqMethods", $asm04.TypeRef("System.Linq.ILookup`2", [$.String, $asm01.TypeRef("System.Reflection.MethodInfo")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function $l$gc__DisplayClass3$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.EnumerableRewriter/<>c__DisplayClass3", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "args", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Field({Static:false, Public:true }, "typeArgs", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function $l$gc__DisplayClass7$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.EnumerableRewriter/<>c__DisplayClass7", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "$name", $.String); 
    $.Field({Static:false, Public:true }, "args", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Field({Static:false, Public:true }, "typeArgs", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

(function TypeHelper$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.TypeHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "FindGenericType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetElementType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNonNullableType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEnumerableType", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsKindOfGeneric", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullableType", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Strings$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Strings", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotLambda", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotSequence", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotValid", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EmptyEnumerable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncompatibleElementTypes", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MoreThanOneElement", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MoreThanOneMatch", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoElements", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoMatch", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OwningTeam", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.Property({Static:true , Public:false}, "OwningTeam", $.String);

    $.Property({Static:true , Public:false}, "IncompatibleElementTypes", $.String);

    $.Property({Static:true , Public:false}, "MoreThanOneElement", $.String);

    $.Property({Static:true , Public:false}, "MoreThanOneMatch", $.String);

    $.Property({Static:true , Public:false}, "NoElements", $.String);

    $.Property({Static:true , Public:false}, "NoMatch", $.String);

    $.Property({Static:true , Public:false}, "EmptyEnumerable", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Error$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Error", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotLambda", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotSequence", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotValid", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncompatibleElementTypes", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MoreThanOneElement", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MoreThanOneMatch", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoElements", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMatch", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Runtime");
JSIL.DeclareNamespace("System.Runtime.CompilerServices");
(function ExtensionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Runtime.CompilerServices.ExtensionAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Assembly", "Class", "Method")]; });

})();

JSIL.MakeInterface(
  "System.Runtime.CompilerServices.IStrongBox", true, [], function ($) {
    $.Method({}, "get_Value", new JSIL.MethodSignature($.Object, [], []));
    $.Method({}, "set_Value", new JSIL.MethodSignature(null, [$.Object], []));
    $.Property({}, "Value");
  }, []);

(function StrongBox$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Runtime.CompilerServices.StrongBox`1", true, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.StrongBox`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IStrongBox.get_Value", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Value");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IStrongBox.set_Value", 
      new JSIL.MethodSignature(null, [$.Object], [])
    )
      .Overrides(0, "set_Value");

    $.Field({Static:false, Public:true }, "Value", $.GenericParameter("T")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IStrongBox.Value", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm04.TypeRef("System.Runtime.CompilerServices.IStrongBox")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ExecutionScope$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Runtime.CompilerServices.ExecutionScope", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/LambdaInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateDelegate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Delegate"), [$.Int32, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateHoistedLocals", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsolateExpression", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.Field({Static:false, Public:true }, "Parent", $.Type); 
    $.Field({Static:false, Public:true }, "Globals", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:true }, "Locals", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:false}, "Lambda", $asm04.TypeRef("System.Linq.Expressions.ExpressionCompiler/LambdaInfo")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ExpressionIsolator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Linq.Expressions.ExpressionVisitor"), "System.Runtime.CompilerServices.ExecutionScope/ExpressionIsolator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Runtime.CompilerServices.ExecutionScope"), $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Linq.Expressions.Expression"), [$asm04.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.Field({Static:false, Public:false}, "top", $asm04.TypeRef("System.Runtime.CompilerServices.ExecutionScope")); 
    $.Field({Static:false, Public:false}, "toplocals", $jsilcore.TypeRef("System.Array", [$.Object])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Win32");
JSIL.DeclareNamespace("Microsoft.Win32.SafeHandles");
(function SafeBCryptAlgorithmHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BCryptCloseAlgorithmProvider", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [$asm01.TypeRef("System.IntPtr"), $.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

(function SafeBCryptHashHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafeBCryptHashHandle", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BCryptDestroyHash", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [$asm01.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "get_HashObject", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HashObject", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr")], [])
    );

    $.Field({Static:false, Public:false}, "m_hashObject", $asm01.TypeRef("System.IntPtr")); 
    $.Property({Static:false, Public:false}, "HashObject", $asm01.TypeRef("System.IntPtr"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

(function SafeAxlBufferHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafeAxlBufferHandle", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProcessHeap", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HeapFree", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $asm01.TypeRef("System.IntPtr")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

(function SafeCapiHashHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafeCapiHashHandle", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CryptDestroyHash", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "get_InvalidHandle", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Property({Static:true , Public:true }, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

(function SafeCapiKeyHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafeCapiKeyHandle", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CryptContextAddRef", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CryptDestroyKey", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "CryptReleaseContext", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.IntPtr"), $.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCsp", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:false}, "SetCsp", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.Field({Static:false, Public:false}, "m_csp", $asm01.TypeRef("System.IntPtr")); 
    $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

(function SafeCspHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafeCspHandle", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CryptContextAddRef", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $asm01.TypeRef("System.IntPtr"), 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "CryptReleaseContext", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.IntPtr"), $.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Duplicate", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

(function SafeNCryptHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafeNCryptHandle", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
      new JSIL.MethodSignature("!!0", [], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "DuplicateDuplicatedHandle", 
      new JSIL.MethodSignature("!!0", [], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "DuplicateOwnerHandle", 
      new JSIL.MethodSignature("!!0", [], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Holder", 
      new JSIL.MethodSignature($.Type, [], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseNativeHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "set_Holder", 
      new JSIL.MethodSignature(null, [$.Type], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Field({Static:false, Public:false}, "m_ownershipState", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle/OwnershipState")); 
    $.Field({Static:false, Public:false}, "m_holder", $.Type); 
    $.Property({Static:false, Public:false}, "Holder", $.Type);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

JSIL.MakeEnum(
  "Microsoft.Win32.SafeHandles.SafeNCryptHandle/OwnershipState", false, {
    Owner: 0, 
    Duplicate: 1, 
    Holder: 2
  }, false
);

(function SafeNCryptKeyHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), "Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptFreeObject", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseNativeHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

(function SafeNCryptProviderHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), "Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptFreeObject", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseNativeHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetHandleValue", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

(function SafeNCryptSecretHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), "Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptFreeObject", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseNativeHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

JSIL.DeclareNamespace("System.Security");
JSIL.MakeEnum(
  "System.Security.ManifestKinds", true, {
    None: 0, 
    Deployment: 1, 
    Application: 2, 
    ApplicationAndDeployment: 3
  }, true
);

JSIL.DeclareNamespace("System.Security.Cryptography");
(function Aes$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Security.Cryptography.SymmetricAlgorithm"), "System.Security.Cryptography.Aes", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.Field({Static:true , Public:false}, "s_legalBlockSizes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Security.Cryptography.KeySizes")])); 
    $.Field({Static:true , Public:false}, "s_legalKeySizes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Security.Cryptography.KeySizes")])); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AesCryptoServiceProvider$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Security.Cryptography.Aes"), "System.Security.Cryptography.AesCryptoServiceProvider", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Cryptography.ICryptoTransform"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CreateDecryptor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Cryptography.ICryptoTransform"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CreateEncryptor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FindSupportedKeySizes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Security.Cryptography.KeySizes")]), [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateIV", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateKey", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAlgorithmId", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Key", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_KeySize", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_supportedKeySizes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Security.Cryptography.KeySizes")])); 
    $.Field({Static:true , Public:false}, "s_defaultKeySize", $.Int32); 
    $.Field({Static:false, Public:false}, "m_cspHandle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle")); 
    $.Field({Static:false, Public:false}, "m_key", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Key", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AesManaged$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Security.Cryptography.Aes"), "System.Security.Cryptography.AesManaged", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Cryptography.ICryptoTransform"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Cryptography.ICryptoTransform"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateIV", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateKey", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FeedbackSize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IV", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Mode", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Cryptography.CipherMode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Padding", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Cryptography.PaddingMode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_FeedbackSize", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IV", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Key", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_KeySize", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Mode", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Security.Cryptography.CipherMode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Padding", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Security.Cryptography.PaddingMode")], [])
    );

    $.Field({Static:false, Public:false}, "m_rijndael", $asm01.TypeRef("System.Security.Cryptography.RijndaelManaged")); 
    $.Property({Static:false, Public:true , Virtual:true }, "FeedbackSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IV", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Mode", $asm01.TypeRef("System.Security.Cryptography.CipherMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Padding", $asm01.TypeRef("System.Security.Cryptography.PaddingMode"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function BCryptNative$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "get_BCryptSupported", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetInt32Property", 
      new JSIL.MethodSignature($.Int32, ["!!0", $.String], ["T"])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetProperty", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), ["!!0", $.String], ["T"])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MapAlgorithmIdToMagic", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Security.Cryptography.BCryptNative/KeyBlobMagicNumber")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenAlgorithm", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), [$.String, $.String], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_bcryptSupported", $asm01.TypeRef("System.Nullable`1", [$.Boolean])); 
    function BCryptNative__cctor () {
      $thisType.s_bcryptSupported = new ($asm01.System.Nullable$b1.Of($asm01.System.Boolean)) ();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      BCryptNative__cctor
    );

    $.Property({Static:true , Public:false}, "BCryptSupported", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AlgorithmName$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/AlgorithmName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "ECDHP256", "ECDH_P256"); 
    $.Constant({Static:true , Public:true }, "ECDHP384", "ECDH_P384"); 
    $.Constant({Static:true , Public:true }, "ECDHP521", "ECDH_P521"); 
    $.Constant({Static:true , Public:true }, "ECDsaP256", "ECDSA_P256"); 
    $.Constant({Static:true , Public:true }, "ECDsaP384", "ECDSA_P384"); 
    $.Constant({Static:true , Public:true }, "ECDsaP521", "ECDSA_P521"); 
    $.Constant({Static:true , Public:true }, "MD5", "MD5"); 
    $.Constant({Static:true , Public:true }, "Sha1", "SHA1"); 
    $.Constant({Static:true , Public:true }, "Sha256", "SHA256"); 
    $.Constant({Static:true , Public:true }, "Sha384", "SHA384"); 
    $.Constant({Static:true , Public:true }, "Sha512", "SHA512"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Security.Cryptography.BCryptNative/ErrorCode", false, {
    BufferToSmall: -1073741789, 
    ObjectNameNotFound: -1073741772, 
    Success: 0
  }, false
);

(function HashPropertyName$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/HashPropertyName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "HashLength", "HashDigestLength"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Security.Cryptography.BCryptNative/KeyBlobMagicNumber", false, {
    ECDHPublicP256: 827016005, 
    ECDsaPublicP256: 827540293, 
    ECDHPublicP384: 860570437, 
    ECDsaPublicP384: 861094725, 
    ECDHPublicP521: 894124869, 
    ECDsaPublicP521: 894649157
  }, false
);

(function KeyDerivationFunction$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/KeyDerivationFunction", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "Hash", "HASH"); 
    $.Constant({Static:true , Public:true }, "Hmac", "HMAC"); 
    $.Constant({Static:true , Public:true }, "Tls", "TLS_PRF"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ProviderName$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/ProviderName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "MicrosoftPrimitiveProvider", "Microsoft Primitive Provider"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ObjectPropertyName$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/ObjectPropertyName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "ObjectLength", "ObjectLength"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function UnsafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/UnsafeNativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "BCryptCreateHash", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle")]), 
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BCryptFinishHash", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BCryptGetAlgorithmProperty", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BCryptGetHashProperty", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BCryptGetProperty", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BCryptHashData", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BCryptOpenAlgorithmProvider", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle")]), $.String, 
          $.String, $.Int32
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

JSIL.MakeDelegate("System.Security.Cryptography.BCryptNative/BCryptPropertyGetter`1", false, ["T"]);

(function BCryptHashAlgorithm$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Security.Cryptography.BCryptHashAlgorithm", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.CngAlgorithm"), $.String], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashStream", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_algorithmHandle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle")); 
    $.Field({Static:false, Public:false}, "m_hashHandle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle")); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CngAlgorithm$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Security.Cryptography.CngAlgorithm", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Algorithm", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellmanP256", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellmanP384", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellmanP521", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDsaP256", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDsaP384", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDsaP521", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MD5", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sha1", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sha256", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sha384", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sha512", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "s_ecdhp256", $.Type); 
    $.Field({Static:true , Public:false}, "s_ecdhp384", $.Type); 
    $.Field({Static:true , Public:false}, "s_ecdhp521", $.Type); 
    $.Field({Static:true , Public:false}, "s_ecdsap256", $.Type); 
    $.Field({Static:true , Public:false}, "s_ecdsap384", $.Type); 
    $.Field({Static:true , Public:false}, "s_ecdsap521", $.Type); 
    $.Field({Static:true , Public:false}, "s_md5", $.Type); 
    $.Field({Static:true , Public:false}, "s_sha1", $.Type); 
    $.Field({Static:true , Public:false}, "s_sha256", $.Type); 
    $.Field({Static:true , Public:false}, "s_sha384", $.Type); 
    $.Field({Static:true , Public:false}, "s_sha512", $.Type); 
    $.Field({Static:false, Public:false}, "m_algorithm", $.String); 
    $.Property({Static:false, Public:true }, "Algorithm", $.String);

    $.Property({Static:true , Public:true }, "ECDiffieHellmanP256", $.Type);

    $.Property({Static:true , Public:true }, "ECDiffieHellmanP384", $.Type);

    $.Property({Static:true , Public:true }, "ECDiffieHellmanP521", $.Type);

    $.Property({Static:true , Public:true }, "ECDsaP256", $.Type);

    $.Property({Static:true , Public:true }, "ECDsaP384", $.Type);

    $.Property({Static:true , Public:true }, "ECDsaP521", $.Type);

    $.Property({Static:true , Public:true }, "MD5", $.Type);

    $.Property({Static:true , Public:true }, "Sha1", $.Type);

    $.Property({Static:true , Public:true }, "Sha256", $.Type);

    $.Property({Static:true , Public:true }, "Sha384", $.Type);

    $.Property({Static:true , Public:true }, "Sha512", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CngAlgorithmGroup$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Security.Cryptography.CngAlgorithmGroup", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AlgorithmGroup", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DiffieHellman", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Dsa", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellman", 
      new JSIL.MethodSignature($.Type, [], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_ECDsa", 
      new JSIL.MethodSignature($.Type, [], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Rsa", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "s_dh", $.Type); 
    $.Field({Static:true , Public:false}, "s_dsa", $.Type); 
    $.Field({Static:true , Public:false}, "s_ecdh", $.Type); 
    $.Field({Static:true , Public:false}, "s_ecdsa", $.Type); 
    $.Field({Static:true , Public:false}, "s_rsa", $.Type); 
    $.Field({Static:false, Public:false}, "m_algorithmGroup", $.String); 
    $.Property({Static:false, Public:true }, "AlgorithmGroup", $.String);

    $.Property({Static:true , Public:true }, "DiffieHellman", $.Type);

    $.Property({Static:true , Public:true }, "Dsa", $.Type);

    $.Property({Static:true , Public:true }, "ECDiffieHellman", $.Type);

    $.Property({Static:true , Public:true }, "ECDsa", $.Type);

    $.Property({Static:true , Public:true }, "Rsa", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Security.Cryptography.CngKeyHandleOpenOptions", true, {
    None: 0, 
    EphemeralKey: 1
  }, true
);

(function CngKey$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Security.Cryptography.CngKey", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "BuildKeyContainerPermission", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Permissions.KeyContainerPermission"), [$asm01.TypeRef("System.Security.Permissions.KeyContainerPermissionFlags")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm04.TypeRef("System.Security.Cryptography.CngAlgorithm")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm04.TypeRef("System.Security.Cryptography.CngAlgorithm"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm04.TypeRef("System.Security.Cryptography.CngAlgorithm"), $.String, 
          $asm04.TypeRef("System.Security.Cryptography.CngKeyCreationParameters")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Delete", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm04.TypeRef("System.Security.Cryptography.CngProvider")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm04.TypeRef("System.Security.Cryptography.CngProvider"), 
          $asm04.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Export", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm04.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Algorithm", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngAlgorithm"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_AlgorithmGroup", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngAlgorithmGroup"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ExportPolicy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngExportPolicies"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Handle", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsEphemeral", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsMachineKey", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_KeyName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_KeySize", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_KeyUsage", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngKeyUsages"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ParentWindowHandle", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngProvider"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderHandle", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_UIPolicy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngUIPolicy"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_UniqueName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetProperty", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngProperty"), [$.String, $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HasProperty", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Import", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm04.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Import", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm04.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"), 
          $asm04.TypeRef("System.Security.Cryptography.CngProvider")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($.Type, [$.String, $asm04.TypeRef("System.Security.Cryptography.CngProvider")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm04.TypeRef("System.Security.Cryptography.CngProvider"), 
          $asm04.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($.Type, [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm04.TypeRef("System.Security.Cryptography.CngKeyHandleOpenOptions")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsEphemeral", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ParentWindowHandle", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetKeyProperties", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm04.TypeRef("System.Security.Cryptography.CngKeyCreationParameters")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SetProperty", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.CngProperty")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_keyHandle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")); 
    $.Field({Static:false, Public:false}, "m_kspHandle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle")); 
    $.Property({Static:false, Public:true }, "AlgorithmGroup", $asm04.TypeRef("System.Security.Cryptography.CngAlgorithmGroup"));

    $.Property({Static:false, Public:true }, "Algorithm", $asm04.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Property({Static:false, Public:true }, "ExportPolicy", $asm04.TypeRef("System.Security.Cryptography.CngExportPolicies"));

    $.Property({Static:false, Public:true }, "Handle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"));

    $.Property({Static:false, Public:true }, "IsEphemeral", $.Boolean);

    $.Property({Static:false, Public:true }, "IsMachineKey", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyName", $.String);

    $.Property({Static:false, Public:true }, "KeySize", $.Int32);

    $.Property({Static:false, Public:true }, "KeyUsage", $asm04.TypeRef("System.Security.Cryptography.CngKeyUsages"));

    $.Property({Static:false, Public:true }, "ParentWindowHandle", $asm01.TypeRef("System.IntPtr"));

    $.Property({Static:false, Public:true }, "Provider", $asm04.TypeRef("System.Security.Cryptography.CngProvider"));

    $.Property({Static:false, Public:true }, "ProviderHandle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"));

    $.Property({Static:false, Public:true }, "UniqueName", $.String);

    $.Property({Static:false, Public:true }, "UIPolicy", $asm04.TypeRef("System.Security.Cryptography.CngUIPolicy"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CngKeyBlobFormat$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Security.Cryptography.CngKeyBlobFormat", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EccPrivateBlob", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EccPublicBlob", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Format", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GenericPrivateBlob", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GenericPublicBlob", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OpaqueTransportBlob", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Pkcs8PrivateBlob", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "s_eccPrivate", $.Type); 
    $.Field({Static:true , Public:false}, "s_eccPublic", $.Type); 
    $.Field({Static:true , Public:false}, "s_genericPrivate", $.Type); 
    $.Field({Static:true , Public:false}, "s_genericPublic", $.Type); 
    $.Field({Static:true , Public:false}, "s_opaqueTransport", $.Type); 
    $.Field({Static:true , Public:false}, "s_pkcs8Private", $.Type); 
    $.Field({Static:false, Public:false}, "m_format", $.String); 
    $.Property({Static:false, Public:true }, "Format", $.String);

    $.Property({Static:true , Public:true }, "EccPrivateBlob", $.Type);

    $.Property({Static:true , Public:true }, "EccPublicBlob", $.Type);

    $.Property({Static:true , Public:true }, "GenericPrivateBlob", $.Type);

    $.Property({Static:true , Public:true }, "GenericPublicBlob", $.Type);

    $.Property({Static:true , Public:true }, "OpaqueTransportBlob", $.Type);

    $.Property({Static:true , Public:true }, "Pkcs8PrivateBlob", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CngKeyCreationParameters$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Security.Cryptography.CngKeyCreationParameters", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExportPolicy", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm04.TypeRef("System.Security.Cryptography.CngExportPolicies")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyCreationOptions", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngKeyCreationOptions"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyUsage", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm04.TypeRef("System.Security.Cryptography.CngKeyUsages")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParametersNoDemand", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentWindowHandle", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngProvider"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UIPolicy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngUIPolicy"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExportPolicy", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Nullable`1", [$asm04.TypeRef("System.Security.Cryptography.CngExportPolicies")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyCreationOptions", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.CngKeyCreationOptions")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyUsage", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Nullable`1", [$asm04.TypeRef("System.Security.Cryptography.CngKeyUsages")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParentWindowHandle", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Provider", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.CngProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UIPolicy", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.CngUIPolicy")], [])
    );

    $.Field({Static:false, Public:false}, "m_exportPolicy", $asm01.TypeRef("System.Nullable`1", [$asm04.TypeRef("System.Security.Cryptography.CngExportPolicies")])); 
    $.Field({Static:false, Public:false}, "m_keyCreationOptions", $asm04.TypeRef("System.Security.Cryptography.CngKeyCreationOptions")); 
    $.Field({Static:false, Public:false}, "m_keyUsage", $asm01.TypeRef("System.Nullable`1", [$asm04.TypeRef("System.Security.Cryptography.CngKeyUsages")])); 
    $.Field({Static:false, Public:false}, "m_parameters", $asm04.TypeRef("System.Security.Cryptography.CngPropertyCollection")); 
    $.Field({Static:false, Public:false}, "m_parentWindowHandle", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "m_provider", $asm04.TypeRef("System.Security.Cryptography.CngProvider")); 
    $.Field({Static:false, Public:false}, "m_uiPolicy", $asm04.TypeRef("System.Security.Cryptography.CngUIPolicy")); 
    $.Property({Static:false, Public:true }, "ExportPolicy", $asm01.TypeRef("System.Nullable`1", [$asm04.TypeRef("System.Security.Cryptography.CngExportPolicies")]));

    $.Property({Static:false, Public:true }, "KeyCreationOptions", $asm04.TypeRef("System.Security.Cryptography.CngKeyCreationOptions"));

    $.Property({Static:false, Public:true }, "KeyUsage", $asm01.TypeRef("System.Nullable`1", [$asm04.TypeRef("System.Security.Cryptography.CngKeyUsages")]));

    $.Property({Static:false, Public:true }, "ParentWindowHandle", $asm01.TypeRef("System.IntPtr"));

    $.Property({Static:false, Public:true }, "Parameters", $asm04.TypeRef("System.Security.Cryptography.CngPropertyCollection"));

    $.Property({Static:false, Public:false}, "ParametersNoDemand", $asm04.TypeRef("System.Security.Cryptography.CngPropertyCollection"));

    $.Property({Static:false, Public:true }, "Provider", $asm04.TypeRef("System.Security.Cryptography.CngProvider"));

    $.Property({Static:false, Public:true }, "UIPolicy", $asm04.TypeRef("System.Security.Cryptography.CngUIPolicy"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CngProperty$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Security.Cryptography.CngProperty", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetValue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.Field({Static:false, Public:false}, "m_name", $.String); 
    $.Field({Static:false, Public:false}, "m_propertyOptions", $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")); 
    $.Field({Static:false, Public:false}, "m_value", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "m_hashCode", $asm01.TypeRef("System.Nullable`1", [$.Int32])); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Options", $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions"));

    $.Property({Static:false, Public:false}, "Value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CngPropertyCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm04.TypeRef("System.Security.Cryptography.CngProperty")]), "System.Security.Cryptography.CngPropertyCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CngProvider$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Security.Cryptography.CngProvider", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MicrosoftSmartCardKeyStorageProvider", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MicrosoftSoftwareKeyStorageProvider", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "s_msSmartCardKsp", $.Type); 
    $.Field({Static:true , Public:false}, "s_msSoftwareKsp", $.Type); 
    $.Field({Static:false, Public:false}, "m_provider", $.String); 
    $.Property({Static:false, Public:true }, "Provider", $.String);

    $.Property({Static:true , Public:true }, "MicrosoftSmartCardKeyStorageProvider", $.Type);

    $.Property({Static:true , Public:true }, "MicrosoftSoftwareKeyStorageProvider", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CngUIPolicy$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Security.Cryptography.CngUIPolicy", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.CngUIProtectionLevels")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String, 
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreationTitle", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FriendlyName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtectionLevel", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseContext", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "m_creationTitle", $.String); 
    $.Field({Static:false, Public:false}, "m_description", $.String); 
    $.Field({Static:false, Public:false}, "m_friendlyName", $.String); 
    $.Field({Static:false, Public:false}, "m_protectionLevel", $asm04.TypeRef("System.Security.Cryptography.CngUIProtectionLevels")); 
    $.Field({Static:false, Public:false}, "m_useContext", $.String); 
    $.Property({Static:false, Public:true }, "CreationTitle", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "FriendlyName", $.String);

    $.Property({Static:false, Public:true }, "ProtectionLevel", $asm04.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"));

    $.Property({Static:false, Public:true }, "UseContext", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CapiHashAlgorithm$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Security.Cryptography.CapiHashAlgorithm", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.Security.Cryptography.CapiNative/ProviderType"), 
          $asm04.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_algorithmId", $asm04.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
    $.Field({Static:false, Public:false}, "m_cspHandle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle")); 
    $.Field({Static:false, Public:false}, "m_hashHandle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle")); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CapiNative$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.CapiNative", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "AcquireCsp", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), [
          $.String, $.String, 
          $asm04.TypeRef("System.Security.Cryptography.CapiNative/ProviderType"), $asm04.TypeRef("System.Security.Cryptography.CapiNative/CryptAcquireContextFlags"), 
          $.Boolean
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ExportSymmetricKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetAlgorithmName", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHashParameter", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), $asm04.TypeRef("System.Security.Cryptography.CapiNative/HashParameter")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetProviderParameterStruct", 
      new JSIL.MethodSignature("!!0", [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm04.TypeRef("System.Security.Cryptography.CapiNative/ProviderParameter"), 
          $asm04.TypeRef("System.Security.Cryptography.CapiNative/ProviderParameterFlags")
        ], ["T"])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HResultForVerificationResult", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportSymmetricKey", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm04.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetKeyParameter", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm04.TypeRef("System.Security.Cryptography.CapiNative/KeyParameter"), 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetKeyParameter", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm04.TypeRef("System.Security.Cryptography.CapiNative/KeyParameter"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/AlgorithmClass", false, {
    DataEncryption: 24576, 
    Hash: 32768
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/AlgorithmType", false, {
    Any: 0, 
    Block: 1536
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/AlgorithmSubId", false, {
    MD5: 3, 
    Sha1: 4, 
    Sha256: 12, 
    Sha384: 13, 
    Aes128: 14, 
    Sha512: 14, 
    Aes192: 15, 
    Aes256: 16
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/AlgorithmId", false, {
    None: 0, 
    Aes128: 26126, 
    Aes192: 26127, 
    Aes256: 26128, 
    MD5: 32771, 
    Sha1: 32772, 
    Sha256: 32780, 
    Sha384: 32781, 
    Sha512: 32782
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/CryptAcquireContextFlags", false, {
    VerifyContext: -268435456, 
    None: 0
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/ErrorCode", false, {
    BadData: -2146893819, 
    BadAlgorithmId: -2146893816, 
    ProviderTypeNotDefined: -2146893801, 
    KeysetNotDefined: -2146893799, 
    Success: 0, 
    MoreData: 234, 
    NoMoreItems: 259
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/HashParameter", false, {
    None: 0, 
    AlgorithmId: 1, 
    HashValue: 2, 
    HashSize: 4
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/KeyBlobType", false, {
    PlainText: 8
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/KeyFlags", false, {
    None: 0, 
    Exportable: 1
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/KeyParameter", false, {
    None: 0, 
    IV: 1, 
    Mode: 4, 
    ModeBits: 5
  }, false
);

(function ProviderNames$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.CapiNative/ProviderNames", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "MicrosoftEnhancedRsaAes", "Microsoft Enhanced RSA and AES Cryptographic Provider"); 
    $.Constant({Static:true , Public:true }, "MicrosoftEnhancedRsaAesPrototype", "Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/ProviderParameter", false, {
    None: 0, 
    EnumerateAlgorithms: 1
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/ProviderParameterFlags", false, {
    None: 0, 
    RestartEnumeration: 1
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/ProviderType", false, {
    None: 0, 
    RsaAes: 24
  }, false
);

(function BLOBHEADER$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Security.Cryptography.CapiNative/BLOBHEADER", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "bType", $asm04.TypeRef("System.Security.Cryptography.CapiNative/KeyBlobType")); 
    $.Field({Static:false, Public:true }, "bVersion", $.Byte); 
    $.Field({Static:false, Public:true }, "reserved", $.Int16); 
    $.Field({Static:false, Public:true }, "aiKeyAlg", $asm04.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CRYPTOAPI_BLOB$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Security.Cryptography.CapiNative/CRYPTOAPI_BLOB", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "cbData", $.Int32); 
    $.Field({Static:false, Public:true }, "pbData", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PROV_ENUMALGS$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Security.Cryptography.CapiNative/PROV_ENUMALGS", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "aiAlgId", $asm04.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
    $.Field({Static:false, Public:true }, "dwBitLen", $.Int32); 
    $.Field({Static:false, Public:true }, "dwNameLen", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function UnsafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.CapiNative/UnsafeNativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "_AxlPublicKeyBlobToPublicKeyToken", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Security.Cryptography.CapiNative/CRYPTOAPI_BLOB")]), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeAxlBufferHandle")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptAcquireContext", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle")]), $.String, 
          $.String, $asm04.TypeRef("System.Security.Cryptography.CapiNative/ProviderType"), 
          $asm04.TypeRef("System.Security.Cryptography.CapiNative/CryptAcquireContextFlags")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptCreateHash", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm04.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId"), 
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptDecrypt", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), 
          $.Boolean, $.Int32, 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptDuplicateKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm01.TypeRef("System.IntPtr"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CryptEncrypt", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), 
          $.Boolean, $.Int32, 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptExportKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptGenKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm04.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId"), 
          $asm04.TypeRef("System.Security.Cryptography.CapiNative/KeyFlags"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptGenRandom", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptGetHashParam", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), $asm04.TypeRef("System.Security.Cryptography.CapiNative/HashParameter"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptGetProvParam", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm04.TypeRef("System.Security.Cryptography.CapiNative/ProviderParameter"), 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm04.TypeRef("System.Security.Cryptography.CapiNative/ProviderParameterFlags")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptHashData", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptImportKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), 
          $asm04.TypeRef("System.Security.Cryptography.CapiNative/KeyFlags"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptSetKeyParam", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm04.TypeRef("System.Security.Cryptography.CapiNative/KeyParameter"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; })
    .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

JSIL.MakeEnum(
  "System.Security.Cryptography.EncryptionMode", false, {
    Encrypt: 0, 
    Decrypt: 1
  }, false
);

(function CapiSymmetricAlgorithm$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Security.Cryptography.CapiSymmetricAlgorithm", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm01.TypeRef("System.Security.Cryptography.CipherMode"), 
          $asm01.TypeRef("System.Security.Cryptography.PaddingMode"), $asm04.TypeRef("System.Security.Cryptography.EncryptionMode")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "DecryptBlocks", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "DepadBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EncryptBlocks", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReuseTransform", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTransformMultipleBlocks", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InputBlockSize", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OutputBlockSize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PadBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ProcessIV", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm01.TypeRef("System.Security.Cryptography.CipherMode")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RawDecryptBlocks", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetupKey", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm01.TypeRef("System.Security.Cryptography.CipherMode"), $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TransformBlock", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TransformFinalBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_blockSize", $.Int32); 
    $.Field({Static:false, Public:false}, "m_depadBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "m_encryptionMode", $asm04.TypeRef("System.Security.Cryptography.EncryptionMode")); 
    $.Field({Static:false, Public:false}, "m_key", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")); 
    $.Field({Static:false, Public:false}, "m_paddingMode", $asm01.TypeRef("System.Security.Cryptography.PaddingMode")); 
    $.Field({Static:false, Public:false}, "m_provider", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle")); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanReuseTransform", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTransformMultipleBlocks", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "InputBlockSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "OutputBlockSize", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Security.Cryptography.ICryptoTransform"), 
      /* 1 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ECDiffieHellman$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), "System.Security.Cryptography.ECDiffieHellman", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm04.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeyExchangeAlgorithm", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PublicKey", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SignatureAlgorithm", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "KeyExchangeAlgorithm", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SignatureAlgorithm", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "PublicKey", $asm04.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ECDiffieHellmanPublicKey$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Security.Cryptography.ECDiffieHellmanPublicKey", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "m_keyBlob", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction", true, {
    Hash: 0, 
    Hmac: 1, 
    Tls: 2
  }, false
);

(function ECDiffieHellmanCng$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Security.Cryptography.ECDiffieHellman"), "System.Security.Cryptography.ECDiffieHellmanCng", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.CngKey")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm04.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm04.TypeRef("System.Security.Cryptography.CngKey")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "DeriveSecretAgreementHandle", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), [$asm04.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeriveSecretAgreementHandle", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), [$asm04.TypeRef("System.Security.Cryptography.CngKey")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXmlString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FromXmlString", 
      new JSIL.MethodSignature(null, [$.String, $asm04.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngAlgorithm"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HmacKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngKey"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyDerivationFunction", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Label", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PublicKey", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SecretAppend", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecretPrepend", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Seed", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseSecretAgreementAsHmacKey", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HashAlgorithm", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.CngAlgorithm")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HmacKey", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Key", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.CngKey")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyDerivationFunction", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Label", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecretAppend", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecretPrepend", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Seed", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")], [])
    );

    $.Field({Static:true , Public:false}, "s_legalKeySizes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Security.Cryptography.KeySizes")])); 
    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm04.TypeRef("System.Security.Cryptography.CngAlgorithm")); 
    $.Field({Static:false, Public:false}, "m_hmacKey", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "m_key", $asm04.TypeRef("System.Security.Cryptography.CngKey")); 
    $.Field({Static:false, Public:false}, "m_kdf", $asm04.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction")); 
    $.Field({Static:false, Public:false}, "m_label", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "m_secretAppend", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "m_secretPrepend", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "m_seed", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Property({Static:false, Public:true }, "HashAlgorithm", $asm04.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Property({Static:false, Public:true }, "HmacKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "KeyDerivationFunction", $asm04.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction"));

    $.Property({Static:false, Public:true }, "Label", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "SecretAppend", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "SecretPrepend", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Seed", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Key", $asm04.TypeRef("System.Security.Cryptography.CngKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "PublicKey", $asm04.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"));

    $.Property({Static:false, Public:true }, "UseSecretAgreementAsHmacKey", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ECDiffieHellmanCngPublicKey$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), "System.Security.Cryptography.ECDiffieHellmanCngPublicKey", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.CngKey")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromByteArray", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm04.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FromXmlString", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_BlobFormat", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Import", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngKey"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "m_key", $asm04.TypeRef("System.Security.Cryptography.CngKey")); 
    $.Field({Static:false, Public:false}, "m_format", $asm04.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")); 
    $.Property({Static:false, Public:true }, "BlobFormat", $asm04.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ECDsa$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), "System.Security.Cryptography.ECDsa", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeyExchangeAlgorithm", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SignatureAlgorithm", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SignHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifyHash", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "KeyExchangeAlgorithm", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SignatureAlgorithm", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ECDsaCng$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.Security.Cryptography.ECDsa"), "System.Security.Cryptography.ECDsaCng", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.CngKey")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXmlString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FromXmlString", 
      new JSIL.MethodSignature(null, [$.String, $asm04.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngAlgorithm"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngKey"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HashAlgorithm", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.CngAlgorithm")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Key", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.CngKey")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm01.TypeRef("System.IO.Stream")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SignHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifyHash", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_legalKeySizes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Security.Cryptography.KeySizes")])); 
    $.Field({Static:false, Public:false}, "m_key", $asm04.TypeRef("System.Security.Cryptography.CngKey")); 
    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm04.TypeRef("System.Security.Cryptography.CngAlgorithm")); 
    $.Property({Static:false, Public:true }, "HashAlgorithm", $asm04.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Property({Static:false, Public:true }, "Key", $asm04.TypeRef("System.Security.Cryptography.CngKey"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Security.Cryptography.ECKeyXmlFormat", true, {
    Rfc4050: 0
  }, false
);

(function CoreCryptoConfig$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.CoreCryptoConfig", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "CreateFromName", 
      new JSIL.MethodSignature("!!0", [$.String], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AlgorithmNameMap", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("System.Type")]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EnforceFipsAlgorithms", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:true , Public:false}, "s_nameMap", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("System.Type")])); 
    $.Field({Static:true , Public:false}, "s_enforceFipsAlgorithms", $asm01.TypeRef("System.Nullable`1", [$.Boolean])); 
    function CoreCryptoConfig__cctor () {
      $thisType.s_enforceFipsAlgorithms = new ($asm01.System.Nullable$b1.Of($asm01.System.Boolean)) ();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      CoreCryptoConfig__cctor
    );

    $.Property({Static:true , Public:false}, "AlgorithmNameMap", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("System.Type")]));

    $.Property({Static:true , Public:false}, "EnforceFipsAlgorithms", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ManifestSignatureInformation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Security.Cryptography.ManifestSignatureInformation", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Security.ManifestKinds"), $asm04.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"), 
          $asm04.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticodeSignature", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Manifest", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.ManifestKinds"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StrongNameSignature", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetManifestXml", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDocument"), [$asm01.TypeRef("System.ActivationContext"), $asm04.TypeRef("System.Security.ManifestKinds")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "VerifySignature", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.ManifestSignatureInformationCollection"), [$asm01.TypeRef("System.ActivationContext")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VerifySignature", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.ManifestSignatureInformationCollection"), [$asm01.TypeRef("System.ActivationContext"), $asm04.TypeRef("System.Security.ManifestKinds")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VerifySignature", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.ManifestSignatureInformationCollection"), [
          $asm01.TypeRef("System.ActivationContext"), $asm04.TypeRef("System.Security.ManifestKinds"), 
          $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_manifest", $asm04.TypeRef("System.Security.ManifestKinds")); 
    $.Field({Static:false, Public:false}, "m_strongNameSignature", $asm04.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation")); 
    $.Field({Static:false, Public:false}, "m_authenticodeSignature", $asm04.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation")); 
    $.Property({Static:false, Public:true }, "AuthenticodeSignature", $asm04.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"));

    $.Property({Static:false, Public:true }, "Manifest", $asm04.TypeRef("System.Security.ManifestKinds"));

    $.Property({Static:false, Public:true }, "StrongNameSignature", $asm04.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ManifestSignatureInformationCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm04.TypeRef("System.Security.Cryptography.ManifestSignatureInformation")]), "System.Security.Cryptography.ManifestSignatureInformationCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("System.Security.Cryptography.ManifestSignatureInformation")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function MD5Cng$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Security.Cryptography.MD5"), "System.Security.Cryptography.MD5Cng", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm04.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Security.Cryptography.CngExportPolicies", true, {
    None: 0, 
    AllowExport: 1, 
    AllowPlaintextExport: 2, 
    AllowArchiving: 4, 
    AllowPlaintextArchiving: 8
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CngKeyCreationOptions", true, {
    None: 0, 
    MachineKey: 32, 
    OverwriteExistingKey: 128
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CngKeyOpenOptions", true, {
    UserKey: 0, 
    None: 0, 
    MachineKey: 32, 
    Silent: 64
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CngKeyTypes", false, {
    None: 0, 
    MachineKey: 32
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CngKeyUsages", true, {
    None: 0, 
    Decryption: 1, 
    Signing: 2, 
    KeyAgreement: 4, 
    AllUsages: 16777215
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CngPropertyOptions", true, {
    Persist: -2147483648, 
    None: 0, 
    CustomProperty: 1073741824
  }, true
);

JSIL.MakeEnum(
  "System.Security.Cryptography.CngUIProtectionLevels", true, {
    None: 0, 
    ProtectKey: 1, 
    ForceHighProtection: 2
  }, true
);

(function NCryptNative$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "BuildEccPublicBlob", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $asm04.TypeRef("System.Numeric.BigInteger"), 
          $asm04.TypeRef("System.Numeric.BigInteger")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatePersistedKey", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $.String, 
          $.String, $asm04.TypeRef("System.Security.Cryptography.CngKeyCreationOptions")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeleteKey", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm04.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Security.Cryptography.NCryptNative/NCryptBuffer")]), $asm04.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterialHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm04.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterialHmac", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm04.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterialTls", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm04.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveSecretAgreement", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ExportKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.String], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FillKeyParameter", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FinalizeKey", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_NCryptSupported", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetProperty", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsDWord", 
      new JSIL.MethodSignature($.Int32, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsIntPtr", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsString", 
      new JSIL.MethodSignature($.String, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsStruct", 
      new JSIL.MethodSignature("!!0", [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], ["T"])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ImportKey", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OpenKey", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $.String, 
          $asm04.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OpenStorageProvider", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), [$.String], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ReverseBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReverseBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $.Int32, $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $.String, $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          "!!0", $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], ["T"])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SignHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnpackEccPublicBlob", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Numeric.BigInteger")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Numeric.BigInteger")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifySignature", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_ncryptSupported", $asm01.TypeRef("System.Nullable`1", [$.Boolean])); 
    function NCryptNative__cctor () {
      $thisType.s_ncryptSupported = new ($asm01.System.Nullable$b1.Of($asm01.System.Boolean)) ();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      NCryptNative__cctor
    );

    $.Property({Static:true , Public:false}, "NCryptSupported", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Security.Cryptography.NCryptNative/BufferType", false, {
    KdfHashAlgorithm: 0, 
    KdfSecretPrepend: 1, 
    KdfSecretAppend: 2, 
    KdfHmacKey: 3, 
    KdfTlsLabel: 4, 
    KdfTlsSeed: 5
  }, false
);

JSIL.MakeEnum(
  "System.Security.Cryptography.NCryptNative/ErrorCode", false, {
    BadSignature: -2146893818, 
    NotFound: -2146893807, 
    KeyDoesNotExist: -2146893802, 
    BufferTooSmall: -2146893784, 
    Success: 0
  }, false
);

(function KeyPropertyName$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative/KeyPropertyName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Algorithm", "Algorithm Name"); 
    $.Constant({Static:true , Public:false}, "AlgorithmGroup", "Algorithm Group"); 
    $.Constant({Static:true , Public:false}, "ExportPolicy", "Export Policy"); 
    $.Constant({Static:true , Public:false}, "KeyType", "Key Type"); 
    $.Constant({Static:true , Public:false}, "KeyUsage", "Key Usage"); 
    $.Constant({Static:true , Public:false}, "Length", "Length"); 
    $.Constant({Static:true , Public:false}, "Name", "Name"); 
    $.Constant({Static:true , Public:false}, "ParentWindowHandle", "HWND Handle"); 
    $.Constant({Static:true , Public:false}, "ProviderHandle", "Provider Handle"); 
    $.Constant({Static:true , Public:false}, "UIPolicy", "UI Policy"); 
    $.Constant({Static:true , Public:false}, "UniqueName", "Unique Name"); 
    $.Constant({Static:true , Public:false}, "UseContext", "Use Context"); 
    $.Constant({Static:true , Public:false}, "ClrIsEphemeral", "CLR IsEphemeral"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ProviderPropertyName$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative/ProviderPropertyName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Name", "Name"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Security.Cryptography.NCryptNative/SecretAgreementFlags", false, {
    None: 0, 
    UseSecretAsHmacKey: 1
  }, true
);

(function NCRYPT_UI_POLICY$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Security.Cryptography.NCryptNative/NCRYPT_UI_POLICY", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "dwVersion", $.Int32); 
    $.Field({Static:false, Public:true }, "dwFlags", $asm04.TypeRef("System.Security.Cryptography.CngUIProtectionLevels")); 
    $.Field({Static:false, Public:true }, "pszCreationTitle", $.String); 
    $.Field({Static:false, Public:true }, "pszFriendlyName", $.String); 
    $.Field({Static:false, Public:true }, "pszDescription", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NCryptBuffer$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Security.Cryptography.NCryptNative/NCryptBuffer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "cbBuffer", $.Int32); 
    $.Field({Static:false, Public:true }, "BufferType", $asm04.TypeRef("System.Security.Cryptography.NCryptNative/BufferType")); 
    $.Field({Static:false, Public:true }, "pvBuffer", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NCryptBufferDesc$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Security.Cryptography.NCryptNative/NCryptBufferDesc", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "ulVersion", $.Int32); 
    $.Field({Static:false, Public:true }, "cBuffers", $.Int32); 
    $.Field({Static:false, Public:true }, "pBuffers", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function UnsafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative/UnsafeNativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "NCryptCreatePersistedKey", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")]), 
          $.String, $.String, 
          $.Int32, $asm04.TypeRef("System.Security.Cryptography.CngKeyCreationOptions")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptDeleteKey", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptDeriveKey", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Security.Cryptography.NCryptNative/NCryptBufferDesc")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm04.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptExportKey", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm01.TypeRef("System.IntPtr"), 
          $.String, $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptFinalizeKey", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptGetProperty", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptGetProperty", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.IntPtr")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "NCryptImportKey", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $asm01.TypeRef("System.IntPtr"), 
          $.String, $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptOpenKey", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")]), 
          $.String, $.Int32, 
          $asm04.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptOpenStorageProvider", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle")]), $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptSecretAgreement", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle")]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptSetProperty", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptSetProperty", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $.String, $.Int32, 
          $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptSetProperty", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm01.TypeRef("System.IntPtr"), $.Int32, 
          $asm04.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptSignHash", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptVerifySignature", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

(function Rfc4050KeyFormatter$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.Rfc4050KeyFormatter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "FromXml", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngKey"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurveUrn", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("System.Security.Cryptography.CngAlgorithm")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKeySize", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadAlgorithm", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.CngAlgorithm"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadPublicKey", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Numeric.BigInteger")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Numeric.BigInteger")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXml", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("System.Security.Cryptography.CngKey")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteDomainParameters", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter"), $asm04.TypeRef("System.Security.Cryptography.CngKey")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WritePublicKeyValue", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter"), $asm04.TypeRef("System.Security.Cryptography.CngKey")], [])
    );

    $.Constant({Static:true , Public:false}, "DomainParametersRoot", "DomainParameters"); 
    $.Constant({Static:true , Public:false}, "ECDHRoot", "ECDHKeyValue"); 
    $.Constant({Static:true , Public:false}, "ECDsaRoot", "ECDSAKeyValue"); 
    $.Constant({Static:true , Public:false}, "NamedCurveElement", "NamedCurve"); 
    $.Constant({Static:true , Public:false}, "Namespace", "http://www.w3.org/2001/04/xmldsig-more#"); 
    $.Constant({Static:true , Public:false}, "PublicKeyRoot", "PublicKey"); 
    $.Constant({Static:true , Public:false}, "UrnAttribute", "URN"); 
    $.Constant({Static:true , Public:false}, "ValueAttribute", "Value"); 
    $.Constant({Static:true , Public:false}, "XElement", "X"); 
    $.Constant({Static:true , Public:false}, "YElement", "Y"); 
    $.Constant({Static:true , Public:false}, "Prime256CurveUrn", "urn:oid:1.2.840.10045.3.1.7"); 
    $.Constant({Static:true , Public:false}, "Prime384CurveUrn", "urn:oid:1.3.132.0.34"); 
    $.Constant({Static:true , Public:false}, "Prime521CurveUrn", "urn:oid:1.3.132.0.35"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SHA1Cng$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Security.Cryptography.SHA1"), "System.Security.Cryptography.SHA1Cng", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm04.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SHA256Cng$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Security.Cryptography.SHA256"), "System.Security.Cryptography.SHA256Cng", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm04.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SHA256CryptoServiceProvider$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Security.Cryptography.SHA256"), "System.Security.Cryptography.SHA256CryptoServiceProvider", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm04.TypeRef("System.Security.Cryptography.CapiHashAlgorithm")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SHA384Cng$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Security.Cryptography.SHA384"), "System.Security.Cryptography.SHA384Cng", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm04.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SHA384CryptoServiceProvider$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Security.Cryptography.SHA384"), "System.Security.Cryptography.SHA384CryptoServiceProvider", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm04.TypeRef("System.Security.Cryptography.CapiHashAlgorithm")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SHA512Cng$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Security.Cryptography.SHA512"), "System.Security.Cryptography.SHA512Cng", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm04.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SHA512CryptoServiceProvider$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Security.Cryptography.SHA512"), "System.Security.Cryptography.SHA512CryptoServiceProvider", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm04.TypeRef("System.Security.Cryptography.CapiHashAlgorithm")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Security.Cryptography.SignatureVerificationResult", true, {
    SystemError: -2146869247, 
    InvalidSignerCertificate: -2146869246, 
    InvalidCountersignature: -2146869245, 
    InvalidCertificateSignature: -2146869244, 
    InvalidTimestamp: -2146869243, 
    BadDigest: -2146869232, 
    BasicConstraintsNotObserved: -2146869223, 
    UnknownTrustProvider: -2146762751, 
    UnknownVerificationAction: -2146762750, 
    BadSignatureFormat: -2146762749, 
    CertificateNotExplicitlyTrusted: -2146762748, 
    MissingSignature: -2146762496, 
    CertificateExpired: -2146762495, 
    InvalidTimePeriodNesting: -2146762494, 
    InvalidCertificateRole: -2146762493, 
    PathLengthConstraintViolated: -2146762492, 
    UnknownCriticalExtension: -2146762491, 
    CertificateUsageNotAllowed: -2146762490, 
    IssuerChainingError: -2146762489, 
    CertificateMalformed: -2146762488, 
    UntrustedRootCertificate: -2146762487, 
    CouldNotBuildChain: -2146762486, 
    GenericTrustFailure: -2146762485, 
    CertificateRevoked: -2146762484, 
    UntrustedTestRootCertificate: -2146762483, 
    RevocationCheckFailure: -2146762482, 
    InvalidCertificateUsage: -2146762480, 
    CertificateExplicitlyDistrusted: -2146762479, 
    UntrustedCertificationAuthority: -2146762478, 
    InvalidCertificatePolicy: -2146762477, 
    InvalidCertificateName: -2146762476, 
    Valid: 0, 
    AssemblyIdentityMismatch: 1, 
    ContainingSignatureInvalid: 2, 
    PublicKeyTokenMismatch: 3, 
    PublisherMismatch: 4
  }, false
);

(function StrongNameSignatureInformation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Security.Cryptography.StrongNameSignatureInformation", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HResult", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsValid", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicKey", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VerificationResult", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [], [])
    );

    $.Field({Static:false, Public:false}, "m_verificationResult", $asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult")); 
    $.Field({Static:false, Public:false}, "m_publicKey", $asm01.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "StrongNameHashAlgorithm", $.String); 
    $.Property({Static:false, Public:true }, "HashAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "HResult", $.Int32);

    $.Property({Static:false, Public:true }, "IsValid", $.Boolean);

    $.Property({Static:false, Public:true }, "PublicKey", $asm01.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

    $.Property({Static:false, Public:true }, "VerificationResult", $asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Security.Cryptography.X509Certificates");
(function AuthenticodeSignatureInformation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_SIGNER_INFO"), $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), 
          $asm04.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DescriptionUrl", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Uri"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HResult", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignatureChain", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SigningCertificate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Timestamp", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustStatus", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.X509Certificates.TrustStatus"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VerificationResult", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [], [])
    );

    $.Field({Static:false, Public:false}, "m_description", $.String); 
    $.Field({Static:false, Public:false}, "m_descriptionUrl", $asm02.TypeRef("System.Uri")); 
    $.Field({Static:false, Public:false}, "m_hashAlgorithmId", $asm04.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
    $.Field({Static:false, Public:false}, "m_signatureChain", $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain")); 
    $.Field({Static:false, Public:false}, "m_timestamp", $asm04.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation")); 
    $.Field({Static:false, Public:false}, "m_verificationResult", $asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult")); 
    $.Field({Static:false, Public:false}, "m_signingCertificate", $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")); 
    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "DescriptionUrl", $asm02.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "HashAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "HResult", $.Int32);

    $.Property({Static:false, Public:true }, "SignatureChain", $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

    $.Property({Static:false, Public:true }, "SigningCertificate", $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:true }, "Timestamp", $asm04.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"));

    $.Property({Static:false, Public:true }, "TrustStatus", $asm04.TypeRef("System.Security.Cryptography.X509Certificates.TrustStatus"));

    $.Property({Static:false, Public:true }, "VerificationResult", $asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TimestampInformation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Security.Cryptography.X509Certificates.TimestampInformation", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_TIMESTAMPER_INFO")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HResult", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsValid", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignatureChain", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SigningCertificate", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Timestamp", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VerificationResult", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [], [])
    );

    $.Field({Static:false, Public:false}, "m_hashAlgorithmId", $asm04.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
    $.Field({Static:false, Public:false}, "m_timestamp", $asm01.TypeRef("System.DateTime")); 
    $.Field({Static:false, Public:false}, "m_timestampChain", $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain")); 
    $.Field({Static:false, Public:false}, "m_verificationResult", $asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult")); 
    $.Field({Static:false, Public:false}, "m_timestamper", $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")); 
    $.Property({Static:false, Public:true }, "HashAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "HResult", $.Int32);

    $.Property({Static:false, Public:true }, "IsValid", $.Boolean);

    $.Property({Static:false, Public:true }, "SignatureChain", $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

    $.Property({Static:false, Public:true }, "SigningCertificate", $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:true }, "Timestamp", $asm01.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "VerificationResult", $asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Security.Cryptography.X509Certificates.TrustStatus", true, {
    Untrusted: 0, 
    UnknownIdentity: 1, 
    KnownIdentity: 2, 
    Trusted: 3
  }, false
);

(function X509Native$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.X509Certificates.X509Native", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Security.Cryptography.X509Certificates.X509Native/AxlVerificationFlags", false, {
    None: 0, 
    NoRevocationCheck: 1, 
    RevocationCheckEndCertOnly: 2, 
    RevocationCheckEntireChain: 4, 
    UrlOnlyCacheRetrieval: 8, 
    LifetimeSigning: 16, 
    TrustMicrosoftRootOnly: 32
  }, true
);

(function AXL_AUTHENTICODE_SIGNER_INFO$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_SIGNER_INFO", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "cbSize", $.Int32); 
    $.Field({Static:false, Public:true }, "dwError", $.Int32); 
    $.Field({Static:false, Public:true }, "algHash", $asm04.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
    $.Field({Static:false, Public:true }, "pwszHash", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "pwszDescription", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "pwszDescriptionUrl", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "pChainContext", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AXL_AUTHENTICODE_TIMESTAMPER_INFO$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_TIMESTAMPER_INFO", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "cbsize", $.Int32); 
    $.Field({Static:false, Public:true }, "dwError", $.Int32); 
    $.Field({Static:false, Public:true }, "algHash", $asm04.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
    $.Field({Static:false, Public:true }, "ftTimestamp", $asm01.TypeRef("System.Runtime.InteropServices.ComTypes.FILETIME")); 
    $.Field({Static:false, Public:true }, "pChainContext", $asm01.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function UnsafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.X509Certificates.X509Native/UnsafeNativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "_AxlGetIssuerPublicKeyHash", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafeAxlBufferHandle")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CertFreeAuthenticodeSignerInfo", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_SIGNER_INFO")])], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "CertFreeAuthenticodeTimestamperInfo", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_TIMESTAMPER_INFO")])], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "CertVerifyAuthenticodeLicense", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Security.Cryptography.CapiNative/CRYPTOAPI_BLOB")]), $asm04.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AxlVerificationFlags"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_SIGNER_INFO")]), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_TIMESTAMPER_INFO")])
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

JSIL.DeclareNamespace("System.Security.Cryptography.Xml");
(function ManifestSignedXml$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm09.TypeRef("System.Security.Cryptography.Xml.SignedXml"), "System.Security.Cryptography.Xml.ManifestSignedXml", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlDocument"), $asm04.TypeRef("System.Security.ManifestKinds")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BackwardHexToBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSignatureChain", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), [
          $asm04.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_SIGNER_INFO"), $asm05.TypeRef("System.Xml.XmlElement"), 
          $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CalculateManifestPublicKeyToken", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CalculateSignerPublicKeyToken", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm01.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CompareBytes", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIdElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlElement"), [$asm05.TypeRef("System.Xml.XmlDocument"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTimestampInformation", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"), [$asm04.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_TIMESTAMPER_INFO"), $asm05.TypeRef("System.Xml.XmlElement")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HexStringToBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexToByte", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$.Byte]), [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MapRevocationFlags", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AxlVerificationFlags"), [$asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodeExpectedHash", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm05.TypeRef("System.Xml.XmlElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodePublisher", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodeSignature", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"), [
          $asm05.TypeRef("System.Xml.XmlElement"), $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), 
          $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodeSignatureIdentity", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm05.TypeRef("System.Xml.XmlElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifySignature", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.ManifestSignatureInformation"), [$asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm02.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "VerifyStrongNameSignature", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"), [$asm05.TypeRef("System.Xml.XmlElement")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "VerifyStrongNameSignatureId", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm05.TypeRef("System.Xml.XmlElement")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyStrongNameSignatureTransforms", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm09.TypeRef("System.Security.Cryptography.Xml.SignedInfo")], [])
    );

    $.Field({Static:false, Public:false}, "m_manifest", $asm04.TypeRef("System.Security.ManifestKinds")); 
    $.Field({Static:false, Public:false}, "m_manifestXml", $asm05.TypeRef("System.Xml.XmlDocument")); 
    $.Field({Static:false, Public:false}, "m_namespaceManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Numeric");
(function BigInteger$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Numeric.BigInteger", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt64], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Abs", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "add0", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt32]), [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AppendRadix", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $asm01.TypeRef("System.Text.StringBuilder"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Type, $.Type], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "copy", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt32]), [$jsilcore.TypeRef("System.Array", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "div", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.UInt32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DivModUnsigned", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.UInt32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt32])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt32])])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DivRem", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Exponent", 
      new JSIL.MethodSignature($.UInt16, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MinusOne", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_One", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sign", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLength", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNormalizeShift", 
      new JSIL.MethodSignature($.Int32, [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreatestCommonDivisor", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalAdd", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt32]), [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNegative", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWhiteSpace", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LeftShift", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Mantissa", 
      new JSIL.MethodSignature($.UInt64, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ModPow", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiplyKaratsuba", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiplySchoolBook", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Normalize", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Decrement", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Byte, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.SByte, [$.Type], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int16, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.UInt16, [$.Type], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int32, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.UInt32, [$.Type], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int64, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.UInt64, [$.Type], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Single, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Double, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.Double], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Byte], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.SByte], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int16], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt16], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int32], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt32], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt64], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Increment", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Modulus", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    )
      .Attribute($asm04.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryPlus", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String, $asm01.TypeRef("System.IFormatProvider")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String, $asm01.TypeRef("System.Globalization.NumberStyles")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm01.TypeRef("System.Globalization.NumberStyles"), 
          $asm01.TypeRef("System.IFormatProvider")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseSingleDigit", 
      new JSIL.MethodSignature($.UInt32, [
          $.Char, $.UInt64, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Pow", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Remainder", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "resize", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt32]), [$jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RestrictTo", 
      new JSIL.MethodSignature($.Type, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RightShift", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Square", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "sub", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt32]), [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TestDivisionStep", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.UInt32]), 
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.UInt32]), 
          $jsilcore.TypeRef("System.Array", [$.UInt32])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "TestNormalize", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.UInt32]), 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "TestResult", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.UInt32]), 
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.UInt32])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:true }, "ToByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.IFormatProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm01.TypeRef("System.IFormatProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [
          $.UInt32, $.Boolean, 
          $asm01.TypeRef("System.Globalization.NumberFormatInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm01.TypeRef("System.Globalization.NumberStyles"), 
          $asm01.TypeRef("System.IFormatProvider"), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm01.TypeRef("System.Globalization.NumberStyles"), 
          $asm01.TypeRef("System.IFormatProvider"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Unnormalize", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt32])]), 
          $.Int32
        ], [])
    );

    $.Constant({Static:true , Public:false}, "DecimalScaleFactorMask", 16711680); 
    $.Constant({Static:true , Public:false}, "DecimalSignMask", -2147483648); 
    $.Constant({Static:true , Public:false}, "BitsPerDigit", 32); 
    $.Constant({Static:true , Public:false}, "Base", 4294967296); 
    $.Constant({Static:true , Public:false}, "UpperBoundForSchoolBookMultiplicationDigits", 64); 
    $.Constant({Static:true , Public:false}, "ForceSchoolBookMultiplicationThresholdDigits", 8); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "maxCharsPerDigit", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "groupRadixValues", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "zeroArray", $jsilcore.TypeRef("System.Array", [$.UInt32]), function ($pi) {
        return JSIL.Array.New($asm01.System.UInt32, 0);
      }); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_sign", $.Int16); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_data", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
    $.Field({Static:false, Public:false}, "_length", $.Int32); 
    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.Property({Static:true , Public:true }, "One", $.Type);

    $.Property({Static:true , Public:true }, "MinusOne", $.Type);

    $.Property({Static:false, Public:true }, "Sign", $.Int32);

    $.Property({Static:false, Public:false}, "Length", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IFormattable"), 
      /* 1 */ $asm01.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 2 */ $asm01.TypeRef("System.IComparable`1", [$.Type]), 
      /* 3 */ $asm01.TypeRef("System.IComparable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm04.TypeRef("Microsoft.Contracts.ImmutableAttribute"))
    .Attribute($asm01.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

(function NativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "Microsoft.Win32.NativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "TIME_ZONE_ID_INVALID", -1); 
    $.Constant({Static:true , Public:false}, "TIME_ZONE_ID_UNKNOWN", 0); 
    $.Constant({Static:true , Public:false}, "TIME_ZONE_ID_STANDARD", 1); 
    $.Constant({Static:true , Public:false}, "TIME_ZONE_ID_DAYLIGHT", 2); 
    $.Constant({Static:true , Public:false}, "MAX_PATH", 260); 
    $.Constant({Static:true , Public:false}, "MUI_LANGUAGE_ID", 4); 
    $.Constant({Static:true , Public:false}, "MUI_LANGUAGE_NAME", 8); 
    $.Constant({Static:true , Public:false}, "MUI_PREFERRED_UI_LANGUAGES", 16); 
    $.Constant({Static:true , Public:false}, "MUI_INSTALLED_LANGUAGES", 32); 
    $.Constant({Static:true , Public:false}, "MUI_ALL_LANGUAGES", 64); 
    $.Constant({Static:true , Public:false}, "MUI_LANG_NEUTRAL_PE_FILE", 256); 
    $.Constant({Static:true , Public:false}, "MUI_NON_LANG_NEUTRAL_FILE", 512); 
    $.Constant({Static:true , Public:false}, "LOAD_LIBRARY_AS_DATAFILE", 2); 
    $.Constant({Static:true , Public:false}, "LOAD_STRING_MAX_LENGTH", 500); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SystemTime$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "Microsoft.Win32.NativeMethods/SystemTime", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "Year", $.Int16); 
    $.Field({Static:false, Public:true }, "Month", $.Int16); 
    $.Field({Static:false, Public:true }, "DayOfWeek", $.Int16); 
    $.Field({Static:false, Public:true }, "Day", $.Int16); 
    $.Field({Static:false, Public:true }, "Hour", $.Int16); 
    $.Field({Static:false, Public:true }, "Minute", $.Int16); 
    $.Field({Static:false, Public:true }, "Second", $.Int16); 
    $.Field({Static:false, Public:true }, "Milliseconds", $.Int16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TimeZoneInformation$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "Microsoft.Win32.NativeMethods/TimeZoneInformation", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Win32.NativeMethods/DynamicTimeZoneInformation")], [])
    );

    $.Field({Static:false, Public:true }, "Bias", $.Int32); 
    $.Field({Static:false, Public:true }, "StandardName", $.String); 
    $.Field({Static:false, Public:true }, "StandardDate", $asm04.TypeRef("Microsoft.Win32.NativeMethods/SystemTime")); 
    $.Field({Static:false, Public:true }, "StandardBias", $.Int32); 
    $.Field({Static:false, Public:true }, "DaylightName", $.String); 
    $.Field({Static:false, Public:true }, "DaylightDate", $asm04.TypeRef("Microsoft.Win32.NativeMethods/SystemTime")); 
    $.Field({Static:false, Public:true }, "DaylightBias", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DynamicTimeZoneInformation$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "Microsoft.Win32.NativeMethods/DynamicTimeZoneInformation", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "Bias", $.Int32); 
    $.Field({Static:false, Public:true }, "StandardName", $.String); 
    $.Field({Static:false, Public:true }, "StandardDate", $asm04.TypeRef("Microsoft.Win32.NativeMethods/SystemTime")); 
    $.Field({Static:false, Public:true }, "StandardBias", $.Int32); 
    $.Field({Static:false, Public:true }, "DaylightName", $.String); 
    $.Field({Static:false, Public:true }, "DaylightDate", $asm04.TypeRef("Microsoft.Win32.NativeMethods/SystemTime")); 
    $.Field({Static:false, Public:true }, "DaylightBias", $.Int32); 
    $.Field({Static:false, Public:true }, "TimeZoneKeyName", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function RegistryTimeZoneInformation$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "Microsoft.Win32.NativeMethods/RegistryTimeZoneInformation", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Win32.NativeMethods/TimeZoneInformation")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.Field({Static:false, Public:true }, "Bias", $.Int32); 
    $.Field({Static:false, Public:true }, "StandardBias", $.Int32); 
    $.Field({Static:false, Public:true }, "DaylightBias", $.Int32); 
    $.Field({Static:false, Public:true }, "StandardDate", $asm04.TypeRef("Microsoft.Win32.NativeMethods/SystemTime")); 
    $.Field({Static:false, Public:true }, "DaylightDate", $asm04.TypeRef("Microsoft.Win32.NativeMethods/SystemTime")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function UnsafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Win32.UnsafeNativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "CloseHandle", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.IntPtr")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectNamedPipe", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Threading.NativeOverlapped")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConnectNamedPipe", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $asm01.TypeRef("System.IntPtr")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateFile", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), [
          $.String, $.Int32, 
          $asm01.TypeRef("System.IO.FileShare"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/SECURITY_ATTRIBUTES"), 
          $asm01.TypeRef("System.IO.FileMode"), $.Int32, 
          $asm01.TypeRef("System.IntPtr")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateNamedPipe", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), [
          $.String, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/SECURITY_ATTRIBUTES")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateNamedPipeClient", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), [
          $.String, $.Int32, 
          $asm01.TypeRef("System.IO.FileShare"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/SECURITY_ATTRIBUTES"), 
          $asm01.TypeRef("System.IO.FileMode"), $.Int32, 
          $asm01.TypeRef("System.IntPtr")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatePipe", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), 
          $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/SECURITY_ATTRIBUTES"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DisconnectNamedPipe", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DuplicateHandle", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.IntPtr"), $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), 
          $.UInt32, $.Boolean, 
          $.UInt32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EventActivityIdControl", 
      new JSIL.MethodSignature($.UInt32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Guid")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EventEnabled", 
      new JSIL.MethodSignature($.Int32, [$.Int64, $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Diagnostics.Eventing.EventDescriptor")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EventProviderEnabled", 
      new JSIL.MethodSignature($.Int32, [
          $.Int64, $.Byte, 
          $.Int64
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EventRegister", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Guid")]), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EtwEnableCallback"), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Void")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EventUnregister", 
      new JSIL.MethodSignature($.Int32, [$.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EventWrite", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Void")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EventWrite", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int64, $jsilcore.TypeRef("JSIL.Pointer", [$asm04.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Void")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EventWriteString", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int64, $.Byte, 
          $.Int64, $jsilcore.TypeRef("JSIL.Pointer", [$.Char])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EventWriteTransfer", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Guid")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Guid")]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Void")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtArchiveExportedLog", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtCancel", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtClearLog", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtClose", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "EvtCreateBookmark", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtCreateRenderContext", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtRenderContextFlags")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtExportLog", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtFormatMessage", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtStringVariant")]), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtFormatMessageFlags"), 
          $.Int32, $asm01.TypeRef("System.Text.StringBuilder"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtFormatMessageBuffer", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $.UInt32, $.Int32, 
          $asm01.TypeRef("System.IntPtr"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtFormatMessageFlags"), 
          $.Int32, $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtGetChannelConfigProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtChannelConfigPropertyId"), 
          $.Int32, $.Int32, 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtGetEventInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtEventPropertyId"), 
          $.Int32, $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtGetEventMetadataProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtEventMetadataPropertyId"), 
          $.Int32, $.Int32, 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtGetLogInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtLogPropertyId"), 
          $.Int32, $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtGetObjectArrayProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtGetObjectArraySize", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtGetPublisherMetadataProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtPublisherMetadataPropertyId"), 
          $.Int32, $.Int32, 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtGetQueryInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtQueryPropertyId"), 
          $.Int32, $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtNext", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.IntPtr")]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtNextChannelPath", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $asm01.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtNextEventMetadata", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtNextPublisherId", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $asm01.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtOpenChannelConfig", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtOpenChannelEnum", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtOpenEventMetadataEnum", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtOpenLog", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.PathType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtOpenPublisherEnum", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtOpenPublisherMetadata", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtOpenSession", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtLoginClass"), $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtRpcLogin")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtQuery", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtRender", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtRenderFlags"), $.Int32, 
          $asm01.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtRender", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtRenderFlags"), $.Int32, 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtSaveChannelConfig", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtSeek", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int64, 
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtSeekFlags")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtSetChannelConfigProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtChannelConfigPropertyId"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/EvtVariant")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtSubscribe", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), 
          $.String, $.String, 
          $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EvtUpdateBookmark", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm04.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FlushFileBuffers", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatMessage", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $asm01.TypeRef("System.IntPtr"), 
          $.Int32, $.Int32, 
          $asm01.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $asm01.TypeRef("System.IntPtr")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FreeLibrary", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentProcess", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IntPtr"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDynamicTimeZoneInformation", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.NativeMethods/DynamicTimeZoneInformation")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileMUIPath", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.String, 
          $asm01.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm01.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileType", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileType", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMessage", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetNamedPipeHandleState", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamedPipeHandleState", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamedPipeHandleState", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamedPipeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamedPipeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamedPipeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $asm01.TypeRef("System.IntPtr"), 
          $asm01.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm01.TypeRef("System.IntPtr")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTimeZoneInformation", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.NativeMethods/TimeZoneInformation")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ImpersonateNamedPipeClient", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "LoadLibraryEx", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeLibraryHandle"), [
          $.String, $asm01.TypeRef("System.IntPtr"), 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "LoadString", 
      new JSIL.MethodSignature($.Int32, [
          $asm04.TypeRef("Microsoft.Win32.SafeLibraryHandle"), $.Int32, 
          $asm01.TypeRef("System.Text.StringBuilder"), $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MakeHRFromErrorCode", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PerfCreateInstance", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/PerfCounterSetInstanceStruct")]), [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Guid")]), 
          $.String, $.UInt32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "PerfDeleteInstance", 
      new JSIL.MethodSignature($.UInt32, [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/PerfCounterSetInstanceStruct")])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "PerfSetCounterRefValue", 
      new JSIL.MethodSignature($.UInt32, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/PerfCounterSetInstanceStruct")]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Void")])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "PerfSetCounterSetInfo", 
      new JSIL.MethodSignature($.UInt32, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/PerfCounterSetInfoStruct")]), 
          $.UInt32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "PerfStartProvider", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Guid")]), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/PERFLIBREQUEST"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PerfStopProvider", 
      new JSIL.MethodSignature($.UInt32, [$asm01.TypeRef("System.IntPtr")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Threading.NativeOverlapped")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm01.TypeRef("System.IntPtr")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RevertToSelf", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "SafeCreateFile", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), [
          $.String, $.Int32, 
          $asm01.TypeRef("System.IO.FileShare"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/SECURITY_ATTRIBUTES"), 
          $asm01.TypeRef("System.IO.FileMode"), $.Int32, 
          $asm01.TypeRef("System.IntPtr")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetEndOfFile", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.IntPtr")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetErrorMode", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetFilePointer", 
      new JSIL.MethodSignature($.Int64, [
          $asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.Int64, 
          $asm01.TypeRef("System.IO.SeekOrigin"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetFilePointerWin32", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Int32]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetNamedPipeHandleState", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Int32]), 
          $asm01.TypeRef("System.IntPtr"), $asm01.TypeRef("System.IntPtr")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "WaitNamedPipe", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Threading.NativeOverlapped")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $asm01.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Threading.NativeOverlapped")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm01.TypeRef("System.IntPtr")
        ], [])
    );

    $.Constant({Static:true , Public:false}, "KERNEL32", "kernel32.dll"); 
    $.Constant({Static:true , Public:false}, "ADVAPI32", "advapi32.dll"); 
    $.Constant({Static:true , Public:false}, "ERROR_HANDLE_EOF", 38); 
    $.Constant({Static:true , Public:false}, "ERROR_INVALID_DRIVE", 15); 
    $.Constant({Static:true , Public:false}, "ERROR_NO_MORE_FILES", 18); 
    $.Constant({Static:true , Public:false}, "ERROR_NOT_READY", 21); 
    $.Constant({Static:true , Public:false}, "ERROR_BAD_LENGTH", 24); 
    $.Constant({Static:true , Public:false}, "ERROR_SHARING_VIOLATION", 32); 
    $.Constant({Static:true , Public:false}, "ERROR_FILE_EXISTS", 80); 
    $.Constant({Static:true , Public:false}, "ERROR_OPERATION_ABORTED", 995); 
    $.Constant({Static:true , Public:false}, "ERROR_INVALID_HANDLE", 6); 
    $.Constant({Static:true , Public:false}, "ERROR_INVALID_NAME", 123); 
    $.Constant({Static:true , Public:false}, "ERROR_BAD_PATHNAME", 161); 
    $.Constant({Static:true , Public:false}, "ERROR_ALREADY_EXISTS", 183); 
    $.Constant({Static:true , Public:false}, "ERROR_ENVVAR_NOT_FOUND", 203); 
    $.Constant({Static:true , Public:false}, "ERROR_FILENAME_EXCED_RANGE", 206); 
    $.Constant({Static:true , Public:false}, "ERROR_MORE_DATA", 234); 
    $.Constant({Static:true , Public:false}, "ERROR_NOT_FOUND", 1168); 
    $.Constant({Static:true , Public:false}, "SECURITY_SQOS_PRESENT", 1048576); 
    $.Constant({Static:true , Public:false}, "SECURITY_ANONYMOUS", 0); 
    $.Constant({Static:true , Public:false}, "SECURITY_IDENTIFICATION", 65536); 
    $.Constant({Static:true , Public:false}, "SECURITY_IMPERSONATION", 131072); 
    $.Constant({Static:true , Public:false}, "SECURITY_DELEGATION", 196608); 
    $.Constant({Static:true , Public:false}, "ERROR_BROKEN_PIPE", 109); 
    $.Constant({Static:true , Public:false}, "ERROR_IO_PENDING", 997); 
    $.Constant({Static:true , Public:false}, "ERROR_PIPE_BUSY", 231); 
    $.Constant({Static:true , Public:false}, "ERROR_NO_DATA", 232); 
    $.Constant({Static:true , Public:false}, "ERROR_PIPE_NOT_CONNECTED", 233); 
    $.Constant({Static:true , Public:false}, "ERROR_PIPE_CONNECTED", 535); 
    $.Constant({Static:true , Public:false}, "ERROR_PIPE_LISTENING", 536); 
    $.Constant({Static:true , Public:false}, "ERROR_FILE_NOT_FOUND", 2); 
    $.Constant({Static:true , Public:false}, "ERROR_PATH_NOT_FOUND", 3); 
    $.Constant({Static:true , Public:false}, "ERROR_ACCESS_DENIED", 5); 
    $.Constant({Static:true , Public:false}, "ERROR_INVALID_PARAMETER", 87); 
    $.Constant({Static:true , Public:false}, "GENERIC_READ", -2147483648); 
    $.Constant({Static:true , Public:false}, "GENERIC_WRITE", 1073741824); 
    $.Constant({Static:true , Public:false}, "STD_INPUT_HANDLE", -10); 
    $.Constant({Static:true , Public:false}, "STD_OUTPUT_HANDLE", -11); 
    $.Constant({Static:true , Public:false}, "STD_ERROR_HANDLE", -12); 
    $.Constant({Static:true , Public:false}, "DUPLICATE_SAME_ACCESS", 2); 
    $.Constant({Static:true , Public:false}, "PIPE_ACCESS_INBOUND", 1); 
    $.Constant({Static:true , Public:false}, "PIPE_ACCESS_OUTBOUND", 2); 
    $.Constant({Static:true , Public:false}, "PIPE_ACCESS_DUPLEX", 3); 
    $.Constant({Static:true , Public:false}, "PIPE_TYPE_BYTE", 0); 
    $.Constant({Static:true , Public:false}, "PIPE_TYPE_MESSAGE", 4); 
    $.Constant({Static:true , Public:false}, "PIPE_READMODE_BYTE", 0); 
    $.Constant({Static:true , Public:false}, "PIPE_READMODE_MESSAGE", 2); 
    $.Constant({Static:true , Public:false}, "PIPE_UNLIMITED_INSTANCES", 255); 
    $.Constant({Static:true , Public:false}, "FILE_FLAG_FIRST_PIPE_INSTANCE", 524288); 
    $.Constant({Static:true , Public:false}, "FILE_SHARE_READ", 1); 
    $.Constant({Static:true , Public:false}, "FILE_SHARE_WRITE", 2); 
    $.Constant({Static:true , Public:false}, "FILE_ATTRIBUTE_NORMAL", 128); 
    $.Constant({Static:true , Public:false}, "FILE_FLAG_OVERLAPPED", 1073741824); 
    $.Constant({Static:true , Public:false}, "OPEN_EXISTING", 3); 
    $.Constant({Static:true , Public:false}, "ERROR_SUCCESS", 0); 
    $.Constant({Static:true , Public:false}, "FILE_TYPE_DISK", 1); 
    $.Constant({Static:true , Public:false}, "FILE_TYPE_CHAR", 2); 
    $.Constant({Static:true , Public:false}, "FILE_TYPE_PIPE", 3); 
    $.Constant({Static:true , Public:false}, "ERROR_ARITHMETIC_OVERFLOW", 534); 
    $.Constant({Static:true , Public:false}, "ERROR_NOT_ENOUGH_MEMORY", 8); 
    $.Constant({Static:true , Public:false}, "SEM_FAILCRITICALERRORS", 1); 
    $.Constant({Static:true , Public:false}, "FORMAT_MESSAGE_IGNORE_INSERTS", 512); 
    $.Constant({Static:true , Public:false}, "FORMAT_MESSAGE_FROM_SYSTEM", 4096); 
    $.Constant({Static:true , Public:false}, "FORMAT_MESSAGE_ARGUMENT_ARRAY", 8192); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "NULL", $asm01.TypeRef("System.IntPtr"), function ($pi) {
        return $asm01.System.IntPtr.Zero;
      }); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

(function SECURITY_ATTRIBUTES$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "Microsoft.Win32.UnsafeNativeMethods/SECURITY_ATTRIBUTES", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "nLength", $.Int32); 
    $.Field({Static:false, Public:false}, "pSecurityDescriptor", $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])); 
    $.Field({Static:false, Public:false}, "bInheritHandle", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("Microsoft.Win32.UnsafeNativeMethods/EtwEnableCallback", false, []);

(function PerfCounterSetInfoStruct$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "Microsoft.Win32.UnsafeNativeMethods/PerfCounterSetInfoStruct", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "CounterSetGuid", $asm01.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "ProviderGuid", $asm01.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "NumCounters", $.UInt32); 
    $.Field({Static:false, Public:false}, "InstanceType", $.UInt32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PerfCounterInfoStruct$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "Microsoft.Win32.UnsafeNativeMethods/PerfCounterInfoStruct", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "CounterId", $.UInt32); 
    $.Field({Static:false, Public:false}, "CounterType", $.UInt32); 
    $.Field({Static:false, Public:false}, "Attrib", $.Int64); 
    $.Field({Static:false, Public:false}, "Size", $.UInt32); 
    $.Field({Static:false, Public:false}, "DetailLevel", $.UInt32); 
    $.Field({Static:false, Public:false}, "Scale", $.UInt32); 
    $.Field({Static:false, Public:false}, "Offset", $.UInt32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PerfCounterSetInstanceStruct$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "Microsoft.Win32.UnsafeNativeMethods/PerfCounterSetInstanceStruct", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "CounterSetGuid", $asm01.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "dwSize", $.UInt32); 
    $.Field({Static:false, Public:false}, "InstanceId", $.UInt32); 
    $.Field({Static:false, Public:false}, "InstanceNameOffset", $.UInt32); 
    $.Field({Static:false, Public:false}, "InstanceNameSize", $.UInt32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("Microsoft.Win32.UnsafeNativeMethods/PERFLIBREQUEST", false, []);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtQueryFlags", false, {
    EvtQueryChannelPath: 1, 
    EvtQueryFilePath: 2, 
    EvtQueryForwardDirection: 256, 
    EvtQueryReverseDirection: 512, 
    EvtQueryTolerateQueryErrors: 4096
  }, true
);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtSubscribeFlags", false, {
    EvtSubscribeToFutureEvents: 1, 
    EvtSubscribeStartAtOldestRecord: 2, 
    EvtSubscribeStartAfterBookmark: 3, 
    EvtSubscribeTolerateQueryErrors: 4096, 
    EvtSubscribeStrict: 65536
  }, true
);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/NativeErrorCodes", false, {
    ERROR_SUCCESS: 0, 
    ERROR_INVALID_PARAMETER: 87, 
    ERROR_INSUFFICIENT_BUFFER: 122, 
    ERROR_NO_MORE_ITEMS: 259, 
    ERROR_RESOURCE_LANG_NOT_FOUND: 1815, 
    ERROR_EVT_MESSAGE_NOT_FOUND: 15027, 
    ERROR_EVT_MESSAGE_ID_NOT_FOUND: 15028, 
    ERROR_EVT_UNRESOLVED_VALUE_INSERT: 15029, 
    ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND: 15033, 
    ERROR_MUI_FILE_NOT_FOUND: 15100
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtVariantType", false, {
    EvtVarTypeNull: 0, 
    EvtVarTypeString: 1, 
    EvtVarTypeAnsiString: 2, 
    EvtVarTypeSByte: 3, 
    EvtVarTypeByte: 4, 
    EvtVarTypeInt16: 5, 
    EvtVarTypeUInt16: 6, 
    EvtVarTypeInt32: 7, 
    EvtVarTypeUInt32: 8, 
    EvtVarTypeInt64: 9, 
    EvtVarTypeUInt64: 10, 
    EvtVarTypeSingle: 11, 
    EvtVarTypeDouble: 12, 
    EvtVarTypeBoolean: 13, 
    EvtVarTypeBinary: 14, 
    EvtVarTypeGuid: 15, 
    EvtVarTypeSizeT: 16, 
    EvtVarTypeFileTime: 17, 
    EvtVarTypeSysTime: 18, 
    EvtVarTypeSid: 19, 
    EvtVarTypeHexInt32: 20, 
    EvtVarTypeHexInt64: 21, 
    EvtVarTypeEvtHandle: 32, 
    EvtVarTypeEvtXml: 35, 
    EvtVarTypeStringArray: 129, 
    EvtVarTypeUInt32Array: 136
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtMasks", false, {
    EVT_VARIANT_TYPE_MASK: 127, 
    EVT_VARIANT_TYPE_ARRAY: 128
  }, false
);

(function EvtVariant$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "Microsoft.Win32.UnsafeNativeMethods/EvtVariant", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "UInteger", $.UInt32); 
    $.Field({Static:false, Public:true }, "Integer", $.Int32); 
    $.Field({Static:false, Public:true }, "UInt8", $.Byte); 
    $.Field({Static:false, Public:true }, "Short", $.Int16); 
    $.Field({Static:false, Public:true }, "UShort", $.UInt16); 
    $.Field({Static:false, Public:true }, "Bool", $.UInt32); 
    $.Field({Static:false, Public:true }, "ByteVal", $.Byte); 
    $.Field({Static:false, Public:true }, "SByte", $.Byte); 
    $.Field({Static:false, Public:true }, "ULong", $.UInt64); 
    $.Field({Static:false, Public:true }, "Long", $.Int64); 
    $.Field({Static:false, Public:true }, "Double", $.Double); 
    $.Field({Static:false, Public:true }, "StringVal", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "AnsiString", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "SidVal", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "Binary", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "Reference", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "Handle", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "GuidReference", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "FileTime", $.UInt64); 
    $.Field({Static:false, Public:true }, "SystemTime", $asm01.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "Count", $.UInt32); 
    $.Field({Static:false, Public:true }, "Type", $.UInt32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtEventPropertyId", false, {
    EvtEventQueryIDs: 0, 
    EvtEventPath: 1
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtQueryPropertyId", false, {
    EvtQueryNames: 0, 
    EvtQueryStatuses: 1
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtPublisherMetadataPropertyId", false, {
    EvtPublisherMetadataPublisherGuid: 0, 
    EvtPublisherMetadataResourceFilePath: 1, 
    EvtPublisherMetadataParameterFilePath: 2, 
    EvtPublisherMetadataMessageFilePath: 3, 
    EvtPublisherMetadataHelpLink: 4, 
    EvtPublisherMetadataPublisherMessageID: 5, 
    EvtPublisherMetadataChannelReferences: 6, 
    EvtPublisherMetadataChannelReferencePath: 7, 
    EvtPublisherMetadataChannelReferenceIndex: 8, 
    EvtPublisherMetadataChannelReferenceID: 9, 
    EvtPublisherMetadataChannelReferenceFlags: 10, 
    EvtPublisherMetadataChannelReferenceMessageID: 11, 
    EvtPublisherMetadataLevels: 12, 
    EvtPublisherMetadataLevelName: 13, 
    EvtPublisherMetadataLevelValue: 14, 
    EvtPublisherMetadataLevelMessageID: 15, 
    EvtPublisherMetadataTasks: 16, 
    EvtPublisherMetadataTaskName: 17, 
    EvtPublisherMetadataTaskEventGuid: 18, 
    EvtPublisherMetadataTaskValue: 19, 
    EvtPublisherMetadataTaskMessageID: 20, 
    EvtPublisherMetadataOpcodes: 21, 
    EvtPublisherMetadataOpcodeName: 22, 
    EvtPublisherMetadataOpcodeValue: 23, 
    EvtPublisherMetadataOpcodeMessageID: 24, 
    EvtPublisherMetadataKeywords: 25, 
    EvtPublisherMetadataKeywordName: 26, 
    EvtPublisherMetadataKeywordValue: 27, 
    EvtPublisherMetadataKeywordMessageID: 28
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtChannelReferenceFlags", false, {
    EvtChannelReferenceImported: 1
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtEventMetadataPropertyId", false, {
    EventMetadataEventID: 0, 
    EventMetadataEventVersion: 1, 
    EventMetadataEventChannel: 2, 
    EventMetadataEventLevel: 3, 
    EventMetadataEventOpcode: 4, 
    EventMetadataEventTask: 5, 
    EventMetadataEventKeyword: 6, 
    EventMetadataEventMessageID: 7, 
    EventMetadataEventTemplate: 8
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtChannelConfigPropertyId", false, {
    EvtChannelConfigEnabled: 0, 
    EvtChannelConfigIsolation: 1, 
    EvtChannelConfigType: 2, 
    EvtChannelConfigOwningPublisher: 3, 
    EvtChannelConfigClassicEventlog: 4, 
    EvtChannelConfigAccess: 5, 
    EvtChannelLoggingConfigRetention: 6, 
    EvtChannelLoggingConfigAutoBackup: 7, 
    EvtChannelLoggingConfigMaxSize: 8, 
    EvtChannelLoggingConfigLogFilePath: 9, 
    EvtChannelPublishingConfigLevel: 10, 
    EvtChannelPublishingConfigKeywords: 11, 
    EvtChannelPublishingConfigControlGuid: 12, 
    EvtChannelPublishingConfigBufferSize: 13, 
    EvtChannelPublishingConfigMinBuffers: 14, 
    EvtChannelPublishingConfigMaxBuffers: 15, 
    EvtChannelPublishingConfigLatency: 16, 
    EvtChannelPublishingConfigClockType: 17, 
    EvtChannelPublishingConfigSidType: 18, 
    EvtChannelPublisherList: 19, 
    EvtChannelConfigPropertyIdEND: 20
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtLogPropertyId", false, {
    EvtLogCreationTime: 0, 
    EvtLogLastAccessTime: 1, 
    EvtLogLastWriteTime: 2, 
    EvtLogFileSize: 3, 
    EvtLogAttributes: 4, 
    EvtLogNumberOfLogRecords: 5, 
    EvtLogOldestRecordNumber: 6, 
    EvtLogFull: 7
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtExportLogFlags", false, {
    EvtExportLogChannelPath: 1, 
    EvtExportLogFilePath: 2, 
    EvtExportLogTolerateQueryErrors: 4096
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtRenderContextFlags", false, {
    EvtRenderContextValues: 0, 
    EvtRenderContextSystem: 1, 
    EvtRenderContextUser: 2
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtRenderFlags", false, {
    EvtRenderEventValues: 0, 
    EvtRenderEventXml: 1, 
    EvtRenderBookmark: 2
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtFormatMessageFlags", false, {
    EvtFormatMessageEvent: 1, 
    EvtFormatMessageLevel: 2, 
    EvtFormatMessageTask: 3, 
    EvtFormatMessageOpcode: 4, 
    EvtFormatMessageKeyword: 5, 
    EvtFormatMessageChannel: 6, 
    EvtFormatMessageProvider: 7, 
    EvtFormatMessageId: 8, 
    EvtFormatMessageXml: 9
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtSystemPropertyId", false, {
    EvtSystemProviderName: 0, 
    EvtSystemProviderGuid: 1, 
    EvtSystemEventID: 2, 
    EvtSystemQualifiers: 3, 
    EvtSystemLevel: 4, 
    EvtSystemTask: 5, 
    EvtSystemOpcode: 6, 
    EvtSystemKeywords: 7, 
    EvtSystemTimeCreated: 8, 
    EvtSystemEventRecordId: 9, 
    EvtSystemActivityID: 10, 
    EvtSystemRelatedActivityID: 11, 
    EvtSystemProcessID: 12, 
    EvtSystemThreadID: 13, 
    EvtSystemChannel: 14, 
    EvtSystemComputer: 15, 
    EvtSystemUserID: 16, 
    EvtSystemVersion: 17, 
    EvtSystemPropertyIdEND: 18
  }, false
);

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtLoginClass", false, {
    EvtRpcLogin: 1
  }, false
);

(function EvtRpcLogin$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "Microsoft.Win32.UnsafeNativeMethods/EvtRpcLogin", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "Server", $.String); 
    $.Field({Static:false, Public:true }, "User", $.String); 
    $.Field({Static:false, Public:true }, "Domain", $.String); 
    $.Field({Static:false, Public:true }, "Password", $asm04.TypeRef("System.Diagnostics.Eventing.Reader.CoTaskMemUnicodeSafeHandle")); 
    $.Field({Static:false, Public:true }, "Flags", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "Microsoft.Win32.UnsafeNativeMethods/EvtSeekFlags", false, {
    EvtSeekRelativeToFirst: 1, 
    EvtSeekRelativeToLast: 2, 
    EvtSeekRelativeToCurrent: 3, 
    EvtSeekRelativeToBookmark: 4, 
    EvtSeekOriginMask: 7, 
    EvtSeekStrict: 65536
  }, true
);

(function EvtStringVariant$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "Microsoft.Win32.UnsafeNativeMethods/EvtStringVariant", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "StringVal", $.String); 
    $.Field({Static:false, Public:true }, "Count", $.UInt32); 
    $.Field({Static:false, Public:true }, "Type", $.UInt32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SafeLibraryHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeLibraryHandle", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

(function SafePipeHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafePipeHandle", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IntPtr"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

(function SafePerfProviderHandle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), "Microsoft.Win32.SafeHandles.SafePerfProviderHandle", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm01.System.Security.SecurityCriticalScope.Everything]; });

})();

JSIL.MakeEnum(
  "System.TimeZoneInfoOptions", false, {
    None: 1, 
    NoThrowOnInvalidTime: 2
  }, true
);

(function TimeZoneInfo$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.TimeZoneInfo", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Win32.NativeMethods/TimeZoneInformation"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.TimeSpan"), 
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.TimeZoneInfo/AdjustmentRule")]), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckDaylightSavingTimeDisabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CheckDaylightSavingTimeNotSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("Microsoft.Win32.NativeMethods/TimeZoneInformation")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIsDst", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.DateTime"), 
          $asm01.TypeRef("System.DateTime")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ClearCachedData", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$asm01.TypeRef("System.DateTimeOffset"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [
          $asm01.TypeRef("System.DateTime"), $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [
          $asm01.TypeRef("System.DateTime"), $.Type, 
          $.Type, $asm04.TypeRef("System.TimeZoneInfoOptions")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTimeBySystemTimeZoneId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$asm01.TypeRef("System.DateTimeOffset"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTimeBySystemTimeZoneId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTimeBySystemTimeZoneId", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [
          $asm01.TypeRef("System.DateTime"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTimeFromUtc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTimeToUtc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTimeToUtc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertUtcToTimeZone", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Int64, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAdjustmentRuleFromTimeZoneInformation", 
      new JSIL.MethodSignature($asm04.TypeRef("System.TimeZoneInfo/AdjustmentRule"), [
          $asm04.TypeRef("Microsoft.Win32.NativeMethods/RegistryTimeZoneInformation"), $asm01.TypeRef("System.DateTime"), 
          $asm01.TypeRef("System.DateTime")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateCustomTimeZone", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm01.TypeRef("System.TimeSpan"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateCustomTimeZone", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm01.TypeRef("System.TimeSpan"), 
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.TimeZoneInfo/AdjustmentRule")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateCustomTimeZone", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm01.TypeRef("System.TimeSpan"), 
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.TimeZoneInfo/AdjustmentRule")]), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindIdFromTimeZoneInformation", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("Microsoft.Win32.NativeMethods/TimeZoneInformation"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FindSystemTimeZoneById", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromSerializedString", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseUtcOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DaylightName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Local", 
      new JSIL.MethodSignature($.Type, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_s_internalSyncObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_s_systemTimeZones", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Type]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StandardName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SupportsDaylightSavingTime", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Utc", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAdjustmentRuleForTime", 
      new JSIL.MethodSignature($asm04.TypeRef("System.TimeZoneInfo/AdjustmentRule"), [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAdjustmentRules", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.TimeZoneInfo/AdjustmentRule")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAmbiguousTimeOffsets", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.TimeSpan")]), [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAmbiguousTimeOffsets", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.TimeSpan")]), [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCorrespondingKind", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeKind"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDaylightTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Globalization.DaylightTime"), [$.Int32, $asm04.TypeRef("System.TimeZoneInfo/AdjustmentRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIsAmbiguousTime", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.DateTime"), $asm04.TypeRef("System.TimeZoneInfo/AdjustmentRule"), 
          $asm01.TypeRef("System.Globalization.DaylightTime")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIsDaylightSavings", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.DateTime"), $asm04.TypeRef("System.TimeZoneInfo/AdjustmentRule"), 
          $asm01.TypeRef("System.Globalization.DaylightTime")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIsDaylightSavingsFromUtc", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.DateTime"), $.Int32, 
          $asm01.TypeRef("System.TimeSpan"), $asm04.TypeRef("System.TimeZoneInfo/AdjustmentRule")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIsInvalidTime", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.DateTime"), $asm04.TypeRef("System.TimeZoneInfo/AdjustmentRule"), 
          $asm01.TypeRef("System.Globalization.DaylightTime")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLocalTimeZone", 
      new JSIL.MethodSignature($.Type, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetLocalTimeZoneFromWin32Data", 
      new JSIL.MethodSignature($.Type, [$asm04.TypeRef("Microsoft.Win32.NativeMethods/TimeZoneInformation"), $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSystemTimeZones", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type]), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetTimeZone", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUtcOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUtcOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUtcOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [$asm01.TypeRef("System.DateTime"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUtcOffsetFromUtc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [$asm01.TypeRef("System.DateTime"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUtcOffsetFromUtc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [
          $asm01.TypeRef("System.DateTime"), $.Type, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasSameRules", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsAmbiguousTime", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsAmbiguousTime", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsDaylightSavingTime", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsDaylightSavingTime", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsInvalidTime", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "set_s_systemTimeZones", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Type])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", 
      new JSIL.MethodSignature(null, [$.Object], [])
    )
      .Overrides(2, "OnDeserialization");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Overrides(1, "GetObjectData");

    $.ExternalMethod({Static:false, Public:true }, "ToSerializedString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TransitionTimeFromTimeZoneInformation", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Nullable`1", [$asm04.TypeRef("System.TimeZoneInfo/TransitionTime")]), [$asm04.TypeRef("Microsoft.Win32.NativeMethods/RegistryTimeZoneInformation"), $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TransitionTimeToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Int32, $asm04.TypeRef("System.TimeZoneInfo/TransitionTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryCompareStandardDate", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("Microsoft.Win32.NativeMethods/TimeZoneInformation"), $asm04.TypeRef("Microsoft.Win32.NativeMethods/RegistryTimeZoneInformation")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryCompareTimeZoneInformationToRegistry", 
      new JSIL.MethodSignature($.Boolean, [
          $asm04.TypeRef("Microsoft.Win32.NativeMethods/TimeZoneInformation"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryCreateAdjustmentRules", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm04.TypeRef("Microsoft.Win32.NativeMethods/RegistryTimeZoneInformation"), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.TimeZoneInfo/AdjustmentRule")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Exception")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetLocalizedNameByMuiNativeResource", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryGetLocalizedNameByNativeResource", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryGetLocalizedNamesByRegistryKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Win32.RegistryKey"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetTimeZone", 
      new JSIL.MethodSignature($asm04.TypeRef("System.TimeZoneInfo/TimeZoneInfoResult"), [
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Exception")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetTimeZoneByRegistryKey", 
      new JSIL.MethodSignature($asm04.TypeRef("System.TimeZoneInfo/TimeZoneInfoResult"), [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Exception")])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UtcOffsetOutOfRange", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateTimeZoneInfo", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.TimeSpan"), 
          $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.TimeZoneInfo/AdjustmentRule")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.Constant({Static:true , Public:false}, "c_timeZonesRegistryHive", "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones"); 
    $.Constant({Static:true , Public:false}, "c_timeZonesRegistryHivePermissionList", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones"); 
    $.Constant({Static:true , Public:false}, "c_displayValue", "Display"); 
    $.Constant({Static:true , Public:false}, "c_daylightValue", "Dlt"); 
    $.Constant({Static:true , Public:false}, "c_standardValue", "Std"); 
    $.Constant({Static:true , Public:false}, "c_muiDisplayValue", "MUI_Display"); 
    $.Constant({Static:true , Public:false}, "c_muiDaylightValue", "MUI_Dlt"); 
    $.Constant({Static:true , Public:false}, "c_muiStandardValue", "MUI_Std"); 
    $.Constant({Static:true , Public:false}, "c_timeZoneInfoValue", "TZI"); 
    $.Constant({Static:true , Public:false}, "c_firstEntryValue", "FirstEntry"); 
    $.Constant({Static:true , Public:false}, "c_lastEntryValue", "LastEntry"); 
    $.Constant({Static:true , Public:false}, "c_timeZoneInfoRegistryHive", "SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation"); 
    $.Constant({Static:true , Public:false}, "c_timeZoneInfoRegistryHivePermissionList", "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation"); 
    $.Constant({Static:true , Public:false}, "c_disableDST", "DisableAutoDaylightTimeSet"); 
    $.Constant({Static:true , Public:false}, "c_disableDynamicDST", "DynamicDaylightTimeDisabled"); 
    $.Constant({Static:true , Public:false}, "c_utcId", "UTC"); 
    $.Constant({Static:true , Public:false}, "c_localId", "Local"); 
    $.Constant({Static:true , Public:false}, "c_maxKeyLength", 255); 
    $.Constant({Static:true , Public:false}, "c_ticksPerMillisecond", 10000); 
    $.Constant({Static:true , Public:false}, "c_ticksPerSecond", 10000000); 
    $.Constant({Static:true , Public:false}, "c_ticksPerMinute", 600000000); 
    $.Constant({Static:true , Public:false}, "c_ticksPerHour", 36000000000); 
    $.Constant({Static:true , Public:false}, "c_ticksPerDay", 864000000000); 
    $.Constant({Static:true , Public:false}, "c_ticksPerDayRange", 863999990000); 
    $.Field({Static:false, Public:false}, "m_id", $.String); 
    $.Field({Static:false, Public:false}, "m_displayName", $.String); 
    $.Field({Static:false, Public:false}, "m_standardDisplayName", $.String); 
    $.Field({Static:false, Public:false}, "m_daylightDisplayName", $.String); 
    $.Field({Static:false, Public:false}, "m_baseUtcOffset", $asm01.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "m_supportsDaylightSavingTime", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_adjustmentRules", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.TimeZoneInfo/AdjustmentRule")])); 
    $.Field({Static:true , Public:false}, "s_localTimeZone", $.Type); 
    $.Field({Static:true , Public:false}, "s_utcTimeZone", $.Type); 
    $.Field({Static:true , Public:false}, "s_readOnlySystemTimeZones", $asm01.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])); 
    $.Field({Static:true , Public:false}, "s_allSystemTimeZonesRead", $.Boolean, false); 
    $.Field({Static:true , Public:false}, "s_hiddenSystemTimeZones", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Type])); 
    $.Field({Static:true , Public:false}, "s_hiddenInternalSyncObject", $.Object); 
    $.Property({Static:true , Public:false}, "s_systemTimeZones", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Type]));

    $.Property({Static:true , Public:false}, "s_internalSyncObject", $.Object);

    $.Property({Static:false, Public:true }, "Id", $.String);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true }, "StandardName", $.String);

    $.Property({Static:false, Public:true }, "DaylightName", $.String);

    $.Property({Static:false, Public:true }, "BaseUtcOffset", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "SupportsDaylightSavingTime", $.Boolean);

    $.Property({Static:true , Public:true }, "Local", $.Type);

    $.Property({Static:true , Public:true }, "Utc", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm01.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 2 */ $asm01.TypeRef("System.Runtime.Serialization.IDeserializationCallback")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.TimeZoneInfo/TimeZoneInfoResult", false, {
    Success: 0, 
    TimeZoneNotFoundException: 1, 
    InvalidTimeZoneException: 2, 
    SecurityException: 3
  }, false
);

(function AdjustmentRule$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.TimeZoneInfo/AdjustmentRule", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateAdjustmentRule", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.DateTime"), 
          $asm01.TypeRef("System.TimeSpan"), $asm04.TypeRef("System.TimeZoneInfo/TransitionTime"), 
          $asm04.TypeRef("System.TimeZoneInfo/TransitionTime")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DateEnd", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DateStart", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DaylightDelta", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DaylightTransitionEnd", 
      new JSIL.MethodSignature($asm04.TypeRef("System.TimeZoneInfo/TransitionTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DaylightTransitionStart", 
      new JSIL.MethodSignature($asm04.TypeRef("System.TimeZoneInfo/TransitionTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", 
      new JSIL.MethodSignature(null, [$.Object], [])
    )
      .Overrides(2, "OnDeserialization");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Overrides(1, "GetObjectData");

    $.ExternalMethod({Static:true , Public:false}, "ValidateAdjustmentRule", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.DateTime"), 
          $asm01.TypeRef("System.TimeSpan"), $asm04.TypeRef("System.TimeZoneInfo/TransitionTime"), 
          $asm04.TypeRef("System.TimeZoneInfo/TransitionTime")
        ], [])
    );

    $.Field({Static:false, Public:false}, "m_dateStart", $asm01.TypeRef("System.DateTime")); 
    $.Field({Static:false, Public:false}, "m_dateEnd", $asm01.TypeRef("System.DateTime")); 
    $.Field({Static:false, Public:false}, "m_daylightDelta", $asm01.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "m_daylightTransitionStart", $asm04.TypeRef("System.TimeZoneInfo/TransitionTime")); 
    $.Field({Static:false, Public:false}, "m_daylightTransitionEnd", $asm04.TypeRef("System.TimeZoneInfo/TransitionTime")); 
    $.Property({Static:false, Public:true }, "DateStart", $asm01.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "DateEnd", $asm01.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "DaylightDelta", $asm01.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "DaylightTransitionStart", $asm04.TypeRef("System.TimeZoneInfo/TransitionTime"));

    $.Property({Static:false, Public:true }, "DaylightTransitionEnd", $asm04.TypeRef("System.TimeZoneInfo/TransitionTime"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm01.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 2 */ $asm01.TypeRef("System.Runtime.Serialization.IDeserializationCallback")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TransitionTime$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.TimeZoneInfo/TransitionTime", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFixedDateRule", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("System.DateTime"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFloatingDateRule", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("System.DateTime"), $.Int32, 
          $.Int32, $asm01.TypeRef("System.DayOfWeek")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateTransitionTime", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("System.DateTime"), $.Int32, 
          $.Int32, $.Int32, 
          $asm01.TypeRef("System.DayOfWeek"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Day", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DayOfWeek", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DayOfWeek"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsFixedDateRule", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Month", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TimeOfDay", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Week", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", 
      new JSIL.MethodSignature(null, [$.Object], [])
    )
      .Overrides(2, "OnDeserialization");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Overrides(1, "GetObjectData");

    $.ExternalMethod({Static:true , Public:false}, "ValidateTransitionTime", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.DateTime"), $.Int32, 
          $.Int32, $.Int32, 
          $asm01.TypeRef("System.DayOfWeek")
        ], [])
    );

    $.Field({Static:false, Public:false}, "m_timeOfDay", $asm01.TypeRef("System.DateTime")); 
    $.Field({Static:false, Public:false}, "m_month", $.Byte); 
    $.Field({Static:false, Public:false}, "m_week", $.Byte); 
    $.Field({Static:false, Public:false}, "m_day", $.Byte); 
    $.Field({Static:false, Public:false}, "m_dayOfWeek", $asm01.TypeRef("System.DayOfWeek")); 
    $.Field({Static:false, Public:false}, "m_isFixedDateRule", $.Boolean); 
    $.Property({Static:false, Public:true }, "TimeOfDay", $asm01.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "Month", $.Int32);

    $.Property({Static:false, Public:true }, "Week", $.Int32);

    $.Property({Static:false, Public:true }, "Day", $.Int32);

    $.Property({Static:false, Public:true }, "DayOfWeek", $asm01.TypeRef("System.DayOfWeek"));

    $.Property({Static:false, Public:true }, "IsFixedDateRule", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm01.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 2 */ $asm01.TypeRef("System.Runtime.Serialization.IDeserializationCallback")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function StringSerializer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.TimeZoneInfo/StringSerializer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDeserializedTimeZoneInfo", 
      new JSIL.MethodSignature($asm04.TypeRef("System.TimeZoneInfo"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextAdjustmentRuleArrayValue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.TimeZoneInfo/AdjustmentRule")]), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextAdjustmentRuleValue", 
      new JSIL.MethodSignature($asm04.TypeRef("System.TimeZoneInfo/AdjustmentRule"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextDateTimeValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Boolean, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextInt32Value", 
      new JSIL.MethodSignature($.Int32, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextStringValue", 
      new JSIL.MethodSignature($.String, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextTimeSpanValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextTransitionTimeValue", 
      new JSIL.MethodSignature($asm04.TypeRef("System.TimeZoneInfo/TransitionTime"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSerializedString", 
      new JSIL.MethodSignature($.String, [$asm04.TypeRef("System.TimeZoneInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SerializeSubstitute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SerializeTransitionTime", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.TimeZoneInfo/TransitionTime"), $asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipVersionNextDataFields", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyIsEscapableCharacter", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.Constant({Static:true , Public:false}, "initialCapacityForString", 64); 
    $.Constant({Static:true , Public:false}, "esc", "\\"); 
    $.Constant({Static:true , Public:false}, "sep", ";"); 
    $.Constant({Static:true , Public:false}, "lhs", "["); 
    $.Constant({Static:true , Public:false}, "rhs", "]"); 
    $.Constant({Static:true , Public:false}, "escString", "\\"); 
    $.Constant({Static:true , Public:false}, "sepString", ";"); 
    $.Constant({Static:true , Public:false}, "lhsString", "["); 
    $.Constant({Static:true , Public:false}, "rhsString", "]"); 
    $.Constant({Static:true , Public:false}, "escapedEsc", "\\\\"); 
    $.Constant({Static:true , Public:false}, "escapedSep", "\\;"); 
    $.Constant({Static:true , Public:false}, "escapedLhs", "\\["); 
    $.Constant({Static:true , Public:false}, "escapedRhs", "\\]"); 
    $.Constant({Static:true , Public:false}, "dateTimeFormat", "MM:dd:yyyy"); 
    $.Constant({Static:true , Public:false}, "timeOfDayFormat", "HH:mm:ss.FFF"); 
    $.Field({Static:false, Public:false}, "m_serializedText", $.String); 
    $.Field({Static:false, Public:false}, "m_currentTokenStartIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_state", $asm04.TypeRef("System.TimeZoneInfo/StringSerializer/State")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.TimeZoneInfo/StringSerializer/State", false, {
    Escaped: 0, 
    NotEscaped: 1, 
    StartOfToken: 2, 
    EndOfLine: 3
  }, false
);

(function TimeZoneInfoComparer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.TimeZoneInfo/TimeZoneInfoComparer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IComparer$lSystem.TimeZoneInfo$g.Compare", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("System.TimeZoneInfo"), $asm04.TypeRef("System.TimeZoneInfo")], [])
    )
      .Overrides(0, "Compare");

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IComparer`1", [$asm04.TypeRef("System.TimeZoneInfo")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TimeZoneNotFoundException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Exception"), "System.TimeZoneNotFoundException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function InvalidTimeZoneException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Exception"), "System.InvalidTimeZoneException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IO");
(function __Error$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.IO.__Error", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "EndOfFile", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EndReadCalledTwice", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EndWaitForConnectionCalledTwice", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EndWriteCalledTwice", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FileNotOpen", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDisplayablePath", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PipeNotOpen", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadNotSupported", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SeekNotSupported", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WinIOError", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WinIOError", 
      new JSIL.MethodSignature(null, [$.Int32, $.String], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteNotSupported", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrongAsyncResult", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function BufferedStream2$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.IO.Stream"), "System.IO.BufferedStream2", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUnderlyingStreamPosition", 
      new JSIL.MethodSignature($.Int64, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DiscardBuffer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushRead", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushWrite", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingStreamPosition", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_UnderlyingStreamPosition", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ], [])
    );

    $.Constant({Static:true , Public:false}, "DefaultBufferSize", 32768); 
    $.Field({Static:false, Public:false}, "bufferSize", $.Int32); 
    $.Field({Static:false, Public:false}, "_buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "_pendingBufferCopy", $.Int32); 
    $.Field({Static:false, Public:false}, "_writePos", $.Int32); 
    $.Field({Static:false, Public:false}, "_readPos", $.Int32); 
    $.Field({Static:false, Public:false}, "_readLen", $.Int32); 
    $.Field({Static:false, Public:false}, "pos", $.Int64); 
    $.Property({Static:false, Public:false}, "UnderlyingStreamPosition", $.Int64);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function LogStream$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.IO.BufferedStream2"), "System.IO.LogStream", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm04.TypeRef("System.IO.LogRetentionOption"), $.Int64, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "_DisableLogging", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "_Init", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm01.TypeRef("System.IO.FileShare"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/SECURITY_ATTRIBUTES"), 
          $asm01.TypeRef("System.Security.Permissions.FileIOPermissionAccess"), $asm01.TypeRef("System.IO.FileMode"), 
          $.Int32, $.Boolean
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EnforceRetentionPolicy", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.Int64], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSecAttrs", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/SECURITY_ATTRIBUTES"), [$asm01.TypeRef("System.IO.FileShare")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm01.TypeRef("System.IO.SeekOrigin")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SeekCore", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm01.TypeRef("System.IO.SeekOrigin")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteFileNative", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Threading.NativeOverlapped")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "DefaultFileSize", 10240000); 
    $.Constant({Static:true , Public:false}, "DefaultNumberOfFiles", 2); 
    $.Constant({Static:true , Public:false}, "DefaultRetention", 2); 
    $.Constant({Static:true , Public:false}, "_retentionRetryThreshold", 2); 
    $.Field({Static:false, Public:false}, "_retention", $asm04.TypeRef("System.IO.LogRetentionOption")); 
    $.Field({Static:false, Public:false}, "_maxFileSize", $.Int64); 
    $.Field({Static:false, Public:false}, "_maxNumberOfFiles", $.Int32); 
    $.Field({Static:false, Public:false}, "_currentFileNum", $.Int32); 
    $.Field({Static:false, Public:false}, "_disableLogging", $.Boolean); 
    $.Field({Static:false, Public:false}, "_retentionRetryCount", $.Int32); 
    $.Field({Static:false, Public:false}, "_canRead", $.Boolean); 
    $.Field({Static:false, Public:false}, "_canWrite", $.Boolean); 
    $.Field({Static:false, Public:false}, "_canSeek", $.Boolean); 
    $.Field({Static:false, Public:false}, "_handle", $asm01.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle")); 
    $.Field({Static:false, Public:false}, "_fileName", $.String); 
    $.Field({Static:false, Public:false}, "_fileNameWithoutExt", $.String); 
    $.Field({Static:false, Public:false}, "_fileExt", $.String); 
    $.Field({Static:false, Public:false}, "_pathSav", $.String); 
    $.Field({Static:false, Public:false}, "_fAccessSav", $.Int32); 
    $.Field({Static:false, Public:false}, "_shareSav", $asm01.TypeRef("System.IO.FileShare")); 
    $.Field({Static:false, Public:false}, "_secAttrsSav", $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/SECURITY_ATTRIBUTES")); 
    $.Field({Static:false, Public:false}, "_secAccessSav", $asm01.TypeRef("System.Security.Permissions.FileIOPermissionAccess")); 
    $.Field({Static:false, Public:false}, "_modeSav", $asm01.TypeRef("System.IO.FileMode")); 
    $.Field({Static:false, Public:false}, "_flagsAndAttributesSav", $.Int32); 
    $.Field({Static:false, Public:false}, "_seekToEndSav", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_lockObject", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.IO.LogRetentionOption", false, {
    UnlimitedSequentialFiles: 0, 
    LimitedCircularFiles: 1, 
    SingleFileUnboundedSize: 2, 
    LimitedSequentialFiles: 3, 
    SingleFileBoundedSize: 4
  }, false
);

(function EventSchemaTraceListener$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.Diagnostics.TextWriterTraceListener"), "System.Diagnostics.EventSchemaTraceListener", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $asm04.TypeRef("System.Diagnostics.TraceLogRetentionOption")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $asm04.TypeRef("System.Diagnostics.TraceLogRetentionOption"), 
          $.Int64
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $asm04.TypeRef("System.Diagnostics.TraceLogRetentionOption"), 
          $.Int64, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "_InternalBuildRaw", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "_InternalWriteRaw", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "_SetMaxFileSize", 
      new JSIL.MethodSignature(null, [$.Int64, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetMaxNumberOfFiles", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildEscaped", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildFooter", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Text.StringBuilder"), $asm02.TypeRef("System.Diagnostics.TraceEventType"), 
          $asm02.TypeRef("System.Diagnostics.TraceEventCache"), $.Boolean, 
          $asm02.TypeRef("System.Diagnostics.TraceOptions")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildHeader", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Text.StringBuilder"), $.String, 
          $asm02.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $asm02.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $.Boolean, $asm02.TypeRef("System.Diagnostics.TraceOptions")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "BuildMessage", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildUserData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureWriter", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fail", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_BufferSize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsThreadSafe", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumFileSize", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumNumberOfFiles", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TraceLogRetentionOption", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.TraceLogRetentionOption"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Writer", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.TextWriter"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSupportedAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Writer", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm02.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.Object
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm02.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm02.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm02.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceTransfer", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $.Int32, $.String, 
          $asm01.TypeRef("System.Guid")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteLine", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "s_optionBufferSize", "bufferSize"); 
    $.Constant({Static:true , Public:false}, "s_optionLogRetention", "logRetentionOption"); 
    $.Constant({Static:true , Public:false}, "s_optionMaximumFileSize", "maximumFileSize"); 
    $.Constant({Static:true , Public:false}, "s_optionMaximumNumberOfFiles", "maximumNumberOfFiles"); 
    $.Constant({Static:true , Public:false}, "s_userDataHeader", "<System.Diagnostics.UserData xmlns=\"http://schemas.microsoft.com/win/2006/09/System.Diagnostics/UserData/\">"); 
    $.Constant({Static:true , Public:false}, "s_eventHeader", "<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\"><System><Provider Guid=\""); 
    $.Constant({Static:true , Public:false}, "s_defaultPayloadSize", 512); 
    $.Constant({Static:true , Public:false}, "_retryThreshold", 2); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "machineName", $.String); 
    $.Field({Static:false, Public:false}, "traceWriter", $asm04.TypeRef("System.Diagnostics.EventSchemaTraceListener/TraceWriter")); 
    $.Field({Static:false, Public:false}, "fileName", $.String); 
    $.Field({Static:false, Public:false}, "_initialized", $.Boolean); 
    $.Field({Static:false, Public:false}, "_bufferSize", $.Int32); 
    $.Field({Static:false, Public:false}, "_retention", $asm04.TypeRef("System.Diagnostics.TraceLogRetentionOption")); 
    $.Field({Static:false, Public:false}, "_maxFileSize", $.Int64); 
    $.Field({Static:false, Public:false}, "_maxNumberOfFiles", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_lockObject", $.Object); 
    $.Property({Static:false, Public:true }, "Writer", $asm01.TypeRef("System.IO.TextWriter"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsThreadSafe", $.Boolean);

    $.Property({Static:false, Public:true }, "BufferSize", $.Int32);

    $.Property({Static:false, Public:true }, "TraceLogRetentionOption", $asm04.TypeRef("System.Diagnostics.TraceLogRetentionOption"));

    $.Property({Static:false, Public:true }, "MaximumFileSize", $.Int64);

    $.Property({Static:false, Public:true }, "MaximumNumberOfFiles", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TraceWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.IO.TextWriter"), "System.Diagnostics.EventSchemaTraceListener/TraceWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm04.TypeRef("System.Diagnostics.TraceLogRetentionOption"), $.Int64, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Encoding", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncodingWithFallback", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [$asm01.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "encNoBOMwithFallback", $asm01.TypeRef("System.Text.Encoding")); 
    $.Field({Static:false, Public:false}, "stream", $asm01.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "m_lockObject", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "Encoding", $asm01.TypeRef("System.Text.Encoding"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Diagnostics.TraceLogRetentionOption", true, {
    UnlimitedSequentialFiles: 0, 
    LimitedCircularFiles: 1, 
    SingleFileUnboundedSize: 2, 
    LimitedSequentialFiles: 3, 
    SingleFileBoundedSize: 4
  }, false
);

(function UnescapedXmlDiagnosticData$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.UnescapedXmlDiagnosticData", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnescapedXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UnescapedXml", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "_xmlString", $.String); 
    $.Property({Static:false, Public:true }, "UnescapedXml", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Diagnostics.PerformanceData");
(function CounterData$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.PerformanceData.CounterData", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Int64])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Int64, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_offset", $jsilcore.TypeRef("JSIL.Pointer", [$.Int64])); 
    $.Property({Static:false, Public:true }, "Value", $.Int64);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CounterSetInstanceCounterDataSet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstance")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.PerformanceData.CounterData"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.PerformanceData.CounterData"), [$.String], [])
    );

    $.Field({Static:false, Public:false}, "m_instance", $asm04.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstance")); 
    $.Field({Static:false, Public:false}, "m_counters", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm04.TypeRef("System.Diagnostics.PerformanceData.CounterData")])); 
    $.Field({Static:false, Public:false}, "m_disposed", $.Int32); 
    $.Field({Static:false, Public:false}, "m_dataBlock", $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])); 
    $.Property({Static:false, Public:true }, "Item", $asm04.TypeRef("System.Diagnostics.PerformanceData.CounterData"));

    $.Property({Static:false, Public:true }, "Item", $asm04.TypeRef("System.Diagnostics.PerformanceData.CounterData"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function CounterSet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.PerformanceData.CounterSet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Guid"), $asm01.TypeRef("System.Guid"), 
          $asm04.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "AddCounter", 
      new JSIL.MethodSignature(null, [$.Int32, $asm04.TypeRef("System.Diagnostics.PerformanceData.CounterType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddCounter", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm04.TypeRef("System.Diagnostics.PerformanceData.CounterType"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateCounterSetInstance", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstance"), [$.String], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_platformNotSupported", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_provider", $asm04.TypeRef("System.Diagnostics.PerformanceData.PerfProvider")); 
    $.Field({Static:false, Public:false}, "m_providerGuid", $asm01.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "m_counterSet", $asm01.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "m_instType", $asm04.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_lockObject", $.Object); 
    $.Field({Static:false, Public:false}, "m_instanceCreated", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_stringToId", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])); 
    $.Field({Static:false, Public:false}, "m_idToCounter", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm04.TypeRef("System.Diagnostics.PerformanceData.CounterType")])); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CounterSetInstance$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.PerformanceData.CounterSetInstance", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Diagnostics.PerformanceData.CounterSet"), $.String], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Counters", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet"), [], [])
    );

    $.Field({Static:false, Public:false}, "m_counterSet", $asm04.TypeRef("System.Diagnostics.PerformanceData.CounterSet")); 
    $.Field({Static:false, Public:false}, "m_instName", $.String); 
    $.Field({Static:false, Public:false}, "m_active", $.Int32); 
    $.Field({Static:false, Public:false}, "m_counters", $asm04.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet")); 
    $.Field({Static:false, Public:false}, "m_nativeInst", $jsilcore.TypeRef("JSIL.Pointer", [$asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/PerfCounterSetInstanceStruct")])); 
    $.Property({Static:false, Public:true }, "Counters", $asm04.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Diagnostics.PerformanceData.CounterSetInstanceType", true, {
    Single: 0, 
    Multiple: 2, 
    GlobalAggregate: 4, 
    MultipleAggregate: 6, 
    GlobalAggregateWithHistory: 11, 
    InstanceAggregate: 22
  }, false
);

JSIL.MakeEnum(
  "System.Diagnostics.PerformanceData.CounterType", true, {
    RawDataHex32: 0, 
    RawDataHex64: 256, 
    RawData32: 65536, 
    RawData64: 65792, 
    Delta32: 4195328, 
    Delta64: 4195584, 
    SampleCounter: 4260864, 
    QueueLength: 4523008, 
    LargeQueueLength: 4523264, 
    QueueLength100Ns: 5571840, 
    QueueLengthObjectTime: 6620416, 
    RateOfCountPerSecond32: 272696320, 
    RateOfCountPerSecond64: 272696576, 
    RawFraction32: 537003008, 
    RawFraction64: 537003264, 
    PercentageActive: 541132032, 
    PrecisionSystemTimer: 541525248, 
    PercentageActive100Ns: 542180608, 
    PrecisionTimer100Ns: 542573824, 
    ObjectSpecificTimer: 543229184, 
    PrecisionObjectSpecificTimer: 543622400, 
    SampleFraction: 549585920, 
    PercentageNotActive: 557909248, 
    PercentageNotActive100Ns: 558957824, 
    MultiTimerPercentageActive: 574686464, 
    MultiTimerPercentageActive100Ns: 575735040, 
    MultiTimerPercentageNotActive: 591463680, 
    MultiTimerPercentageNotActive100Ns: 592512256, 
    AverageTimer32: 805438464, 
    ElapsedTime: 807666944, 
    AverageCount64: 1073874176, 
    SampleBase: 1073939457, 
    AverageBase: 1073939458, 
    RawBase32: 1073939459, 
    RawBase64: 1073939712, 
    MultiTimerBase: 1107494144
  }, false
);

(function PerfProvider$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Diagnostics.PerformanceData.PerfProvider", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Guid")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_providerGuid", $asm01.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "m_counterSet", $.Int32); 
    $.Field({Static:false, Public:false}, "m_hProvider", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PerfProviderCollection$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Diagnostics.PerformanceData.PerfProviderCollection", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "get_s_lockObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "QueryProvider", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Diagnostics.PerformanceData.PerfProvider"), [$asm01.TypeRef("System.Guid")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RegisterCounterSet", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveProvider", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Guid")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnregisterCounterSet", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCounterSetInstanceType", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCounterType", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Diagnostics.PerformanceData.CounterType")], [])
    );

    $.Field({Static:true , Public:false}, "s_hiddenInternalSyncObject", $.Object); 
    $.Field({Static:true , Public:false}, "s_providerList", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("System.Diagnostics.PerformanceData.PerfProvider")])); 
    $.Field({Static:true , Public:false}, "s_counterSetList", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Int32])); 
    $.Field({Static:true , Public:false}, "s_counterTypes", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Diagnostics.PerformanceData.CounterType")])); 
    $.Field({Static:true , Public:false}, "s_counterSetInstanceTypes", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")])); 
    $.Property({Static:true , Public:false}, "s_lockObject", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Collections");
JSIL.DeclareNamespace("System.Collections.Generic");
(function BitHelper$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Generic.BitHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Int32]), $.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMarked", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "MarkBit", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToIntArrayLength", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.Constant({Static:true , Public:false}, "MarkedBitFlag", 1); 
    $.Constant({Static:true , Public:false}, "IntSize", 32); 
    $.Field({Static:false, Public:false}, "m_length", $.Int32); 
    $.Field({Static:false, Public:false}, "m_arrayPtr", $jsilcore.TypeRef("JSIL.Pointer", [$.Int32])); 
    $.Field({Static:false, Public:false}, "m_array", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "useStackAlloc", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function HashHelpers$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Collections.Generic.HashHelpers", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "GetMinPrime", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPrime", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "IsPrime", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm01.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm01.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "primes", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function HashSet$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Generic.HashSet`1", true, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIfNotPresent", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddOrGetLocation", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreEqualityComparersEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckUniqueAndUnfoundElements", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Collections.Generic.HashSet`1/ElementCount", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), $.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsAllElements", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateSetComparer", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.Type]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExceptWith", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Comparer", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Collections.Generic.HashSet`1/Enumerator", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HashSetEquals", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $.Type, 
          $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncreaseCapacity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalIndexOf", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IntersectWith", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IntersectWithEnumerable", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IntersectWithHashSetWithSameEC", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsProperSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "IsProperSupersetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "IsSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IsSubsetOfHashSetWithSameEC", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsSupersetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnDeserialization", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Overlaps", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveWhere", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetEquals", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SymmetricExceptWith", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SymmetricExceptWithEnumerable", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SymmetricExceptWithUniqueHashSet", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
    )
      .Overrides(0, "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(2, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TrimExcess", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "UnionWith", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.Constant({Static:true , Public:false}, "Lower31BitMask", 2147483647); 
    $.Constant({Static:true , Public:false}, "GrowthFactor", 2); 
    $.Constant({Static:true , Public:false}, "StackAllocThreshold", 100); 
    $.Constant({Static:true , Public:false}, "ShrinkThreshold", 3); 
    $.Constant({Static:true , Public:false}, "CapacityName", "Capacity"); 
    $.Constant({Static:true , Public:false}, "ElementsName", "Elements"); 
    $.Constant({Static:true , Public:false}, "ComparerName", "Comparer"); 
    $.Constant({Static:true , Public:false}, "VersionName", "Version"); 
    $.Field({Static:false, Public:false}, "m_buckets", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "m_slots", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Collections.Generic.HashSet`1/Slot", [$.GenericParameter("T")])])); 
    $.Field({Static:false, Public:false}, "m_count", $.Int32); 
    $.Field({Static:false, Public:false}, "m_lastIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_freeList", $.Int32); 
    $.Field({Static:false, Public:false}, "m_comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "m_version", $.Int32); 
    $.Field({Static:false, Public:false}, "m_siInfo", $asm01.TypeRef("System.Runtime.Serialization.SerializationInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "Comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm01.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 4 */ $asm01.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), 
      /* 5 */ $asm06.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm04.System.Collections.Generic.HashSetDebugView$b1.__Type__]; });

})();

(function ElementCount$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Collections.Generic.HashSet`1/ElementCount", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "uniqueCount", $.Int32); 
    $.Field({Static:false, Public:false}, "unfoundCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Slot$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Collections.Generic.HashSet`1/Slot", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
    $.Field({Static:false, Public:false}, "value", $.GenericParameter("T")); 
    $.Field({Static:false, Public:false}, "next", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Enumerator$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Collections.Generic.HashSet`1/Enumerator", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1/Enumerator")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1/Enumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(2, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Reset");

    $.Field({Static:false, Public:false}, "set", $asm04.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "index", $.Int32); 
    $.Field({Static:false, Public:false}, "version", $.Int32); 
    $.Field({Static:false, Public:false}, "current", $.GenericParameter("T")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1/Enumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1/Enumerator")]), 
      /* 1 */ $asm01.TypeRef("System.IDisposable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function HashSetDebugView$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Generic.HashSetDebugView`1", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetDebugView`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetDebugView`1")]), [], [])
    );

    $.Field({Static:false, Public:false}, "set", $asm04.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])); 
    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetDebugView`1")]))
      .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm01.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function HashSetEqualityComparer$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Collections.Generic.HashSetEqualityComparer`1", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetEqualityComparer`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetEqualityComparer`1")]), $asm04.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetEqualityComparer`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetEqualityComparer`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "m_comparer", $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm04.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetEqualityComparer`1")])])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.IO.HandleInheritability", true, {
    None: 0, 
    Inheritable: 1
  }, false
);

JSIL.DeclareNamespace("System.IO.Pipes");
JSIL.MakeEnum(
  "System.IO.Pipes.PipeDirection", true, {
    In: 1, 
    Out: 2, 
    InOut: 3
  }, false
);

JSIL.MakeEnum(
  "System.IO.Pipes.PipeTransmissionMode", true, {
    Byte: 0, 
    Message: 1
  }, false
);

JSIL.MakeEnum(
  "System.IO.Pipes.PipeOptions", true, {
    WriteThrough: -2147483648, 
    None: 0, 
    Asynchronous: 1073741824
  }, true
);

(function PipeStream$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.IO.Stream"), "System.IO.Pipes.PipeStream", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeDirection"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.IO.Pipes.PipeDirection"), $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AsyncPSCallback", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Threading.NativeOverlapped")])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm01.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "BeginReadCore", 
      new JSIL.MethodSignature($asm04.TypeRef("System.IO.Pipes.PipeStreamAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm01.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm01.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "BeginWriteCore", 
      new JSIL.MethodSignature($asm04.TypeRef("System.IO.Pipes.PipeStreamAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm01.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckPipePropertyOperations", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckReadOperations", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckWriteOperations", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IAsyncResult")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IAsyncResult")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InBufferSize", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_InternalHandle", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsAsync", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsConnected", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsHandleExposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsMessageComplete", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OutBufferSize", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadMode", 
      new JSIL.MethodSignature($asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SafePipeHandle", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_State", 
      new JSIL.MethodSignature($asm04.TypeRef("System.IO.Pipes.PipeState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TransmissionMode", 
      new JSIL.MethodSignature($asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetAccessControl", 
      new JSIL.MethodSignature($asm04.TypeRef("System.IO.Pipes.PipeSecurity"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetSecAttrs", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/SECURITY_ATTRIBUTES"), [
          $asm04.TypeRef("System.IO.HandleInheritability"), $asm04.TypeRef("System.IO.Pipes.PipeSecurity"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetSecAttrs", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/SECURITY_ATTRIBUTES"), [$asm04.TypeRef("System.IO.HandleInheritability")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.IO.Pipes.PipeDirection"), $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeHandle", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $.Boolean, 
          $.Boolean
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadCore", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadFileNative", 
      new JSIL.MethodSignature($.Int32, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Threading.NativeOverlapped")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm01.TypeRef("System.IO.SeekOrigin")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsConnected", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadMode", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_State", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeState")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAccessControl", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeSecurity")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateReadMode", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WaitForPipeDrain", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WinIOError", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteFileNative", 
      new JSIL.MethodSignature($.Int32, [
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Threading.NativeOverlapped")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_canUseAsync", $.Boolean); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "IOCallback", $asm01.TypeRef("System.Threading.IOCompletionCallback"), function ($pi) {
        return $asm01.System.Threading.IOCompletionCallback.New($pi, $pi.AsyncPSCallback);
      }); 
    $.Field({Static:false, Public:false}, "m_handle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")); 
    $.Field({Static:false, Public:false}, "m_canRead", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_canWrite", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_isAsync", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_isMessageComplete", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_isFromExistingHandle", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_isHandleExposed", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_readMode", $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode")); 
    $.Field({Static:false, Public:false}, "m_transmissionMode", $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode")); 
    $.Field({Static:false, Public:false}, "m_pipeDirection", $asm04.TypeRef("System.IO.Pipes.PipeDirection")); 
    $.Field({Static:false, Public:false}, "m_outBufferSize", $.Int32); 
    $.Field({Static:false, Public:false}, "m_state", $asm04.TypeRef("System.IO.Pipes.PipeState")); 
    $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

    $.Property({Static:false, Public:true }, "IsAsync", $.Boolean);

    $.Property({Static:false, Public:true }, "IsMessageComplete", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "TransmissionMode", $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "InBufferSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "OutBufferSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadMode", $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Property({Static:false, Public:true }, "SafePipeHandle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Property({Static:false, Public:false}, "InternalHandle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Property({Static:false, Public:false}, "IsHandleExposed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:false}, "State", $asm04.TypeRef("System.IO.Pipes.PipeState"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AnonymousPipeServerStream$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.IO.Pipes.PipeStream"), "System.IO.Pipes.AnonymousPipeServerStream", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeDirection")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeDirection"), $asm04.TypeRef("System.IO.HandleInheritability")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.IO.Pipes.PipeDirection"), $asm04.TypeRef("System.IO.HandleInheritability"), 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.IO.Pipes.PipeDirection"), $asm04.TypeRef("System.IO.HandleInheritability"), 
          $.Int32, $asm04.TypeRef("System.IO.Pipes.PipeSecurity")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.IO.Pipes.PipeDirection"), $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), 
          $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Create", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.IO.Pipes.PipeDirection"), $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/SECURITY_ATTRIBUTES"), 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "DisposeLocalCopyOfClientHandle", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClientSafePipeHandle", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TransmissionMode", 
      new JSIL.MethodSignature($asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetClientHandleAsString", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadMode", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_clientHandle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")); 
    $.Field({Static:false, Public:false}, "m_clientHandleExposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "ClientSafePipeHandle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "TransmissionMode", $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadMode", $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AnonymousPipeClientStream$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.IO.Pipes.PipeStream"), "System.IO.Pipes.AnonymousPipeClientStream", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeDirection"), $.String], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeDirection"), $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TransmissionMode", 
      new JSIL.MethodSignature($asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadMode", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "TransmissionMode", $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadMode", $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.IO.Pipes.PipeStreamImpersonationWorker", true, []);

(function NamedPipeServerStream$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.IO.Pipes.PipeStream"), "System.IO.Pipes.NamedPipeServerStream", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm04.TypeRef("System.IO.Pipes.PipeDirection")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm04.TypeRef("System.IO.Pipes.PipeOptions")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm04.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm04.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32, $asm04.TypeRef("System.IO.Pipes.PipeSecurity")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm04.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32, $asm04.TypeRef("System.IO.Pipes.PipeSecurity"), 
          $asm04.TypeRef("System.IO.HandleInheritability")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm04.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32, $asm04.TypeRef("System.IO.Pipes.PipeSecurity"), 
          $asm04.TypeRef("System.IO.HandleInheritability"), $asm04.TypeRef("System.IO.Pipes.PipeAccessRights")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.IO.Pipes.PipeDirection"), $.Boolean, 
          $.Boolean, $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsyncWaitForConnectionCallback", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Threading.NativeOverlapped")])
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "BeginWaitForConnection", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IAsyncResult"), [$asm01.TypeRef("System.AsyncCallback"), $.Object], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckConnectOperationsServer", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckDisconnectOperations", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Create", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm04.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm04.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32, $asm04.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm04.TypeRef("Microsoft.Win32.UnsafeNativeMethods/SECURITY_ATTRIBUTES")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Disconnect", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "EndWaitForConnection", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IAsyncResult")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetImpersonationUserName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ImpersonateAndTryCode", 
      new JSIL.MethodSignature(null, [$.Object], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RevertImpersonationOnBackout", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm01.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "RunAsClient", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeStreamImpersonationWorker")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WaitForConnection", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:true }, "MaxAllowedServerInstances", -1); 
    $.Field({Static:true , Public:false}, "s_maxUsernameLength", $.Int32, 20); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "WaitForConnectionCallback", $asm01.TypeRef("System.Threading.IOCompletionCallback"), function ($pi) {
        return $asm01.System.Threading.IOCompletionCallback.New($pi, $pi.AsyncWaitForConnectionCallback);
      }); 
    $.Field({Static:true , Public:false}, "tryCode", $asm01.TypeRef("System.Runtime.CompilerServices.RuntimeHelpers/TryCode"), function ($pi) {
        return $asm01.System.Runtime.CompilerServices.RuntimeHelpers_TryCode.New($pi, $pi.ImpersonateAndTryCode);
      }); 
    $.Field({Static:true , Public:false}, "cleanupCode", $asm01.TypeRef("System.Runtime.CompilerServices.RuntimeHelpers/CleanupCode"), function ($pi) {
        return $asm01.System.Runtime.CompilerServices.RuntimeHelpers_CleanupCode.New($pi, $pi.RevertImpersonationOnBackout);
      }); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ExecuteHelper$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.IO.Pipes.NamedPipeServerStream/ExecuteHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeStreamImpersonationWorker"), $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_userCode", $asm04.TypeRef("System.IO.Pipes.PipeStreamImpersonationWorker")); 
    $.Field({Static:false, Public:false}, "m_handle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")); 
    $.Field({Static:false, Public:false}, "m_mustRevert", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_impersonateErrorCode", $.Int32); 
    $.Field({Static:false, Public:false}, "m_revertImpersonateErrorCode", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NamedPipeClientStream$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm04.TypeRef("System.IO.Pipes.PipeStream"), "System.IO.Pipes.NamedPipeClientStream", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm04.TypeRef("System.IO.Pipes.PipeDirection")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm04.TypeRef("System.IO.Pipes.PipeDirection"), $asm04.TypeRef("System.IO.Pipes.PipeOptions")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm04.TypeRef("System.IO.Pipes.PipeDirection"), $asm04.TypeRef("System.IO.Pipes.PipeOptions"), 
          $asm01.TypeRef("System.Security.Principal.TokenImpersonationLevel")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm04.TypeRef("System.IO.Pipes.PipeDirection"), $asm04.TypeRef("System.IO.Pipes.PipeOptions"), 
          $asm01.TypeRef("System.Security.Principal.TokenImpersonationLevel"), $asm04.TypeRef("System.IO.HandleInheritability")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm04.TypeRef("System.IO.Pipes.PipeAccessRights"), $asm04.TypeRef("System.IO.Pipes.PipeOptions"), 
          $asm01.TypeRef("System.Security.Principal.TokenImpersonationLevel"), $asm04.TypeRef("System.IO.HandleInheritability")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("System.IO.Pipes.PipeDirection"), $.Boolean, 
          $.Boolean, $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckConnectOperationsClient", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckPipePropertyOperations", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Connect", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Connect", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DirectionFromRights", 
      new JSIL.MethodSignature($asm04.TypeRef("System.IO.Pipes.PipeDirection"), [$asm04.TypeRef("System.IO.Pipes.PipeAccessRights")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NumberOfServerInstances", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_normalizedPipePath", $.String); 
    $.Field({Static:false, Public:false}, "m_impersonationLevel", $asm01.TypeRef("System.Security.Principal.TokenImpersonationLevel")); 
    $.Field({Static:false, Public:false}, "m_pipeOptions", $asm04.TypeRef("System.IO.Pipes.PipeOptions")); 
    $.Field({Static:false, Public:false}, "m_inheritability", $asm04.TypeRef("System.IO.HandleInheritability")); 
    $.Field({Static:false, Public:false}, "m_access", $.Int32); 
    $.Property({Static:false, Public:true }, "NumberOfServerInstances", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PipeAsyncResult$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.IO.Pipes.PipeAsyncResult", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallUserCallback", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallUserCallbackWorker", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncState", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncWaitHandle", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Threading.WaitHandle"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletedSynchronously", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompleted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "_userCallback", $asm01.TypeRef("System.AsyncCallback")); 
    $.Field({Static:false, Public:false}, "_userStateObject", $.Object); 
    $.Field({Static:false, Public:false}, "_waitHandle", $asm01.TypeRef("System.Threading.ManualResetEvent")); 
    $.Field({Static:false, Public:false}, "_handle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")); 
    $.Field({Static:false, Public:false}, "_overlapped", $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Threading.NativeOverlapped")])); 
    $.Field({Static:false, Public:false}, "_EndXxxCalled", $.Int32); 
    $.Field({Static:false, Public:false}, "_errorCode", $.Int32); 
    $.Field({Static:false, Public:false}, "_isComplete", $.Boolean); 
    $.Field({Static:false, Public:false}, "_completedSynchronously", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm01.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IAsyncResult")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.IO.Pipes.PipeState", false, {
    WaitingToConnect: 0, 
    Connected: 1, 
    Broken: 2, 
    Disconnected: 3, 
    Closed: 4
  }, false
);

(function PipeStreamAsyncResult$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.IO.Pipes.PipeStreamAsyncResult", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallUserCallback", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallUserCallbackWorker", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncState", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncWaitHandle", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Threading.WaitHandle"), [], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletedSynchronously", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompleted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "_userCallback", $asm01.TypeRef("System.AsyncCallback")); 
    $.Field({Static:false, Public:false}, "_userStateObject", $.Object); 
    $.Field({Static:false, Public:false}, "_waitHandle", $asm01.TypeRef("System.Threading.ManualResetEvent")); 
    $.Field({Static:false, Public:false}, "_handle", $asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")); 
    $.Field({Static:false, Public:false}, "_overlapped", $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("System.Threading.NativeOverlapped")])); 
    $.Field({Static:false, Public:false}, "_EndXxxCalled", $.Int32); 
    $.Field({Static:false, Public:false}, "_numBytes", $.Int32); 
    $.Field({Static:false, Public:false}, "_errorCode", $.Int32); 
    $.Field({Static:false, Public:false}, "_isMessageComplete", $.Boolean); 
    $.Field({Static:false, Public:false}, "_isWrite", $.Boolean); 
    $.Field({Static:false, Public:false}, "_isComplete", $.Boolean); 
    $.Field({Static:false, Public:false}, "_completedSynchronously", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm01.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IAsyncResult")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.IO.Pipes.PipeAccessRights", true, {
    ReadData: 1, 
    WriteData: 2, 
    CreateNewInstance: 4, 
    ReadExtendedAttributes: 8, 
    WriteExtendedAttributes: 16, 
    ReadAttributes: 128, 
    WriteAttributes: 256, 
    Write: 274, 
    Delete: 65536, 
    ReadPermissions: 131072, 
    Read: 131209, 
    ReadWrite: 131483, 
    ChangePermissions: 262144, 
    TakeOwnership: 524288, 
    Synchronize: 1048576, 
    FullControl: 2032031, 
    AccessSystemSecurity: 16777216
  }, true
);

(function PipeAccessRule$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Security.AccessControl.AccessRule"), "System.IO.Pipes.PipeAccessRule", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm01.TypeRef("System.Security.AccessControl.AccessControlType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Security.Principal.IdentityReference"), $asm04.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm01.TypeRef("System.Security.AccessControl.AccessControlType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm01.TypeRef("System.Security.AccessControl.AccessControlType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AccessMaskFromRights", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("System.IO.Pipes.PipeAccessRights"), $asm01.TypeRef("System.Security.AccessControl.AccessControlType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PipeAccessRights", 
      new JSIL.MethodSignature($asm04.TypeRef("System.IO.Pipes.PipeAccessRights"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RightsFromAccessMask", 
      new JSIL.MethodSignature($asm04.TypeRef("System.IO.Pipes.PipeAccessRights"), [$.Int32], [])
    );

    $.Property({Static:false, Public:true }, "PipeAccessRights", $asm04.TypeRef("System.IO.Pipes.PipeAccessRights"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PipeAuditRule$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Security.AccessControl.AuditRule"), "System.IO.Pipes.PipeAuditRule", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Security.Principal.IdentityReference"), $asm04.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm01.TypeRef("System.Security.AccessControl.AuditFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm01.TypeRef("System.Security.AccessControl.AuditFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm01.TypeRef("System.Security.AccessControl.AuditFlags")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AccessMaskFromRights", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("System.IO.Pipes.PipeAccessRights")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PipeAccessRights", 
      new JSIL.MethodSignature($asm04.TypeRef("System.IO.Pipes.PipeAccessRights"), [], [])
    );

    $.Property({Static:false, Public:true }, "PipeAccessRights", $asm04.TypeRef("System.IO.Pipes.PipeAccessRights"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PipeSecurity$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Security.AccessControl.NativeObjectSecurity"), "System.IO.Pipes.PipeSecurity", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $asm01.TypeRef("System.Security.AccessControl.AccessControlSections")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AccessRuleFactory", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.AccessControl.AccessRule"), [
          $asm01.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm01.TypeRef("System.Security.AccessControl.InheritanceFlags"), 
          $asm01.TypeRef("System.Security.AccessControl.PropagationFlags"), $asm01.TypeRef("System.Security.AccessControl.AccessControlType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAccessRule", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeAccessRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAuditRule", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeAuditRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AuditRuleFactory", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.AccessControl.AuditRule"), [
          $asm01.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm01.TypeRef("System.Security.AccessControl.InheritanceFlags"), 
          $asm01.TypeRef("System.Security.AccessControl.PropagationFlags"), $asm01.TypeRef("System.Security.AccessControl.AuditFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AccessRightType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AccessRuleType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AuditRuleType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAccessControlSectionsFromChanges", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.AccessControl.AccessControlSections"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Persist", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.InteropServices.SafeHandle")], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Persist", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm01.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "RemoveAccessRule", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.IO.Pipes.PipeAccessRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAccessRuleSpecific", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeAccessRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRule", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.IO.Pipes.PipeAuditRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRuleAll", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeAuditRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRuleSpecific", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeAuditRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetAccessRule", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeAccessRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAccessRule", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeAccessRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAuditRule", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.IO.Pipes.PipeAuditRule")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "AccessRightType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AccessRuleType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AuditRuleType", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Threading");
JSIL.MakeEnum(
  "System.Threading.LockRecursionPolicy", true, {
    NoRecursion: 0, 
    SupportsRecursion: 1
  }, false
);

(function RecursiveCounts$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Threading.RecursiveCounts", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "writercount", $.Int32); 
    $.Field({Static:false, Public:true }, "upgradecount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function LockRecursionException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Exception"), "System.Threading.LockRecursionException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ReaderWriterCount$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Threading.ReaderWriterCount", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:true }, "threadid", $.Int32); 
    $.Field({Static:false, Public:true }, "readercount", $.Int32); 
    $.Field({Static:false, Public:true }, "next", $.Type); 
    $.Field({Static:false, Public:true }, "rc", $asm04.TypeRef("System.Threading.RecursiveCounts")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ReaderWriterLockSlim$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Threading.ReaderWriterLockSlim", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("System.Threading.LockRecursionPolicy")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearUpgraderWaiting", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearWriterAcquired", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearWritersWaiting", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterMyLock", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterMyLockSpin", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterReadLock", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterUpgradeableReadLock", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterWriteLock", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitAndWakeUpAppropriateWaiters", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitAndWakeUpAppropriateWaitersPreferringWriters", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitMyLock", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExitReadLock", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExitUpgradeableReadLock", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExitWriteLock", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentReadCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadLockHeld", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsUpgradeableReadLockHeld", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsWriteLockHeld", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecursionPolicy", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Threading.LockRecursionPolicy"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecursiveReadCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecursiveUpgradeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecursiveWriteCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WaitingReadCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WaitingUpgradeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WaitingWriteCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNumReaders", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetThreadRWCount", 
      new JSIL.MethodSignature($asm04.TypeRef("System.Threading.ReaderWriterCount"), [$.Int32, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeThreadCounts", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRWEntryEmpty", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Threading.ReaderWriterCount")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRwHashEntryChanged", 
      new JSIL.MethodSignature($.Boolean, [$asm04.TypeRef("System.Threading.ReaderWriterCount"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsWriterAcquired", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LazyCreateEvent", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Threading.EventWaitHandle")]), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUpgraderWaiting", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetWriterAcquired", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetWritersWaiting", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SpinWait", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterReadLock", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterReadLock", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterUpgradeableReadLock", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterUpgradeableReadLock", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterWriteLock", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterWriteLock", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WaitOnEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Threading.EventWaitHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $.Int32
        ], [])
    );

    $.Constant({Static:true , Public:false}, "LockSpinCycles", 20); 
    $.Constant({Static:true , Public:false}, "LockSpinCount", 10); 
    $.Constant({Static:true , Public:false}, "LockSleep0Count", 5); 
    $.Constant({Static:true , Public:false}, "hashTableSize", 255); 
    $.Constant({Static:true , Public:false}, "MaxSpinCount", 20); 
    $.Constant({Static:true , Public:false}, "WRITER_HELD", 2147483648); 
    $.Constant({Static:true , Public:false}, "WAITING_WRITERS", 1073741824); 
    $.Constant({Static:true , Public:false}, "WAITING_UPGRADER", 536870912); 
    $.Constant({Static:true , Public:false}, "MAX_READER", 268435454); 
    $.Constant({Static:true , Public:false}, "READER_MASK", 268435455); 
    $.Field({Static:false, Public:false}, "fIsReentrant", $.Boolean); 
    $.Field({Static:false, Public:false}, "myLock", $.Int32); 
    $.Field({Static:false, Public:false}, "numWriteWaiters", $.UInt32); 
    $.Field({Static:false, Public:false}, "numReadWaiters", $.UInt32); 
    $.Field({Static:false, Public:false}, "numWriteUpgradeWaiters", $.UInt32); 
    $.Field({Static:false, Public:false}, "numUpgradeWaiters", $.UInt32); 
    $.Field({Static:false, Public:false}, "fNoWaiters", $.Boolean); 
    $.Field({Static:false, Public:false}, "upgradeLockOwnerId", $.Int32); 
    $.Field({Static:false, Public:false}, "writeLockOwnerId", $.Int32); 
    $.Field({Static:false, Public:false}, "writeEvent", $asm01.TypeRef("System.Threading.EventWaitHandle")); 
    $.Field({Static:false, Public:false}, "readEvent", $asm01.TypeRef("System.Threading.EventWaitHandle")); 
    $.Field({Static:false, Public:false}, "upgradeEvent", $asm01.TypeRef("System.Threading.EventWaitHandle")); 
    $.Field({Static:false, Public:false}, "waitUpgradeEvent", $asm01.TypeRef("System.Threading.EventWaitHandle")); 
    $.Field({Static:false, Public:false}, "rwc", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("System.Threading.ReaderWriterCount")])); 
    $.Field({Static:false, Public:false}, "fUpgradeThreadHoldingRead", $.Boolean); 
    $.Field({Static:false, Public:false}, "owners", $.UInt32); 
    $.Field({Static:false, Public:false}, "fDisposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsReadLockHeld", $.Boolean);

    $.Property({Static:false, Public:true }, "IsUpgradeableReadLockHeld", $.Boolean);

    $.Property({Static:false, Public:true }, "IsWriteLockHeld", $.Boolean);

    $.Property({Static:false, Public:true }, "RecursionPolicy", $asm04.TypeRef("System.Threading.LockRecursionPolicy"));

    $.Property({Static:false, Public:true }, "CurrentReadCount", $.Int32);

    $.Property({Static:false, Public:true }, "RecursiveReadCount", $.Int32);

    $.Property({Static:false, Public:true }, "RecursiveUpgradeCount", $.Int32);

    $.Property({Static:false, Public:true }, "RecursiveWriteCount", $.Int32);

    $.Property({Static:false, Public:true }, "WaitingReadCount", $.Int32);

    $.Property({Static:false, Public:true }, "WaitingUpgradeCount", $.Int32);

    $.Property({Static:false, Public:true }, "WaitingWriteCount", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function FX20Assembly$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("FX20Assembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Version", "2.0.0.0"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function FX35Assembly$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("FX35Assembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Version", "3.5.0.0"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function FXAssembly$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("FXAssembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Version", "3.5.0.0"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ThisAssembly$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Title", "System.Core.dll"); 
    $.Constant({Static:true , Public:false}, "Description", "System.Core.dll"); 
    $.Constant({Static:true , Public:false}, "DefaultAlias", "System.Core.dll"); 
    $.Constant({Static:true , Public:false}, "Copyright", "\xa9 Microsoft Corporation.  All rights reserved."); 
    $.Constant({Static:true , Public:false}, "Version", "3.5.0.0"); 
    $.Constant({Static:true , Public:false}, "InformationalVersion", "3.5.30729.5420"); 
    $.Constant({Static:true , Public:false}, "DailyBuildNumber", 30729); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AssemblyRef$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", "00000000000000000400000000000000"); 
    $.Constant({Static:true , Public:false}, "Mscorlib", "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemData", "System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", "System.Data.OracleClient, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "System", "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", "System.Runtime.Remoting, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemWindowsForms", "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemXml", "System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", "b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", "b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293"); 
    $.Constant({Static:true , Public:false}, "SharedLibPublicKey", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
    $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", "System.ComponentModel.DataAnnotations, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemConfiguration", "System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", "System.Configuration.Install, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDeployment", "System.Deployment, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDesign", "System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", "System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", "System.Drawing.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDrawing", "System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", "System.EnterpriseServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemManagement", "System.Management, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemMessaging", "System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", "System.Runtime.Serialization.Formatters.Soap, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemSecurity", "System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemServiceProcess", "System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWeb", "System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebAbstractions", "System.Web.Abstractions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebDynamicData", "System.Web.DynamicData, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", "System.Web.DynamicData.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", "System.Web.Entity.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemWebExtensions", "System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", "System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebMobile", "System.Web.Mobile, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", "System.Web.RegularExpressions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebRouting", "System.Web.Routing, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebServices", "System.Web.Services, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", "Microsoft.VisualStudio, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", "Microsoft.VisualStudio.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", "VJSharpCodeProvider, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", "b7bd7678b977bd8f"); 
    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", "ASP.BrowserCapsFactory, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", "Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", "Microsoft.VisualStudio.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", "Microsoft.Web.Design.Client, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftJScript", "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SRDescriptionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.ComponentModel.DescriptionAttribute"), "System.SRDescriptionAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

(function SRCategoryAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.ComponentModel.CategoryAttribute"), "System.SRCategoryAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

(function SR$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.SR", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Globalization.CultureInfo"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Resources.ResourceManager"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedNonNegNum", "ArgumentOutOfRange_NeedNonNegNum"); 
    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesNoNulls", "Argument_AdjustmentRulesNoNulls"); 
    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesOutOfOrder", "Argument_AdjustmentRulesOutOfOrder"); 
    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesAmbiguousOverlap", "Argument_AdjustmentRulesAmbiguousOverlap"); 
    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlap", "Argument_AdjustmentRulesrDaylightSavingTimeOverlap"); 
    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange", "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange"); 
    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesInvalidOverlap", "Argument_AdjustmentRulesInvalidOverlap"); 
    $.Constant({Static:true , Public:false}, "Argument_ConvertMismatch", "Argument_ConvertMismatch"); 
    $.Constant({Static:true , Public:false}, "Argument_DateTimeHasTimeOfDay", "Argument_DateTimeHasTimeOfDay"); 
    $.Constant({Static:true , Public:false}, "Argument_DateTimeIsInvalid", "Argument_DateTimeIsInvalid"); 
    $.Constant({Static:true , Public:false}, "Argument_DateTimeIsNotAmbiguous", "Argument_DateTimeIsNotAmbiguous"); 
    $.Constant({Static:true , Public:false}, "Argument_DateTimeOffsetIsNotAmbiguous", "Argument_DateTimeOffsetIsNotAmbiguous"); 
    $.Constant({Static:true , Public:false}, "Argument_DateTimeKindMustBeUnspecified", "Argument_DateTimeKindMustBeUnspecified"); 
    $.Constant({Static:true , Public:false}, "Argument_DateTimeHasTicks", "Argument_DateTimeHasTicks"); 
    $.Constant({Static:true , Public:false}, "Argument_InvalidId", "Argument_InvalidId"); 
    $.Constant({Static:true , Public:false}, "Argument_InvalidSerializedString", "Argument_InvalidSerializedString"); 
    $.Constant({Static:true , Public:false}, "Argument_InvalidREG_TZI_FORMAT", "Argument_InvalidREG_TZI_FORMAT"); 
    $.Constant({Static:true , Public:false}, "Argument_OutOfOrderDateTimes", "Argument_OutOfOrderDateTimes"); 
    $.Constant({Static:true , Public:false}, "Argument_TimeSpanHasSeconds", "Argument_TimeSpanHasSeconds"); 
    $.Constant({Static:true , Public:false}, "Argument_TransitionTimesAreIdentical", "Argument_TransitionTimesAreIdentical"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_Day", "ArgumentOutOfRange_Day"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DayOfWeek", "ArgumentOutOfRange_DayOfWeek"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_Month", "ArgumentOutOfRange_Month"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffset", "ArgumentOutOfRange_UtcOffset"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffsetAndDaylightDelta", "ArgumentOutOfRange_UtcOffsetAndDaylightDelta"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_Week", "ArgumentOutOfRange_Week"); 
    $.Constant({Static:true , Public:false}, "InvalidTimeZone_InvalidRegistryData", "InvalidTimeZone_InvalidRegistryData"); 
    $.Constant({Static:true , Public:false}, "InvalidTimeZone_InvalidWin32APIData", "InvalidTimeZone_InvalidWin32APIData"); 
    $.Constant({Static:true , Public:false}, "Security_CannotReadRegistryData", "Security_CannotReadRegistryData"); 
    $.Constant({Static:true , Public:false}, "Serialization_CorruptField", "Serialization_CorruptField"); 
    $.Constant({Static:true , Public:false}, "Serialization_InvalidData", "Serialization_InvalidData"); 
    $.Constant({Static:true , Public:false}, "Serialization_InvalidEscapeSequence", "Serialization_InvalidEscapeSequence"); 
    $.Constant({Static:true , Public:false}, "TimeZoneNotFound_MissingRegistryData", "TimeZoneNotFound_MissingRegistryData"); 
    $.Constant({Static:true , Public:false}, "Argument_WrongAsyncResult", "Argument_WrongAsyncResult"); 
    $.Constant({Static:true , Public:false}, "Argument_InvalidOffLen", "Argument_InvalidOffLen"); 
    $.Constant({Static:true , Public:false}, "Argument_NeedNonemptyPipeName", "Argument_NeedNonemptyPipeName"); 
    $.Constant({Static:true , Public:false}, "Argument_EmptyServerName", "Argument_EmptyServerName"); 
    $.Constant({Static:true , Public:false}, "Argument_NonContainerInvalidAnyFlag", "Argument_NonContainerInvalidAnyFlag"); 
    $.Constant({Static:true , Public:false}, "ArgumentNull_Buffer", "ArgumentNull_Buffer"); 
    $.Constant({Static:true , Public:false}, "ArgumentNull_ServerName", "ArgumentNull_ServerName"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_AdditionalAccessLimited", "ArgumentOutOfRange_AdditionalAccessLimited"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_AnonymousReserved", "ArgumentOutOfRange_AnonymousReserved"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_TransmissionModeByteOrMsg", "ArgumentOutOfRange_TransmissionModeByteOrMsg"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DirectionModeInOrOut", "ArgumentOutOfRange_DirectionModeInOrOut"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DirectionModeInOutOrInOut", "ArgumentOutOfRange_DirectionModeInOutOrInOut"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_ImpersonationInvalid", "ArgumentOutOfRange_ImpersonationInvalid"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_ImpersonationOptionsInvalid", "ArgumentOutOfRange_ImpersonationOptionsInvalid"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_OptionsInvalid", "ArgumentOutOfRange_OptionsInvalid"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_HandleInheritabilityNoneOrInheritable", "ArgumentOutOfRange_HandleInheritabilityNoneOrInheritable"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_InvalidPipeAccessRights", "ArgumentOutOfRange_InvalidPipeAccessRights"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_InvalidTimeout", "ArgumentOutOfRange_InvalidTimeout"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MaxNumServerInstances", "ArgumentOutOfRange_MaxNumServerInstances"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidPipeAccessRights", "ArgumentOutOfRange_NeedValidPipeAccessRights"); 
    $.Constant({Static:true , Public:false}, "IndexOutOfRange_IORaceCondition", "IndexOutOfRange_IORaceCondition"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_EndReadCalledMultiple", "InvalidOperation_EndReadCalledMultiple"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_EndWriteCalledMultiple", "InvalidOperation_EndWriteCalledMultiple"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_EndWaitForConnectionCalledMultiple", "InvalidOperation_EndWaitForConnectionCalledMultiple"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeNotYetConnected", "InvalidOperation_PipeNotYetConnected"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeDisconnected", "InvalidOperation_PipeDisconnected"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeHandleNotSet", "InvalidOperation_PipeHandleNotSet"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeNotAsync", "InvalidOperation_PipeNotAsync"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeReadModeNotMessage", "InvalidOperation_PipeReadModeNotMessage"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeMessageTypeNotSupported", "InvalidOperation_PipeMessageTypeNotSupported"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeAlreadyConnected", "InvalidOperation_PipeAlreadyConnected"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeAlreadyDisconnected", "InvalidOperation_PipeAlreadyDisconnected"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeClosed", "InvalidOperation_PipeClosed"); 
    $.Constant({Static:true , Public:false}, "IO_FileTooLongOrHandleNotSync", "IO_FileTooLongOrHandleNotSync"); 
    $.Constant({Static:true , Public:false}, "IO_EOF_ReadBeyondEOF", "IO_EOF_ReadBeyondEOF"); 
    $.Constant({Static:true , Public:false}, "IO_FileNotFound", "IO_FileNotFound"); 
    $.Constant({Static:true , Public:false}, "IO_FileNotFound_FileName", "IO_FileNotFound_FileName"); 
    $.Constant({Static:true , Public:false}, "IO_IO_AlreadyExists_Name", "IO_IO_AlreadyExists_Name"); 
    $.Constant({Static:true , Public:false}, "IO_IO_BindHandleFailed", "IO_IO_BindHandleFailed"); 
    $.Constant({Static:true , Public:false}, "IO_IO_FileExists_Name", "IO_IO_FileExists_Name"); 
    $.Constant({Static:true , Public:false}, "IO_IO_NoPermissionToDirectoryName", "IO_IO_NoPermissionToDirectoryName"); 
    $.Constant({Static:true , Public:false}, "IO_IO_SharingViolation_File", "IO_IO_SharingViolation_File"); 
    $.Constant({Static:true , Public:false}, "IO_IO_SharingViolation_NoFileName", "IO_IO_SharingViolation_NoFileName"); 
    $.Constant({Static:true , Public:false}, "IO_IO_PipeBroken", "IO_IO_PipeBroken"); 
    $.Constant({Static:true , Public:false}, "IO_IO_InvalidPipeHandle", "IO_IO_InvalidPipeHandle"); 
    $.Constant({Static:true , Public:false}, "IO_DriveNotFound_Drive", "IO_DriveNotFound_Drive"); 
    $.Constant({Static:true , Public:false}, "IO_PathNotFound_Path", "IO_PathNotFound_Path"); 
    $.Constant({Static:true , Public:false}, "IO_PathNotFound_NoPathName", "IO_PathNotFound_NoPathName"); 
    $.Constant({Static:true , Public:false}, "IO_PathTooLong", "IO_PathTooLong"); 
    $.Constant({Static:true , Public:false}, "NotSupported_IONonFileDevices", "NotSupported_IONonFileDevices"); 
    $.Constant({Static:true , Public:false}, "NotSupported_MemStreamNotExpandable", "NotSupported_MemStreamNotExpandable"); 
    $.Constant({Static:true , Public:false}, "NotSupported_UnreadableStream", "NotSupported_UnreadableStream"); 
    $.Constant({Static:true , Public:false}, "NotSupported_UnseekableStream", "NotSupported_UnseekableStream"); 
    $.Constant({Static:true , Public:false}, "NotSupported_UnwritableStream", "NotSupported_UnwritableStream"); 
    $.Constant({Static:true , Public:false}, "NotSupported_AnonymousPipeUnidirectional", "NotSupported_AnonymousPipeUnidirectional"); 
    $.Constant({Static:true , Public:false}, "NotSupported_AnonymousPipeMessagesNotSupported", "NotSupported_AnonymousPipeMessagesNotSupported"); 
    $.Constant({Static:true , Public:false}, "ObjectDisposed_FileClosed", "ObjectDisposed_FileClosed"); 
    $.Constant({Static:true , Public:false}, "ObjectDisposed_PipeClosed", "ObjectDisposed_PipeClosed"); 
    $.Constant({Static:true , Public:false}, "ObjectDisposed_ReaderClosed", "ObjectDisposed_ReaderClosed"); 
    $.Constant({Static:true , Public:false}, "ObjectDisposed_StreamClosed", "ObjectDisposed_StreamClosed"); 
    $.Constant({Static:true , Public:false}, "ObjectDisposed_WriterClosed", "ObjectDisposed_WriterClosed"); 
    $.Constant({Static:true , Public:false}, "PlatformNotSupported_NamedPipeServers", "PlatformNotSupported_NamedPipeServers"); 
    $.Constant({Static:true , Public:false}, "UnauthorizedAccess_IODenied_Path", "UnauthorizedAccess_IODenied_Path"); 
    $.Constant({Static:true , Public:false}, "UnauthorizedAccess_IODenied_NoPathName", "UnauthorizedAccess_IODenied_NoPathName"); 
    $.Constant({Static:true , Public:false}, "TraceAsTraceSource", "TraceAsTraceSource"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidLogRetention", "ArgumentOutOfRange_NeedValidLogRetention"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedMaxFileSizeGEBufferSize", "ArgumentOutOfRange_NeedMaxFileSizeGEBufferSize"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidMaxNumFiles", "ArgumentOutOfRange_NeedValidMaxNumFiles"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidId", "ArgumentOutOfRange_NeedValidId"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MaxArgExceeded", "ArgumentOutOfRange_MaxArgExceeded"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MaxStringsExceeded", "ArgumentOutOfRange_MaxStringsExceeded"); 
    $.Constant({Static:true , Public:false}, "NotSupported_DownLevelVista", "NotSupported_DownLevelVista"); 
    $.Constant({Static:true , Public:false}, "Argument_NeedNonemptyDelimiter", "Argument_NeedNonemptyDelimiter"); 
    $.Constant({Static:true , Public:false}, "NotSupported_SetTextWriter", "NotSupported_SetTextWriter"); 
    $.Constant({Static:true , Public:false}, "Perflib_PlatformNotSupported", "Perflib_PlatformNotSupported"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_CounterSetAlreadyRegister", "Perflib_Argument_CounterSetAlreadyRegister"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_InvalidCounterType", "Perflib_Argument_InvalidCounterType"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_InvalidCounterSetInstanceType", "Perflib_Argument_InvalidCounterSetInstanceType"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_InstanceAlreadyExists", "Perflib_Argument_InstanceAlreadyExists"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_CounterAlreadyExists", "Perflib_Argument_CounterAlreadyExists"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_CounterNameAlreadyExists", "Perflib_Argument_CounterNameAlreadyExists"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_ProviderNotFound", "Perflib_Argument_ProviderNotFound"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_InvalidInstance", "Perflib_Argument_InvalidInstance"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_EmptyInstanceName", "Perflib_Argument_EmptyInstanceName"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_EmptyCounterName", "Perflib_Argument_EmptyCounterName"); 
    $.Constant({Static:true , Public:false}, "Perflib_InsufficientMemory_InstanceCounterBlock", "Perflib_InsufficientMemory_InstanceCounterBlock"); 
    $.Constant({Static:true , Public:false}, "Perflib_InsufficientMemory_CounterSetTemplate", "Perflib_InsufficientMemory_CounterSetTemplate"); 
    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_CounterRefValue", "Perflib_InvalidOperation_CounterRefValue"); 
    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_CounterSetNotInstalled", "Perflib_InvalidOperation_CounterSetNotInstalled"); 
    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_InstanceNotFound", "Perflib_InvalidOperation_InstanceNotFound"); 
    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_AddCounterAfterInstance", "Perflib_InvalidOperation_AddCounterAfterInstance"); 
    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_NoActiveProvider", "Perflib_InvalidOperation_NoActiveProvider"); 
    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_CounterSetContainsNoCounter", "Perflib_InvalidOperation_CounterSetContainsNoCounter"); 
    $.Constant({Static:true , Public:false}, "Arg_ArrayPlusOffTooSmall", "Arg_ArrayPlusOffTooSmall"); 
    $.Constant({Static:true , Public:false}, "Arg_HSCapacityOverflow", "Arg_HSCapacityOverflow"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_EnumFailedVersion", "InvalidOperation_EnumFailedVersion"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_EnumOpCantHappen", "InvalidOperation_EnumOpCantHappen"); 
    $.Constant({Static:true , Public:false}, "Serialization_MissingKeys", "Serialization_MissingKeys"); 
    $.Constant({Static:true , Public:false}, "LockRecursionException_RecursiveReadNotAllowed", "LockRecursionException_RecursiveReadNotAllowed"); 
    $.Constant({Static:true , Public:false}, "LockRecursionException_RecursiveWriteNotAllowed", "LockRecursionException_RecursiveWriteNotAllowed"); 
    $.Constant({Static:true , Public:false}, "LockRecursionException_RecursiveUpgradeNotAllowed", "LockRecursionException_RecursiveUpgradeNotAllowed"); 
    $.Constant({Static:true , Public:false}, "LockRecursionException_ReadAfterWriteNotAllowed", "LockRecursionException_ReadAfterWriteNotAllowed"); 
    $.Constant({Static:true , Public:false}, "LockRecursionException_WriteAfterReadNotAllowed", "LockRecursionException_WriteAfterReadNotAllowed"); 
    $.Constant({Static:true , Public:false}, "LockRecursionException_UpgradeAfterReadNotAllowed", "LockRecursionException_UpgradeAfterReadNotAllowed"); 
    $.Constant({Static:true , Public:false}, "LockRecursionException_UpgradeAfterWriteNotAllowed", "LockRecursionException_UpgradeAfterWriteNotAllowed"); 
    $.Constant({Static:true , Public:false}, "SynchronizationLockException_MisMatchedRead", "SynchronizationLockException_MisMatchedRead"); 
    $.Constant({Static:true , Public:false}, "SynchronizationLockException_MisMatchedWrite", "SynchronizationLockException_MisMatchedWrite"); 
    $.Constant({Static:true , Public:false}, "SynchronizationLockException_MisMatchedUpgrade", "SynchronizationLockException_MisMatchedUpgrade"); 
    $.Constant({Static:true , Public:false}, "SynchronizationLockException_IncorrectDispose", "SynchronizationLockException_IncorrectDispose"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ArgECDHKeySizeMismatch", "Cryptography_ArgECDHKeySizeMismatch"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ArgECDHRequiresECDHKey", "Cryptography_ArgECDHRequiresECDHKey"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ArgECDsaRequiresECDsaKey", "Cryptography_ArgECDsaRequiresECDsaKey"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ArgExpectedECDiffieHellmanCngPublicKey", "Cryptography_ArgExpectedECDiffieHellmanCngPublicKey"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngAlgorithm", "Cryptography_ArgMustBeCngAlgorithm"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngAlgorithmGroup", "Cryptography_ArgMustBeCngAlgorithmGroup"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngKeyBlobFormat", "Cryptography_ArgMustBeCngKeyBlobFormat"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngProvider", "Cryptography_ArgMustBeCngProvider"); 
    $.Constant({Static:true , Public:false}, "Cryptography_DecryptWithNoKey", "Cryptography_DecryptWithNoKey"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ECXmlSerializationFormatRequired", "Cryptography_ECXmlSerializationFormatRequired"); 
    $.Constant({Static:true , Public:false}, "Cryptography_InvalidAlgorithmGroup", "Cryptography_InvalidAlgorithmGroup"); 
    $.Constant({Static:true , Public:false}, "Cryptography_InvalidAlgorithmName", "Cryptography_InvalidAlgorithmName"); 
    $.Constant({Static:true , Public:false}, "Cryptography_InvalidCipherMode", "Cryptography_InvalidCipherMode"); 
    $.Constant({Static:true , Public:false}, "Cryptography_InvalidIVSize", "Cryptography_InvalidIVSize"); 
    $.Constant({Static:true , Public:false}, "Cryptography_InvalidKeyBlobFormat", "Cryptography_InvalidKeyBlobFormat"); 
    $.Constant({Static:true , Public:false}, "Cryptography_InvalidKeySize", "Cryptography_InvalidKeySize"); 
    $.Constant({Static:true , Public:false}, "Cryptography_InvalidPadding", "Cryptography_InvalidPadding"); 
    $.Constant({Static:true , Public:false}, "Cryptography_InvalidProviderName", "Cryptography_InvalidProviderName"); 
    $.Constant({Static:true , Public:false}, "Cryptography_MissingDomainParameters", "Cryptography_MissingDomainParameters"); 
    $.Constant({Static:true , Public:false}, "Cryptography_MissingPublicKey", "Cryptography_MissingPublicKey"); 
    $.Constant({Static:true , Public:false}, "Cryptography_MissingIV", "Cryptography_MissingIV"); 
    $.Constant({Static:true , Public:false}, "Cryptography_MustTransformWholeBlock", "Cryptography_MustTransformWholeBlock"); 
    $.Constant({Static:true , Public:false}, "Cryptography_NonCompliantFIPSAlgorithm", "Cryptography_NonCompliantFIPSAlgorithm"); 
    $.Constant({Static:true , Public:false}, "Cryptography_OpenInvalidHandle", "Cryptography_OpenInvalidHandle"); 
    $.Constant({Static:true , Public:false}, "Cryptography_OpenEphemeralKeyHandleWithoutEphemeralFlag", "Cryptography_OpenEphemeralKeyHandleWithoutEphemeralFlag"); 
    $.Constant({Static:true , Public:false}, "Cryptography_PartialBlock", "Cryptography_PartialBlock"); 
    $.Constant({Static:true , Public:false}, "Cryptography_PlatformNotSupported", "Cryptography_PlatformNotSupported"); 
    $.Constant({Static:true , Public:false}, "Cryptography_TlsRequiresLabelAndSeed", "Cryptography_TlsRequiresLabelAndSeed"); 
    $.Constant({Static:true , Public:false}, "Cryptography_TransformBeyondEndOfBuffer", "Cryptography_TransformBeyondEndOfBuffer"); 
    $.Constant({Static:true , Public:false}, "Cryptography_UnknownEllipticCurve", "Cryptography_UnknownEllipticCurve"); 
    $.Constant({Static:true , Public:false}, "Cryptography_UnknownEllipticCurveAlgorithm", "Cryptography_UnknownEllipticCurveAlgorithm"); 
    $.Constant({Static:true , Public:false}, "Cryptography_UnknownPaddingMode", "Cryptography_UnknownPaddingMode"); 
    $.Constant({Static:true , Public:false}, "Cryptography_UnexpectedXmlNamespace", "Cryptography_UnexpectedXmlNamespace"); 
    $.Field({Static:true , Public:false}, "loader", $.Type); 
    $.Field({Static:false, Public:false}, "resources", $asm01.TypeRef("System.Resources.ResourceManager")); 
    $.Property({Static:true , Public:false}, "Culture", $asm01.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm01.TypeRef("System.Resources.ResourceManager"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SRDescriptionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.ComponentModel.DescriptionAttribute"), "System.Linq.SRDescriptionAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

(function SRCategoryAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.ComponentModel.CategoryAttribute"), "System.Linq.SRCategoryAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

(function SR$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.SR", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Globalization.CultureInfo"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Resources.ResourceManager"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "OwningTeam", "OwningTeam"); 
    $.Constant({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", "ArgumentArrayHasTooManyElements"); 
    $.Constant({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", "ArgumentNotIEnumerableGeneric"); 
    $.Constant({Static:true , Public:false}, "ArgumentNotSequence", "ArgumentNotSequence"); 
    $.Constant({Static:true , Public:false}, "ArgumentNotValid", "ArgumentNotValid"); 
    $.Constant({Static:true , Public:false}, "IncompatibleElementTypes", "IncompatibleElementTypes"); 
    $.Constant({Static:true , Public:false}, "ArgumentNotLambda", "ArgumentNotLambda"); 
    $.Constant({Static:true , Public:false}, "MoreThanOneElement", "MoreThanOneElement"); 
    $.Constant({Static:true , Public:false}, "MoreThanOneMatch", "MoreThanOneMatch"); 
    $.Constant({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", "NoArgumentMatchingMethodsInQueryable"); 
    $.Constant({Static:true , Public:false}, "NoElements", "NoElements"); 
    $.Constant({Static:true , Public:false}, "NoMatch", "NoMatch"); 
    $.Constant({Static:true , Public:false}, "NoMethodOnType", "NoMethodOnType"); 
    $.Constant({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", "NoMethodOnTypeMatchingArguments"); 
    $.Constant({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", "NoNameMatchingMethodsInQueryable"); 
    $.Constant({Static:true , Public:false}, "EmptyEnumerable", "EmptyEnumerable"); 
    $.Field({Static:true , Public:false}, "loader", $.Type); 
    $.Field({Static:false, Public:false}, "resources", $asm01.TypeRef("System.Resources.ResourceManager")); 
    $.Property({Static:true , Public:false}, "Culture", $asm01.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm01.TypeRef("System.Resources.ResourceManager"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SRDescriptionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.ComponentModel.DescriptionAttribute"), "System.Linq.Expressions.SRDescriptionAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

(function SRCategoryAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.ComponentModel.CategoryAttribute"), "System.Linq.Expressions.SRCategoryAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

(function SR$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Linq.Expressions.SR", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Globalization.CultureInfo"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Resources.ResourceManager"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "OwningTeam", "OwningTeam"); 
    $.Constant({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", "UserDefinedOperatorMustBeStatic"); 
    $.Constant({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", "UserDefinedOperatorMustNotBeVoid"); 
    $.Constant({Static:true , Public:false}, "CoercionOperatorNotDefined", "CoercionOperatorNotDefined"); 
    $.Constant({Static:true , Public:false}, "UnaryOperatorNotDefined", "UnaryOperatorNotDefined"); 
    $.Constant({Static:true , Public:false}, "BinaryOperatorNotDefined", "BinaryOperatorNotDefined"); 
    $.Constant({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", "OperandTypesDoNotMatchParameters"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeArray", "ArgumentMustBeArray"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeBoolean", "ArgumentMustBeBoolean"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeComparable", "ArgumentMustBeComparable"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeConvertible", "ArgumentMustBeConvertible"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", "ArgumentMustBeFieldInfoOrPropertInfo"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", "ArgumentMustBeFieldInfoOrPropertInfoOrMethod"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeInstanceMember", "ArgumentMustBeInstanceMember"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeInteger", "ArgumentMustBeInteger"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeInt32", "ArgumentMustBeInt32"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeCheckable", "ArgumentMustBeCheckable"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", "ArgumentMustBeArrayIndexType"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeIntegerOrBoolean", "ArgumentMustBeIntegerOrBoolean"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeNumeric", "ArgumentMustBeNumeric"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", "ArgumentMustBeSingleDimensionalArrayType"); 
    $.Constant({Static:true , Public:false}, "ArgumentTypesMustMatch", "ArgumentTypesMustMatch"); 
    $.Constant({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", "CannotAutoInitializeValueTypeElementThroughProperty"); 
    $.Constant({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", "CannotAutoInitializeValueTypeMemberThroughProperty"); 
    $.Constant({Static:true , Public:false}, "CannotCastTypeToType", "CannotCastTypeToType"); 
    $.Constant({Static:true , Public:false}, "IncorrectTypeForTypeAs", "IncorrectTypeForTypeAs"); 
    $.Constant({Static:true , Public:false}, "CoalesceUsedOnNonNullType", "CoalesceUsedOnNonNullType"); 
    $.Constant({Static:true , Public:false}, "ExpressionTypeCannotInitializeCollectionType", "ExpressionTypeCannotInitializeCollectionType"); 
    $.Constant({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", "ExpressionTypeCannotInitializeArrayType"); 
    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchArrayType", "ExpressionTypeDoesNotMatchArrayType"); 
    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", "ExpressionTypeDoesNotMatchConstructorParameter"); 
    $.Constant({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", "ArgumentTypeDoesNotMatchMember"); 
    $.Constant({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", "ArgumentMemberNotDeclOnType"); 
    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", "ExpressionTypeDoesNotMatchMethodParameter"); 
    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", "ExpressionTypeDoesNotMatchParameter"); 
    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", "ExpressionTypeDoesNotMatchReturn"); 
    $.Constant({Static:true , Public:false}, "ExpressionTypeNotInvocable", "ExpressionTypeNotInvocable"); 
    $.Constant({Static:true , Public:false}, "FieldNotDefinedForType", "FieldNotDefinedForType"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfIndexes", "IncorrectNumberOfIndexes"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", "IncorrectNumberOfLambdaArguments"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", "IncorrectNumberOfLambdaDeclarationParameters"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", "IncorrectNumberOfMethodCallArguments"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", "IncorrectNumberOfConstructorArguments"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", "IncorrectNumberOfMembersForGivenConstructor"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", "IncorrectNumberOfArgumentsForMembers"); 
    $.Constant({Static:true , Public:false}, "LambdaParameterNotInScope", "LambdaParameterNotInScope"); 
    $.Constant({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", "LambdaTypeMustBeDerivedFromSystemDelegate"); 
    $.Constant({Static:true , Public:false}, "MemberNotFieldOrProperty", "MemberNotFieldOrProperty"); 
    $.Constant({Static:true , Public:false}, "MethodContainsGenericParameters", "MethodContainsGenericParameters"); 
    $.Constant({Static:true , Public:false}, "MethodIsGeneric", "MethodIsGeneric"); 
    $.Constant({Static:true , Public:false}, "MethodNotPropertyAccessor", "MethodNotPropertyAccessor"); 
    $.Constant({Static:true , Public:false}, "PropertyDoesNotHaveGetter", "PropertyDoesNotHaveGetter"); 
    $.Constant({Static:true , Public:false}, "PropertyDoesNotHaveSetter", "PropertyDoesNotHaveSetter"); 
    $.Constant({Static:true , Public:false}, "NotAMemberOfType", "NotAMemberOfType"); 
    $.Constant({Static:true , Public:false}, "OperatorNotImplementedForType", "OperatorNotImplementedForType"); 
    $.Constant({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", "ParameterExpressionNotValidAsDelegate"); 
    $.Constant({Static:true , Public:false}, "ParameterNotCaptured", "ParameterNotCaptured"); 
    $.Constant({Static:true , Public:false}, "PropertyNotDefinedForType", "PropertyNotDefinedForType"); 
    $.Constant({Static:true , Public:false}, "MethodNotDefinedForType", "MethodNotDefinedForType"); 
    $.Constant({Static:true , Public:false}, "TypeContainsGenericParameters", "TypeContainsGenericParameters"); 
    $.Constant({Static:true , Public:false}, "TypeIsGeneric", "TypeIsGeneric"); 
    $.Constant({Static:true , Public:false}, "TypeMissingDefaultConstructor", "TypeMissingDefaultConstructor"); 
    $.Constant({Static:true , Public:false}, "ListInitializerWithZeroMembers", "ListInitializerWithZeroMembers"); 
    $.Constant({Static:true , Public:false}, "ElementInitializerMethodNotAdd", "ElementInitializerMethodNotAdd"); 
    $.Constant({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", "ElementInitializerMethodNoRefOutParam"); 
    $.Constant({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", "ElementInitializerMethodWithZeroArgs"); 
    $.Constant({Static:true , Public:false}, "ElementInitializerMethodStatic", "ElementInitializerMethodStatic"); 
    $.Constant({Static:true , Public:false}, "TypeNotIEnumerable", "TypeNotIEnumerable"); 
    $.Constant({Static:true , Public:false}, "TypeParameterIsNotDelegate", "TypeParameterIsNotDelegate"); 
    $.Constant({Static:true , Public:false}, "UnexpectedCoalesceOperator", "UnexpectedCoalesceOperator"); 
    $.Constant({Static:true , Public:false}, "InvalidCast", "InvalidCast"); 
    $.Constant({Static:true , Public:false}, "UnhandledCall", "UnhandledCall"); 
    $.Constant({Static:true , Public:false}, "UnhandledBinary", "UnhandledBinary"); 
    $.Constant({Static:true , Public:false}, "UnhandledBinding", "UnhandledBinding"); 
    $.Constant({Static:true , Public:false}, "UnhandledBindingType", "UnhandledBindingType"); 
    $.Constant({Static:true , Public:false}, "UnhandledConvert", "UnhandledConvert"); 
    $.Constant({Static:true , Public:false}, "UnhandledConvertFromDecimal", "UnhandledConvertFromDecimal"); 
    $.Constant({Static:true , Public:false}, "UnhandledConvertToDecimal", "UnhandledConvertToDecimal"); 
    $.Constant({Static:true , Public:false}, "UnhandledExpressionType", "UnhandledExpressionType"); 
    $.Constant({Static:true , Public:false}, "UnhandledMemberAccess", "UnhandledMemberAccess"); 
    $.Constant({Static:true , Public:false}, "UnhandledUnary", "UnhandledUnary"); 
    $.Constant({Static:true , Public:false}, "UnknownBindingType", "UnknownBindingType"); 
    $.Constant({Static:true , Public:false}, "LogicalOperatorMustHaveConsistentTypes", "LogicalOperatorMustHaveConsistentTypes"); 
    $.Constant({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", "LogicalOperatorMustHaveBooleanOperators"); 
    $.Constant({Static:true , Public:false}, "MethodDoesNotExistOnType", "MethodDoesNotExistOnType"); 
    $.Constant({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", "MethodWithArgsDoesNotExistOnType"); 
    $.Constant({Static:true , Public:false}, "MethodWithMoreThanOneMatch", "MethodWithMoreThanOneMatch"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", "IncorrectNumberOfTypeArgsForFunc"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", "IncorrectNumberOfTypeArgsForAction"); 
    $.Constant({Static:true , Public:false}, "ExpressionMayNotContainByrefParameters", "ExpressionMayNotContainByrefParameters"); 
    $.Constant({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", "ArgumentCannotBeOfTypeVoid"); 
    $.Field({Static:true , Public:false}, "loader", $.Type); 
    $.Field({Static:false, Public:false}, "resources", $asm01.TypeRef("System.Resources.ResourceManager")); 
    $.Property({Static:true , Public:false}, "Culture", $asm01.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm01.TypeRef("System.Resources.ResourceManager"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Res$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Res", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BigIntInfinity", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Globalization.CultureInfo"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidCharactersInString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustBeBigInt", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustBePositive", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NonNegative", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NotANumber", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_Byte", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_Decimal", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_Double", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_Int16", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_Int32", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_Int64", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_SByte", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_Single", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_UInt16", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_UInt32", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_UInt64", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParsedStringWasInvalid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Resources.ResourceManager"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnsupportedNumberStyle", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Culture", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Globalization.CultureInfo")], [])
    );

    $.Field({Static:true , Public:false}, "resourceMan", $asm01.TypeRef("System.Resources.ResourceManager")); 
    $.Field({Static:true , Public:false}, "resourceCulture", $asm01.TypeRef("System.Globalization.CultureInfo")); 
    $.Property({Static:true , Public:false}, "ResourceManager", $asm01.TypeRef("System.Resources.ResourceManager"))
      .Attribute($asm02.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm02.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "Culture", $asm01.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm02.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm02.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "BigIntInfinity", $.String);

    $.Property({Static:true , Public:false}, "InvalidCharactersInString", $.String);

    $.Property({Static:true , Public:false}, "MustBeBigInt", $.String);

    $.Property({Static:true , Public:false}, "MustBePositive", $.String);

    $.Property({Static:true , Public:false}, "NonNegative", $.String);

    $.Property({Static:true , Public:false}, "NotANumber", $.String);

    $.Property({Static:true , Public:false}, "Overflow_Byte", $.String);

    $.Property({Static:true , Public:false}, "Overflow_Decimal", $.String);

    $.Property({Static:true , Public:false}, "Overflow_Double", $.String);

    $.Property({Static:true , Public:false}, "Overflow_Int16", $.String);

    $.Property({Static:true , Public:false}, "Overflow_Int32", $.String);

    $.Property({Static:true , Public:false}, "Overflow_Int64", $.String);

    $.Property({Static:true , Public:false}, "Overflow_SByte", $.String);

    $.Property({Static:true , Public:false}, "Overflow_Single", $.String);

    $.Property({Static:true , Public:false}, "Overflow_UInt16", $.String);

    $.Property({Static:true , Public:false}, "Overflow_UInt32", $.String);

    $.Property({Static:true , Public:false}, "Overflow_UInt64", $.String);

    $.Property({Static:true , Public:false}, "ParsedStringWasInvalid", $.String);

    $.Property({Static:true , Public:false}, "UnsupportedNumberStyle", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0"]; })
    .Attribute($asm01.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"));

})();

