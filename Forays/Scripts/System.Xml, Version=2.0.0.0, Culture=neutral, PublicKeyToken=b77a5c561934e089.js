/* Generated by JSIL v0.7.6 build 24569. See http://jsil.org/ for more information. */ 
/* Generating type stubs only */ 
var $asm05 = JSIL.DeclareAssembly("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

(function FXAssembly$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("FXAssembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Version", "2.0.0.0"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ThisAssembly$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Title", "System.Xml.dll"); 
    $.Constant({Static:true , Public:false}, "Description", "System.Xml.dll"); 
    $.Constant({Static:true , Public:false}, "DefaultAlias", "System.Xml.dll"); 
    $.Constant({Static:true , Public:false}, "Copyright", "\xa9 Microsoft Corporation.  All rights reserved."); 
    $.Constant({Static:true , Public:false}, "Version", "2.0.0.0"); 
    $.Constant({Static:true , Public:false}, "InformationalVersion", "2.0.50727.5476"); 
    $.Constant({Static:true , Public:false}, "DailyBuildNumber", 50727); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AssemblyRef$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", "00000000000000000400000000000000"); 
    $.Constant({Static:true , Public:false}, "Mscorlib", "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemData", "System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", "System.Data.OracleClient, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "System", "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", "System.Runtime.Remoting, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemWindowsForms", "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemXml", "System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", "b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", "b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293"); 
    $.Constant({Static:true , Public:false}, "SystemConfiguration", "System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", "System.Configuration.Install, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDeployment", "System.Deployment, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDesign", "System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", "System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", "System.Drawing.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDrawing", "System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", "System.EnterpriseServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemManagement", "System.Management, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemMessaging", "System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", "System.Runtime.Serialization.Formatters.Soap, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemSecurity", "System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemServiceProcess", "System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWeb", "System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebMobile", "System.Web.Mobile, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", "System.Web.RegularExpressions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebServices", "System.Web.Services, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", "Microsoft.VisualStudio, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", "Microsoft.VisualStudio.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", "VJSharpCodeProvider, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", "b7bd7678b977bd8f"); 
    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", "ASP.BrowserCapsFactory, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", "Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", "Microsoft.VisualStudio.Web, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftJScript", "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Xml");
(function ResDescriptionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.ComponentModel.DescriptionAttribute"), "System.Xml.ResDescriptionAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

(function ResCategoryAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.ComponentModel.CategoryAttribute"), "System.Xml.ResCategoryAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

(function Res$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Res", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Globalization.CultureInfo"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Resources.ResourceManager"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "Xml_UserException", "Xml_UserException"); 
    $.Constant({Static:true , Public:false}, "Xml_DefaultException", "Xml_DefaultException"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidOperation", "Xml_InvalidOperation"); 
    $.Constant({Static:true , Public:false}, "Xml_StackOverflow", "Xml_StackOverflow"); 
    $.Constant({Static:true , Public:false}, "Xml_ErrorFilePosition", "Xml_ErrorFilePosition"); 
    $.Constant({Static:true , Public:false}, "Xslt_NoStylesheetLoaded", "Xslt_NoStylesheetLoaded"); 
    $.Constant({Static:true , Public:false}, "Xslt_NotCompiledStylesheet", "Xslt_NotCompiledStylesheet"); 
    $.Constant({Static:true , Public:false}, "Xml_UnclosedQuote", "Xml_UnclosedQuote"); 
    $.Constant({Static:true , Public:false}, "Xml_UnexpectedEOF", "Xml_UnexpectedEOF"); 
    $.Constant({Static:true , Public:false}, "Xml_UnexpectedEOF1", "Xml_UnexpectedEOF1"); 
    $.Constant({Static:true , Public:false}, "Xml_UnexpectedEOFInElementContent", "Xml_UnexpectedEOFInElementContent"); 
    $.Constant({Static:true , Public:false}, "Xml_BadStartNameChar", "Xml_BadStartNameChar"); 
    $.Constant({Static:true , Public:false}, "Xml_BadNameChar", "Xml_BadNameChar"); 
    $.Constant({Static:true , Public:false}, "Xml_BadNameCharWithPos", "Xml_BadNameCharWithPos"); 
    $.Constant({Static:true , Public:false}, "Xml_BadDecimalEntity", "Xml_BadDecimalEntity"); 
    $.Constant({Static:true , Public:false}, "Xml_BadHexEntity", "Xml_BadHexEntity"); 
    $.Constant({Static:true , Public:false}, "Xml_MissingByteOrderMark", "Xml_MissingByteOrderMark"); 
    $.Constant({Static:true , Public:false}, "Xml_UnknownEncoding", "Xml_UnknownEncoding"); 
    $.Constant({Static:true , Public:false}, "Xml_InternalError", "Xml_InternalError"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidCharInThisEncoding", "Xml_InvalidCharInThisEncoding"); 
    $.Constant({Static:true , Public:false}, "Xml_ErrorPosition", "Xml_ErrorPosition"); 
    $.Constant({Static:true , Public:false}, "Xml_UnexpectedTokenEx", "Xml_UnexpectedTokenEx"); 
    $.Constant({Static:true , Public:false}, "Xml_UnexpectedTokens2", "Xml_UnexpectedTokens2"); 
    $.Constant({Static:true , Public:false}, "Xml_ExpectingWhiteSpace", "Xml_ExpectingWhiteSpace"); 
    $.Constant({Static:true , Public:false}, "Xml_TagMismatch", "Xml_TagMismatch"); 
    $.Constant({Static:true , Public:false}, "Xml_UnexpectedEndTag", "Xml_UnexpectedEndTag"); 
    $.Constant({Static:true , Public:false}, "Xml_UnknownNs", "Xml_UnknownNs"); 
    $.Constant({Static:true , Public:false}, "Xml_BadAttributeChar", "Xml_BadAttributeChar"); 
    $.Constant({Static:true , Public:false}, "Xml_MissingRoot", "Xml_MissingRoot"); 
    $.Constant({Static:true , Public:false}, "Xml_MultipleRoots", "Xml_MultipleRoots"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidRootData", "Xml_InvalidRootData"); 
    $.Constant({Static:true , Public:false}, "Xml_XmlDeclNotFirst", "Xml_XmlDeclNotFirst"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidXmlDecl", "Xml_InvalidXmlDecl"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidNodeType", "Xml_InvalidNodeType"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidPIName", "Xml_InvalidPIName"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidXmlSpace", "Xml_InvalidXmlSpace"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidVersionNumber", "Xml_InvalidVersionNumber"); 
    $.Constant({Static:true , Public:false}, "Xml_DupAttributeName", "Xml_DupAttributeName"); 
    $.Constant({Static:true , Public:false}, "Xml_BadDTDLocation", "Xml_BadDTDLocation"); 
    $.Constant({Static:true , Public:false}, "Xml_ElementNotFound", "Xml_ElementNotFound"); 
    $.Constant({Static:true , Public:false}, "Xml_ElementNotFoundNs", "Xml_ElementNotFoundNs"); 
    $.Constant({Static:true , Public:false}, "Xml_PartialContentNodeTypeNotSupportedEx", "Xml_PartialContentNodeTypeNotSupportedEx"); 
    $.Constant({Static:true , Public:false}, "Xml_MultipleDTDsProvided", "Xml_MultipleDTDsProvided"); 
    $.Constant({Static:true , Public:false}, "Xml_CanNotBindToReservedNamespace", "Xml_CanNotBindToReservedNamespace"); 
    $.Constant({Static:true , Public:false}, "Xml_XmlnsBelongsToReservedNs", "Xml_XmlnsBelongsToReservedNs"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidCharacter", "Xml_InvalidCharacter"); 
    $.Constant({Static:true , Public:false}, "Xml_ExpectDtdMarkup", "Xml_ExpectDtdMarkup"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidBinHexValue", "Xml_InvalidBinHexValue"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidBinHexValueOddCount", "Xml_InvalidBinHexValueOddCount"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidTextDecl", "Xml_InvalidTextDecl"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidBase64Value", "Xml_InvalidBase64Value"); 
    $.Constant({Static:true , Public:false}, "Xml_ExpectExternalOrPublicId", "Xml_ExpectExternalOrPublicId"); 
    $.Constant({Static:true , Public:false}, "Xml_ExpectExternalIdOrEntityValue", "Xml_ExpectExternalIdOrEntityValue"); 
    $.Constant({Static:true , Public:false}, "Xml_ExpectAttType", "Xml_ExpectAttType"); 
    $.Constant({Static:true , Public:false}, "Xml_ExpectIgnoreOrInclude", "Xml_ExpectIgnoreOrInclude"); 
    $.Constant({Static:true , Public:false}, "Xml_ExpectSubOrClose", "Xml_ExpectSubOrClose"); 
    $.Constant({Static:true , Public:false}, "Xml_ExpectExternalOrClose", "Xml_ExpectExternalOrClose"); 
    $.Constant({Static:true , Public:false}, "Xml_ExpectOp", "Xml_ExpectOp"); 
    $.Constant({Static:true , Public:false}, "Xml_ExpectNoWhitespace", "Xml_ExpectNoWhitespace"); 
    $.Constant({Static:true , Public:false}, "Xml_ExpectPcData", "Xml_ExpectPcData"); 
    $.Constant({Static:true , Public:false}, "Xml_UndeclaredParEntity", "Xml_UndeclaredParEntity"); 
    $.Constant({Static:true , Public:false}, "Xml_UndeclaredEntity", "Xml_UndeclaredEntity"); 
    $.Constant({Static:true , Public:false}, "Xml_RecursiveParEntity", "Xml_RecursiveParEntity"); 
    $.Constant({Static:true , Public:false}, "Xml_RecursiveGenEntity", "Xml_RecursiveGenEntity"); 
    $.Constant({Static:true , Public:false}, "Xml_ExternalEntityInAttValue", "Xml_ExternalEntityInAttValue"); 
    $.Constant({Static:true , Public:false}, "Xml_UnparsedEntityRef", "Xml_UnparsedEntityRef"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidConditionalSection", "Xml_InvalidConditionalSection"); 
    $.Constant({Static:true , Public:false}, "Xml_UnclosedConditionalSection", "Xml_UnclosedConditionalSection"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidParEntityRef", "Xml_InvalidParEntityRef"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidContentModel", "Xml_InvalidContentModel"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidXmlDocument", "Xml_InvalidXmlDocument"); 
    $.Constant({Static:true , Public:false}, "Xml_FragmentId", "Xml_FragmentId"); 
    $.Constant({Static:true , Public:false}, "Xml_ColonInLocalName", "Xml_ColonInLocalName"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidAttributeType", "Xml_InvalidAttributeType"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidAttributeType1", "Xml_InvalidAttributeType1"); 
    $.Constant({Static:true , Public:false}, "Xml_UnexpectedCDataEnd", "Xml_UnexpectedCDataEnd"); 
    $.Constant({Static:true , Public:false}, "Xml_EnumerationRequired", "Xml_EnumerationRequired"); 
    $.Constant({Static:true , Public:false}, "Xml_NotSameNametable", "Xml_NotSameNametable"); 
    $.Constant({Static:true , Public:false}, "Xml_NametableMismatch", "Xml_NametableMismatch"); 
    $.Constant({Static:true , Public:false}, "Xml_NoDTDPresent", "Xml_NoDTDPresent"); 
    $.Constant({Static:true , Public:false}, "Xml_MultipleValidaitonTypes", "Xml_MultipleValidaitonTypes"); 
    $.Constant({Static:true , Public:false}, "Xml_BadNamespaceDecl", "Xml_BadNamespaceDecl"); 
    $.Constant({Static:true , Public:false}, "Xml_ErrorParsingEntityName", "Xml_ErrorParsingEntityName"); 
    $.Constant({Static:true , Public:false}, "Xml_NoValidation", "Xml_NoValidation"); 
    $.Constant({Static:true , Public:false}, "Xml_WhitespaceHandling", "Xml_WhitespaceHandling"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidResetStateCall", "Xml_InvalidResetStateCall"); 
    $.Constant({Static:true , Public:false}, "Xml_EntityHandling", "Xml_EntityHandling"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidNmToken", "Xml_InvalidNmToken"); 
    $.Constant({Static:true , Public:false}, "Xml_EntityRefNesting", "Xml_EntityRefNesting"); 
    $.Constant({Static:true , Public:false}, "Xml_CannotResolveEntity", "Xml_CannotResolveEntity"); 
    $.Constant({Static:true , Public:false}, "Xml_CannotResolveExternalSubset", "Xml_CannotResolveExternalSubset"); 
    $.Constant({Static:true , Public:false}, "Xml_CannotResolveUrl", "Xml_CannotResolveUrl"); 
    $.Constant({Static:true , Public:false}, "Xml_CDATAEndInText", "Xml_CDATAEndInText"); 
    $.Constant({Static:true , Public:false}, "Xml_ExternalEntityInStandAloneDocument", "Xml_ExternalEntityInStandAloneDocument"); 
    $.Constant({Static:true , Public:false}, "Xml_DtdAfterRootElement", "Xml_DtdAfterRootElement"); 
    $.Constant({Static:true , Public:false}, "Xml_ReadOnlyProperty", "Xml_ReadOnlyProperty"); 
    $.Constant({Static:true , Public:false}, "Xml_DtdIsProhibited", "Xml_DtdIsProhibited"); 
    $.Constant({Static:true , Public:false}, "Xml_DtdIsProhibitedEx", "Xml_DtdIsProhibitedEx"); 
    $.Constant({Static:true , Public:false}, "Xml_AttlistDuplEnumValue", "Xml_AttlistDuplEnumValue"); 
    $.Constant({Static:true , Public:false}, "Xml_AttlistDuplNotationValue", "Xml_AttlistDuplNotationValue"); 
    $.Constant({Static:true , Public:false}, "Xml_EncodingSwitchAfterResetState", "Xml_EncodingSwitchAfterResetState"); 
    $.Constant({Static:true , Public:false}, "Xml_ReadSubtreeNotOnElement", "Xml_ReadSubtreeNotOnElement"); 
    $.Constant({Static:true , Public:false}, "Xml_DtdNotAllowedInFragment", "Xml_DtdNotAllowedInFragment"); 
    $.Constant({Static:true , Public:false}, "Xml_CannotStartDocumentOnFragment", "Xml_CannotStartDocumentOnFragment"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidWhitespaceCharacter", "Xml_InvalidWhitespaceCharacter"); 
    $.Constant({Static:true , Public:false}, "Xml_IncompatibleConformanceLevel", "Xml_IncompatibleConformanceLevel"); 
    $.Constant({Static:true , Public:false}, "Xml_BinaryXmlReadAsText", "Xml_BinaryXmlReadAsText"); 
    $.Constant({Static:true , Public:false}, "Xml_UnexpectedNodeType", "Xml_UnexpectedNodeType"); 
    $.Constant({Static:true , Public:false}, "Xml_ErrorOpeningExternalDtd", "Xml_ErrorOpeningExternalDtd"); 
    $.Constant({Static:true , Public:false}, "Xml_ErrorOpeningExternalEntity", "Xml_ErrorOpeningExternalEntity"); 
    $.Constant({Static:true , Public:false}, "Xml_ReadBinaryContentNotSupported", "Xml_ReadBinaryContentNotSupported"); 
    $.Constant({Static:true , Public:false}, "Xml_ReadValueChunkNotSupported", "Xml_ReadValueChunkNotSupported"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidReadContentAs", "Xml_InvalidReadContentAs"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidReadElementContentAs", "Xml_InvalidReadElementContentAs"); 
    $.Constant({Static:true , Public:false}, "Xml_MixedReadElementContentAs", "Xml_MixedReadElementContentAs"); 
    $.Constant({Static:true , Public:false}, "Xml_MixingReadValueChunkWithBinary", "Xml_MixingReadValueChunkWithBinary"); 
    $.Constant({Static:true , Public:false}, "Xml_MixingBinaryContentMethods", "Xml_MixingBinaryContentMethods"); 
    $.Constant({Static:true , Public:false}, "Xml_MixingV1StreamingWithV2Binary", "Xml_MixingV1StreamingWithV2Binary"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidReadValueChunk", "Xml_InvalidReadValueChunk"); 
    $.Constant({Static:true , Public:false}, "Xml_ReadContentAsFormatException", "Xml_ReadContentAsFormatException"); 
    $.Constant({Static:true , Public:false}, "Xml_DoubleBaseUri", "Xml_DoubleBaseUri"); 
    $.Constant({Static:true , Public:false}, "Xml_NotEnoughSpaceForSurrogatePair", "Xml_NotEnoughSpaceForSurrogatePair"); 
    $.Constant({Static:true , Public:false}, "Xml_EmptyUrl", "Xml_EmptyUrl"); 
    $.Constant({Static:true , Public:false}, "Xml_UnexpectedNodeInSimpleContent", "Xml_UnexpectedNodeInSimpleContent"); 
    $.Constant({Static:true , Public:false}, "Xml_UnsupportedClass", "Xml_UnsupportedClass"); 
    $.Constant({Static:true , Public:false}, "Xml_NullResolver", "Xml_NullResolver"); 
    $.Constant({Static:true , Public:false}, "Xml_UntrustedCodeSettingResolver", "Xml_UntrustedCodeSettingResolver"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidQuote", "Xml_InvalidQuote"); 
    $.Constant({Static:true , Public:false}, "Xml_UndefPrefix", "Xml_UndefPrefix"); 
    $.Constant({Static:true , Public:false}, "Xml_PrefixForEmptyNs", "Xml_PrefixForEmptyNs"); 
    $.Constant({Static:true , Public:false}, "Xml_NoNamespaces", "Xml_NoNamespaces"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidCDataChars", "Xml_InvalidCDataChars"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidCommentChars", "Xml_InvalidCommentChars"); 
    $.Constant({Static:true , Public:false}, "Xml_NotTheFirst", "Xml_NotTheFirst"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidPiChars", "Xml_InvalidPiChars"); 
    $.Constant({Static:true , Public:false}, "Xml_UndefNamespace", "Xml_UndefNamespace"); 
    $.Constant({Static:true , Public:false}, "Xml_EmptyName", "Xml_EmptyName"); 
    $.Constant({Static:true , Public:false}, "Xml_EmptyLocalName", "Xml_EmptyLocalName"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidNameChars", "Xml_InvalidNameChars"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidNameCharsDetail", "Xml_InvalidNameCharsDetail"); 
    $.Constant({Static:true , Public:false}, "Xml_NoStartTag", "Xml_NoStartTag"); 
    $.Constant({Static:true , Public:false}, "Xml_Closed", "Xml_Closed"); 
    $.Constant({Static:true , Public:false}, "Xml_ClosedOrError", "Xml_ClosedOrError"); 
    $.Constant({Static:true , Public:false}, "Xml_WrongToken", "Xml_WrongToken"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidPrefix", "Xml_InvalidPrefix"); 
    $.Constant({Static:true , Public:false}, "Xml_XmlPrefix", "Xml_XmlPrefix"); 
    $.Constant({Static:true , Public:false}, "Xml_XmlnsPrefix", "Xml_XmlnsPrefix"); 
    $.Constant({Static:true , Public:false}, "Xml_NamespaceDeclXmlXmlns", "Xml_NamespaceDeclXmlXmlns"); 
    $.Constant({Static:true , Public:false}, "Xml_NonWhitespace", "Xml_NonWhitespace"); 
    $.Constant({Static:true , Public:false}, "Xml_DupXmlDecl", "Xml_DupXmlDecl"); 
    $.Constant({Static:true , Public:false}, "Xml_CannotWriteXmlDecl", "Xml_CannotWriteXmlDecl"); 
    $.Constant({Static:true , Public:false}, "Xml_NoRoot", "Xml_NoRoot"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidIndentation", "Xml_InvalidIndentation"); 
    $.Constant({Static:true , Public:false}, "Xml_NotInWriteState", "Xml_NotInWriteState"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidPosition", "Xml_InvalidPosition"); 
    $.Constant({Static:true , Public:false}, "Xml_IncompleteEntity", "Xml_IncompleteEntity"); 
    $.Constant({Static:true , Public:false}, "Xml_IncompleteDtdContent", "Xml_IncompleteDtdContent"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidSurrogateHighChar", "Xml_InvalidSurrogateHighChar"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidSurrogateMissingLowChar", "Xml_InvalidSurrogateMissingLowChar"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidSurrogatePairWithArgs", "Xml_InvalidSurrogatePairWithArgs"); 
    $.Constant({Static:true , Public:false}, "Xml_SurrogatePairSplit", "Xml_SurrogatePairSplit"); 
    $.Constant({Static:true , Public:false}, "Xml_NoMultipleRoots", "Xml_NoMultipleRoots"); 
    $.Constant({Static:true , Public:false}, "Xml_RedefinePrefix", "Xml_RedefinePrefix"); 
    $.Constant({Static:true , Public:false}, "Xml_DtdAlreadyWritten", "Xml_DtdAlreadyWritten"); 
    $.Constant({Static:true , Public:false}, "XmlBadName", "XmlBadName"); 
    $.Constant({Static:true , Public:false}, "XmlNoNameAllowed", "XmlNoNameAllowed"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidCharsInIndent", "Xml_InvalidCharsInIndent"); 
    $.Constant({Static:true , Public:false}, "Xml_IndentCharsNotWhitespace", "Xml_IndentCharsNotWhitespace"); 
    $.Constant({Static:true , Public:false}, "Xml_ConformanceLevelFragment", "Xml_ConformanceLevelFragment"); 
    $.Constant({Static:true , Public:false}, "XmlDocument_ValidateInvalidNodeType", "XmlDocument_ValidateInvalidNodeType"); 
    $.Constant({Static:true , Public:false}, "XmlDocument_NodeNotFromDocument", "XmlDocument_NodeNotFromDocument"); 
    $.Constant({Static:true , Public:false}, "XmlDocument_NoNodeSchemaInfo", "XmlDocument_NoNodeSchemaInfo"); 
    $.Constant({Static:true , Public:false}, "XmlDocument_NoSchemaInfo", "XmlDocument_NoSchemaInfo"); 
    $.Constant({Static:true , Public:false}, "Sch_DefaultException", "Sch_DefaultException"); 
    $.Constant({Static:true , Public:false}, "Sch_ParEntityRefNesting", "Sch_ParEntityRefNesting"); 
    $.Constant({Static:true , Public:false}, "Sch_DupElementDecl", "Sch_DupElementDecl"); 
    $.Constant({Static:true , Public:false}, "Sch_IdAttrDeclared", "Sch_IdAttrDeclared"); 
    $.Constant({Static:true , Public:false}, "Sch_RootMatchDocType", "Sch_RootMatchDocType"); 
    $.Constant({Static:true , Public:false}, "Sch_DupId", "Sch_DupId"); 
    $.Constant({Static:true , Public:false}, "Sch_UndeclaredElement", "Sch_UndeclaredElement"); 
    $.Constant({Static:true , Public:false}, "Sch_UndeclaredAttribute", "Sch_UndeclaredAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_UndeclaredNotation", "Sch_UndeclaredNotation"); 
    $.Constant({Static:true , Public:false}, "Sch_UndeclaredId", "Sch_UndeclaredId"); 
    $.Constant({Static:true , Public:false}, "Sch_SchemaRootExpected", "Sch_SchemaRootExpected"); 
    $.Constant({Static:true , Public:false}, "Sch_XSDSchemaRootExpected", "Sch_XSDSchemaRootExpected"); 
    $.Constant({Static:true , Public:false}, "Sch_UnsupportedAttribute", "Sch_UnsupportedAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_UnsupportedElement", "Sch_UnsupportedElement"); 
    $.Constant({Static:true , Public:false}, "Sch_MissAttribute", "Sch_MissAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_AnnotationLocation", "Sch_AnnotationLocation"); 
    $.Constant({Static:true , Public:false}, "Sch_DataTypeTextOnly", "Sch_DataTypeTextOnly"); 
    $.Constant({Static:true , Public:false}, "Sch_UnknownModel", "Sch_UnknownModel"); 
    $.Constant({Static:true , Public:false}, "Sch_UnknownOrder", "Sch_UnknownOrder"); 
    $.Constant({Static:true , Public:false}, "Sch_UnknownContent", "Sch_UnknownContent"); 
    $.Constant({Static:true , Public:false}, "Sch_UnknownRequired", "Sch_UnknownRequired"); 
    $.Constant({Static:true , Public:false}, "Sch_UnknownDtType", "Sch_UnknownDtType"); 
    $.Constant({Static:true , Public:false}, "Sch_MixedMany", "Sch_MixedMany"); 
    $.Constant({Static:true , Public:false}, "Sch_GroupDisabled", "Sch_GroupDisabled"); 
    $.Constant({Static:true , Public:false}, "Sch_MissDtvalue", "Sch_MissDtvalue"); 
    $.Constant({Static:true , Public:false}, "Sch_MissDtvaluesAttribute", "Sch_MissDtvaluesAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_DupDtType", "Sch_DupDtType"); 
    $.Constant({Static:true , Public:false}, "Sch_DupAttribute", "Sch_DupAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_RequireEnumeration", "Sch_RequireEnumeration"); 
    $.Constant({Static:true , Public:false}, "Sch_DefaultIdValue", "Sch_DefaultIdValue"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementNotAllowed", "Sch_ElementNotAllowed"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementMissing", "Sch_ElementMissing"); 
    $.Constant({Static:true , Public:false}, "Sch_ManyMaxOccurs", "Sch_ManyMaxOccurs"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxOccursInvalid", "Sch_MaxOccursInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_MinOccursInvalid", "Sch_MinOccursInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_DtMaxLengthInvalid", "Sch_DtMaxLengthInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_DtMinLengthInvalid", "Sch_DtMinLengthInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_DupDtMaxLength", "Sch_DupDtMaxLength"); 
    $.Constant({Static:true , Public:false}, "Sch_DupDtMinLength", "Sch_DupDtMinLength"); 
    $.Constant({Static:true , Public:false}, "Sch_DtMinMaxLength", "Sch_DtMinMaxLength"); 
    $.Constant({Static:true , Public:false}, "Sch_DupElement", "Sch_DupElement"); 
    $.Constant({Static:true , Public:false}, "Sch_DupGroupParticle", "Sch_DupGroupParticle"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidValue", "Sch_InvalidValue"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidValueDetailed", "Sch_InvalidValueDetailed"); 
    $.Constant({Static:true , Public:false}, "Sch_MissRequiredAttribute", "Sch_MissRequiredAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_FixedAttributeValue", "Sch_FixedAttributeValue"); 
    $.Constant({Static:true , Public:false}, "Sch_FixedElementValue", "Sch_FixedElementValue"); 
    $.Constant({Static:true , Public:false}, "Sch_AttributeValueDataTypeDetailed", "Sch_AttributeValueDataTypeDetailed"); 
    $.Constant({Static:true , Public:false}, "Sch_AttributeDefaultDataType", "Sch_AttributeDefaultDataType"); 
    $.Constant({Static:true , Public:false}, "Sch_IncludeLocation", "Sch_IncludeLocation"); 
    $.Constant({Static:true , Public:false}, "Sch_ImportLocation", "Sch_ImportLocation"); 
    $.Constant({Static:true , Public:false}, "Sch_RedefineLocation", "Sch_RedefineLocation"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidBlockDefaultValue", "Sch_InvalidBlockDefaultValue"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidFinalDefaultValue", "Sch_InvalidFinalDefaultValue"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidElementBlockValue", "Sch_InvalidElementBlockValue"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidElementFinalValue", "Sch_InvalidElementFinalValue"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidSimpleTypeFinalValue", "Sch_InvalidSimpleTypeFinalValue"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidComplexTypeBlockValue", "Sch_InvalidComplexTypeBlockValue"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidComplexTypeFinalValue", "Sch_InvalidComplexTypeFinalValue"); 
    $.Constant({Static:true , Public:false}, "Sch_DupIdentityConstraint", "Sch_DupIdentityConstraint"); 
    $.Constant({Static:true , Public:false}, "Sch_DupGlobalElement", "Sch_DupGlobalElement"); 
    $.Constant({Static:true , Public:false}, "Sch_DupGlobalAttribute", "Sch_DupGlobalAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_DupSimpleType", "Sch_DupSimpleType"); 
    $.Constant({Static:true , Public:false}, "Sch_DupComplexType", "Sch_DupComplexType"); 
    $.Constant({Static:true , Public:false}, "Sch_DupGroup", "Sch_DupGroup"); 
    $.Constant({Static:true , Public:false}, "Sch_DupAttributeGroup", "Sch_DupAttributeGroup"); 
    $.Constant({Static:true , Public:false}, "Sch_DupNotation", "Sch_DupNotation"); 
    $.Constant({Static:true , Public:false}, "Sch_DefaultFixedAttributes", "Sch_DefaultFixedAttributes"); 
    $.Constant({Static:true , Public:false}, "Sch_FixedInRef", "Sch_FixedInRef"); 
    $.Constant({Static:true , Public:false}, "Sch_FixedDefaultInRef", "Sch_FixedDefaultInRef"); 
    $.Constant({Static:true , Public:false}, "Sch_DupXsdElement", "Sch_DupXsdElement"); 
    $.Constant({Static:true , Public:false}, "Sch_ForbiddenAttribute", "Sch_ForbiddenAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_AttributeIgnored", "Sch_AttributeIgnored"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementRef", "Sch_ElementRef"); 
    $.Constant({Static:true , Public:false}, "Sch_TypeMutualExclusive", "Sch_TypeMutualExclusive"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementNameRef", "Sch_ElementNameRef"); 
    $.Constant({Static:true , Public:false}, "Sch_AttributeNameRef", "Sch_AttributeNameRef"); 
    $.Constant({Static:true , Public:false}, "Sch_TextNotAllowed", "Sch_TextNotAllowed"); 
    $.Constant({Static:true , Public:false}, "Sch_UndeclaredType", "Sch_UndeclaredType"); 
    $.Constant({Static:true , Public:false}, "Sch_UndeclaredSimpleType", "Sch_UndeclaredSimpleType"); 
    $.Constant({Static:true , Public:false}, "Sch_UndeclaredEquivClass", "Sch_UndeclaredEquivClass"); 
    $.Constant({Static:true , Public:false}, "Sch_AttListPresence", "Sch_AttListPresence"); 
    $.Constant({Static:true , Public:false}, "Sch_NotationValue", "Sch_NotationValue"); 
    $.Constant({Static:true , Public:false}, "Sch_EnumerationValue", "Sch_EnumerationValue"); 
    $.Constant({Static:true , Public:false}, "Sch_EmptyAttributeValue", "Sch_EmptyAttributeValue"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidLanguageId", "Sch_InvalidLanguageId"); 
    $.Constant({Static:true , Public:false}, "Sch_XmlSpace", "Sch_XmlSpace"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidXsdAttributeValue", "Sch_InvalidXsdAttributeValue"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidXsdAttributeDatatypeValue", "Sch_InvalidXsdAttributeDatatypeValue"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementValueDataTypeDetailed", "Sch_ElementValueDataTypeDetailed"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidElementDefaultValue", "Sch_InvalidElementDefaultValue"); 
    $.Constant({Static:true , Public:false}, "Sch_NonDeterministic", "Sch_NonDeterministic"); 
    $.Constant({Static:true , Public:false}, "Sch_NonDeterministicAnyEx", "Sch_NonDeterministicAnyEx"); 
    $.Constant({Static:true , Public:false}, "Sch_NonDeterministicAnyAny", "Sch_NonDeterministicAnyAny"); 
    $.Constant({Static:true , Public:false}, "Sch_StandAlone", "Sch_StandAlone"); 
    $.Constant({Static:true , Public:false}, "Sch_XmlNsAttribute", "Sch_XmlNsAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_AllElement", "Sch_AllElement"); 
    $.Constant({Static:true , Public:false}, "Sch_MismatchTargetNamespaceInclude", "Sch_MismatchTargetNamespaceInclude"); 
    $.Constant({Static:true , Public:false}, "Sch_MismatchTargetNamespaceImport", "Sch_MismatchTargetNamespaceImport"); 
    $.Constant({Static:true , Public:false}, "Sch_MismatchTargetNamespaceEx", "Sch_MismatchTargetNamespaceEx"); 
    $.Constant({Static:true , Public:false}, "Sch_XsiTypeNotFound", "Sch_XsiTypeNotFound"); 
    $.Constant({Static:true , Public:false}, "Sch_XsiTypeAbstract", "Sch_XsiTypeAbstract"); 
    $.Constant({Static:true , Public:false}, "Sch_ListFromNonatomic", "Sch_ListFromNonatomic"); 
    $.Constant({Static:true , Public:false}, "Sch_UnionFromUnion", "Sch_UnionFromUnion"); 
    $.Constant({Static:true , Public:false}, "Sch_DupLengthFacet", "Sch_DupLengthFacet"); 
    $.Constant({Static:true , Public:false}, "Sch_DupMinLengthFacet", "Sch_DupMinLengthFacet"); 
    $.Constant({Static:true , Public:false}, "Sch_DupMaxLengthFacet", "Sch_DupMaxLengthFacet"); 
    $.Constant({Static:true , Public:false}, "Sch_DupWhiteSpaceFacet", "Sch_DupWhiteSpaceFacet"); 
    $.Constant({Static:true , Public:false}, "Sch_DupMaxInclusiveFacet", "Sch_DupMaxInclusiveFacet"); 
    $.Constant({Static:true , Public:false}, "Sch_DupMaxExclusiveFacet", "Sch_DupMaxExclusiveFacet"); 
    $.Constant({Static:true , Public:false}, "Sch_DupMinInclusiveFacet", "Sch_DupMinInclusiveFacet"); 
    $.Constant({Static:true , Public:false}, "Sch_DupMinExclusiveFacet", "Sch_DupMinExclusiveFacet"); 
    $.Constant({Static:true , Public:false}, "Sch_DupTotalDigitsFacet", "Sch_DupTotalDigitsFacet"); 
    $.Constant({Static:true , Public:false}, "Sch_DupFractionDigitsFacet", "Sch_DupFractionDigitsFacet"); 
    $.Constant({Static:true , Public:false}, "Sch_LengthFacetProhibited", "Sch_LengthFacetProhibited"); 
    $.Constant({Static:true , Public:false}, "Sch_MinLengthFacetProhibited", "Sch_MinLengthFacetProhibited"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxLengthFacetProhibited", "Sch_MaxLengthFacetProhibited"); 
    $.Constant({Static:true , Public:false}, "Sch_PatternFacetProhibited", "Sch_PatternFacetProhibited"); 
    $.Constant({Static:true , Public:false}, "Sch_EnumerationFacetProhibited", "Sch_EnumerationFacetProhibited"); 
    $.Constant({Static:true , Public:false}, "Sch_WhiteSpaceFacetProhibited", "Sch_WhiteSpaceFacetProhibited"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxInclusiveFacetProhibited", "Sch_MaxInclusiveFacetProhibited"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxExclusiveFacetProhibited", "Sch_MaxExclusiveFacetProhibited"); 
    $.Constant({Static:true , Public:false}, "Sch_MinInclusiveFacetProhibited", "Sch_MinInclusiveFacetProhibited"); 
    $.Constant({Static:true , Public:false}, "Sch_MinExclusiveFacetProhibited", "Sch_MinExclusiveFacetProhibited"); 
    $.Constant({Static:true , Public:false}, "Sch_TotalDigitsFacetProhibited", "Sch_TotalDigitsFacetProhibited"); 
    $.Constant({Static:true , Public:false}, "Sch_FractionDigitsFacetProhibited", "Sch_FractionDigitsFacetProhibited"); 
    $.Constant({Static:true , Public:false}, "Sch_LengthFacetInvalid", "Sch_LengthFacetInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_MinLengthFacetInvalid", "Sch_MinLengthFacetInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxLengthFacetInvalid", "Sch_MaxLengthFacetInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxInclusiveFacetInvalid", "Sch_MaxInclusiveFacetInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxExclusiveFacetInvalid", "Sch_MaxExclusiveFacetInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_MinInclusiveFacetInvalid", "Sch_MinInclusiveFacetInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_MinExclusiveFacetInvalid", "Sch_MinExclusiveFacetInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_TotalDigitsFacetInvalid", "Sch_TotalDigitsFacetInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_FractionDigitsFacetInvalid", "Sch_FractionDigitsFacetInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_PatternFacetInvalid", "Sch_PatternFacetInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_EnumerationFacetInvalid", "Sch_EnumerationFacetInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidWhiteSpace", "Sch_InvalidWhiteSpace"); 
    $.Constant({Static:true , Public:false}, "Sch_UnknownFacet", "Sch_UnknownFacet"); 
    $.Constant({Static:true , Public:false}, "Sch_LengthAndMinMax", "Sch_LengthAndMinMax"); 
    $.Constant({Static:true , Public:false}, "Sch_MinLengthGtMaxLength", "Sch_MinLengthGtMaxLength"); 
    $.Constant({Static:true , Public:false}, "Sch_FractionDigitsGtTotalDigits", "Sch_FractionDigitsGtTotalDigits"); 
    $.Constant({Static:true , Public:false}, "Sch_LengthConstraintFailed", "Sch_LengthConstraintFailed"); 
    $.Constant({Static:true , Public:false}, "Sch_MinLengthConstraintFailed", "Sch_MinLengthConstraintFailed"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxLengthConstraintFailed", "Sch_MaxLengthConstraintFailed"); 
    $.Constant({Static:true , Public:false}, "Sch_PatternConstraintFailed", "Sch_PatternConstraintFailed"); 
    $.Constant({Static:true , Public:false}, "Sch_EnumerationConstraintFailed", "Sch_EnumerationConstraintFailed"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxInclusiveConstraintFailed", "Sch_MaxInclusiveConstraintFailed"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxExclusiveConstraintFailed", "Sch_MaxExclusiveConstraintFailed"); 
    $.Constant({Static:true , Public:false}, "Sch_MinInclusiveConstraintFailed", "Sch_MinInclusiveConstraintFailed"); 
    $.Constant({Static:true , Public:false}, "Sch_MinExclusiveConstraintFailed", "Sch_MinExclusiveConstraintFailed"); 
    $.Constant({Static:true , Public:false}, "Sch_TotalDigitsConstraintFailed", "Sch_TotalDigitsConstraintFailed"); 
    $.Constant({Static:true , Public:false}, "Sch_FractionDigitsConstraintFailed", "Sch_FractionDigitsConstraintFailed"); 
    $.Constant({Static:true , Public:false}, "Sch_UnionFailedEx", "Sch_UnionFailedEx"); 
    $.Constant({Static:true , Public:false}, "Sch_NotationRequired", "Sch_NotationRequired"); 
    $.Constant({Static:true , Public:false}, "Sch_DupNotationAttribute", "Sch_DupNotationAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_MissingPublicSystemAttribute", "Sch_MissingPublicSystemAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_NotationAttributeOnEmptyElement", "Sch_NotationAttributeOnEmptyElement"); 
    $.Constant({Static:true , Public:false}, "Sch_RefNotInScope", "Sch_RefNotInScope"); 
    $.Constant({Static:true , Public:false}, "Sch_UndeclaredIdentityConstraint", "Sch_UndeclaredIdentityConstraint"); 
    $.Constant({Static:true , Public:false}, "Sch_RefInvalidIdentityConstraint", "Sch_RefInvalidIdentityConstraint"); 
    $.Constant({Static:true , Public:false}, "Sch_RefInvalidCardin", "Sch_RefInvalidCardin"); 
    $.Constant({Static:true , Public:false}, "Sch_ReftoKeyref", "Sch_ReftoKeyref"); 
    $.Constant({Static:true , Public:false}, "Sch_EmptyXPath", "Sch_EmptyXPath"); 
    $.Constant({Static:true , Public:false}, "Sch_UnresolvedPrefix", "Sch_UnresolvedPrefix"); 
    $.Constant({Static:true , Public:false}, "Sch_UnresolvedKeyref", "Sch_UnresolvedKeyref"); 
    $.Constant({Static:true , Public:false}, "Sch_ICXpathError", "Sch_ICXpathError"); 
    $.Constant({Static:true , Public:false}, "Sch_SelectorAttr", "Sch_SelectorAttr"); 
    $.Constant({Static:true , Public:false}, "Sch_FieldSimpleTypeExpected", "Sch_FieldSimpleTypeExpected"); 
    $.Constant({Static:true , Public:false}, "Sch_FieldSingleValueExpected", "Sch_FieldSingleValueExpected"); 
    $.Constant({Static:true , Public:false}, "Sch_MissingKey", "Sch_MissingKey"); 
    $.Constant({Static:true , Public:false}, "Sch_DuplicateKey", "Sch_DuplicateKey"); 
    $.Constant({Static:true , Public:false}, "Sch_TargetNamespaceXsi", "Sch_TargetNamespaceXsi"); 
    $.Constant({Static:true , Public:false}, "Sch_UndeclaredEntity", "Sch_UndeclaredEntity"); 
    $.Constant({Static:true , Public:false}, "Sch_UnparsedEntityRef", "Sch_UnparsedEntityRef"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxOccursInvalidXsd", "Sch_MaxOccursInvalidXsd"); 
    $.Constant({Static:true , Public:false}, "Sch_MinOccursInvalidXsd", "Sch_MinOccursInvalidXsd"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxInclusiveExclusive", "Sch_MaxInclusiveExclusive"); 
    $.Constant({Static:true , Public:false}, "Sch_MinInclusiveExclusive", "Sch_MinInclusiveExclusive"); 
    $.Constant({Static:true , Public:false}, "Sch_MinInclusiveGtMaxInclusive", "Sch_MinInclusiveGtMaxInclusive"); 
    $.Constant({Static:true , Public:false}, "Sch_MinExclusiveGtMaxExclusive", "Sch_MinExclusiveGtMaxExclusive"); 
    $.Constant({Static:true , Public:false}, "Sch_MinInclusiveGtMaxExclusive", "Sch_MinInclusiveGtMaxExclusive"); 
    $.Constant({Static:true , Public:false}, "Sch_MinExclusiveGtMaxInclusive", "Sch_MinExclusiveGtMaxInclusive"); 
    $.Constant({Static:true , Public:false}, "Sch_SimpleTypeRestriction", "Sch_SimpleTypeRestriction"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidFacetPosition", "Sch_InvalidFacetPosition"); 
    $.Constant({Static:true , Public:false}, "Sch_AttributeMutuallyExclusive", "Sch_AttributeMutuallyExclusive"); 
    $.Constant({Static:true , Public:false}, "Sch_AnyAttributeLastChild", "Sch_AnyAttributeLastChild"); 
    $.Constant({Static:true , Public:false}, "Sch_ComplexTypeContentModel", "Sch_ComplexTypeContentModel"); 
    $.Constant({Static:true , Public:false}, "Sch_ComplexContentContentModel", "Sch_ComplexContentContentModel"); 
    $.Constant({Static:true , Public:false}, "Sch_NotNormalizedString", "Sch_NotNormalizedString"); 
    $.Constant({Static:true , Public:false}, "Sch_NotTokenString", "Sch_NotTokenString"); 
    $.Constant({Static:true , Public:false}, "Sch_FractionDigitsNotOnDecimal", "Sch_FractionDigitsNotOnDecimal"); 
    $.Constant({Static:true , Public:false}, "Sch_ContentInNill", "Sch_ContentInNill"); 
    $.Constant({Static:true , Public:false}, "Sch_NoElementSchemaFound", "Sch_NoElementSchemaFound"); 
    $.Constant({Static:true , Public:false}, "Sch_NoAttributeSchemaFound", "Sch_NoAttributeSchemaFound"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidNamespace", "Sch_InvalidNamespace"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidTargetNamespaceAttribute", "Sch_InvalidTargetNamespaceAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidNamespaceAttribute", "Sch_InvalidNamespaceAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidSchemaLocation", "Sch_InvalidSchemaLocation"); 
    $.Constant({Static:true , Public:false}, "Sch_ImportTargetNamespace", "Sch_ImportTargetNamespace"); 
    $.Constant({Static:true , Public:false}, "Sch_ImportTargetNamespaceNull", "Sch_ImportTargetNamespaceNull"); 
    $.Constant({Static:true , Public:false}, "Sch_GroupDoubleRedefine", "Sch_GroupDoubleRedefine"); 
    $.Constant({Static:true , Public:false}, "Sch_ComponentRedefineNotFound", "Sch_ComponentRedefineNotFound"); 
    $.Constant({Static:true , Public:false}, "Sch_GroupRedefineNotFound", "Sch_GroupRedefineNotFound"); 
    $.Constant({Static:true , Public:false}, "Sch_AttrGroupDoubleRedefine", "Sch_AttrGroupDoubleRedefine"); 
    $.Constant({Static:true , Public:false}, "Sch_AttrGroupRedefineNotFound", "Sch_AttrGroupRedefineNotFound"); 
    $.Constant({Static:true , Public:false}, "Sch_ComplexTypeDoubleRedefine", "Sch_ComplexTypeDoubleRedefine"); 
    $.Constant({Static:true , Public:false}, "Sch_ComplexTypeRedefineNotFound", "Sch_ComplexTypeRedefineNotFound"); 
    $.Constant({Static:true , Public:false}, "Sch_SimpleToComplexTypeRedefine", "Sch_SimpleToComplexTypeRedefine"); 
    $.Constant({Static:true , Public:false}, "Sch_SimpleTypeDoubleRedefine", "Sch_SimpleTypeDoubleRedefine"); 
    $.Constant({Static:true , Public:false}, "Sch_ComplexToSimpleTypeRedefine", "Sch_ComplexToSimpleTypeRedefine"); 
    $.Constant({Static:true , Public:false}, "Sch_SimpleTypeRedefineNotFound", "Sch_SimpleTypeRedefineNotFound"); 
    $.Constant({Static:true , Public:false}, "Sch_MinMaxGroupRedefine", "Sch_MinMaxGroupRedefine"); 
    $.Constant({Static:true , Public:false}, "Sch_MultipleGroupSelfRef", "Sch_MultipleGroupSelfRef"); 
    $.Constant({Static:true , Public:false}, "Sch_MultipleAttrGroupSelfRef", "Sch_MultipleAttrGroupSelfRef"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidTypeRedefine", "Sch_InvalidTypeRedefine"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidElementRef", "Sch_InvalidElementRef"); 
    $.Constant({Static:true , Public:false}, "Sch_MinGtMax", "Sch_MinGtMax"); 
    $.Constant({Static:true , Public:false}, "Sch_DupSelector", "Sch_DupSelector"); 
    $.Constant({Static:true , Public:false}, "Sch_IdConstraintNoSelector", "Sch_IdConstraintNoSelector"); 
    $.Constant({Static:true , Public:false}, "Sch_IdConstraintNoFields", "Sch_IdConstraintNoFields"); 
    $.Constant({Static:true , Public:false}, "Sch_IdConstraintNoRefer", "Sch_IdConstraintNoRefer"); 
    $.Constant({Static:true , Public:false}, "Sch_SelectorBeforeFields", "Sch_SelectorBeforeFields"); 
    $.Constant({Static:true , Public:false}, "Sch_NoSimpleTypeContent", "Sch_NoSimpleTypeContent"); 
    $.Constant({Static:true , Public:false}, "Sch_SimpleTypeRestRefBase", "Sch_SimpleTypeRestRefBase"); 
    $.Constant({Static:true , Public:false}, "Sch_SimpleTypeRestRefBaseNone", "Sch_SimpleTypeRestRefBaseNone"); 
    $.Constant({Static:true , Public:false}, "Sch_SimpleTypeListRefBase", "Sch_SimpleTypeListRefBase"); 
    $.Constant({Static:true , Public:false}, "Sch_SimpleTypeListRefBaseNone", "Sch_SimpleTypeListRefBaseNone"); 
    $.Constant({Static:true , Public:false}, "Sch_SimpleTypeUnionNoBase", "Sch_SimpleTypeUnionNoBase"); 
    $.Constant({Static:true , Public:false}, "Sch_NoRestOrExtQName", "Sch_NoRestOrExtQName"); 
    $.Constant({Static:true , Public:false}, "Sch_NoRestOrExt", "Sch_NoRestOrExt"); 
    $.Constant({Static:true , Public:false}, "Sch_NoGroupParticle", "Sch_NoGroupParticle"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidAllMin", "Sch_InvalidAllMin"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidAllMax", "Sch_InvalidAllMax"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidFacet", "Sch_InvalidFacet"); 
    $.Constant({Static:true , Public:false}, "Sch_AbstractElement", "Sch_AbstractElement"); 
    $.Constant({Static:true , Public:false}, "Sch_XsiTypeBlockedEx", "Sch_XsiTypeBlockedEx"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidXsiNill", "Sch_InvalidXsiNill"); 
    $.Constant({Static:true , Public:false}, "Sch_SubstitutionNotAllowed", "Sch_SubstitutionNotAllowed"); 
    $.Constant({Static:true , Public:false}, "Sch_SubstitutionBlocked", "Sch_SubstitutionBlocked"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidElementInEmptyEx", "Sch_InvalidElementInEmptyEx"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidElementInTextOnlyEx", "Sch_InvalidElementInTextOnlyEx"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidTextInElement", "Sch_InvalidTextInElement"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidElementContent", "Sch_InvalidElementContent"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidElementContentComplex", "Sch_InvalidElementContentComplex"); 
    $.Constant({Static:true , Public:false}, "Sch_IncompleteContent", "Sch_IncompleteContent"); 
    $.Constant({Static:true , Public:false}, "Sch_IncompleteContentComplex", "Sch_IncompleteContentComplex"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidTextInElementExpecting", "Sch_InvalidTextInElementExpecting"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidElementContentExpecting", "Sch_InvalidElementContentExpecting"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidElementContentExpectingComplex", "Sch_InvalidElementContentExpectingComplex"); 
    $.Constant({Static:true , Public:false}, "Sch_IncompleteContentExpecting", "Sch_IncompleteContentExpecting"); 
    $.Constant({Static:true , Public:false}, "Sch_IncompleteContentExpectingComplex", "Sch_IncompleteContentExpectingComplex"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidElementSubstitution", "Sch_InvalidElementSubstitution"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementNameAndNamespace", "Sch_ElementNameAndNamespace"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementName", "Sch_ElementName"); 
    $.Constant({Static:true , Public:false}, "Sch_ContinuationString", "Sch_ContinuationString"); 
    $.Constant({Static:true , Public:false}, "Sch_AnyElementNS", "Sch_AnyElementNS"); 
    $.Constant({Static:true , Public:false}, "Sch_AnyElement", "Sch_AnyElement"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidTextInEmpty", "Sch_InvalidTextInEmpty"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidWhitespaceInEmpty", "Sch_InvalidWhitespaceInEmpty"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidPIComment", "Sch_InvalidPIComment"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidAttributeRef", "Sch_InvalidAttributeRef"); 
    $.Constant({Static:true , Public:false}, "Sch_OptionalDefaultAttribute", "Sch_OptionalDefaultAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_AttributeCircularRef", "Sch_AttributeCircularRef"); 
    $.Constant({Static:true , Public:false}, "Sch_IdentityConstraintCircularRef", "Sch_IdentityConstraintCircularRef"); 
    $.Constant({Static:true , Public:false}, "Sch_SubstitutionCircularRef", "Sch_SubstitutionCircularRef"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidAnyAttribute", "Sch_InvalidAnyAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_DupIdAttribute", "Sch_DupIdAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidAllElementMax", "Sch_InvalidAllElementMax"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidAny", "Sch_InvalidAny"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidAnyDetailed", "Sch_InvalidAnyDetailed"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidExamplar", "Sch_InvalidExamplar"); 
    $.Constant({Static:true , Public:false}, "Sch_NoExamplar", "Sch_NoExamplar"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidSubstitutionMember", "Sch_InvalidSubstitutionMember"); 
    $.Constant({Static:true , Public:false}, "Sch_RedefineNoSchema", "Sch_RedefineNoSchema"); 
    $.Constant({Static:true , Public:false}, "Sch_ProhibitedAttribute", "Sch_ProhibitedAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_TypeCircularRef", "Sch_TypeCircularRef"); 
    $.Constant({Static:true , Public:false}, "Sch_TwoIdAttrUses", "Sch_TwoIdAttrUses"); 
    $.Constant({Static:true , Public:false}, "Sch_AttrUseAndWildId", "Sch_AttrUseAndWildId"); 
    $.Constant({Static:true , Public:false}, "Sch_MoreThanOneWildId", "Sch_MoreThanOneWildId"); 
    $.Constant({Static:true , Public:false}, "Sch_BaseFinalExtension", "Sch_BaseFinalExtension"); 
    $.Constant({Static:true , Public:false}, "Sch_NotSimpleContent", "Sch_NotSimpleContent"); 
    $.Constant({Static:true , Public:false}, "Sch_NotComplexContent", "Sch_NotComplexContent"); 
    $.Constant({Static:true , Public:false}, "Sch_BaseFinalRestriction", "Sch_BaseFinalRestriction"); 
    $.Constant({Static:true , Public:false}, "Sch_BaseFinalList", "Sch_BaseFinalList"); 
    $.Constant({Static:true , Public:false}, "Sch_BaseFinalUnion", "Sch_BaseFinalUnion"); 
    $.Constant({Static:true , Public:false}, "Sch_UndefBaseRestriction", "Sch_UndefBaseRestriction"); 
    $.Constant({Static:true , Public:false}, "Sch_UndefBaseExtension", "Sch_UndefBaseExtension"); 
    $.Constant({Static:true , Public:false}, "Sch_DifContentType", "Sch_DifContentType"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidContentRestriction", "Sch_InvalidContentRestriction"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidContentRestrictionDetailed", "Sch_InvalidContentRestrictionDetailed"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidBaseToEmpty", "Sch_InvalidBaseToEmpty"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidBaseToMixed", "Sch_InvalidBaseToMixed"); 
    $.Constant({Static:true , Public:false}, "Sch_DupAttributeUse", "Sch_DupAttributeUse"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidParticleRestriction", "Sch_InvalidParticleRestriction"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidParticleRestrictionDetailed", "Sch_InvalidParticleRestrictionDetailed"); 
    $.Constant({Static:true , Public:false}, "Sch_ForbiddenDerivedParticleForAll", "Sch_ForbiddenDerivedParticleForAll"); 
    $.Constant({Static:true , Public:false}, "Sch_ForbiddenDerivedParticleForElem", "Sch_ForbiddenDerivedParticleForElem"); 
    $.Constant({Static:true , Public:false}, "Sch_ForbiddenDerivedParticleForChoice", "Sch_ForbiddenDerivedParticleForChoice"); 
    $.Constant({Static:true , Public:false}, "Sch_ForbiddenDerivedParticleForSeq", "Sch_ForbiddenDerivedParticleForSeq"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementFromElement", "Sch_ElementFromElement"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementFromAnyRule1", "Sch_ElementFromAnyRule1"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementFromAnyRule2", "Sch_ElementFromAnyRule2"); 
    $.Constant({Static:true , Public:false}, "Sch_AnyFromAnyRule1", "Sch_AnyFromAnyRule1"); 
    $.Constant({Static:true , Public:false}, "Sch_AnyFromAnyRule2", "Sch_AnyFromAnyRule2"); 
    $.Constant({Static:true , Public:false}, "Sch_AnyFromAnyRule3", "Sch_AnyFromAnyRule3"); 
    $.Constant({Static:true , Public:false}, "Sch_GroupBaseFromAny1", "Sch_GroupBaseFromAny1"); 
    $.Constant({Static:true , Public:false}, "Sch_GroupBaseFromAny2", "Sch_GroupBaseFromAny2"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementFromGroupBase1", "Sch_ElementFromGroupBase1"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementFromGroupBase2", "Sch_ElementFromGroupBase2"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementFromGroupBase3", "Sch_ElementFromGroupBase3"); 
    $.Constant({Static:true , Public:false}, "Sch_GroupBaseRestRangeInvalid", "Sch_GroupBaseRestRangeInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_GroupBaseRestNoMap", "Sch_GroupBaseRestNoMap"); 
    $.Constant({Static:true , Public:false}, "Sch_GroupBaseRestNotEmptiable", "Sch_GroupBaseRestNotEmptiable"); 
    $.Constant({Static:true , Public:false}, "Sch_SeqFromAll", "Sch_SeqFromAll"); 
    $.Constant({Static:true , Public:false}, "Sch_SeqFromChoice", "Sch_SeqFromChoice"); 
    $.Constant({Static:true , Public:false}, "Sch_UndefGroupRef", "Sch_UndefGroupRef"); 
    $.Constant({Static:true , Public:false}, "Sch_GroupCircularRef", "Sch_GroupCircularRef"); 
    $.Constant({Static:true , Public:false}, "Sch_AllRefNotRoot", "Sch_AllRefNotRoot"); 
    $.Constant({Static:true , Public:false}, "Sch_AllRefMinMax", "Sch_AllRefMinMax"); 
    $.Constant({Static:true , Public:false}, "Sch_NotAllAlone", "Sch_NotAllAlone"); 
    $.Constant({Static:true , Public:false}, "Sch_AttributeGroupCircularRef", "Sch_AttributeGroupCircularRef"); 
    $.Constant({Static:true , Public:false}, "Sch_UndefAttributeGroupRef", "Sch_UndefAttributeGroupRef"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidAttributeExtension", "Sch_InvalidAttributeExtension"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidAnyAttributeRestriction", "Sch_InvalidAnyAttributeRestriction"); 
    $.Constant({Static:true , Public:false}, "Sch_AttributeRestrictionProhibited", "Sch_AttributeRestrictionProhibited"); 
    $.Constant({Static:true , Public:false}, "Sch_AttributeRestrictionInvalid", "Sch_AttributeRestrictionInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_AttributeFixedInvalid", "Sch_AttributeFixedInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_AttributeUseInvalid", "Sch_AttributeUseInvalid"); 
    $.Constant({Static:true , Public:false}, "Sch_AttributeRestrictionInvalidFromWildcard", "Sch_AttributeRestrictionInvalidFromWildcard"); 
    $.Constant({Static:true , Public:false}, "Sch_NoDerivedAttribute", "Sch_NoDerivedAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_UnexpressibleAnyAttribute", "Sch_UnexpressibleAnyAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_RefInvalidAttribute", "Sch_RefInvalidAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementCircularRef", "Sch_ElementCircularRef"); 
    $.Constant({Static:true , Public:false}, "Sch_RefInvalidElement", "Sch_RefInvalidElement"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementCannotHaveValue", "Sch_ElementCannotHaveValue"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementInMixedWithFixed", "Sch_ElementInMixedWithFixed"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementTypeCollision", "Sch_ElementTypeCollision"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidIncludeLocation", "Sch_InvalidIncludeLocation"); 
    $.Constant({Static:true , Public:false}, "Sch_CannotLoadSchema", "Sch_CannotLoadSchema"); 
    $.Constant({Static:true , Public:false}, "Sch_CannotLoadSchemaLocation", "Sch_CannotLoadSchemaLocation"); 
    $.Constant({Static:true , Public:false}, "Sch_LengthGtBaseLength", "Sch_LengthGtBaseLength"); 
    $.Constant({Static:true , Public:false}, "Sch_MinLengthGtBaseMinLength", "Sch_MinLengthGtBaseMinLength"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxLengthGtBaseMaxLength", "Sch_MaxLengthGtBaseMaxLength"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxMinLengthBaseLength", "Sch_MaxMinLengthBaseLength"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxInclusiveMismatch", "Sch_MaxInclusiveMismatch"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxExclusiveMismatch", "Sch_MaxExclusiveMismatch"); 
    $.Constant({Static:true , Public:false}, "Sch_MinInclusiveMismatch", "Sch_MinInclusiveMismatch"); 
    $.Constant({Static:true , Public:false}, "Sch_MinExclusiveMismatch", "Sch_MinExclusiveMismatch"); 
    $.Constant({Static:true , Public:false}, "Sch_MinExlIncMismatch", "Sch_MinExlIncMismatch"); 
    $.Constant({Static:true , Public:false}, "Sch_MinExlMaxExlMismatch", "Sch_MinExlMaxExlMismatch"); 
    $.Constant({Static:true , Public:false}, "Sch_MinIncMaxExlMismatch", "Sch_MinIncMaxExlMismatch"); 
    $.Constant({Static:true , Public:false}, "Sch_MinIncExlMismatch", "Sch_MinIncExlMismatch"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxIncExlMismatch", "Sch_MaxIncExlMismatch"); 
    $.Constant({Static:true , Public:false}, "Sch_MaxExlIncMismatch", "Sch_MaxExlIncMismatch"); 
    $.Constant({Static:true , Public:false}, "Sch_TotalDigitsMismatch", "Sch_TotalDigitsMismatch"); 
    $.Constant({Static:true , Public:false}, "Sch_FacetBaseFixed", "Sch_FacetBaseFixed"); 
    $.Constant({Static:true , Public:false}, "Sch_WhiteSpaceRestriction1", "Sch_WhiteSpaceRestriction1"); 
    $.Constant({Static:true , Public:false}, "Sch_WhiteSpaceRestriction2", "Sch_WhiteSpaceRestriction2"); 
    $.Constant({Static:true , Public:false}, "Sch_UnSpecifiedDefaultAttributeInExternalStandalone", "Sch_UnSpecifiedDefaultAttributeInExternalStandalone"); 
    $.Constant({Static:true , Public:false}, "Sch_StandAloneNormalization", "Sch_StandAloneNormalization"); 
    $.Constant({Static:true , Public:false}, "Sch_XsiNilAndFixed", "Sch_XsiNilAndFixed"); 
    $.Constant({Static:true , Public:false}, "Sch_MixSchemaTypes", "Sch_MixSchemaTypes"); 
    $.Constant({Static:true , Public:false}, "Sch_XSDSchemaOnly", "Sch_XSDSchemaOnly"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidPublicAttribute", "Sch_InvalidPublicAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidSystemAttribute", "Sch_InvalidSystemAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_TypeAfterConstraints", "Sch_TypeAfterConstraints"); 
    $.Constant({Static:true , Public:false}, "Sch_XsiNilAndType", "Sch_XsiNilAndType"); 
    $.Constant({Static:true , Public:false}, "Sch_DupSimpleTypeChild", "Sch_DupSimpleTypeChild"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidIdAttribute", "Sch_InvalidIdAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidNameAttributeEx", "Sch_InvalidNameAttributeEx"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidAttribute", "Sch_InvalidAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_EmptyChoice", "Sch_EmptyChoice"); 
    $.Constant({Static:true , Public:false}, "Sch_DerivedNotFromBase", "Sch_DerivedNotFromBase"); 
    $.Constant({Static:true , Public:false}, "Sch_NeedSimpleTypeChild", "Sch_NeedSimpleTypeChild"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidCollection", "Sch_InvalidCollection"); 
    $.Constant({Static:true , Public:false}, "Sch_UnrefNS", "Sch_UnrefNS"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidSimpleTypeRestriction", "Sch_InvalidSimpleTypeRestriction"); 
    $.Constant({Static:true , Public:false}, "Sch_MultipleRedefine", "Sch_MultipleRedefine"); 
    $.Constant({Static:true , Public:false}, "Sch_NullValue", "Sch_NullValue"); 
    $.Constant({Static:true , Public:false}, "Sch_ComplexContentModel", "Sch_ComplexContentModel"); 
    $.Constant({Static:true , Public:false}, "Sch_SchemaNotPreprocessed", "Sch_SchemaNotPreprocessed"); 
    $.Constant({Static:true , Public:false}, "Sch_SchemaNotRemoved", "Sch_SchemaNotRemoved"); 
    $.Constant({Static:true , Public:false}, "Sch_ComponentAlreadySeenForNS", "Sch_ComponentAlreadySeenForNS"); 
    $.Constant({Static:true , Public:false}, "Sch_DefaultAttributeNotApplied", "Sch_DefaultAttributeNotApplied"); 
    $.Constant({Static:true , Public:false}, "Sch_NotXsiAttribute", "Sch_NotXsiAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_XsdDateTimeCompare", "Sch_XsdDateTimeCompare"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidNullCast", "Sch_InvalidNullCast"); 
    $.Constant({Static:true , Public:false}, "Sch_SchemaDoesNotExist", "Sch_SchemaDoesNotExist"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidDateTimeOption", "Sch_InvalidDateTimeOption"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidStartTransition", "Sch_InvalidStartTransition"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidStateTransition", "Sch_InvalidStateTransition"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidEndValidation", "Sch_InvalidEndValidation"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidEndElementCall", "Sch_InvalidEndElementCall"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidEndElementCallTyped", "Sch_InvalidEndElementCallTyped"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidEndElementMultiple", "Sch_InvalidEndElementMultiple"); 
    $.Constant({Static:true , Public:false}, "Sch_DuplicateAttribute", "Sch_DuplicateAttribute"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidPartialValidationType", "Sch_InvalidPartialValidationType"); 
    $.Constant({Static:true , Public:false}, "Sch_SchemaElementNameMismatch", "Sch_SchemaElementNameMismatch"); 
    $.Constant({Static:true , Public:false}, "Sch_SchemaAttributeNameMismatch", "Sch_SchemaAttributeNameMismatch"); 
    $.Constant({Static:true , Public:false}, "Sch_ValidateAttributeInvalidCall", "Sch_ValidateAttributeInvalidCall"); 
    $.Constant({Static:true , Public:false}, "Sch_ValidateElementInvalidCall", "Sch_ValidateElementInvalidCall"); 
    $.Constant({Static:true , Public:false}, "Sch_EnumNotStarted", "Sch_EnumNotStarted"); 
    $.Constant({Static:true , Public:false}, "Sch_EnumFinished", "Sch_EnumFinished"); 
    $.Constant({Static:true , Public:false}, "SchInf_schema", "SchInf_schema"); 
    $.Constant({Static:true , Public:false}, "SchInf_entity", "SchInf_entity"); 
    $.Constant({Static:true , Public:false}, "SchInf_simplecontent", "SchInf_simplecontent"); 
    $.Constant({Static:true , Public:false}, "SchInf_extension", "SchInf_extension"); 
    $.Constant({Static:true , Public:false}, "SchInf_particle", "SchInf_particle"); 
    $.Constant({Static:true , Public:false}, "SchInf_ct", "SchInf_ct"); 
    $.Constant({Static:true , Public:false}, "SchInf_seq", "SchInf_seq"); 
    $.Constant({Static:true , Public:false}, "SchInf_noseq", "SchInf_noseq"); 
    $.Constant({Static:true , Public:false}, "SchInf_noct", "SchInf_noct"); 
    $.Constant({Static:true , Public:false}, "SchInf_UnknownParticle", "SchInf_UnknownParticle"); 
    $.Constant({Static:true , Public:false}, "SchInf_schematype", "SchInf_schematype"); 
    $.Constant({Static:true , Public:false}, "SchInf_NoElement", "SchInf_NoElement"); 
    $.Constant({Static:true , Public:false}, "Xp_UnclosedString", "Xp_UnclosedString"); 
    $.Constant({Static:true , Public:false}, "Xp_ExprExpected", "Xp_ExprExpected"); 
    $.Constant({Static:true , Public:false}, "Xp_InvalidArgumentType", "Xp_InvalidArgumentType"); 
    $.Constant({Static:true , Public:false}, "Xp_InvalidNumArgs", "Xp_InvalidNumArgs"); 
    $.Constant({Static:true , Public:false}, "Xp_InvalidName", "Xp_InvalidName"); 
    $.Constant({Static:true , Public:false}, "Xp_InvalidToken", "Xp_InvalidToken"); 
    $.Constant({Static:true , Public:false}, "Xp_NodeSetExpected", "Xp_NodeSetExpected"); 
    $.Constant({Static:true , Public:false}, "Xp_NotSupported", "Xp_NotSupported"); 
    $.Constant({Static:true , Public:false}, "Xp_InvalidPattern", "Xp_InvalidPattern"); 
    $.Constant({Static:true , Public:false}, "Xp_InvalidKeyPattern", "Xp_InvalidKeyPattern"); 
    $.Constant({Static:true , Public:false}, "Xp_BadQueryObject", "Xp_BadQueryObject"); 
    $.Constant({Static:true , Public:false}, "Xp_UndefinedXsltContext", "Xp_UndefinedXsltContext"); 
    $.Constant({Static:true , Public:false}, "Xp_NoContext", "Xp_NoContext"); 
    $.Constant({Static:true , Public:false}, "Xp_UndefVar", "Xp_UndefVar"); 
    $.Constant({Static:true , Public:false}, "Xp_UndefFunc", "Xp_UndefFunc"); 
    $.Constant({Static:true , Public:false}, "Xp_FunctionFailed", "Xp_FunctionFailed"); 
    $.Constant({Static:true , Public:false}, "Xp_CurrentNotAllowed", "Xp_CurrentNotAllowed"); 
    $.Constant({Static:true , Public:false}, "Xdom_DualDocumentTypeNode", "Xdom_DualDocumentTypeNode"); 
    $.Constant({Static:true , Public:false}, "Xdom_DualDocumentElementNode", "Xdom_DualDocumentElementNode"); 
    $.Constant({Static:true , Public:false}, "Xdom_DualDeclarationNode", "Xdom_DualDeclarationNode"); 
    $.Constant({Static:true , Public:false}, "Xdom_Import", "Xdom_Import"); 
    $.Constant({Static:true , Public:false}, "Xdom_Import_NullNode", "Xdom_Import_NullNode"); 
    $.Constant({Static:true , Public:false}, "Xdom_NoRootEle", "Xdom_NoRootEle"); 
    $.Constant({Static:true , Public:false}, "Xdom_Attr_Name", "Xdom_Attr_Name"); 
    $.Constant({Static:true , Public:false}, "Xdom_AttrCol_Object", "Xdom_AttrCol_Object"); 
    $.Constant({Static:true , Public:false}, "Xdom_AttrCol_Insert", "Xdom_AttrCol_Insert"); 
    $.Constant({Static:true , Public:false}, "Xdom_NamedNode_Context", "Xdom_NamedNode_Context"); 
    $.Constant({Static:true , Public:false}, "Xdom_Version", "Xdom_Version"); 
    $.Constant({Static:true , Public:false}, "Xdom_standalone", "Xdom_standalone"); 
    $.Constant({Static:true , Public:false}, "Xdom_Ele_Prefix", "Xdom_Ele_Prefix"); 
    $.Constant({Static:true , Public:false}, "Xdom_Ent_Innertext", "Xdom_Ent_Innertext"); 
    $.Constant({Static:true , Public:false}, "Xdom_EntRef_SetVal", "Xdom_EntRef_SetVal"); 
    $.Constant({Static:true , Public:false}, "Xdom_WS_Char", "Xdom_WS_Char"); 
    $.Constant({Static:true , Public:false}, "Xdom_Node_SetVal", "Xdom_Node_SetVal"); 
    $.Constant({Static:true , Public:false}, "Xdom_Empty_LocalName", "Xdom_Empty_LocalName"); 
    $.Constant({Static:true , Public:false}, "Xdom_Set_InnerXml", "Xdom_Set_InnerXml"); 
    $.Constant({Static:true , Public:false}, "Xdom_Attr_InUse", "Xdom_Attr_InUse"); 
    $.Constant({Static:true , Public:false}, "Xdom_Enum_ElementList", "Xdom_Enum_ElementList"); 
    $.Constant({Static:true , Public:false}, "Xdom_Invalid_NT_String", "Xdom_Invalid_NT_String"); 
    $.Constant({Static:true , Public:false}, "Xdom_InvalidCharacter_EntityReference", "Xdom_InvalidCharacter_EntityReference"); 
    $.Constant({Static:true , Public:false}, "Xdom_IndexOutOfRange", "Xdom_IndexOutOfRange"); 
    $.Constant({Static:true , Public:false}, "Xpn_BadPosition", "Xpn_BadPosition"); 
    $.Constant({Static:true , Public:false}, "Xpn_MissingParent", "Xpn_MissingParent"); 
    $.Constant({Static:true , Public:false}, "Xpn_NoContent", "Xpn_NoContent"); 
    $.Constant({Static:true , Public:false}, "Xdom_Load_NoDocument", "Xdom_Load_NoDocument"); 
    $.Constant({Static:true , Public:false}, "Xdom_Load_NoReader", "Xdom_Load_NoReader"); 
    $.Constant({Static:true , Public:false}, "Xdom_Node_Null_Doc", "Xdom_Node_Null_Doc"); 
    $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_Child", "Xdom_Node_Insert_Child"); 
    $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_Contain", "Xdom_Node_Insert_Contain"); 
    $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_Path", "Xdom_Node_Insert_Path"); 
    $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_Context", "Xdom_Node_Insert_Context"); 
    $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_Location", "Xdom_Node_Insert_Location"); 
    $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_TypeConflict", "Xdom_Node_Insert_TypeConflict"); 
    $.Constant({Static:true , Public:false}, "Xdom_Node_Remove_Contain", "Xdom_Node_Remove_Contain"); 
    $.Constant({Static:true , Public:false}, "Xdom_Node_Remove_Child", "Xdom_Node_Remove_Child"); 
    $.Constant({Static:true , Public:false}, "Xdom_Node_Modify_ReadOnly", "Xdom_Node_Modify_ReadOnly"); 
    $.Constant({Static:true , Public:false}, "Xdom_TextNode_SplitText", "Xdom_TextNode_SplitText"); 
    $.Constant({Static:true , Public:false}, "Xdom_Attr_Reserved_XmlNS", "Xdom_Attr_Reserved_XmlNS"); 
    $.Constant({Static:true , Public:false}, "Xdom_Node_Cloning", "Xdom_Node_Cloning"); 
    $.Constant({Static:true , Public:false}, "Xnr_ResolveEntity", "Xnr_ResolveEntity"); 
    $.Constant({Static:true , Public:false}, "XmlMissingType", "XmlMissingType"); 
    $.Constant({Static:true , Public:false}, "XmlUnsupportedType", "XmlUnsupportedType"); 
    $.Constant({Static:true , Public:false}, "XmlSerializerUnsupportedType", "XmlSerializerUnsupportedType"); 
    $.Constant({Static:true , Public:false}, "XmlSerializerUnsupportedMember", "XmlSerializerUnsupportedMember"); 
    $.Constant({Static:true , Public:false}, "XmlUnsupportedTypeKind", "XmlUnsupportedTypeKind"); 
    $.Constant({Static:true , Public:false}, "XmlUnsupportedSoapTypeKind", "XmlUnsupportedSoapTypeKind"); 
    $.Constant({Static:true , Public:false}, "XmlUnsupportedIDictionary", "XmlUnsupportedIDictionary"); 
    $.Constant({Static:true , Public:false}, "XmlUnsupportedIDictionaryDetails", "XmlUnsupportedIDictionaryDetails"); 
    $.Constant({Static:true , Public:false}, "XmlDuplicateTypeName", "XmlDuplicateTypeName"); 
    $.Constant({Static:true , Public:false}, "XmlSerializableNameMissing1", "XmlSerializableNameMissing1"); 
    $.Constant({Static:true , Public:false}, "XmlConstructorInaccessible", "XmlConstructorInaccessible"); 
    $.Constant({Static:true , Public:false}, "XmlTypeInaccessible", "XmlTypeInaccessible"); 
    $.Constant({Static:true , Public:false}, "XmlTypeStatic", "XmlTypeStatic"); 
    $.Constant({Static:true , Public:false}, "XmlNoDefaultAccessors", "XmlNoDefaultAccessors"); 
    $.Constant({Static:true , Public:false}, "XmlNoAddMethod", "XmlNoAddMethod"); 
    $.Constant({Static:true , Public:false}, "XmlAttributeSetAgain", "XmlAttributeSetAgain"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalWildcard", "XmlIllegalWildcard"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalArrayElement", "XmlIllegalArrayElement"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalForm", "XmlIllegalForm"); 
    $.Constant({Static:true , Public:false}, "XmlBareTextMember", "XmlBareTextMember"); 
    $.Constant({Static:true , Public:false}, "XmlBareAttributeMember", "XmlBareAttributeMember"); 
    $.Constant({Static:true , Public:false}, "XmlReflectionError", "XmlReflectionError"); 
    $.Constant({Static:true , Public:false}, "XmlTypeReflectionError", "XmlTypeReflectionError"); 
    $.Constant({Static:true , Public:false}, "XmlPropertyReflectionError", "XmlPropertyReflectionError"); 
    $.Constant({Static:true , Public:false}, "XmlFieldReflectionError", "XmlFieldReflectionError"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidDataTypeUsage", "XmlInvalidDataTypeUsage"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidXsdDataType", "XmlInvalidXsdDataType"); 
    $.Constant({Static:true , Public:false}, "XmlDataTypeMismatch", "XmlDataTypeMismatch"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalTypeContext", "XmlIllegalTypeContext"); 
    $.Constant({Static:true , Public:false}, "XmlUdeclaredXsdType", "XmlUdeclaredXsdType"); 
    $.Constant({Static:true , Public:false}, "XmlAnyElementNamespace", "XmlAnyElementNamespace"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidConstantAttribute", "XmlInvalidConstantAttribute"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalDefault", "XmlIllegalDefault"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalAttributesArrayAttribute", "XmlIllegalAttributesArrayAttribute"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalElementsArrayAttribute", "XmlIllegalElementsArrayAttribute"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalArrayArrayAttribute", "XmlIllegalArrayArrayAttribute"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalAttribute", "XmlIllegalAttribute"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalType", "XmlIllegalType"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalAttrOrText", "XmlIllegalAttrOrText"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalSoapAttribute", "XmlIllegalSoapAttribute"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalAttrOrTextInterface", "XmlIllegalAttrOrTextInterface"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalAttributeFlagsArray", "XmlIllegalAttributeFlagsArray"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalAnyElement", "XmlIllegalAnyElement"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidIsNullable", "XmlInvalidIsNullable"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidNotNullable", "XmlInvalidNotNullable"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidFormUnqualified", "XmlInvalidFormUnqualified"); 
    $.Constant({Static:true , Public:false}, "XmlDuplicateNamespace", "XmlDuplicateNamespace"); 
    $.Constant({Static:true , Public:false}, "XmlElementHasNoName", "XmlElementHasNoName"); 
    $.Constant({Static:true , Public:false}, "XmlAttributeHasNoName", "XmlAttributeHasNoName"); 
    $.Constant({Static:true , Public:false}, "XmlElementImportedTwice", "XmlElementImportedTwice"); 
    $.Constant({Static:true , Public:false}, "XmlHiddenMember", "XmlHiddenMember"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidXmlOverride", "XmlInvalidXmlOverride"); 
    $.Constant({Static:true , Public:false}, "XmlMembersDeriveError", "XmlMembersDeriveError"); 
    $.Constant({Static:true , Public:false}, "XmlTypeUsedTwice", "XmlTypeUsedTwice"); 
    $.Constant({Static:true , Public:false}, "XmlMissingGroup", "XmlMissingGroup"); 
    $.Constant({Static:true , Public:false}, "XmlMissingAttributeGroup", "XmlMissingAttributeGroup"); 
    $.Constant({Static:true , Public:false}, "XmlMissingDataType", "XmlMissingDataType"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidEncoding", "XmlInvalidEncoding"); 
    $.Constant({Static:true , Public:false}, "XmlMissingElement", "XmlMissingElement"); 
    $.Constant({Static:true , Public:false}, "XmlMissingAttribute", "XmlMissingAttribute"); 
    $.Constant({Static:true , Public:false}, "XmlMissingMethodEnum", "XmlMissingMethodEnum"); 
    $.Constant({Static:true , Public:false}, "XmlNoAttributeHere", "XmlNoAttributeHere"); 
    $.Constant({Static:true , Public:false}, "XmlNeedAttributeHere", "XmlNeedAttributeHere"); 
    $.Constant({Static:true , Public:false}, "XmlElementNameMismatch", "XmlElementNameMismatch"); 
    $.Constant({Static:true , Public:false}, "XmlUnsupportedDefaultType", "XmlUnsupportedDefaultType"); 
    $.Constant({Static:true , Public:false}, "XmlUnsupportedDefaultValue", "XmlUnsupportedDefaultValue"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidDefaultValue", "XmlInvalidDefaultValue"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidDefaultEnumValue", "XmlInvalidDefaultEnumValue"); 
    $.Constant({Static:true , Public:false}, "XmlUnknownNode", "XmlUnknownNode"); 
    $.Constant({Static:true , Public:false}, "XmlUnknownConstant", "XmlUnknownConstant"); 
    $.Constant({Static:true , Public:false}, "XmlSerializeError", "XmlSerializeError"); 
    $.Constant({Static:true , Public:false}, "XmlSerializeErrorDetails", "XmlSerializeErrorDetails"); 
    $.Constant({Static:true , Public:false}, "XmlCompilerError", "XmlCompilerError"); 
    $.Constant({Static:true , Public:false}, "XmlSchemaDuplicateNamespace", "XmlSchemaDuplicateNamespace"); 
    $.Constant({Static:true , Public:false}, "XmlSchemaCompiled", "XmlSchemaCompiled"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidSchemaExtension", "XmlInvalidSchemaExtension"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidArrayDimentions", "XmlInvalidArrayDimentions"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidArrayTypeName", "XmlInvalidArrayTypeName"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidArrayTypeNamespace", "XmlInvalidArrayTypeNamespace"); 
    $.Constant({Static:true , Public:false}, "XmlMissingArrayType", "XmlMissingArrayType"); 
    $.Constant({Static:true , Public:false}, "XmlEmptyArrayType", "XmlEmptyArrayType"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidArraySyntax", "XmlInvalidArraySyntax"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidArrayTypeSyntax", "XmlInvalidArrayTypeSyntax"); 
    $.Constant({Static:true , Public:false}, "XmlMismatchedArrayBrackets", "XmlMismatchedArrayBrackets"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidArrayLength", "XmlInvalidArrayLength"); 
    $.Constant({Static:true , Public:false}, "XmlMissingHref", "XmlMissingHref"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidHref", "XmlInvalidHref"); 
    $.Constant({Static:true , Public:false}, "XmlUnknownType", "XmlUnknownType"); 
    $.Constant({Static:true , Public:false}, "XmlAbstractType", "XmlAbstractType"); 
    $.Constant({Static:true , Public:false}, "XmlMappingsScopeMismatch", "XmlMappingsScopeMismatch"); 
    $.Constant({Static:true , Public:false}, "XmlMethodTypeNameConflict", "XmlMethodTypeNameConflict"); 
    $.Constant({Static:true , Public:false}, "XmlCannotReconcileAccessor", "XmlCannotReconcileAccessor"); 
    $.Constant({Static:true , Public:false}, "XmlCannotReconcileAttributeAccessor", "XmlCannotReconcileAttributeAccessor"); 
    $.Constant({Static:true , Public:false}, "XmlCannotReconcileAccessorDefault", "XmlCannotReconcileAccessorDefault"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidTypeAttributes", "XmlInvalidTypeAttributes"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidAttributeUse", "XmlInvalidAttributeUse"); 
    $.Constant({Static:true , Public:false}, "XmlTypesDuplicate", "XmlTypesDuplicate"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidSoapArray", "XmlInvalidSoapArray"); 
    $.Constant({Static:true , Public:false}, "XmlCannotIncludeInSchema", "XmlCannotIncludeInSchema"); 
    $.Constant({Static:true , Public:false}, "XmlSoapCannotIncludeInSchema", "XmlSoapCannotIncludeInSchema"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidSerializable", "XmlInvalidSerializable"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidUseOfType", "XmlInvalidUseOfType"); 
    $.Constant({Static:true , Public:false}, "XmlUnxpectedType", "XmlUnxpectedType"); 
    $.Constant({Static:true , Public:false}, "XmlUnknownAnyElement", "XmlUnknownAnyElement"); 
    $.Constant({Static:true , Public:false}, "XmlMultipleAttributeOverrides", "XmlMultipleAttributeOverrides"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidEnumAttribute", "XmlInvalidEnumAttribute"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidReturnPosition", "XmlInvalidReturnPosition"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidElementAttribute", "XmlInvalidElementAttribute"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidVoid", "XmlInvalidVoid"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidContent", "XmlInvalidContent"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidSchemaElementType", "XmlInvalidSchemaElementType"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidSubstitutionGroupUse", "XmlInvalidSubstitutionGroupUse"); 
    $.Constant({Static:true , Public:false}, "XmlElementMissingType", "XmlElementMissingType"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidAnyAttributeUse", "XmlInvalidAnyAttributeUse"); 
    $.Constant({Static:true , Public:false}, "XmlSoapInvalidAttributeUse", "XmlSoapInvalidAttributeUse"); 
    $.Constant({Static:true , Public:false}, "XmlSoapInvalidChoice", "XmlSoapInvalidChoice"); 
    $.Constant({Static:true , Public:false}, "XmlSoapUnsupportedGroupRef", "XmlSoapUnsupportedGroupRef"); 
    $.Constant({Static:true , Public:false}, "XmlSoapUnsupportedGroupRepeat", "XmlSoapUnsupportedGroupRepeat"); 
    $.Constant({Static:true , Public:false}, "XmlSoapUnsupportedGroupNested", "XmlSoapUnsupportedGroupNested"); 
    $.Constant({Static:true , Public:false}, "XmlSoapUnsupportedGroupAny", "XmlSoapUnsupportedGroupAny"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidEnumContent", "XmlInvalidEnumContent"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidAttributeType", "XmlInvalidAttributeType"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidBaseType", "XmlInvalidBaseType"); 
    $.Constant({Static:true , Public:false}, "XmlPrimitiveBaseType", "XmlPrimitiveBaseType"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidIdentifier", "XmlInvalidIdentifier"); 
    $.Constant({Static:true , Public:false}, "XmlGenError", "XmlGenError"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidXmlns", "XmlInvalidXmlns"); 
    $.Constant({Static:true , Public:false}, "XmlCircularReference", "XmlCircularReference"); 
    $.Constant({Static:true , Public:false}, "XmlCircularReference2", "XmlCircularReference2"); 
    $.Constant({Static:true , Public:false}, "XmlAnonymousBaseType", "XmlAnonymousBaseType"); 
    $.Constant({Static:true , Public:false}, "XmlMissingSchema", "XmlMissingSchema"); 
    $.Constant({Static:true , Public:false}, "XmlNoSerializableMembers", "XmlNoSerializableMembers"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalOverride", "XmlIllegalOverride"); 
    $.Constant({Static:true , Public:false}, "XmlReadOnlyCollection", "XmlReadOnlyCollection"); 
    $.Constant({Static:true , Public:false}, "XmlRpcNestedValueType", "XmlRpcNestedValueType"); 
    $.Constant({Static:true , Public:false}, "XmlRpcRefsInValueType", "XmlRpcRefsInValueType"); 
    $.Constant({Static:true , Public:false}, "XmlRpcArrayOfValueTypes", "XmlRpcArrayOfValueTypes"); 
    $.Constant({Static:true , Public:false}, "XmlDuplicateElementName", "XmlDuplicateElementName"); 
    $.Constant({Static:true , Public:false}, "XmlDuplicateAttributeName", "XmlDuplicateAttributeName"); 
    $.Constant({Static:true , Public:false}, "XmlBadBaseElement", "XmlBadBaseElement"); 
    $.Constant({Static:true , Public:false}, "XmlBadBaseType", "XmlBadBaseType"); 
    $.Constant({Static:true , Public:false}, "XmlUndefinedAlias", "XmlUndefinedAlias"); 
    $.Constant({Static:true , Public:false}, "XmlChoiceIdentifierType", "XmlChoiceIdentifierType"); 
    $.Constant({Static:true , Public:false}, "XmlChoiceIdentifierArrayType", "XmlChoiceIdentifierArrayType"); 
    $.Constant({Static:true , Public:false}, "XmlChoiceIdentifierTypeEnum", "XmlChoiceIdentifierTypeEnum"); 
    $.Constant({Static:true , Public:false}, "XmlChoiceIdentiferMemberMissing", "XmlChoiceIdentiferMemberMissing"); 
    $.Constant({Static:true , Public:false}, "XmlChoiceIdentiferAmbiguous", "XmlChoiceIdentiferAmbiguous"); 
    $.Constant({Static:true , Public:false}, "XmlChoiceIdentiferMissing", "XmlChoiceIdentiferMissing"); 
    $.Constant({Static:true , Public:false}, "XmlChoiceMissingValue", "XmlChoiceMissingValue"); 
    $.Constant({Static:true , Public:false}, "XmlChoiceMissingAnyValue", "XmlChoiceMissingAnyValue"); 
    $.Constant({Static:true , Public:false}, "XmlChoiceMismatchChoiceException", "XmlChoiceMismatchChoiceException"); 
    $.Constant({Static:true , Public:false}, "XmlArrayItemAmbiguousTypes", "XmlArrayItemAmbiguousTypes"); 
    $.Constant({Static:true , Public:false}, "XmlUnsupportedInterface", "XmlUnsupportedInterface"); 
    $.Constant({Static:true , Public:false}, "XmlUnsupportedInterfaceDetails", "XmlUnsupportedInterfaceDetails"); 
    $.Constant({Static:true , Public:false}, "XmlUnsupportedRank", "XmlUnsupportedRank"); 
    $.Constant({Static:true , Public:false}, "XmlUnsupportedInheritance", "XmlUnsupportedInheritance"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalMultipleText", "XmlIllegalMultipleText"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalMultipleTextMembers", "XmlIllegalMultipleTextMembers"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalArrayTextAttribute", "XmlIllegalArrayTextAttribute"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalTypedTextAttribute", "XmlIllegalTypedTextAttribute"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalSimpleContentExtension", "XmlIllegalSimpleContentExtension"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidCast", "XmlInvalidCast"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidCastWithId", "XmlInvalidCastWithId"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidArrayRef", "XmlInvalidArrayRef"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidNullCast", "XmlInvalidNullCast"); 
    $.Constant({Static:true , Public:false}, "XmlMultipleXmlns", "XmlMultipleXmlns"); 
    $.Constant({Static:true , Public:false}, "XmlMultipleXmlnsMembers", "XmlMultipleXmlnsMembers"); 
    $.Constant({Static:true , Public:false}, "XmlXmlnsInvalidType", "XmlXmlnsInvalidType"); 
    $.Constant({Static:true , Public:false}, "XmlSoleXmlnsAttribute", "XmlSoleXmlnsAttribute"); 
    $.Constant({Static:true , Public:false}, "XmlConstructorHasSecurityAttributes", "XmlConstructorHasSecurityAttributes"); 
    $.Constant({Static:true , Public:false}, "XmlPropertyHasSecurityAttributes", "XmlPropertyHasSecurityAttributes"); 
    $.Constant({Static:true , Public:false}, "XmlMethodHasSecurityAttributes", "XmlMethodHasSecurityAttributes"); 
    $.Constant({Static:true , Public:false}, "XmlDefaultAccessorHasSecurityAttributes", "XmlDefaultAccessorHasSecurityAttributes"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidChoiceIdentifierValue", "XmlInvalidChoiceIdentifierValue"); 
    $.Constant({Static:true , Public:false}, "XmlAnyElementDuplicate", "XmlAnyElementDuplicate"); 
    $.Constant({Static:true , Public:false}, "XmlChoiceIdDuplicate", "XmlChoiceIdDuplicate"); 
    $.Constant({Static:true , Public:false}, "XmlChoiceIdentifierMismatch", "XmlChoiceIdentifierMismatch"); 
    $.Constant({Static:true , Public:false}, "XmlUnsupportedRedefine", "XmlUnsupportedRedefine"); 
    $.Constant({Static:true , Public:false}, "XmlDuplicateElementInScope", "XmlDuplicateElementInScope"); 
    $.Constant({Static:true , Public:false}, "XmlDuplicateElementInScope1", "XmlDuplicateElementInScope1"); 
    $.Constant({Static:true , Public:false}, "XmlNoPartialTrust", "XmlNoPartialTrust"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidEncodingNotEncoded1", "XmlInvalidEncodingNotEncoded1"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidEncoding3", "XmlInvalidEncoding3"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidSpecifiedType", "XmlInvalidSpecifiedType"); 
    $.Constant({Static:true , Public:false}, "XmlUnsupportedOpenGenericType", "XmlUnsupportedOpenGenericType"); 
    $.Constant({Static:true , Public:false}, "XmlMismatchSchemaObjects", "XmlMismatchSchemaObjects"); 
    $.Constant({Static:true , Public:false}, "XmlCircularTypeReference", "XmlCircularTypeReference"); 
    $.Constant({Static:true , Public:false}, "XmlCircularGroupReference", "XmlCircularGroupReference"); 
    $.Constant({Static:true , Public:false}, "XmlRpcLitElementNamespace", "XmlRpcLitElementNamespace"); 
    $.Constant({Static:true , Public:false}, "XmlRpcLitElementNullable", "XmlRpcLitElementNullable"); 
    $.Constant({Static:true , Public:false}, "XmlRpcLitElements", "XmlRpcLitElements"); 
    $.Constant({Static:true , Public:false}, "XmlRpcLitArrayElement", "XmlRpcLitArrayElement"); 
    $.Constant({Static:true , Public:false}, "XmlRpcLitAttributeAttributes", "XmlRpcLitAttributeAttributes"); 
    $.Constant({Static:true , Public:false}, "XmlRpcLitAttributes", "XmlRpcLitAttributes"); 
    $.Constant({Static:true , Public:false}, "XmlSequenceMembers", "XmlSequenceMembers"); 
    $.Constant({Static:true , Public:false}, "XmlRpcLitXmlns", "XmlRpcLitXmlns"); 
    $.Constant({Static:true , Public:false}, "XmlDuplicateNs", "XmlDuplicateNs"); 
    $.Constant({Static:true , Public:false}, "XmlAnonymousInclude", "XmlAnonymousInclude"); 
    $.Constant({Static:true , Public:false}, "XmlSchemaIncludeLocation", "XmlSchemaIncludeLocation"); 
    $.Constant({Static:true , Public:false}, "XmlSerializableSchemaError", "XmlSerializableSchemaError"); 
    $.Constant({Static:true , Public:false}, "XmlGetSchemaMethodName", "XmlGetSchemaMethodName"); 
    $.Constant({Static:true , Public:false}, "XmlGetSchemaMethodMissing", "XmlGetSchemaMethodMissing"); 
    $.Constant({Static:true , Public:false}, "XmlGetSchemaMethodReturnType", "XmlGetSchemaMethodReturnType"); 
    $.Constant({Static:true , Public:false}, "XmlGetSchemaEmptyTypeName", "XmlGetSchemaEmptyTypeName"); 
    $.Constant({Static:true , Public:false}, "XmlGetSchemaTypeMissing", "XmlGetSchemaTypeMissing"); 
    $.Constant({Static:true , Public:false}, "XmlGetSchemaInclude", "XmlGetSchemaInclude"); 
    $.Constant({Static:true , Public:false}, "XmlSerializableAttributes", "XmlSerializableAttributes"); 
    $.Constant({Static:true , Public:false}, "XmlSerializableMergeItem", "XmlSerializableMergeItem"); 
    $.Constant({Static:true , Public:false}, "XmlSerializableBadDerivation", "XmlSerializableBadDerivation"); 
    $.Constant({Static:true , Public:false}, "XmlSerializableMissingClrType", "XmlSerializableMissingClrType"); 
    $.Constant({Static:true , Public:false}, "XmlCircularDerivation", "XmlCircularDerivation"); 
    $.Constant({Static:true , Public:false}, "XmlSerializerAccessDenied", "XmlSerializerAccessDenied"); 
    $.Constant({Static:true , Public:false}, "XmlIdentityAccessDenied", "XmlIdentityAccessDenied"); 
    $.Constant({Static:true , Public:false}, "XmlMelformMapping", "XmlMelformMapping"); 
    $.Constant({Static:true , Public:false}, "XmlSerializableWriteLess", "XmlSerializableWriteLess"); 
    $.Constant({Static:true , Public:false}, "XmlSerializableWriteMore", "XmlSerializableWriteMore"); 
    $.Constant({Static:true , Public:false}, "XmlSerializableReadMore", "XmlSerializableReadMore"); 
    $.Constant({Static:true , Public:false}, "XmlSerializableReadLess", "XmlSerializableReadLess"); 
    $.Constant({Static:true , Public:false}, "XmlSerializableIllegalOperation", "XmlSerializableIllegalOperation"); 
    $.Constant({Static:true , Public:false}, "XmlSchemaSyntaxErrorDetails", "XmlSchemaSyntaxErrorDetails"); 
    $.Constant({Static:true , Public:false}, "XmlSchemaElementReference", "XmlSchemaElementReference"); 
    $.Constant({Static:true , Public:false}, "XmlSchemaAttributeReference", "XmlSchemaAttributeReference"); 
    $.Constant({Static:true , Public:false}, "XmlSchemaItem", "XmlSchemaItem"); 
    $.Constant({Static:true , Public:false}, "XmlSchemaNamedItem", "XmlSchemaNamedItem"); 
    $.Constant({Static:true , Public:false}, "XmlSchemaContentDef", "XmlSchemaContentDef"); 
    $.Constant({Static:true , Public:false}, "XmlSchema", "XmlSchema"); 
    $.Constant({Static:true , Public:false}, "XmlSerializerCompileFailed", "XmlSerializerCompileFailed"); 
    $.Constant({Static:true , Public:false}, "XmlSerializableRootDupName", "XmlSerializableRootDupName"); 
    $.Constant({Static:true , Public:false}, "XmlDropDefaultAttribute", "XmlDropDefaultAttribute"); 
    $.Constant({Static:true , Public:false}, "XmlDropAttributeValue", "XmlDropAttributeValue"); 
    $.Constant({Static:true , Public:false}, "XmlDropArrayAttributeValue", "XmlDropArrayAttributeValue"); 
    $.Constant({Static:true , Public:false}, "XmlDropNonPrimitiveAttributeValue", "XmlDropNonPrimitiveAttributeValue"); 
    $.Constant({Static:true , Public:false}, "XmlNotKnownDefaultValue", "XmlNotKnownDefaultValue"); 
    $.Constant({Static:true , Public:false}, "XmlRemarks", "XmlRemarks"); 
    $.Constant({Static:true , Public:false}, "XmlCodegenWarningDetails", "XmlCodegenWarningDetails"); 
    $.Constant({Static:true , Public:false}, "XmlExtensionComment", "XmlExtensionComment"); 
    $.Constant({Static:true , Public:false}, "XmlExtensionDuplicateDefinition", "XmlExtensionDuplicateDefinition"); 
    $.Constant({Static:true , Public:false}, "XmlImporterExtensionBadLocalTypeName", "XmlImporterExtensionBadLocalTypeName"); 
    $.Constant({Static:true , Public:false}, "XmlImporterExtensionBadTypeName", "XmlImporterExtensionBadTypeName"); 
    $.Constant({Static:true , Public:false}, "XmlConfigurationDuplicateExtension", "XmlConfigurationDuplicateExtension"); 
    $.Constant({Static:true , Public:false}, "XmlPregenMissingDirectory", "XmlPregenMissingDirectory"); 
    $.Constant({Static:true , Public:false}, "XmlPregenMissingTempDirectory", "XmlPregenMissingTempDirectory"); 
    $.Constant({Static:true , Public:false}, "XmlPregenTypeDynamic", "XmlPregenTypeDynamic"); 
    $.Constant({Static:true , Public:false}, "XmlSerializerExpiredDetails", "XmlSerializerExpiredDetails"); 
    $.Constant({Static:true , Public:false}, "XmlSerializerExpired", "XmlSerializerExpired"); 
    $.Constant({Static:true , Public:false}, "XmlPregenAssemblyDynamic", "XmlPregenAssemblyDynamic"); 
    $.Constant({Static:true , Public:false}, "XmlNotSerializable", "XmlNotSerializable"); 
    $.Constant({Static:true , Public:false}, "XmlPregenOrphanType", "XmlPregenOrphanType"); 
    $.Constant({Static:true , Public:false}, "XmlPregenCannotLoad", "XmlPregenCannotLoad"); 
    $.Constant({Static:true , Public:false}, "XmlPregenInvalidXmlSerializerAssemblyAttribute", "XmlPregenInvalidXmlSerializerAssemblyAttribute"); 
    $.Constant({Static:true , Public:false}, "XmlSequenceInconsistent", "XmlSequenceInconsistent"); 
    $.Constant({Static:true , Public:false}, "XmlSequenceUnique", "XmlSequenceUnique"); 
    $.Constant({Static:true , Public:false}, "XmlSequenceHierarchy", "XmlSequenceHierarchy"); 
    $.Constant({Static:true , Public:false}, "XmlSequenceMatch", "XmlSequenceMatch"); 
    $.Constant({Static:true , Public:false}, "XmlDisallowNegativeValues", "XmlDisallowNegativeValues"); 
    $.Constant({Static:true , Public:false}, "XmlInternalError", "XmlInternalError"); 
    $.Constant({Static:true , Public:false}, "XmlInternalErrorDetails", "XmlInternalErrorDetails"); 
    $.Constant({Static:true , Public:false}, "XmlInternalErrorMethod", "XmlInternalErrorMethod"); 
    $.Constant({Static:true , Public:false}, "XmlInternalErrorReaderAdvance", "XmlInternalErrorReaderAdvance"); 
    $.Constant({Static:true , Public:false}, "XmlNonCLSCompliantException", "XmlNonCLSCompliantException"); 
    $.Constant({Static:true , Public:false}, "XmlConvert_BadFormat", "XmlConvert_BadFormat"); 
    $.Constant({Static:true , Public:false}, "XmlConvert_Overflow", "XmlConvert_Overflow"); 
    $.Constant({Static:true , Public:false}, "XmlConvert_TypeBadMapping", "XmlConvert_TypeBadMapping"); 
    $.Constant({Static:true , Public:false}, "XmlConvert_TypeBadMapping2", "XmlConvert_TypeBadMapping2"); 
    $.Constant({Static:true , Public:false}, "XmlConvert_TypeListBadMapping", "XmlConvert_TypeListBadMapping"); 
    $.Constant({Static:true , Public:false}, "XmlConvert_TypeListBadMapping2", "XmlConvert_TypeListBadMapping2"); 
    $.Constant({Static:true , Public:false}, "XmlConvert_TypeToString", "XmlConvert_TypeToString"); 
    $.Constant({Static:true , Public:false}, "XmlConvert_TypeFromString", "XmlConvert_TypeFromString"); 
    $.Constant({Static:true , Public:false}, "XmlConvert_TypeNoPrefix", "XmlConvert_TypeNoPrefix"); 
    $.Constant({Static:true , Public:false}, "XmlConvert_TypeNoNamespace", "XmlConvert_TypeNoNamespace"); 
    $.Constant({Static:true , Public:false}, "RefSyntaxNotSupportedForElements0", "RefSyntaxNotSupportedForElements0"); 
    $.Constant({Static:true , Public:false}, "XPathDocument_MissingSchemas", "XPathDocument_MissingSchemas"); 
    $.Constant({Static:true , Public:false}, "XPathDocument_NotEnoughSchemaInfo", "XPathDocument_NotEnoughSchemaInfo"); 
    $.Constant({Static:true , Public:false}, "XPathDocument_ValidateInvalidNodeType", "XPathDocument_ValidateInvalidNodeType"); 
    $.Constant({Static:true , Public:false}, "XPathDocument_SchemaSetNotAllowed", "XPathDocument_SchemaSetNotAllowed"); 
    $.Constant({Static:true , Public:false}, "XmlBin_MissingEndCDATA", "XmlBin_MissingEndCDATA"); 
    $.Constant({Static:true , Public:false}, "XmlBin_InvalidQNameID", "XmlBin_InvalidQNameID"); 
    $.Constant({Static:true , Public:false}, "XmlBinary_UnexpectedToken", "XmlBinary_UnexpectedToken"); 
    $.Constant({Static:true , Public:false}, "XmlBinary_InvalidSqlDecimal", "XmlBinary_InvalidSqlDecimal"); 
    $.Constant({Static:true , Public:false}, "XmlBinary_InvalidSignature", "XmlBinary_InvalidSignature"); 
    $.Constant({Static:true , Public:false}, "XmlBinary_InvalidProtocolVersion", "XmlBinary_InvalidProtocolVersion"); 
    $.Constant({Static:true , Public:false}, "XmlBinary_UnsupportedCodePage", "XmlBinary_UnsupportedCodePage"); 
    $.Constant({Static:true , Public:false}, "XmlBinary_InvalidStandalone", "XmlBinary_InvalidStandalone"); 
    $.Constant({Static:true , Public:false}, "XmlBinary_NoParserContext", "XmlBinary_NoParserContext"); 
    $.Constant({Static:true , Public:false}, "XmlBinary_ListsOfValuesNotSupported", "XmlBinary_ListsOfValuesNotSupported"); 
    $.Constant({Static:true , Public:false}, "XmlBinary_CastNotSupported", "XmlBinary_CastNotSupported"); 
    $.Constant({Static:true , Public:false}, "XmlBinary_NoRemapPrefix", "XmlBinary_NoRemapPrefix"); 
    $.Constant({Static:true , Public:false}, "XmlBinary_AttrWithNsNoPrefix", "XmlBinary_AttrWithNsNoPrefix"); 
    $.Constant({Static:true , Public:false}, "XmlBinary_ValueTooBig", "XmlBinary_ValueTooBig"); 
    $.Constant({Static:true , Public:false}, "SqlTypes_ArithOverflow", "SqlTypes_ArithOverflow"); 
    $.Constant({Static:true , Public:false}, "SqlTypes_ArithTruncation", "SqlTypes_ArithTruncation"); 
    $.Constant({Static:true , Public:false}, "SqlTypes_DivideByZero", "SqlTypes_DivideByZero"); 
    $.Constant({Static:true , Public:false}, "Enc_InvalidByteInEncoding", "Enc_InvalidByteInEncoding"); 
    $.Constant({Static:true , Public:false}, "Arg_ExpectingXmlTextReader", "Arg_ExpectingXmlTextReader"); 
    $.Constant({Static:true , Public:false}, "Arg_CannotCreateNode", "Arg_CannotCreateNode"); 
    $.Constant({Static:true , Public:false}, "Xml_BadComment", "Xml_BadComment"); 
    $.Constant({Static:true , Public:false}, "Xml_NumEntityOverflow", "Xml_NumEntityOverflow"); 
    $.Constant({Static:true , Public:false}, "Xml_UnexpectedCharacter", "Xml_UnexpectedCharacter"); 
    $.Constant({Static:true , Public:false}, "Xml_UnexpectedToken1", "Xml_UnexpectedToken1"); 
    $.Constant({Static:true , Public:false}, "Xml_TagMismatchFileName", "Xml_TagMismatchFileName"); 
    $.Constant({Static:true , Public:false}, "Xml_ReservedNs", "Xml_ReservedNs"); 
    $.Constant({Static:true , Public:false}, "Xml_BadElementData", "Xml_BadElementData"); 
    $.Constant({Static:true , Public:false}, "Xml_UnexpectedElement", "Xml_UnexpectedElement"); 
    $.Constant({Static:true , Public:false}, "Xml_TagNotInTheSameEntity", "Xml_TagNotInTheSameEntity"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidPartialContentData", "Xml_InvalidPartialContentData"); 
    $.Constant({Static:true , Public:false}, "Xml_CanNotStartWithXmlInNamespace", "Xml_CanNotStartWithXmlInNamespace"); 
    $.Constant({Static:true , Public:false}, "Xml_UnparsedEntity", "Xml_UnparsedEntity"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidContentForThisNode", "Xml_InvalidContentForThisNode"); 
    $.Constant({Static:true , Public:false}, "Xml_MissingEncodingDecl", "Xml_MissingEncodingDecl"); 
    $.Constant({Static:true , Public:false}, "Xml_InvalidSurrogatePair", "Xml_InvalidSurrogatePair"); 
    $.Constant({Static:true , Public:false}, "Sch_ErrorPosition", "Sch_ErrorPosition"); 
    $.Constant({Static:true , Public:false}, "Sch_ReservedNsDecl", "Sch_ReservedNsDecl"); 
    $.Constant({Static:true , Public:false}, "Sch_NotInSchemaCollection", "Sch_NotInSchemaCollection"); 
    $.Constant({Static:true , Public:false}, "Sch_NotationNotAttr", "Sch_NotationNotAttr"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidContent", "Sch_InvalidContent"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidContentExpecting", "Sch_InvalidContentExpecting"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidTextWhiteSpace", "Sch_InvalidTextWhiteSpace"); 
    $.Constant({Static:true , Public:false}, "Sch_XSCHEMA", "Sch_XSCHEMA"); 
    $.Constant({Static:true , Public:false}, "Sch_DubSchema", "Sch_DubSchema"); 
    $.Constant({Static:true , Public:false}, "Xp_TokenExpected", "Xp_TokenExpected"); 
    $.Constant({Static:true , Public:false}, "Xp_NodeTestExpected", "Xp_NodeTestExpected"); 
    $.Constant({Static:true , Public:false}, "Xp_NumberExpected", "Xp_NumberExpected"); 
    $.Constant({Static:true , Public:false}, "Xp_QueryExpected", "Xp_QueryExpected"); 
    $.Constant({Static:true , Public:false}, "Xp_InvalidArgument", "Xp_InvalidArgument"); 
    $.Constant({Static:true , Public:false}, "Xp_FunctionExpected", "Xp_FunctionExpected"); 
    $.Constant({Static:true , Public:false}, "Xp_InvalidPatternString", "Xp_InvalidPatternString"); 
    $.Constant({Static:true , Public:false}, "Xp_BadQueryString", "Xp_BadQueryString"); 
    $.Constant({Static:true , Public:false}, "XdomXpNav_NullParam", "XdomXpNav_NullParam"); 
    $.Constant({Static:true , Public:false}, "Xdom_Load_NodeType", "Xdom_Load_NodeType"); 
    $.Constant({Static:true , Public:false}, "XmlMissingMethod", "XmlMissingMethod"); 
    $.Constant({Static:true , Public:false}, "XmlIncludeSerializableError", "XmlIncludeSerializableError"); 
    $.Constant({Static:true , Public:false}, "XmlCompilerDynModule", "XmlCompilerDynModule"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidSchemaType", "XmlInvalidSchemaType"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidAnyUse", "XmlInvalidAnyUse"); 
    $.Constant({Static:true , Public:false}, "XmlSchemaSyntaxError", "XmlSchemaSyntaxError"); 
    $.Constant({Static:true , Public:false}, "XmlDuplicateChoiceElement", "XmlDuplicateChoiceElement"); 
    $.Constant({Static:true , Public:false}, "XmlConvert_BadTimeSpan", "XmlConvert_BadTimeSpan"); 
    $.Constant({Static:true , Public:false}, "XmlConvert_BadBoolean", "XmlConvert_BadBoolean"); 
    $.Constant({Static:true , Public:false}, "XmlConvert_BadUri", "XmlConvert_BadUri"); 
    $.Constant({Static:true , Public:false}, "Xml_UnexpectedToken", "Xml_UnexpectedToken"); 
    $.Constant({Static:true , Public:false}, "Xml_PartialContentNodeTypeNotSupported", "Xml_PartialContentNodeTypeNotSupported"); 
    $.Constant({Static:true , Public:false}, "Sch_AttributeValueDataType", "Sch_AttributeValueDataType"); 
    $.Constant({Static:true , Public:false}, "Sch_ElementValueDataType", "Sch_ElementValueDataType"); 
    $.Constant({Static:true , Public:false}, "Sch_NonDeterministicAny", "Sch_NonDeterministicAny"); 
    $.Constant({Static:true , Public:false}, "Sch_MismatchTargetNamespace", "Sch_MismatchTargetNamespace"); 
    $.Constant({Static:true , Public:false}, "Sch_UnionFailed", "Sch_UnionFailed"); 
    $.Constant({Static:true , Public:false}, "Sch_XsiTypeBlocked", "Sch_XsiTypeBlocked"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidElementInEmpty", "Sch_InvalidElementInEmpty"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidElementInTextOnly", "Sch_InvalidElementInTextOnly"); 
    $.Constant({Static:true , Public:false}, "Sch_InvalidNameAttribute", "Sch_InvalidNameAttribute"); 
    $.Field({Static:true , Public:false}, "loader", $.Type); 
    $.Field({Static:false, Public:false}, "resources", $asm01.TypeRef("System.Resources.ResourceManager")); 
    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object); 
    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "Culture", $asm01.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm01.TypeRef("System.Resources.ResourceManager"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function HResults$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.HResults", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Configuration", -2146232062); 
    $.Constant({Static:true , Public:false}, "Xml", -2146232000); 
    $.Constant({Static:true , Public:false}, "XmlSchema", -2146231999); 
    $.Constant({Static:true , Public:false}, "XmlXslt", -2146231998); 
    $.Constant({Static:true , Public:false}, "XmlXPath", -2146231997); 
    $.Constant({Static:true , Public:false}, "Data", -2146232032); 
    $.Constant({Static:true , Public:false}, "DataDeletedRowInaccessible", -2146232031); 
    $.Constant({Static:true , Public:false}, "DataDuplicateName", -2146232030); 
    $.Constant({Static:true , Public:false}, "DataInRowChangingEvent", -2146232029); 
    $.Constant({Static:true , Public:false}, "DataInvalidConstraint", -2146232028); 
    $.Constant({Static:true , Public:false}, "DataMissingPrimaryKey", -2146232027); 
    $.Constant({Static:true , Public:false}, "DataNoNullAllowed", -2146232026); 
    $.Constant({Static:true , Public:false}, "DataReadOnly", -2146232025); 
    $.Constant({Static:true , Public:false}, "DataRowNotInTable", -2146232024); 
    $.Constant({Static:true , Public:false}, "DataVersionNotFound", -2146232023); 
    $.Constant({Static:true , Public:false}, "DataConstraint", -2146232022); 
    $.Constant({Static:true , Public:false}, "StrongTyping", -2146232021); 
    $.Constant({Static:true , Public:false}, "SqlType", -2146232016); 
    $.Constant({Static:true , Public:false}, "SqlNullValue", -2146232015); 
    $.Constant({Static:true , Public:false}, "SqlTruncate", -2146232014); 
    $.Constant({Static:true , Public:false}, "AdapterMapping", -2146232013); 
    $.Constant({Static:true , Public:false}, "DataAdapter", -2146232012); 
    $.Constant({Static:true , Public:false}, "DBConcurrency", -2146232011); 
    $.Constant({Static:true , Public:false}, "OperationAborted", -2146232010); 
    $.Constant({Static:true , Public:false}, "InvalidUdt", -2146232009); 
    $.Constant({Static:true , Public:false}, "SqlException", -2146232060); 
    $.Constant({Static:true , Public:false}, "OdbcException", -2146232009); 
    $.Constant({Static:true , Public:false}, "OracleException", -2146232008); 
    $.Constant({Static:true , Public:false}, "NteBadKeySet", -2146893802); 
    $.Constant({Static:true , Public:false}, "Win32AccessDenied", -2147024891); 
    $.Constant({Static:true , Public:false}, "Win32InvalidHandle", -2147024890); 
    $.Constant({Static:true , Public:false}, "License", -2146232063); 
    $.Constant({Static:true , Public:false}, "InternalBufferOverflow", -2146232059); 
    $.Constant({Static:true , Public:false}, "ServiceControllerTimeout", -2146232058); 
    $.Constant({Static:true , Public:false}, "Install", -2146232057); 
    $.Constant({Static:true , Public:false}, "EFail", -2147467259); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function InvariantComparer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.InvariantComparer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.Field({Static:false, Public:false}, "m_compareInfo", $asm01.TypeRef("System.Globalization.CompareInfo")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Default", $.Type); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IComparer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Configuration");
(function PrivilegedConfigurationManager$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Configuration.PrivilegedConfigurationManager", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "get_ConnectionStrings", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConnectionStringSettingsCollection"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.Property({Static:true , Public:false}, "ConnectionStrings", $asm03.TypeRef("System.Configuration.ConnectionStringSettingsCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function IncrementalReadDecoder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.IncrementalReadDecoder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DecodedCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsFull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetNextOutputBuffer", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "DecodedCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsFull", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Base64Decoder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.IncrementalReadDecoder"), "System.Xml.Base64Decoder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConstructMapBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Decode", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DecodedCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsFull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetNextOutputBuffer", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ], [])
    );

    $.Constant({Static:true , Public:false}, "MaxValidChar", 122); 
    $.Constant({Static:true , Public:false}, "Invalid", 255); 
    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "startIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "curIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "endIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "bits", $.Int32); 
    $.Field({Static:false, Public:false}, "bitsFilled", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "CharsBase64", $.String, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MapBase64", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Property({Static:false, Public:false, Virtual:true }, "DecodedCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsFull", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Base64Encoder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Base64Encoder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Encode", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Constant({Static:true , Public:false}, "Base64LineSize", 76); 
    $.Constant({Static:true , Public:false}, "LineSizeInBytes", 57); 
    $.Field({Static:false, Public:false}, "leftOverBytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "leftOverBytesCount", $.Int32); 
    $.Field({Static:false, Public:false}, "charsLine", $jsilcore.TypeRef("System.Array", [$.Char])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlRawWriterBase64Encoder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Base64Encoder"), "System.Xml.XmlRawWriterBase64Encoder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlRawWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "rawWriter", $asm05.TypeRef("System.Xml.XmlRawWriter")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlTextWriterBase64Encoder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Base64Encoder"), "System.Xml.XmlTextWriterBase64Encoder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlTextEncoder")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "xmlTextEncoder", $asm05.TypeRef("System.Xml.XmlTextEncoder")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function BinHexDecoder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.IncrementalReadDecoder"), "System.Xml.BinHexDecoder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Decode", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Char]), $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Decode", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DecodedCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsFull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetNextOutputBuffer", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "startIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "curIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "endIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "hasHalfByteCached", $.Boolean); 
    $.Field({Static:false, Public:false}, "cachedHalfByte", $.Byte); 
    $.Property({Static:false, Public:false, Virtual:true }, "DecodedCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsFull", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function BinHexEncoder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.BinHexEncoder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Encode", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm05.TypeRef("System.Xml.XmlWriter")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Encode", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Encode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char])
        ], [])
    );

    $.Constant({Static:true , Public:false}, "s_hexDigits", "0123456789ABCDEF"); 
    $.Constant({Static:true , Public:false}, "CharsChunkSize", 128); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Bits$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Xml.Bits", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "ClearLeast", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExactlyOne", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "LeastPosition", 
      new JSIL.MethodSignature($.Int32, [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MoreThanOne", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "MASK_0101010101010101", $.UInt32, 1431655765); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MASK_0011001100110011", $.UInt32, 858993459); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MASK_0000111100001111", $.UInt32, 252645135); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MASK_0000000011111111", $.UInt32, 16711935); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MASK_1111111111111111", $.UInt32, 65535); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function BitStack$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.BitStack", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "PeekBit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "PopBit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopCurr", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "PushBit", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushCurr", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "bitStack", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
    $.Field({Static:false, Public:false}, "stackPos", $.Int32); 
    $.Field({Static:false, Public:false}, "curr", $.UInt32); 
    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function BufferBuilder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.BufferBuilder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddBuffer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendHelper", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearBuffers", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateBuffers", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Recycle", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.BufferBuilder/Buffer")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Length", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "wstrcpy", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $.Int32
        ], [])
    );

    $.Constant({Static:true , Public:false}, "BufferSize", 65536); 
    $.Constant({Static:true , Public:false}, "InitialBufferArrayLength", 4); 
    $.Constant({Static:true , Public:false}, "MaxStringBuilderLength", 65536); 
    $.Constant({Static:true , Public:false}, "DefaultSBCapacity", 16); 
    $.Field({Static:false, Public:false}, "stringBuilder", $asm01.TypeRef("System.Text.StringBuilder")); 
    $.Field({Static:false, Public:false}, "buffers", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.BufferBuilder/Buffer")])); 
    $.Field({Static:false, Public:false}, "buffersCount", $.Int32); 
    $.Field({Static:false, Public:false}, "lastBuffer", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "lastBufferIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "$length", $.Int32); 
    $.Property({Static:false, Public:true }, "Length", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Buffer$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.BufferBuilder/Buffer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "recycledBuffer", $asm01.TypeRef("System.WeakReference")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ByteStack$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.ByteStack", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Peek", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Pop", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Push", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    );

    $.Field({Static:false, Public:false}, "stack", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "growthRate", $.Int32); 
    $.Field({Static:false, Public:false}, "top", $.Int32); 
    $.Field({Static:false, Public:false}, "size", $.Int32); 
    $.Property({Static:false, Public:true }, "Length", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DiagnosticsSwitches$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Xml.DiagnosticsSwitches", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "get_KeepTempFiles", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Diagnostics.BooleanSwitch"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_NonRecursiveTypeLoading", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Diagnostics.BooleanSwitch"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PregenEventLog", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Diagnostics.BooleanSwitch"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_XmlSchema", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Diagnostics.TraceSwitch"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_XmlSchemaContentModel", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Diagnostics.BooleanSwitch"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_XmlSerialization", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Diagnostics.TraceSwitch"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_XslTypeInference", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Diagnostics.TraceSwitch"), [], [])
    );

    $.Field({Static:true , Public:false}, "xmlSchemaContentModel", $asm02.TypeRef("System.Diagnostics.BooleanSwitch")); 
    $.Field({Static:true , Public:false}, "xmlSchema", $asm02.TypeRef("System.Diagnostics.TraceSwitch")); 
    $.Field({Static:true , Public:false}, "keepTempFiles", $asm02.TypeRef("System.Diagnostics.BooleanSwitch")); 
    $.Field({Static:true , Public:false}, "pregenEventLog", $asm02.TypeRef("System.Diagnostics.BooleanSwitch")); 
    $.Field({Static:true , Public:false}, "xmlSerialization", $asm02.TypeRef("System.Diagnostics.TraceSwitch")); 
    $.Field({Static:true , Public:false}, "xslTypeInference", $asm02.TypeRef("System.Diagnostics.TraceSwitch")); 
    $.Field({Static:true , Public:false}, "nonRecursiveTypeLoading", $asm02.TypeRef("System.Diagnostics.BooleanSwitch")); 
    $.Property({Static:true , Public:true }, "XmlSchemaContentModel", $asm02.TypeRef("System.Diagnostics.BooleanSwitch"));

    $.Property({Static:true , Public:true }, "XmlSchema", $asm02.TypeRef("System.Diagnostics.TraceSwitch"));

    $.Property({Static:true , Public:true }, "KeepTempFiles", $asm02.TypeRef("System.Diagnostics.BooleanSwitch"));

    $.Property({Static:true , Public:true }, "PregenEventLog", $asm02.TypeRef("System.Diagnostics.BooleanSwitch"));

    $.Property({Static:true , Public:true }, "XmlSerialization", $asm02.TypeRef("System.Diagnostics.TraceSwitch"));

    $.Property({Static:true , Public:true }, "XslTypeInference", $asm02.TypeRef("System.Diagnostics.TraceSwitch"));

    $.Property({Static:true , Public:true }, "NonRecursiveTypeLoading", $asm02.TypeRef("System.Diagnostics.BooleanSwitch"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EmptyEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.EmptyEnumerator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(0, "Reset");

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function HWStack$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.HWStack", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Int32, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToTop", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Peek", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    );

    $.Field({Static:false, Public:false}, "stack", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:false}, "growthRate", $.Int32); 
    $.Field({Static:false, Public:false}, "used", $.Int32); 
    $.Field({Static:false, Public:false}, "size", $.Int32); 
    $.Field({Static:false, Public:false}, "limit", $.Int32); 
    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false}, "Length", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.ICloneable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

JSIL.MakeInterface(
  "System.Xml.IHasXmlNode", true, [], function ($) {
    $.Method({}, "GetNode", new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], []));
  }, []);

JSIL.MakeInterface(
  "System.Xml.IXmlLineInfo", true, [], function ($) {
    $.Method({}, "HasLineInfo", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_LineNumber", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_LinePosition", new JSIL.MethodSignature($.Int32, [], []));
    $.Property({}, "LineNumber");
    $.Property({}, "LinePosition");
  }, []);

(function PositionInfo$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.PositionInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPositionInfo", 
      new JSIL.MethodSignature($.Type, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("System.Xml.IXmlLineInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ReaderPositionInfo$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.PositionInfo"), "System.Xml.ReaderPositionInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.IXmlLineInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "lineInfo", $asm05.TypeRef("System.Xml.IXmlLineInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeInterface(
  "System.Xml.IXmlNamespaceResolver", true, [], function ($) {
    $.Method({}, "GetNamespacesInScope", new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], []));
    $.Method({}, "LookupNamespace", new JSIL.MethodSignature($.String, [$.String], []));
    $.Method({}, "LookupPrefix", new JSIL.MethodSignature($.String, [$.String], []));
  }, []);

(function LineInfo$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.LineInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.Field({Static:false, Public:false}, "lineNo", $.Int32); 
    $.Field({Static:false, Public:false}, "linePos", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ListBase$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.ListBase`1", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Xml.ListBase`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Xml.ListBase`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Xml.ListBase`1")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixedSize", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Xml.ListBase`1"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.IListEnumerator`1", [new JSIL.GenericParameter("T", "System.Xml.ListBase`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("T", "System.Xml.ListBase`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, new JSIL.GenericParameter("T", "System.Xml.ListBase`1")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCompatibleType", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Xml.ListBase`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, new JSIL.GenericParameter("T", "System.Xml.ListBase`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Xml.ListBase`1")]), [], [])
    )
      .Overrides(2, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Array"), $.Int32], [])
    )
      .Overrides(4, "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(4, "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(4, "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(5, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Add", 
      new JSIL.MethodSignature($.Int32, [$.Object], [])
    )
      .Overrides(3, "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Clear", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    )
      .Overrides(3, "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32], [])
    )
      .Overrides(3, "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object], [])
    )
      .Overrides(3, "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    )
      .Overrides(3, "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Remove", 
      new JSIL.MethodSignature(null, [$.Object], [])
    )
      .Overrides(3, "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    )
      .Overrides(3, "set_Item");

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", new JSIL.GenericParameter("T", "System.Xml.ListBase`1"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Xml.ListBase`1")]), 
      /* 1 */ $asm01.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Xml.ListBase`1")]), 
      /* 2 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Xml.ListBase`1")]), 
      /* 3 */ $asm01.TypeRef("System.Collections.IList"), 
      /* 4 */ $asm01.TypeRef("System.Collections.ICollection"), 
      /* 5 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function IListEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.IListEnumerator`1", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Xml.IListEnumerator`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Xml.IListEnumerator`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(2, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Reset");

    $.Field({Static:false, Public:false}, "sequence", $asm01.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "index", $.Int32); 
    $.Field({Static:false, Public:false}, "current", $.GenericParameter("T")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("T", "System.Xml.IListEnumerator`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Xml.IListEnumerator`1")]), 
      /* 1 */ $asm01.TypeRef("System.IDisposable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlNameTable$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlNameTable", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NameTable$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlNameTable"), "System.Xml.NameTable", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEntry", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Grow", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TextEquals", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "entries", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.NameTable/Entry")])); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Field({Static:false, Public:false}, "mask", $.Int32); 
    $.Field({Static:false, Public:false}, "hashCodeRandomizer", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Entry$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.NameTable/Entry", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Type
        ], [])
    );

    $.Field({Static:false, Public:false}, "str", $.String); 
    $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
    $.Field({Static:false, Public:false}, "next", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Ref$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Ref", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equal", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ValidateNames$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.ValidateNames", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateName", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetInvalidNameException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsReservedNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseNameTestThrow", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseNCName", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseNCNameInternal", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseNCNameThrow", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseQName", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseQNameThrow", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SplitQName", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "StartsWithXml", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowInvalidName", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ValidateName", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $asm05.TypeRef("System.Xml.ValidateNames/Flags")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateNameInternal", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $asm05.TypeRef("System.Xml.ValidateNames/Flags"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ValidateNameThrow", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $asm05.TypeRef("System.Xml.ValidateNames/Flags")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.ValidateNames/Flags", false, {
    NCNames: 1, 
    CheckLocalName: 2, 
    AllExceptPrefixMapping: 3, 
    CheckPrefixMapping: 4, 
    AllExceptNCNames: 6, 
    All: 7
  }, false
);

(function XmlCharType$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.XmlCharType", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StaticLock", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitInstance", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAttributeValueChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsCharData", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsDigit", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsExtender", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsHexDigit", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsLetter", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsName", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNameChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNCNameChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNmToken", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsOnlyCharData", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsOnlyWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsOnlyWhitespaceWithPos", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsPubidChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsPublicId", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsStartNameChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsStartNCNameChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsTextChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsWhiteSpace", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.Constant({Static:true , Public:false}, "fWhitespace", 1); 
    $.Constant({Static:true , Public:false}, "fLetter", 2); 
    $.Constant({Static:true , Public:false}, "fNCStartName", 4); 
    $.Constant({Static:true , Public:false}, "fNCName", 8); 
    $.Constant({Static:true , Public:false}, "fCharData", 16); 
    $.Constant({Static:true , Public:false}, "fPublicId", 32); 
    $.Constant({Static:true , Public:false}, "fText", 64); 
    $.Constant({Static:true , Public:false}, "fAttrValue", 128); 
    $.Constant({Static:true , Public:false}, "CharPropertiesSize", 65536); 
    $.Field({Static:true , Public:false}, "s_Lock", $.Object); 
    $.Field({Static:true , Public:false}, "s_CharProperties", $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])); 
    $.Field({Static:false, Public:false}, "charProperties", $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])); 
    $.Property({Static:true , Public:false}, "StaticLock", $.Object);

    $.Property({Static:true , Public:false}, "Instance", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlComplianceUtil$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Xml.XmlComplianceUtil", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "CDataNormalize", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsValidLanguageID", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NonCDataNormalize", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "StripSpaces", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "StripSpaces", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.ExceptionType", false, {
    ArgumentException: 0, 
    XmlException: 1
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlDateTimeSerializationMode", true, {
    Local: 0, 
    Utc: 1, 
    Unspecified: 2, 
    RoundtripKind: 3
  }, false
);

(function XmlConvert$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlConvert", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAllDateTimeFormats", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $asm05.TypeRef("System.Xml.ExceptionType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.ExceptionType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm05.TypeRef("System.Xml.ExceptionType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidCharException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidCharException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Char, $asm05.TypeRef("System.Xml.ExceptionType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidHighSurrogateCharException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidHighSurrogateCharException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Char, $asm05.TypeRef("System.Xml.ExceptionType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidNameArgumentException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.ArgumentException"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidSurrogatePairException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidSurrogatePairException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.Char, $.Char, 
          $asm05.TypeRef("System.Xml.ExceptionType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DecodeName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "EncodeLocalName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "EncodeName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeName", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "EncodeNmToken", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeValueForDebuggerDisplay", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromBinHexString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromBinHexString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromHex", 
      new JSIL.MethodSignature($.Int32, [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AllDateTimeFormats", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNegativeZero", 
      new JSIL.MethodSignature($.Boolean, [$.Double], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SplitString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StrEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SwitchToLocalTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SwitchToUtcTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToBinHexString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    )
      .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["Use XmlConvert.ToDateTime() that takes in XmlDateTimeSerializationMode"]; });

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String, $asm05.TypeRef("System.Xml.XmlDateTimeSerializationMode")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToGuid", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Guid"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToInteger", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSByte", 
      new JSIL.MethodSignature($.SByte, [$.String], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.SByte], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int16], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Byte], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.UInt16], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.UInt32], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.UInt64], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    )
      .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["Use XmlConvert.ToString() that takes in XmlDateTimeSerializationMode"]; });

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime"), $asm05.TypeRef("System.Xml.XmlDateTimeSerializationMode")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTimeOffset"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToTimeSpan", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.String], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.String], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.String], [])
    )
      .Attribute($asm01.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:false}, "ToUri", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Uri"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXPathDouble", 
      new JSIL.MethodSignature($.Double, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXPathString", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TrimString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToBoolean", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToByte", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToChar", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Char])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Decimal")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToDouble", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Double])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToGuid", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Guid")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToInt16", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int16])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToInt32", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToInt64", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int64])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToInteger", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Decimal")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToSByte", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.SByte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToSingle", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToTimeSpan", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.TimeSpan")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToUInt16", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt16])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToUInt32", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToUInt64", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToUri", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.Uri")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryVerifyName", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryVerifyNCName", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryVerifyNMTOKEN", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryVerifyNormalizedString", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryVerifyTOKEN", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyCharData", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.ExceptionType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyCharData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $asm05.TypeRef("System.Xml.ExceptionType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VerifyName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VerifyNCName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VerifyNMTOKEN", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyNMTOKEN", 
      new JSIL.MethodSignature($.String, [$.String, $asm05.TypeRef("System.Xml.ExceptionType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyNormalizedString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyQName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyQName", 
      new JSIL.MethodSignature($.String, [$.String, $asm05.TypeRef("System.Xml.ExceptionType")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VerifyTOKEN", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XPathRound", 
      new JSIL.MethodSignature($.Double, [$.Double], [])
    );

    $.Constant({Static:true , Public:false}, "SurHighStart", 55296); 
    $.Constant({Static:true , Public:false}, "SurHighEnd", 56319); 
    $.Constant({Static:true , Public:false}, "SurLowStart", 56320); 
    $.Constant({Static:true , Public:false}, "SurLowEnd", 57343); 
    $.Constant({Static:true , Public:false}, "SurMask", 64512); 
    $.Field({Static:true , Public:false}, "crt", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_EncodedCharLength", $.Int32, 7); 
    $.Field({Static:true , Public:false}, "c_EncodeCharPattern", $asm02.TypeRef("System.Text.RegularExpressions.Regex")); 
    $.Field({Static:true , Public:false}, "c_DecodeCharPattern", $asm02.TypeRef("System.Text.RegularExpressions.Regex")); 
    $.Field({Static:true , Public:false}, "s_allDateTimeFormats", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "WhitespaceChars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Property({Static:true , Public:false}, "AllDateTimeFormats", $jsilcore.TypeRef("System.Array", [$.String]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlDownloadManager$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlDownloadManager", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNonFileStream", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$asm02.TypeRef("System.Uri"), $asm02.TypeRef("System.Net.ICredentials")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStream", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$asm02.TypeRef("System.Uri"), $asm02.TypeRef("System.Net.ICredentials")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "connections", $asm01.TypeRef("System.Collections.Hashtable")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function OpenedHost$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.OpenedHost", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "nonCachedConnectionsCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlRegisteredNonCachedStream$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.IO.Stream"), "System.Xml.XmlRegisteredNonCachedStream", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.XmlDownloadManager"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm01.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm01.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm01.TypeRef("System.IO.SeekOrigin")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    );

    $.Field({Static:false, Public:false}, "stream", $asm01.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "downloadManager", $asm05.TypeRef("System.Xml.XmlDownloadManager")); 
    $.Field({Static:false, Public:false}, "host", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlCachedStream$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.IO.MemoryStream"), "System.Xml.XmlCachedStream", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Uri"), $asm01.TypeRef("System.IO.Stream")], [])
    );

    $.Constant({Static:true , Public:false}, "MoveBufferSize", 4096); 
    $.Field({Static:false, Public:false}, "uri", $asm02.TypeRef("System.Uri")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function UTF16Decoder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Text.Decoder"), "System.Xml.UTF16Decoder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Convert", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ], [])
    );

    $.Constant({Static:true , Public:false}, "CharSize", 2); 
    $.Field({Static:false, Public:false}, "bigEndian", $.Boolean); 
    $.Field({Static:false, Public:false}, "lastByte", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SafeAsciiDecoder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Text.Decoder"), "System.Xml.SafeAsciiDecoder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Convert", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Ucs4Encoding$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Text.Encoding"), "System.Xml.Ucs4Encoding", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CodePage", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UCS4_2143", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UCS4_3412", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UCS4_Bigendian", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UCS4_Littleendian", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByteCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByteCount", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecoder", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Decoder"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEncoder", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoder"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMaxByteCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMaxCharCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "ucs4Decoder", $asm05.TypeRef("System.Xml.Ucs4Decoder")); 
    $.Property({Static:false, Public:true , Virtual:true }, "CodePage", $.Int32);

    $.Property({Static:true , Public:false}, "UCS4_Littleendian", $asm01.TypeRef("System.Text.Encoding"));

    $.Property({Static:true , Public:false}, "UCS4_Bigendian", $asm01.TypeRef("System.Text.Encoding"));

    $.Property({Static:true , Public:false}, "UCS4_2143", $asm01.TypeRef("System.Text.Encoding"));

    $.Property({Static:true , Public:false}, "UCS4_3412", $asm01.TypeRef("System.Text.Encoding"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Ucs4Encoding1234$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Ucs4Encoding"), "System.Xml.Ucs4Encoding1234", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EncodingName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPreamble", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "EncodingName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Ucs4Encoding4321$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Ucs4Encoding"), "System.Xml.Ucs4Encoding4321", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EncodingName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPreamble", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "EncodingName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Ucs4Encoding2143$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Ucs4Encoding"), "System.Xml.Ucs4Encoding2143", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EncodingName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPreamble", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "EncodingName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Ucs4Encoding3412$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Ucs4Encoding"), "System.Xml.Ucs4Encoding3412", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EncodingName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPreamble", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "EncodingName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Ucs4Decoder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Text.Decoder"), "System.Xml.Ucs4Decoder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Convert", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFullChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnicodeToUTF16", 
      new JSIL.MethodSignature($.Char, [$.UInt32], [])
    );

    $.Field({Static:false, Public:false}, "lastBytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "lastBytesCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Ucs4Decoder4321$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Ucs4Decoder"), "System.Xml.Ucs4Decoder4321", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFullChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Ucs4Decoder1234$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Ucs4Decoder"), "System.Xml.Ucs4Decoder1234", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFullChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Ucs4Decoder2143$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Ucs4Decoder"), "System.Xml.Ucs4Decoder2143", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFullChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Ucs4Decoder3412$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Ucs4Decoder"), "System.Xml.Ucs4Decoder3412", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFullChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.SystemException"), "System.Xml.XmlException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Exception"), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Exception"), 
          $.Int32, $.Int32, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.IXmlLineInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm01.TypeRef("System.Exception"), $asm05.TypeRef("System.Xml.IXmlLineInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.IXmlLineInfo"), $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm05.TypeRef("System.Xml.IXmlLineInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm05.TypeRef("System.Xml.IXmlLineInfo"), $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Int32, $.Int32, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm01.TypeRef("System.Exception"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm01.TypeRef("System.Exception"), $.Int32, 
          $.Int32, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildCharExceptionStr", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateMessage", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceUri", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCatchableException", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Exception")], [])
    );

    $.Field({Static:false, Public:false}, "res", $.String); 
    $.Field({Static:false, Public:false}, "args", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:false, Public:false}, "lineNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "linePosition", $.Int32); 
    $.Field({Static:false, Public:false}, "sourceUri", $.String)
      .Attribute($asm01.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute")); 
    $.Field({Static:false, Public:false}, "message", $.String); 
    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "SourceUri", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.Property({Static:false, Public:false}, "ResString", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlNamespaceManager$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlNamespaceManager", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddNamespace", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultNamespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EmptyResolver", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespaceDeclaration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespaceDecl", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopScope", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PushScope", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveNamespace", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.Constant({Static:true , Public:false}, "MinDeclsCountForHashtable", 16); 
    $.Field({Static:true , Public:false}, "s_EmptyResolver", $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")); 
    $.Field({Static:false, Public:false}, "nsdecls", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNamespaceManager/NamespaceDeclaration")])); 
    $.Field({Static:false, Public:false}, "lastDecl", $.Int32); 
    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "scopeId", $.Int32); 
    $.Field({Static:false, Public:false}, "hashTable", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])); 
    $.Field({Static:false, Public:false}, "useHashtable", $.Boolean); 
    $.Field({Static:false, Public:false}, "xml", $.String); 
    $.Field({Static:false, Public:false}, "xmlNs", $.String); 
    $.Property({Static:true , Public:false}, "EmptyResolver", $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultNamespace", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NamespaceDeclaration$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.XmlNamespaceManager/NamespaceDeclaration", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32
        ], [])
    );

    $.Field({Static:false, Public:true }, "prefix", $.String); 
    $.Field({Static:false, Public:true }, "uri", $.String); 
    $.Field({Static:false, Public:true }, "scopeId", $.Int32); 
    $.Field({Static:false, Public:true }, "previousNsIndex", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XmlNamespaceScope", true, {
    All: 0, 
    ExcludeXml: 1, 
    Local: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlNodeOrder", true, {
    Before: 0, 
    After: 1, 
    Same: 2, 
    Unknown: 3
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlNodeType", true, {
    None: 0, 
    Element: 1, 
    Attribute: 2, 
    Text: 3, 
    CDATA: 4, 
    EntityReference: 5, 
    Entity: 6, 
    ProcessingInstruction: 7, 
    Comment: 8, 
    Document: 9, 
    DocumentType: 10, 
    DocumentFragment: 11, 
    Notation: 12, 
    Whitespace: 13, 
    SignificantWhitespace: 14, 
    EndElement: 15, 
    EndEntity: 16, 
    XmlDeclaration: 17
  }, false
);

(function XmlResolver$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlResolver", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEntity", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.Uri"), $.String, 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveUri", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Uri"), [$asm02.TypeRef("System.Uri"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Credentials", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Net.ICredentials")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm02.TypeRef("System.Net.ICredentials"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlUrlResolver$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlResolver"), "System.Xml.XmlUrlResolver", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DownloadManager", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDownloadManager"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEntity", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.Uri"), $.String, 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveUri", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Uri"), [$asm02.TypeRef("System.Uri"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Credentials", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Net.ICredentials")], [])
    );

    $.Field({Static:true , Public:false}, "s_DownloadManager", $.Object); 
    $.Field({Static:false, Public:false}, "_credentials", $asm02.TypeRef("System.Net.ICredentials")); 
    $.Property({Static:true , Public:false}, "DownloadManager", $asm05.TypeRef("System.Xml.XmlDownloadManager"));

    $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm02.TypeRef("System.Net.ICredentials"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlNullResolver$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlUrlResolver"), "System.Xml.XmlNullResolver", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEntity", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.Uri"), $.String, 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Singleton", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlQualifiedName$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlQualifiedName", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Atomize", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Parse", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNamespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Verify", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "hash", $.Int32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlReservedNs$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlReservedNs", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "NsDataType", "urn:schemas-microsoft-com:datatypes"); 
    $.Constant({Static:true , Public:false}, "NsDataTypeAlias", "uuid:C2F41010-65B3-11D1-A29F-00AA00C14882"); 
    $.Constant({Static:true , Public:false}, "NsDataTypeOld", "urn:uuid:C2F41010-65B3-11D1-A29F-00AA00C14882/"); 
    $.Constant({Static:true , Public:false}, "NsMsxsl", "urn:schemas-microsoft-com:xslt"); 
    $.Constant({Static:true , Public:false}, "NsXdr", "urn:schemas-microsoft-com:xml-data"); 
    $.Constant({Static:true , Public:false}, "NsXslDebug", "urn:schemas-microsoft-com:xslt-debug"); 
    $.Constant({Static:true , Public:false}, "NsXdrAlias", "uuid:BDC6E3F0-6DA3-11D1-A2A3-00AA00C14882"); 
    $.Constant({Static:true , Public:false}, "NsWdXsl", "http://www.w3.org/TR/WD-xsl"); 
    $.Constant({Static:true , Public:false}, "NsXml", "http://www.w3.org/XML/1998/namespace"); 
    $.Constant({Static:true , Public:false}, "NsXmlNs", "http://www.w3.org/2000/xmlns/"); 
    $.Constant({Static:true , Public:false}, "NsXs", "http://www.w3.org/2001/XMLSchema"); 
    $.Constant({Static:true , Public:false}, "NsXsd", "http://www.w3.org/2001/XMLSchema-datatypes"); 
    $.Constant({Static:true , Public:false}, "NsXsi", "http://www.w3.org/2001/XMLSchema-instance"); 
    $.Constant({Static:true , Public:false}, "NsXslt", "http://www.w3.org/1999/XSL/Transform"); 
    $.Constant({Static:true , Public:false}, "NsExsltCommon", "http://exslt.org/common"); 
    $.Constant({Static:true , Public:false}, "NsExsltDates", "http://exslt.org/dates-and-times"); 
    $.Constant({Static:true , Public:false}, "NsExsltMath", "http://exslt.org/math"); 
    $.Constant({Static:true , Public:false}, "NsExsltRegExps", "http://exslt.org/regular-expressions"); 
    $.Constant({Static:true , Public:false}, "NsExsltSets", "http://exslt.org/sets"); 
    $.Constant({Static:true , Public:false}, "NsExsltStrings", "http://exslt.org/strings"); 
    $.Constant({Static:true , Public:false}, "NsXQueryFunc", "http://www.w3.org/2003/11/xpath-functions"); 
    $.Constant({Static:true , Public:false}, "NsXQueryDataType", "http://www.w3.org/2003/11/xpath-datatypes"); 
    $.Constant({Static:true , Public:false}, "NsCollationBase", "http://collations.microsoft.com"); 
    $.Constant({Static:true , Public:false}, "NsCollCodePoint", "http://www.w3.org/2004/10/xpath-functions/collation/codepoint"); 
    $.Constant({Static:true , Public:false}, "NsXsltInternal", "http://schemas.microsoft.com/framework/2003/xml/xslt/internal"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSecureResolver$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlResolver"), "System.Xml.XmlSecureResolver", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver"), $asm01.TypeRef("System.Security.Policy.Evidence")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver"), $asm01.TypeRef("System.Security.PermissionSet")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateEvidenceForUrl", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Policy.Evidence"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEntity", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.Uri"), $.String, 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveUri", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Uri"), [$asm02.TypeRef("System.Uri"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Credentials", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Net.ICredentials")], [])
    );

    $.Field({Static:false, Public:false}, "resolver", $asm05.TypeRef("System.Xml.XmlResolver")); 
    $.Field({Static:false, Public:false}, "permissionSet", $asm01.TypeRef("System.Security.PermissionSet")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm02.TypeRef("System.Net.ICredentials"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CharEntityEncoderFallback$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Text.EncoderFallback"), "System.Xml.CharEntityEncoderFallback", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanReplaceAt", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateFallbackBuffer", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.EncoderFallbackBuffer"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MaxCharCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StartOffset", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_StartOffset", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "fallbackBuffer", $asm05.TypeRef("System.Xml.CharEntityEncoderFallbackBuffer")); 
    $.Field({Static:false, Public:false}, "textContentMarks", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "endMarkPos", $.Int32); 
    $.Field({Static:false, Public:false}, "curMarkPos", $.Int32); 
    $.Field({Static:false, Public:false}, "startOffset", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "MaxCharCount", $.Int32);

    $.Property({Static:false, Public:false}, "StartOffset", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CharEntityEncoderFallbackBuffer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Text.EncoderFallbackBuffer"), "System.Xml.CharEntityEncoderFallbackBuffer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.CharEntityEncoderFallback")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fallback", 
      new JSIL.MethodSignature($.Boolean, [$.Char, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fallback", 
      new JSIL.MethodSignature($.Boolean, [
          $.Char, $.Char, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Remaining", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNextChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MovePrevious", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "parent", $asm05.TypeRef("System.Xml.CharEntityEncoderFallback")); 
    $.Field({Static:false, Public:false}, "charEntity", $.String); 
    $.Field({Static:false, Public:false}, "charEntityIndex", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Remaining", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.ConformanceLevel", true, {
    Auto: 0, 
    Fragment: 1, 
    Document: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.EntityHandling", true, {
    ExpandEntities: 1, 
    ExpandCharEntities: 2
  }, false
);

(function XmlWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlWriter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddConformanceWrapper", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $asm05.TypeRef("System.Xml.XmlWriterSettings"), 
          $asm05.TypeRef("System.Xml.XmlWriterSettings")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String, $asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.IO.TextWriter")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.IO.TextWriter"), $asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.Text.StringBuilder"), $asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateWriterImpl", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Text.Encoding"), 
          $.Boolean, $asm05.TypeRef("System.Xml.XmlWriterSettings")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateWriterImpl", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.IO.TextWriter"), $asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriterSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.WriteState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(0, "Dispose");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteAttributeString", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteAttributeString", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteAttributeString", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteElementString", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteElementString", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteElementString", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLocalNamespaces", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "WriteNodeBufferSize", 1024); 
    $.Field({Static:false, Public:false}, "writeNodeBuffer", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlWriterSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm05.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlRawWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlWriter"), "System.Xml.XmlRawWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.WriteState")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceResolver", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.WriteState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRootElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.ConformanceLevel")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NamespaceResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndBase64", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlStandalone")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "SurHighStart", 55296); 
    $.Constant({Static:true , Public:false}, "SurHighEnd", 56319); 
    $.Constant({Static:true , Public:false}, "SurLowStart", 56320); 
    $.Constant({Static:true , Public:false}, "SurLowEnd", 57343); 
    $.Constant({Static:true , Public:false}, "SurMask", 64512); 
    $.Field({Static:false, Public:false}, "base64Encoder", $asm05.TypeRef("System.Xml.XmlRawWriterBase64Encoder")); 
    $.Field({Static:false, Public:false}, "resolver", $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")); 
    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm05.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceResolver", $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlEncodedRawTextWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlRawWriter"), "System.Xml.XmlEncodedRawTextWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter"), $asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Text.Encoding"), 
          $asm05.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AmpEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CarriageReturnEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTextContentMark", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CharEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EncodeChar", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EncodeChars", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeSurrogate", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FlushBuffer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushEncoder", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriterSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GrowTextContentMarks", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GtEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InRange", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidXmlChar", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LineFeedEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LtEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "QuoteEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RawEndCData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RawStartCData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RawText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RawText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TabEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateContentChars", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeTextBlock", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCDataSection", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCommentOrPi", 
      new JSIL.MethodSignature(null, [$.String, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementTextBlock", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNewLine", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRawWithCharChecking", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlStandalone")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "BUFSIZE", 6144); 
    $.Constant({Static:true , Public:false}, "OVERFLOW", 32); 
    $.Constant({Static:true , Public:false}, "INIT_MARKS_COUNT", 64); 
    $.Field({Static:false, Public:false}, "bufBytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "stream", $asm01.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "encoding", $asm01.TypeRef("System.Text.Encoding")); 
    $.Field({Static:false, Public:false}, "xmlCharType", $asm05.TypeRef("System.Xml.XmlCharType")); 
    $.Field({Static:false, Public:false}, "bufPos", $.Int32); 
    $.Field({Static:false, Public:false}, "textPos", $.Int32); 
    $.Field({Static:false, Public:false}, "contentPos", $.Int32); 
    $.Field({Static:false, Public:false}, "cdataPos", $.Int32); 
    $.Field({Static:false, Public:false}, "attrEndPos", $.Int32); 
    $.Field({Static:false, Public:false}, "bufLen", $.Int32); 
    $.Field({Static:false, Public:false}, "writeToNull", $.Boolean); 
    $.Field({Static:false, Public:false}, "hadDoubleBracket", $.Boolean); 
    $.Field({Static:false, Public:false}, "inAttributeValue", $.Boolean); 
    $.Field({Static:false, Public:false}, "bufBytesUsed", $.Int32); 
    $.Field({Static:false, Public:false}, "bufChars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "encoder", $asm01.TypeRef("System.Text.Encoder")); 
    $.Field({Static:false, Public:false}, "writer", $asm01.TypeRef("System.IO.TextWriter")); 
    $.Field({Static:false, Public:false}, "trackTextContent", $.Boolean); 
    $.Field({Static:false, Public:false}, "inTextContent", $.Boolean); 
    $.Field({Static:false, Public:false}, "lastMarkPos", $.Int32); 
    $.Field({Static:false, Public:false}, "textContentMarks", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "charEntityFallback", $asm05.TypeRef("System.Xml.CharEntityEncoderFallback")); 
    $.Field({Static:false, Public:false}, "newLineHandling", $asm05.TypeRef("System.Xml.NewLineHandling")); 
    $.Field({Static:false, Public:false}, "closeOutput", $.Boolean); 
    $.Field({Static:false, Public:false}, "omitXmlDeclaration", $.Boolean); 
    $.Field({Static:false, Public:false}, "autoXmlDeclaration", $.Boolean); 
    $.Field({Static:false, Public:false}, "newLineChars", $.String); 
    $.Field({Static:false, Public:false}, "standalone", $asm05.TypeRef("System.Xml.XmlStandalone")); 
    $.Field({Static:false, Public:false}, "outputMethod", $asm05.TypeRef("System.Xml.XmlOutputMethod")); 
    $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean); 
    $.Field({Static:false, Public:false}, "mergeCDataSections", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlWriterSettings"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function HtmlEncodedRawTextWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlEncodedRawTextWriter"), "System.Xml.HtmlEncodedRawTextWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter"), $asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Text.Encoding"), 
          $asm05.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OutputRestAmps", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHtmlAttributeText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHtmlAttributeTextBlock", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHtmlElementTextBlock", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMetaElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUriAttributeText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlStandalone")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "StackIncrement", 10); 
    $.Field({Static:false, Public:false}, "elementScope", $asm05.TypeRef("System.Xml.ByteStack")); 
    $.Field({Static:false, Public:false}, "currentElementProperties", $asm05.TypeRef("System.Xml.ElementProperties")); 
    $.Field({Static:false, Public:false}, "currentAttributeProperties", $asm05.TypeRef("System.Xml.AttributeProperties")); 
    $.Field({Static:false, Public:false}, "endsWithAmpersand", $.Boolean); 
    $.Field({Static:false, Public:false}, "uriEscapingBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "mediaType", $.String); 
    $.Field({Static:false, Public:false}, "doNotEscapeUriAttributes", $.Boolean); 
    $.Field({Static:true , Public:false}, "elementPropertySearch", $asm05.TypeRef("System.Xml.TernaryTreeReadOnly")); 
    $.Field({Static:true , Public:false}, "attributePropertySearch", $asm05.TypeRef("System.Xml.TernaryTreeReadOnly")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function HtmlEncodedRawTextWriterIndent$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.HtmlEncodedRawTextWriter"), "System.Xml.HtmlEncodedRawTextWriterIndent", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter"), $asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Text.Encoding"), 
          $asm05.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FlushBuffer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.Field({Static:false, Public:false}, "indentLevel", $.Int32); 
    $.Field({Static:false, Public:false}, "endBlockPos", $.Int32); 
    $.Field({Static:false, Public:false}, "indentChars", $.String); 
    $.Field({Static:false, Public:false}, "newLineOnAttributes", $.Boolean); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function HtmlTernaryTree$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.HtmlTernaryTree", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "htmlElements", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false}, "htmlAttributes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlUtf8RawTextWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlRawWriter"), "System.Xml.XmlUtf8RawTextWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Text.Encoding"), 
          $asm05.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AmpEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CarriageReturnEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CharEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CharToUTF8", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EncodeChar", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeMultibyteUTF8", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeSurrogate", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FlushBuffer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushEncoder", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriterSettings"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GtEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InRange", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidXmlChar", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSurrogateByte", 
      new JSIL.MethodSignature($.Boolean, [$.Byte], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LineFeedEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LtEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "QuoteEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RawEndCData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RawStartCData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RawText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RawText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TabEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateContentChars", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeTextBlock", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCDataSection", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCommentOrPi", 
      new JSIL.MethodSignature(null, [$.String, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementTextBlock", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNewLine", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRawWithCharChecking", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlStandalone")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "BUFSIZE", 6144); 
    $.Constant({Static:true , Public:false}, "OVERFLOW", 32); 
    $.Constant({Static:true , Public:false}, "INIT_MARKS_COUNT", 64); 
    $.Field({Static:false, Public:false}, "bufBytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "stream", $asm01.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "encoding", $asm01.TypeRef("System.Text.Encoding")); 
    $.Field({Static:false, Public:false}, "xmlCharType", $asm05.TypeRef("System.Xml.XmlCharType")); 
    $.Field({Static:false, Public:false}, "bufPos", $.Int32); 
    $.Field({Static:false, Public:false}, "textPos", $.Int32); 
    $.Field({Static:false, Public:false}, "contentPos", $.Int32); 
    $.Field({Static:false, Public:false}, "cdataPos", $.Int32); 
    $.Field({Static:false, Public:false}, "attrEndPos", $.Int32); 
    $.Field({Static:false, Public:false}, "bufLen", $.Int32); 
    $.Field({Static:false, Public:false}, "writeToNull", $.Boolean); 
    $.Field({Static:false, Public:false}, "hadDoubleBracket", $.Boolean); 
    $.Field({Static:false, Public:false}, "inAttributeValue", $.Boolean); 
    $.Field({Static:false, Public:false}, "newLineHandling", $asm05.TypeRef("System.Xml.NewLineHandling")); 
    $.Field({Static:false, Public:false}, "closeOutput", $.Boolean); 
    $.Field({Static:false, Public:false}, "omitXmlDeclaration", $.Boolean); 
    $.Field({Static:false, Public:false}, "autoXmlDeclaration", $.Boolean); 
    $.Field({Static:false, Public:false}, "newLineChars", $.String); 
    $.Field({Static:false, Public:false}, "standalone", $asm05.TypeRef("System.Xml.XmlStandalone")); 
    $.Field({Static:false, Public:false}, "outputMethod", $asm05.TypeRef("System.Xml.XmlOutputMethod")); 
    $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean); 
    $.Field({Static:false, Public:false}, "mergeCDataSections", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlWriterSettings"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function HtmlUtf8RawTextWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlUtf8RawTextWriter"), "System.Xml.HtmlUtf8RawTextWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Text.Encoding"), 
          $asm05.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OutputRestAmps", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHtmlAttributeText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHtmlAttributeTextBlock", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHtmlElementTextBlock", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMetaElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUriAttributeText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlStandalone")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "StackIncrement", 10); 
    $.Field({Static:false, Public:false}, "elementScope", $asm05.TypeRef("System.Xml.ByteStack")); 
    $.Field({Static:false, Public:false}, "currentElementProperties", $asm05.TypeRef("System.Xml.ElementProperties")); 
    $.Field({Static:false, Public:false}, "currentAttributeProperties", $asm05.TypeRef("System.Xml.AttributeProperties")); 
    $.Field({Static:false, Public:false}, "endsWithAmpersand", $.Boolean); 
    $.Field({Static:false, Public:false}, "uriEscapingBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "mediaType", $.String); 
    $.Field({Static:false, Public:false}, "doNotEscapeUriAttributes", $.Boolean); 
    $.Field({Static:true , Public:false}, "elementPropertySearch", $asm05.TypeRef("System.Xml.TernaryTreeReadOnly")); 
    $.Field({Static:true , Public:false}, "attributePropertySearch", $asm05.TypeRef("System.Xml.TernaryTreeReadOnly")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function HtmlUtf8RawTextWriterIndent$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.HtmlUtf8RawTextWriter"), "System.Xml.HtmlUtf8RawTextWriterIndent", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Text.Encoding"), 
          $asm05.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FlushBuffer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.Field({Static:false, Public:false}, "indentLevel", $.Int32); 
    $.Field({Static:false, Public:false}, "endBlockPos", $.Int32); 
    $.Field({Static:false, Public:false}, "indentChars", $.String); 
    $.Field({Static:false, Public:false}, "newLineOnAttributes", $.Boolean); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function IncrementalReadDummyDecoder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.IncrementalReadDecoder"), "System.Xml.IncrementalReadDummyDecoder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DecodedCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsFull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetNextOutputBuffer", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "DecodedCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsFull", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function IncrementalReadCharsDecoder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.IncrementalReadDecoder"), "System.Xml.IncrementalReadCharsDecoder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DecodedCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsFull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetNextOutputBuffer", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "startIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "curIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "endIndex", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "DecodedCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsFull", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.NewLineHandling", true, {
    Replace: 0, 
    Entitize: 1, 
    None: 2
  }, false
);

JSIL.MakeDelegate("System.Xml.OnRemoveWriter", false, []);

JSIL.MakeInterface(
  "System.Xml.IRemovableWriter", false, [], function ($) {
    $.Method({}, "get_OnRemoveWriterEvent", new JSIL.MethodSignature($asm05.TypeRef("System.Xml.OnRemoveWriter"), [], []));
    $.Method({}, "set_OnRemoveWriterEvent", new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.OnRemoveWriter")], []));
    $.Property({}, "OnRemoveWriterEvent");
  }, []);

(function QueryOutputWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlRawWriter"), "System.Xml.QueryOutputWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlRawWriter"), $asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndCDataSection", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceResolver", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriterSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NamespaceResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartCDataSection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlStandalone")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "wrapped", $asm05.TypeRef("System.Xml.XmlRawWriter")); 
    $.Field({Static:false, Public:false}, "inCDataSection", $.Boolean); 
    $.Field({Static:false, Public:false}, "lookupCDataElems", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $.Int32])); 
    $.Field({Static:false, Public:false}, "bitsCData", $asm05.TypeRef("System.Xml.BitStack")); 
    $.Field({Static:false, Public:false}, "qnameCData", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "outputDocType", $.Boolean); 
    $.Field({Static:false, Public:false}, "checkWellFormedDoc", $.Boolean); 
    $.Field({Static:false, Public:false}, "hasDocElem", $.Boolean); 
    $.Field({Static:false, Public:false}, "inAttr", $.Boolean); 
    $.Field({Static:false, Public:false}, "systemId", $.String); 
    $.Field({Static:false, Public:false}, "publicId", $.String); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceResolver", $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlWriterSettings"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ReadContentAsBinaryHelper$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.ReadContentAsBinaryHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateOrReset", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Finish", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitBase64Decoder", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitBinHexDecoder", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitOnElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNextContentNode", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBinary", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadElementContentAsBinary", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "ChunkSize", 256); 
    $.Field({Static:false, Public:false}, "reader", $asm05.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "state", $asm05.TypeRef("System.Xml.ReadContentAsBinaryHelper/State")); 
    $.Field({Static:false, Public:false}, "valueOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "isEnd", $.Boolean); 
    $.Field({Static:false, Public:false}, "canReadValueChunk", $.Boolean); 
    $.Field({Static:false, Public:false}, "valueChunk", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "valueChunkLength", $.Int32); 
    $.Field({Static:false, Public:false}, "decoder", $asm05.TypeRef("System.Xml.IncrementalReadDecoder")); 
    $.Field({Static:false, Public:false}, "base64Decoder", $asm05.TypeRef("System.Xml.Base64Decoder")); 
    $.Field({Static:false, Public:false}, "binHexDecoder", $asm05.TypeRef("System.Xml.BinHexDecoder")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.ReadContentAsBinaryHelper/State", false, {
    None: 0, 
    InReadContent: 1, 
    InReadElementContent: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.TernaryTreeByte", false, {
    characterByte: 0, 
    leftTree: 1, 
    rightTree: 2, 
    data: 3
  }, false
);

JSIL.MakeEnum(
  "System.Xml.ElementProperties", false, {
    DEFAULT: 0, 
    URI_PARENT: 1, 
    BOOL_PARENT: 2, 
    NAME_PARENT: 4, 
    EMPTY: 8, 
    NO_ENTITIES: 16, 
    HEAD: 32, 
    BLOCK_WS: 64, 
    HAS_NS: 128
  }, false
);

JSIL.MakeEnum(
  "System.Xml.AttributeProperties", false, {
    DEFAULT: 0, 
    URI: 1, 
    BOOLEAN: 2, 
    NAME: 4
  }, false
);

(function TernaryTreeReadOnly$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.TernaryTreeReadOnly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FindCaseInsensitiveString", 
      new JSIL.MethodSignature($.Byte, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "nodeBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.ReadState", true, {
    Initial: 0, 
    Interactive: 1, 
    Error: 2, 
    EndOfFile: 3, 
    Closed: 4
  }, false
);

(function SecureStringHasher$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.SecureStringHasher", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "hashCodeRandomizer", $.Int32); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.String])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TextEncodedRawTextWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlEncodedRawTextWriter"), "System.Xml.TextEncodedRawTextWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter"), $asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Text.Encoding"), 
          $asm05.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlStandalone")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TextUtf8RawTextWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlUtf8RawTextWriter"), "System.Xml.TextUtf8RawTextWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Text.Encoding"), 
          $asm05.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlStandalone")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ValidatingReaderNodeData$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.ValidatingReaderNodeData", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearName", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.AttributePSVIInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OriginalStringValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RawValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAtomizedNameWPrefix", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AttInfo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.AttributePSVIInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Depth", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LocalName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NodeType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OriginalStringValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RawValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetItemData", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetItemData", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetItemData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetItemData", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLineInfo", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLineInfo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.IXmlLineInfo")], [])
    );

    $.Field({Static:false, Public:false}, "localName", $.String); 
    $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "nameWPrefix", $.String); 
    $.Field({Static:false, Public:false}, "rawValue", $.String); 
    $.Field({Static:false, Public:false}, "originalStringValue", $.String); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "attributePSVIInfo", $asm05.TypeRef("System.Xml.AttributePSVIInfo")); 
    $.Field({Static:false, Public:false}, "nodeType", $asm05.TypeRef("System.Xml.XmlNodeType")); 
    $.Field({Static:false, Public:false}, "lineNo", $.Int32); 
    $.Field({Static:false, Public:false}, "linePos", $.Int32); 
    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true }, "RawValue", $.String);

    $.Property({Static:false, Public:true }, "OriginalStringValue", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true }, "AttInfo", $asm05.TypeRef("System.Xml.AttributePSVIInfo"));

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.ValidationType", true, {
    None: 0, 
    Auto: 1, 
    DTD: 2, 
    XDR: 3, 
    Schema: 4
  }, false
);

JSIL.MakeEnum(
  "System.Xml.WhitespaceHandling", true, {
    All: 0, 
    Significant: 1, 
    None: 2
  }, false
);

(function XmlAutoDetectWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlRawWriter"), "System.Xml.XmlAutoDetectWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriterSettings"), $asm01.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter"), $asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Text.Encoding"), 
          $asm05.TypeRef("System.Xml.XmlWriterSettings")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateWrappedWriter", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlOutputMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureWrappedWriter", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlOutputMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceResolver", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OnRemoveWriterEvent", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.OnRemoveWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriterSettings"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsHtmlTag", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NamespaceResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_OnRemoveWriterEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.OnRemoveWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TextBlockCreatesWriter", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlStandalone")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "wrapped", $asm05.TypeRef("System.Xml.XmlRawWriter")); 
    $.Field({Static:false, Public:false}, "onRemove", $asm05.TypeRef("System.Xml.OnRemoveWriter")); 
    $.Field({Static:false, Public:false}, "writerSettings", $asm05.TypeRef("System.Xml.XmlWriterSettings")); 
    $.Field({Static:false, Public:false}, "eventCache", $asm05.TypeRef("System.Xml.XmlEventCache")); 
    $.Field({Static:false, Public:false}, "textWriter", $asm01.TypeRef("System.IO.TextWriter")); 
    $.Field({Static:false, Public:false}, "strm", $asm01.TypeRef("System.IO.Stream")); 
    $.Property({Static:false, Public:true , Virtual:true }, "OnRemoveWriterEvent", $asm05.TypeRef("System.Xml.OnRemoveWriter"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlWriterSettings"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceResolver", $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.ImplementInterfaces(
      /* 1 */ $asm05.TypeRef("System.Xml.IRemovableWriter")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlReader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlReader", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddLineInfo", 
      new JSIL.MethodSignature($.String, [$.String, $asm05.TypeRef("System.Xml.IXmlLineInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddValidation", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm05.TypeRef("System.Xml.XmlReaderSettings")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddWrapper", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $asm05.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm05.TypeRef("System.Xml.XmlReaderSettings")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CalcBufferSize", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanReadContentAs", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanReadContentAs", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String, $asm05.TypeRef("System.Xml.XmlReaderSettings")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm05.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm05.TypeRef("System.Xml.XmlParserContext")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.XmlReaderSettings")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.XmlReaderSettings"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm05.TypeRef("System.Xml.XmlParserContext")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.IO.TextReader")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.IO.TextReader"), $asm05.TypeRef("System.Xml.XmlReaderSettings")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("System.IO.TextReader"), $asm05.TypeRef("System.Xml.XmlReaderSettings"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("System.IO.TextReader"), $asm05.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm05.TypeRef("System.Xml.XmlParserContext")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm05.TypeRef("System.Xml.XmlReaderSettings")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDtdValidatingReader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlValidatingReaderImpl"), [$.Type, $asm05.TypeRef("System.Xml.XmlReaderSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReadContentAsException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateReadContentAsException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNodeType"), 
          $asm05.TypeRef("System.Xml.IXmlLineInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReadElementContentAsException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateReadElementContentAsException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNodeType"), 
          $asm05.TypeRef("System.Xml.IXmlLineInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateReaderImpl", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm02.TypeRef("System.Uri"), $.String, 
          $asm05.TypeRef("System.Xml.XmlParserContext"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateReaderImpl", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("System.IO.TextReader"), $asm05.TypeRef("System.Xml.XmlReaderSettings"), 
          $.String, $asm05.TypeRef("System.Xml.XmlParserContext")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateReaderImpl", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm05.TypeRef("System.Xml.XmlReaderSettings")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSqlReader", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm05.TypeRef("System.Xml.XmlParserContext")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadElementContentAsXxx", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_debuggerDisplayProxy", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceManager", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNamespaceManager"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDtdSchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaInfo"), [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncoding", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetV1ConformanceLevel", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ConformanceLevel"), [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXmlTextReaderImpl", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTextReaderImpl"), [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasValueInternal", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalReadContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsName", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsNameToken", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTextualNode", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToContent", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAs", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAs", 
      new JSIL.MethodSignature($.Object, [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDouble", 
      new JSIL.MethodSignature($.Double, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsFloat", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsFloat", 
      new JSIL.MethodSignature($.Single, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsInt", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsLong", 
      new JSIL.MethodSignature($.Int64, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsObject", 
      new JSIL.MethodSignature($.Object, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsString", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInnerXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadOuterXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSubtree", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToDescendant", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToDescendant", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToNextSibling", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToNextSibling", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNamespacesFlag", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlTextWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupReadElementContentAsXxx", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipSubtree", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(0, "Dispose");

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeValue", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlTextWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlTextWriter"), $.Boolean], [])
    );

    $.Constant({Static:true , Public:false}, "DefaultBufferSize", 4096); 
    $.Constant({Static:true , Public:false}, "BiggerBufferSize", 8192); 
    $.Constant({Static:true , Public:false}, "MaxStreamLengthForDefaultBufferSize", 65536); 
    $.Field({Static:true , Public:false}, "IsTextualNodeBitmap", $.UInt32, 24600); 
    $.Field({Static:true , Public:false}, "CanReadContentAsBitmap", $.UInt32, 123324); 
    $.Field({Static:true , Public:false}, "HasValueBitmap", $.UInt32, 157084); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm05.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:false}, "debuggerDisplayProxy", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{debuggerDisplayProxy}"]; });

})();

(function DebuggerDisplayProxy$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.XmlReader/DebuggerDisplayProxy", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "reader", $asm05.TypeRef("System.Xml.XmlReader")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{ToString()}"]; });

})();

(function XmlWrappingReader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlReader"), "System.Xml.XmlWrappingReader", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DtdSchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Reader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Reader", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "reader", $asm05.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "readerAsIXmlLineInfo", $asm05.TypeRef("System.Xml.IXmlLineInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm05.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:false}, "Reader", $asm05.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:false, Virtual:true }, "DtdSchemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.ImplementInterfaces(
      /* 1 */ $asm05.TypeRef("System.Xml.IXmlLineInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlCharCheckingReader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlWrappingReader"), "System.Xml.XmlCharCheckingReader", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlReader"), $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCharacters", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadBinary", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateQName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateQName", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.Field({Static:false, Public:false}, "state", $asm05.TypeRef("System.Xml.XmlCharCheckingReader/State")); 
    $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean); 
    $.Field({Static:false, Public:false}, "ignoreWhitespace", $.Boolean); 
    $.Field({Static:false, Public:false}, "ignoreComments", $.Boolean); 
    $.Field({Static:false, Public:false}, "ignorePis", $.Boolean); 
    $.Field({Static:false, Public:false}, "prohibitDtd", $.Boolean); 
    $.Field({Static:false, Public:false}, "lastNodeType", $asm05.TypeRef("System.Xml.XmlNodeType")); 
    $.Field({Static:false, Public:false}, "xmlCharType", $asm05.TypeRef("System.Xml.XmlCharType")); 
    $.Field({Static:false, Public:false}, "readBinaryHelper", $asm05.TypeRef("System.Xml.ReadContentAsBinaryHelper")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm05.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XmlCharCheckingReader/State", false, {
    Initial: 0, 
    InReadBinary: 1, 
    Error: 2, 
    Interactive: 3
  }, false
);

(function XmlCharCheckingReaderWithNS$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlCharCheckingReader"), "System.Xml.XmlCharCheckingReaderWithNS", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    )
      .Overrides(2, "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(2, "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(2, "LookupPrefix");

    $.Field({Static:false, Public:false}, "readerAsNSResolver", $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")); 
    $.ImplementInterfaces(
      /* 2 */ $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlWrappingWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlWriter"), "System.Xml.XmlWrappingWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriterSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Writer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.WriteState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Writer", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "writer", $asm05.TypeRef("System.Xml.XmlWriter")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlWriterSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm05.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:false}, "Writer", $asm05.TypeRef("System.Xml.XmlWriter"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlCharCheckingWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlWrappingWriter"), "System.Xml.XmlCharCheckingWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlWriter"), $.Boolean, 
          $.Boolean, $.Boolean, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCharacters", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCharacters", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriterSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InterleaveInvalidChars", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Char, 
          $.Char
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceNewLines", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceNewLines", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateNCName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateQName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "checkValues", $.Boolean); 
    $.Field({Static:false, Public:false}, "checkNames", $.Boolean); 
    $.Field({Static:false, Public:false}, "replaceNewLines", $.Boolean); 
    $.Field({Static:false, Public:false}, "newLineChars", $.String); 
    $.Field({Static:false, Public:false}, "xmlCharType", $asm05.TypeRef("System.Xml.XmlCharType")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlWriterSettings"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xml.XmlConfiguration");
(function XmlConfigurationString$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Xml.XmlConfiguration.XmlConfigurationString", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "XmlReaderSectionName", "xmlReader"); 
    $.Constant({Static:true , Public:false}, "XmlTextReaderSectionName", "xmlTextReader"); 
    $.Constant({Static:true , Public:false}, "XsltSectionName", "xslt"); 
    $.Constant({Static:true , Public:false}, "ProhibitDefaultResolverName", "prohibitDefaultResolver"); 
    $.Constant({Static:true , Public:false}, "LimitCharactersFromEntitiesName", "limitCharactersFromEntities"); 
    $.Constant({Static:true , Public:false}, "LimitXPathComplexityName", "limitXPathComplexity"); 
    $.Constant({Static:true , Public:false}, "EnableMemberAccessForXslCompiledTransformName", "enableMemberAccessForXslCompiledTransform"); 
    $.Constant({Static:true , Public:false}, "XmlConfigurationSectionName", "system.xml"); 
    $.Field({Static:true , Public:false}, "XmlReaderSectionPath", $.String); 
    $.Field({Static:true , Public:false}, "XmlTextReaderSectionPath", $.String); 
    $.Field({Static:true , Public:false}, "XsltSectionPath", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlReaderSection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationSection"), "System.Xml.XmlConfiguration.XmlReaderSection", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDefaultResolver", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlResolver"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get__ProhibitDefaultResolver", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProhibitDefaultResolverString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProhibitDefaultUrlResolver", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ProhibitDefaultResolverString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Property({Static:false, Public:false}, "ProhibitDefaultResolverString", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["prohibitDefaultResolver"]; });

    $.Property({Static:false, Public:false}, "_ProhibitDefaultResolver", $.Boolean);

    $.Property({Static:true , Public:false}, "ProhibitDefaultUrlResolver", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm02.System.ComponentModel.EditorBrowsableState.Never]; });

})();

(function XmlTextReaderSection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationSection"), "System.Xml.XmlConfiguration.XmlTextReaderSection", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get__LimitCharactersFromEntities", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LimitCharactersFromEntities", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LimitCharactersFromEntitiesString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LimitCharactersFromEntitiesString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Property({Static:false, Public:false}, "LimitCharactersFromEntitiesString", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["limitCharactersFromEntities"]; });

    $.Property({Static:false, Public:false}, "_LimitCharactersFromEntities", $.Boolean);

    $.Property({Static:true , Public:false}, "LimitCharactersFromEntities", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm02.System.ComponentModel.EditorBrowsableState.Never]; });

})();

(function XsltConfigSection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationSection"), "System.Xml.XmlConfiguration.XsltConfigSection", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDefaultResolver", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlResolver"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get__EnableMemberAccessForXslCompiledTransform", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get__LimitXPathComplexity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get__ProhibitDefaultResolver", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EnableMemberAccessForXslCompiledTransform", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnableMemberAccessForXslCompiledTransformString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LimitXPathComplexity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LimitXPathComplexityString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProhibitDefaultResolverString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_s_ProhibitDefaultUrlResolver", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EnableMemberAccessForXslCompiledTransformString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LimitXPathComplexityString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ProhibitDefaultResolverString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Property({Static:false, Public:false}, "ProhibitDefaultResolverString", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["prohibitDefaultResolver"]; });

    $.Property({Static:false, Public:false}, "_ProhibitDefaultResolver", $.Boolean);

    $.Property({Static:true , Public:false}, "s_ProhibitDefaultUrlResolver", $.Boolean);

    $.Property({Static:false, Public:false}, "LimitXPathComplexityString", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["limitXPathComplexity"]; });

    $.Property({Static:false, Public:false}, "_LimitXPathComplexity", $.Boolean);

    $.Property({Static:true , Public:true }, "LimitXPathComplexity", $.Boolean);

    $.Property({Static:false, Public:false}, "EnableMemberAccessForXslCompiledTransformString", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["enableMemberAccessForXslCompiledTransform"]; });

    $.Property({Static:false, Public:false}, "_EnableMemberAccessForXslCompiledTransform", $.Boolean);

    $.Property({Static:true , Public:false}, "EnableMemberAccessForXslCompiledTransform", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm02.System.ComponentModel.EditorBrowsableState.Never]; });

})();

(function XmlEncodedRawTextWriterIndent$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlEncodedRawTextWriter"), "System.Xml.XmlEncodedRawTextWriterIndent", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter"), $asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Text.Encoding"), 
          $asm05.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriterSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRootElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.ConformanceLevel")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "indentLevel", $.Int32); 
    $.Field({Static:false, Public:false}, "newLineOnAttributes", $.Boolean); 
    $.Field({Static:false, Public:false}, "indentChars", $.String); 
    $.Field({Static:false, Public:false}, "mixedContent", $.Boolean); 
    $.Field({Static:false, Public:false}, "mixedContentStack", $asm05.TypeRef("System.Xml.BitStack")); 
    $.Field({Static:false, Public:false}, "conformanceLevel", $asm05.TypeRef("System.Xml.ConformanceLevel")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlWriterSettings"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlEventCache$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlRawWriter"), "System.Xml.XmlEventCache", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlEventCache/XmlEventType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.String, 
          $.String, $.String, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndEvents", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EventsToString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EventsToWriter", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseUri", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasRootNode", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriterSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewEvent", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndBase64", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlStandalone")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "InitialPageSize", 32); 
    $.Field({Static:false, Public:false}, "pages", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "pageCurr", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlEventCache/XmlEvent")])); 
    $.Field({Static:false, Public:false}, "pageSize", $.Int32); 
    $.Field({Static:false, Public:false}, "hasRootNode", $.Boolean); 
    $.Field({Static:false, Public:false}, "singleText", $asm07.TypeRef("System.Xml.Xsl.Runtime.StringConcat")); 
    $.Field({Static:false, Public:false}, "baseUri", $.String); 
    $.Property({Static:false, Public:true }, "BaseUri", $.String);

    $.Property({Static:false, Public:true }, "HasRootNode", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlWriterSettings"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XmlEventCache/XmlEventType", false, {
    Unknown: 0, 
    DocType: 1, 
    StartElem: 2, 
    StartAttr: 3, 
    EndAttr: 4, 
    CData: 5, 
    Comment: 6, 
    PI: 7, 
    Whitespace: 8, 
    String: 9, 
    Raw: 10, 
    EntRef: 11, 
    CharEnt: 12, 
    SurrCharEnt: 13, 
    Base64: 14, 
    BinHex: 15, 
    XmlDecl1: 16, 
    XmlDecl2: 17, 
    StartContent: 18, 
    EndElem: 19, 
    FullEndElem: 20, 
    Nmsp: 21, 
    EndBase64: 22, 
    Close: 23, 
    Flush: 24, 
    Dispose: 25
  }, false
);

(function XmlEvent$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.XmlEventCache/XmlEvent", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, "get_EventType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlEventCache/XmlEventType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_String1", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_String2", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_String3", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlEventCache/XmlEventType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.String, 
          $.String, $.String, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlEventCache/XmlEventType"), $.Object], [])
    );

    $.Field({Static:false, Public:false}, "eventType", $asm05.TypeRef("System.Xml.XmlEventCache/XmlEventType")); 
    $.Field({Static:false, Public:false}, "s1", $.String); 
    $.Field({Static:false, Public:false}, "s2", $.String); 
    $.Field({Static:false, Public:false}, "s3", $.String); 
    $.Field({Static:false, Public:false}, "o", $.Object); 
    $.Property({Static:false, Public:true }, "EventType", $asm05.TypeRef("System.Xml.XmlEventCache/XmlEventType"));

    $.Property({Static:false, Public:true }, "String1", $.String);

    $.Property({Static:false, Public:true }, "String2", $.String);

    $.Property({Static:false, Public:true }, "String3", $.String);

    $.Property({Static:false, Public:true }, "Object", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlParserContext$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlParserContext", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.XmlNamespaceManager"), 
          $.String, $asm05.TypeRef("System.Xml.XmlSpace")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.XmlNamespaceManager"), 
          $.String, $asm05.TypeRef("System.Xml.XmlSpace"), 
          $asm01.TypeRef("System.Text.Encoding")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.XmlNamespaceManager"), 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XmlSpace")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.XmlNamespaceManager"), 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XmlSpace"), $asm01.TypeRef("System.Text.Encoding")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DocTypeName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDtdInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InternalSubset", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceManager", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNamespaceManager"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicId", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SystemId", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseURI", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DocTypeName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Encoding", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InternalSubset", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NamespaceManager", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNamespaceManager")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NameTable", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PublicId", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SystemId", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlLang", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSpace", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlSpace")], [])
    );

    $.Field({Static:false, Public:false}, "_nt", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "_nsMgr", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Field({Static:false, Public:false}, "_docTypeName", $.String); 
    $.Field({Static:false, Public:false}, "_pubId", $.String); 
    $.Field({Static:false, Public:false}, "_sysId", $.String); 
    $.Field({Static:false, Public:false}, "_internalSubset", $.String); 
    $.Field({Static:false, Public:false}, "_xmlLang", $.String); 
    $.Field({Static:false, Public:false}, "_xmlSpace", $asm05.TypeRef("System.Xml.XmlSpace")); 
    $.Field({Static:false, Public:false}, "_baseURI", $.String); 
    $.Field({Static:false, Public:false}, "_encoding", $asm01.TypeRef("System.Text.Encoding")); 
    $.Property({Static:false, Public:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true }, "NamespaceManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:true }, "DocTypeName", $.String);

    $.Property({Static:false, Public:true }, "PublicId", $.String);

    $.Property({Static:false, Public:true }, "SystemId", $.String);

    $.Property({Static:false, Public:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true }, "InternalSubset", $.String);

    $.Property({Static:false, Public:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true }, "Encoding", $asm01.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false}, "HasDtdInfo", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlReaderSettings$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlReaderSettings", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ValidationEventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckReadOnly", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDefaultResolver", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlResolver"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanResolveExternals", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CheckCharacters", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CloseInput", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConformanceLevel", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ConformanceLevel"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreComments", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreProcessingInstructions", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreWhitespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsXmlResolverSet", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumberOffset", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePositionOffset", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxCharactersFromEntities", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxCharactersInDocument", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProhibitDtd", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schemas", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidationFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidationType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ValidationType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEventHandler", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXmlResolver", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlResolver"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXmlResolver_CheckConfig", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlResolver"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ValidationEventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CheckCharacters", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CloseInput", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConformanceLevel", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.ConformanceLevel")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreComments", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreProcessingInstructions", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreWhitespace", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsXmlResolverSet", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LineNumberOffset", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LinePositionOffset", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxCharactersFromEntities", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxCharactersInDocument", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NameTable", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProhibitDtd", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReadOnly", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schemas", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ValidationFlags", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ValidationType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.ValidationType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "xmlResolver", $asm05.TypeRef("System.Xml.XmlResolver")); 
    $.Field({Static:false, Public:false}, "lineNumberOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "linePositionOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "conformanceLevel", $asm05.TypeRef("System.Xml.ConformanceLevel")); 
    $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean); 
    $.Field({Static:false, Public:false}, "maxCharactersInDocument", $.Int64); 
    $.Field({Static:false, Public:false}, "maxCharactersFromEntities", $.Int64); 
    $.Field({Static:false, Public:false}, "validationType", $asm05.TypeRef("System.Xml.ValidationType")); 
    $.Field({Static:false, Public:false}, "validationFlags", $asm05.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags")); 
    $.Field({Static:false, Public:false}, "schemas", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
    $.Field({Static:false, Public:false}, "valEventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "ignoreWhitespace", $.Boolean); 
    $.Field({Static:false, Public:false}, "ignorePIs", $.Boolean); 
    $.Field({Static:false, Public:false}, "ignoreComments", $.Boolean); 
    $.Field({Static:false, Public:false}, "prohibitDtd", $.Boolean); 
    $.Field({Static:false, Public:false}, "closeInput", $.Boolean); 
    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean); 
    $.Field({Static:false, Public:false}, "isXmlResolverSet", $.Boolean); 
    $.Property({Static:false, Public:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false}, "IsXmlResolverSet", $.Boolean);

    $.Property({Static:false, Public:true }, "XmlResolver", $asm05.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "LineNumberOffset", $.Int32);

    $.Property({Static:false, Public:true }, "LinePositionOffset", $.Int32);

    $.Property({Static:false, Public:true }, "ConformanceLevel", $asm05.TypeRef("System.Xml.ConformanceLevel"));

    $.Property({Static:false, Public:true }, "CheckCharacters", $.Boolean);

    $.Property({Static:false, Public:true }, "MaxCharactersInDocument", $.Int64);

    $.Property({Static:false, Public:true }, "MaxCharactersFromEntities", $.Int64);

    $.Property({Static:false, Public:true }, "ValidationType", $asm05.TypeRef("System.Xml.ValidationType"));

    $.Property({Static:false, Public:true }, "ValidationFlags", $asm05.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags"));

    $.Property({Static:false, Public:true }, "Schemas", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Property({Static:false, Public:true }, "IgnoreWhitespace", $.Boolean);

    $.Property({Static:false, Public:true }, "IgnoreProcessingInstructions", $.Boolean);

    $.Property({Static:false, Public:true }, "IgnoreComments", $.Boolean);

    $.Property({Static:false, Public:true }, "ProhibitDtd", $.Boolean);

    $.Property({Static:false, Public:true }, "CloseInput", $.Boolean);

    $.Property({Static:false, Public:false}, "ReadOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "CanResolveExternals", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XmlSpace", true, {
    None: 0, 
    Default: 1, 
    Preserve: 2
  }, false
);

(function XmlSubtreeReader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlWrappingReader"), "System.Xml.XmlSubtreeReader", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamespace", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadContentAsBinary", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadContentAsType", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadElementContentAsBinary", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DtdSchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InAttributeActiveState", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InNamespaceActiveState", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitReadContentAsType", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitReadElementContentAsBinary", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlSubtreeReader/State")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNsAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessNamespaces", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveNamespace", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCurrentNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlSubtreeReader/NodeData")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetEmptyNode", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    )
      .Overrides(2, "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(2, "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(2, "LookupPrefix");

    $.Constant({Static:true , Public:false}, "AttributeActiveStates", 98); 
    $.Constant({Static:true , Public:false}, "NamespaceActiveStates", 2018); 
    $.Field({Static:false, Public:false}, "initialDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "state", $asm05.TypeRef("System.Xml.XmlSubtreeReader/State")); 
    $.Field({Static:false, Public:false}, "nsManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Field({Static:false, Public:false}, "nsAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlSubtreeReader/NodeData")])); 
    $.Field({Static:false, Public:false}, "nsAttrCount", $.Int32); 
    $.Field({Static:false, Public:false}, "curNsAttr", $.Int32); 
    $.Field({Static:false, Public:false}, "xmlns", $.String); 
    $.Field({Static:false, Public:false}, "xmlnsUri", $.String); 
    $.Field({Static:false, Public:false}, "useCurNode", $.Boolean); 
    $.Field({Static:false, Public:false}, "curNode", $asm05.TypeRef("System.Xml.XmlSubtreeReader/NodeData")); 
    $.Field({Static:false, Public:false}, "tmpNode", $asm05.TypeRef("System.Xml.XmlSubtreeReader/NodeData")); 
    $.Field({Static:false, Public:false}, "InitialNamespaceAttributeCount", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm05.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "DtdSchemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:false}, "InAttributeActiveState", $.Boolean);

    $.Property({Static:false, Public:false}, "InNamespaceActiveState", $.Boolean);

    $.ImplementInterfaces(
      /* 2 */ $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NodeData$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlSubtreeReader/NodeData", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNodeType"), $.String, 
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.Field({Static:false, Public:false}, "type", $asm05.TypeRef("System.Xml.XmlNodeType")); 
    $.Field({Static:false, Public:false}, "localName", $.String); 
    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
    $.Field({Static:false, Public:false}, "value", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XmlSubtreeReader/State", false, {
    Initial: 0, 
    Interactive: 1, 
    Error: 2, 
    EndOfFile: 3, 
    Closed: 4, 
    PopNamespaceScope: 5, 
    ClearNsAttributes: 6, 
    ReadElementContentAsBase64: 7, 
    ReadElementContentAsBinHex: 8, 
    ReadContentAsBase64: 9, 
    ReadContentAsBinHex: 10
  }, false
);

(function XmlTextEncoder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlTextEncoder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttributeValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_QuoteChar", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartAttribute", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCharEntityImpl", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCharEntityImpl", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEntityRefImpl", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRawWithSurrogateChecking", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStringFragment", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSurrogateChar", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.Constant({Static:true , Public:false}, "SurHighStart", 55296); 
    $.Constant({Static:true , Public:false}, "SurHighEnd", 56319); 
    $.Constant({Static:true , Public:false}, "SurLowStart", 56320); 
    $.Constant({Static:true , Public:false}, "SurLowEnd", 57343); 
    $.Field({Static:false, Public:false}, "textWriter", $asm01.TypeRef("System.IO.TextWriter")); 
    $.Field({Static:false, Public:false}, "inAttribute", $.Boolean); 
    $.Field({Static:false, Public:false}, "quoteChar", $.Char); 
    $.Field({Static:false, Public:false}, "attrValue", $asm05.TypeRef("System.Xml.BufferBuilder")); 
    $.Field({Static:false, Public:false}, "cacheAttrValue", $.Boolean); 
    $.Field({Static:false, Public:false}, "xmlCharType", $asm05.TypeRef("System.Xml.XmlCharType")); 
    $.Property({Static:false, Public:false}, "QuoteChar", $.Char);

    $.Property({Static:false, Public:false}, "AttributeValue", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlTextReader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlReader"), "System.Xml.XmlTextReader", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.IO.Stream"), 
          $asm05.TypeRef("System.Xml.XmlNameTable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.IO.TextReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextReader"), $asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.IO.TextReader"), 
          $asm05.TypeRef("System.Xml.XmlNameTable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.XmlNodeType"), 
          $asm05.TypeRef("System.Xml.XmlParserContext")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.XmlNodeType"), 
          $asm05.TypeRef("System.Xml.XmlParserContext")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EntityHandling", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.EntityHandling"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Impl", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTextReaderImpl"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceManager", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNamespaceManager"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Normalization", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProhibitDtd", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WhitespaceHandling", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.WhitespaceHandling"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRemainder", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.TextReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetState", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EntityHandling", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.EntityHandling")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespaces", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Normalization", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProhibitDtd", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WhitespaceHandling", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.WhitespaceHandling")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlValidatingReaderCompatibilityMode", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    )
      .Overrides(2, "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(2, "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(2, "LookupPrefix");

    $.Field({Static:false, Public:false}, "impl", $asm05.TypeRef("System.Xml.XmlTextReaderImpl")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm05.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "Namespaces", $.Boolean);

    $.Property({Static:false, Public:true }, "Normalization", $.Boolean);

    $.Property({Static:false, Public:true }, "Encoding", $asm01.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:true }, "WhitespaceHandling", $asm05.TypeRef("System.Xml.WhitespaceHandling"));

    $.Property({Static:false, Public:true }, "ProhibitDtd", $.Boolean);

    $.Property({Static:false, Public:true }, "EntityHandling", $asm05.TypeRef("System.Xml.EntityHandling"));

    $.Property({Static:false, Public:true }, "XmlResolver", $asm05.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:false}, "Impl", $asm05.TypeRef("System.Xml.XmlTextReaderImpl"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:false}, "XmlValidatingReaderCompatibilityMode", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm05.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 2 */ $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlTextReaderImpl$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlReader"), "System.Xml.XmlTextReaderImpl", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlResolver"), $asm05.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm05.TypeRef("System.Xml.XmlParserContext")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.IO.Stream"), 
          $asm05.TypeRef("System.Xml.XmlNameTable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextReader"), $asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.IO.TextReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.IO.TextReader"), 
          $asm05.TypeRef("System.Xml.XmlNameTable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.XmlNodeType"), 
          $asm05.TypeRef("System.Xml.XmlParserContext")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.XmlNodeType"), 
          $asm05.TypeRef("System.Xml.XmlParserContext")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlParserContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $asm05.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm02.TypeRef("System.Uri"), $.String, 
          $asm05.TypeRef("System.Xml.XmlParserContext"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.TextReader"), $asm05.TypeRef("System.Xml.XmlReaderSettings"), 
          $.String, $asm05.TypeRef("System.Xml.XmlParserContext")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.XmlParserContext"), 
          $asm05.TypeRef("System.Xml.XmlReaderSettings")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData"), [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData"), [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttributeChunkToList", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData"), $asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttributeNoChecks", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData"), [$.String, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDefaultAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.SchemaAttDef"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDefaultAttribute", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.SchemaAttDef"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDefaultAttributesAndNormalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamespace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData"), [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AdjustLineInfo", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.LineInfo")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData"), [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AttributeDuplCheck", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AttributeNamespaceLookup", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeCurrentNodeType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckEncoding", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DetectEncoding", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_OnNewLine", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_OnPublicId", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.LineInfo"), 
          $asm05.TypeRef("System.Xml.LineInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_OnSystemId", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.LineInfo"), 
          $asm05.TypeRef("System.Xml.LineInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_ParseComment", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.BufferBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_ParseNamedCharRef", 
      new JSIL.MethodSignature($.Int32, [$.Boolean, $asm05.TypeRef("System.Xml.BufferBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_ParseNumericCharRef", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.BufferBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_ParsePI", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.BufferBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_PopEntity", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Schema.SchemaEntity")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_PushEntity", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.SchemaEntity"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_PushExternalSubset", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_PushInternalDtd", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_ReadData", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSeverityType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_Throw", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EatWhitespaces", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.BufferBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ElementNamespaceLookup", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishAttributeValueIterator", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishIncrementalRead", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishOtherValueIterator", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishPartialValue", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadContentAsBinary", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadElementContentAsBinary", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadValueChunk", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FullAttributeCleanup", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_BaseUri", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Uri"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_DtdValidation", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_EntityStackLength", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_EventHandler", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_IsEntityEolNormalized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_IsEof", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_LineNo", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_LineStartPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_NamespaceManager", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNamespaceManager"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_Namespaces", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_Normalization", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_ParsingBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_ParsingBufferLength", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_V1CompatibilityMode", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdSchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdValidation", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Encoding", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EntityHandling", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.EntityHandling"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FragmentType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InAttributeValueIterator", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InEntity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalSchemaType", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalTypedValue", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsResolverNull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceManager", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNamespaceManager"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespaces", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Normalization", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OuterReader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProhibitDtd", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StandAlone", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_V1ComformanceLevel", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ConformanceLevel"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_V1Compat", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WhitespaceHandling", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.WhitespaceHandling"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChars", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIndexOfAttributeWithoutPrefix", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIndexOfAttributeWithPrefix", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRemainder", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.TextReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResolver", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlResolver"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTextNodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetWhitespaceType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleEntityEnd", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleEntityReference", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTextReaderImpl/EntityType"), [
          $.Boolean, $asm05.TypeRef("System.Xml.XmlTextReaderImpl/EntityExpandType"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleGeneralEntityReference", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTextReaderImpl/EntityType"), [
          $.String, $.Boolean, 
          $.Boolean, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementalRead", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementalRead", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitBase64Decoder", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitBinHexDecoder", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitFragmentReader", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNodeType"), $asm05.TypeRef("System.Xml.XmlParserContext"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitIncrementalRead", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.IncrementalReadDecoder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitReadContentAsBinary", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitReadElementContentAsBinary", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitStreamInput", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitStreamInput", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.IO.Stream"), 
          $asm01.TypeRef("System.Text.Encoding")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitStreamInput", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Uri"), $asm01.TypeRef("System.IO.Stream"), 
          $asm01.TypeRef("System.Text.Encoding")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitStreamInput", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Uri"), $.String, 
          $asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Text.Encoding")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitStreamInput", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.Uri"), $.String, 
          $asm01.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $asm01.TypeRef("System.Text.Encoding")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitStringInput", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Text.Encoding"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitTextReaderInput", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.IO.TextReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidCharRecovery", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveOffEntityReference", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNextContentNode", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDefaultNamespaceDecl", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnEof", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNamespaceDecl", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNewLine", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnXmlReservedAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenStream", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$asm02.TypeRef("System.Uri")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenUrl", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenUrlDelegate", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAttributeValueChunk", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAttributeValueSlow", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Char, 
          $asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseCData", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseCDataOrComment", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseCDataOrComment", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.XmlNodeType"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseCharRefInline", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.XmlTextReaderImpl/EntityType")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseComment", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDoctypeDecl", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDocumentContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDtdFromParserContext", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseElementContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseEntityName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseEntityReference", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseFragmentAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseName", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseNamedCharRef", 
      new JSIL.MethodSignature($.Int32, [$.Boolean, $asm05.TypeRef("System.Xml.BufferBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseNamedCharRefInline", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Boolean, 
          $asm05.TypeRef("System.Xml.BufferBuilder")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseNumericCharRef", 
      new JSIL.MethodSignature($.Int32, [
          $.Boolean, $asm05.TypeRef("System.Xml.BufferBuilder"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.XmlTextReaderImpl/EntityType")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseNumericCharRefInline", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Boolean, 
          $asm05.TypeRef("System.Xml.BufferBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.XmlTextReaderImpl/EntityType")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePI", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePI", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.BufferBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePIValue", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseQName", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseQName", 
      new JSIL.MethodSignature($.Int32, [
          $.Boolean, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseRootLevelWhitespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseText", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseText", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseUnexpectedToken", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseUnexpectedToken", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseXmlDeclaration", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseXmlDeclarationFragment", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopElementContext", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopParsingState", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopXmlContext", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushExternalEntity", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.SchemaEntity"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushInternalEntity", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaEntity"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushParsingState", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushXmlContext", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBinary", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadData", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDataInName", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadElementContentAsBinary", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterConsumedCharacters", 
      new JSIL.MethodSignature(null, [$.Int64, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetState", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReThrow", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Exception"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSeverityType"), $.String, 
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSeverityType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DisableUndeclaredEntityCheck", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DtdParserProxy_CurrentPosition", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DtdParserProxy_EventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DtdSchemaInfo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EntityHandling", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.EntityHandling")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InternalSchemaType", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InternalTypedValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Namespaces", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Normalization", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_OuterReader", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ProhibitDtd", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ValidationEventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_WhitespaceHandling", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.WhitespaceHandling")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlValidatingReaderCompatibilityMode", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetErrorState", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupEncoding", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupEndEntityNodeInAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupEndEntityNodeInContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupFromParserContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlParserContext"), $asm05.TypeRef("System.Xml.XmlReaderSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupReadContentAsBinaryState", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlTextReaderImpl/ParsingFunction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShiftBuffer", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipPartialTextValue", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SwitchEncoding", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SwitchEncodingToUTF8", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    )
      .Overrides(2, "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(2, "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(2, "LookupPrefix");

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [$.Int32, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidChar", 
      new JSIL.MethodSignature(null, [$.Int32, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowTagMismatch", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnclosedElements", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
      new JSIL.MethodSignature(null, [$.Int32, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowWithoutLineInfo", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowWithoutLineInfo", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowWithoutLineInfo", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnDecodeChars", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UriEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Uri"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ZeroEndingStream", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.Constant({Static:true , Public:false}, "MaxBytesToMove", 128); 
    $.Constant({Static:true , Public:false}, "ApproxXmlDeclLength", 80); 
    $.Constant({Static:true , Public:false}, "NodesInitialSize", 8); 
    $.Constant({Static:true , Public:false}, "InitialAttributesCount", 4); 
    $.Constant({Static:true , Public:false}, "InitialParsingStateStackSize", 2); 
    $.Constant({Static:true , Public:false}, "InitialParsingStatesDepth", 2); 
    $.Constant({Static:true , Public:false}, "DtdChidrenInitialSize", 2); 
    $.Constant({Static:true , Public:false}, "MaxByteSequenceLen", 6); 
    $.Constant({Static:true , Public:false}, "MaxAttrDuplWalkCount", 250); 
    $.Constant({Static:true , Public:false}, "MinWhitespaceLookahedCount", 4096); 
    $.Constant({Static:true , Public:false}, "XmlDeclarationBegining", "<?xml"); 
    $.Constant({Static:true , Public:false}, "SurHighStart", 55296); 
    $.Constant({Static:true , Public:false}, "SurHighEnd", 56319); 
    $.Constant({Static:true , Public:false}, "SurLowStart", 56320); 
    $.Constant({Static:true , Public:false}, "SurLowEnd", 57343); 
    $.Field({Static:false, Public:false}, "xmlCharType", $asm05.TypeRef("System.Xml.XmlCharType")); 
    $.Field({Static:false, Public:false}, "ps", $asm05.TypeRef("System.Xml.XmlTextReaderImpl/ParsingState")); 
    $.Field({Static:false, Public:false}, "parsingFunction", $asm05.TypeRef("System.Xml.XmlTextReaderImpl/ParsingFunction")); 
    $.Field({Static:false, Public:false}, "nextParsingFunction", $asm05.TypeRef("System.Xml.XmlTextReaderImpl/ParsingFunction")); 
    $.Field({Static:false, Public:false}, "nextNextParsingFunction", $asm05.TypeRef("System.Xml.XmlTextReaderImpl/ParsingFunction")); 
    $.Field({Static:false, Public:false}, "nodes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")])); 
    $.Field({Static:false, Public:false}, "curNode", $asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")); 
    $.Field({Static:false, Public:false}, "index", $.Int32); 
    $.Field({Static:false, Public:false}, "curAttrIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "attrCount", $.Int32); 
    $.Field({Static:false, Public:false}, "attrHashtable", $.Int32); 
    $.Field({Static:false, Public:false}, "attrDuplWalkCount", $.Int32); 
    $.Field({Static:false, Public:false}, "attrNeedNamespaceLookup", $.Boolean); 
    $.Field({Static:false, Public:false}, "fullAttrCleanup", $.Boolean); 
    $.Field({Static:false, Public:false}, "attrDuplSortingArray", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlTextReaderImpl/NodeData")])); 
    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "nameTableFromSettings", $.Boolean); 
    $.Field({Static:false, Public:false}, "xmlResolver", $asm05.TypeRef("System.Xml.XmlResolver")); 
    $.Field({Static:false, Public:false}, "url", $.String); 
    $.Field({Static:false, Public:false}, "compressedStack", $asm01.TypeRef("System.Threading.CompressedStack")); 
    $.Field({Static:false, Public:false}, "normalize", $.Boolean); 
    $.Field({Static:false, Public:false}, "supportNamespaces", $.Boolean); 
    $.Field({Static:false, Public:false}, "whitespaceHandling", $asm05.TypeRef("System.Xml.WhitespaceHandling")); 
    $.Field({Static:false, Public:false}, "prohibitDtd", $.Boolean); 
    $.Field({Static:false, Public:false}, "entityHandling", $asm05.TypeRef("System.Xml.EntityHandling")); 
    $.Field({Static:false, Public:false}, "ignorePIs", $.Boolean); 
    $.Field({Static:false, Public:false}, "ignoreComments", $.Boolean); 
    $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean); 
    $.Field({Static:false, Public:false}, "lineNumberOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "linePositionOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "closeInput", $.Boolean); 
    $.Field({Static:false, Public:false}, "maxCharactersInDocument", $.Int64); 
    $.Field({Static:false, Public:false}, "maxCharactersFromEntities", $.Int64); 
    $.Field({Static:false, Public:false}, "v1Compat", $.Boolean); 
    $.Field({Static:false, Public:false}, "namespaceManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Field({Static:false, Public:false}, "lastPrefix", $.String); 
    $.Field({Static:false, Public:false}, "xmlContext", $asm05.TypeRef("System.Xml.XmlTextReaderImpl/XmlContext")); 
    $.Field({Static:false, Public:false}, "parsingStatesStack", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlTextReaderImpl/ParsingState")])); 
    $.Field({Static:false, Public:false}, "parsingStatesStackTop", $.Int32); 
    $.Field({Static:false, Public:false}, "reportedBaseUri", $.String); 
    $.Field({Static:false, Public:false}, "reportedEncoding", $asm01.TypeRef("System.Text.Encoding")); 
    $.Field({Static:false, Public:false}, "dtdParserProxy", $asm05.TypeRef("System.Xml.XmlTextReaderImpl/DtdParserProxy")); 
    $.Field({Static:false, Public:false}, "fragmentType", $asm05.TypeRef("System.Xml.XmlNodeType")); 
    $.Field({Static:false, Public:false}, "fragment", $.Boolean); 
    $.Field({Static:false, Public:false}, "fragmentParserContext", $asm05.TypeRef("System.Xml.XmlParserContext")); 
    $.Field({Static:false, Public:false}, "incReadDecoder", $asm05.TypeRef("System.Xml.IncrementalReadDecoder")); 
    $.Field({Static:false, Public:false}, "incReadState", $asm05.TypeRef("System.Xml.XmlTextReaderImpl/IncrementalReadState")); 
    $.Field({Static:false, Public:false}, "incReadDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "incReadLeftStartPos", $.Int32); 
    $.Field({Static:false, Public:false}, "incReadLeftEndPos", $.Int32); 
    $.Field({Static:false, Public:false}, "incReadLineInfo", $asm05.TypeRef("System.Xml.LineInfo")); 
    $.Field({Static:false, Public:false}, "readCharsDecoder", $asm05.TypeRef("System.Xml.IncrementalReadCharsDecoder")); 
    $.Field({Static:false, Public:false}, "binHexDecoder", $asm05.TypeRef("System.Xml.BinHexDecoder")); 
    $.Field({Static:false, Public:false}, "base64Decoder", $asm05.TypeRef("System.Xml.Base64Decoder")); 
    $.Field({Static:false, Public:false}, "attributeValueBaseEntityId", $.Int32); 
    $.Field({Static:false, Public:false}, "emptyEntityInAttributeResolved", $.Boolean); 
    $.Field({Static:false, Public:false}, "validationEventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "validatingReaderCompatFlag", $.Boolean); 
    $.Field({Static:false, Public:false}, "addDefaultAttributesAndNormalize", $.Boolean); 
    $.Field({Static:false, Public:false}, "qName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "stringBuilder", $asm05.TypeRef("System.Xml.BufferBuilder")); 
    $.Field({Static:false, Public:false}, "rootElementParsed", $.Boolean); 
    $.Field({Static:false, Public:false}, "standalone", $.Boolean); 
    $.Field({Static:false, Public:false}, "nextEntityId", $.Int32); 
    $.Field({Static:false, Public:false}, "parsingMode", $asm05.TypeRef("System.Xml.XmlTextReaderImpl/ParsingMode")); 
    $.Field({Static:false, Public:false}, "readState", $asm05.TypeRef("System.Xml.ReadState")); 
    $.Field({Static:false, Public:false}, "lastEntity", $asm05.TypeRef("System.Xml.Schema.SchemaEntity")); 
    $.Field({Static:false, Public:false}, "afterResetState", $.Boolean); 
    $.Field({Static:false, Public:false}, "documentStartBytePos", $.Int32); 
    $.Field({Static:false, Public:false}, "readValueOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "charactersInDocument", $.Int64); 
    $.Field({Static:false, Public:false}, "charactersFromEntities", $.Int64); 
    $.Field({Static:false, Public:false}, "disableUndeclaredEntityCheck", $.Boolean); 
    $.Field({Static:false, Public:false}, "outerReader", $asm05.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "xmlResolverIsSet", $.Boolean); 
    $.Field({Static:false, Public:false}, "Xml", $.String); 
    $.Field({Static:false, Public:false}, "XmlNs", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm05.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:false}, "OuterReader", $asm05.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:false}, "Namespaces", $.Boolean);

    $.Property({Static:false, Public:false}, "Normalization", $.Boolean);

    $.Property({Static:false, Public:false}, "Encoding", $asm01.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false}, "WhitespaceHandling", $asm05.TypeRef("System.Xml.WhitespaceHandling"));

    $.Property({Static:false, Public:false}, "ProhibitDtd", $.Boolean);

    $.Property({Static:false, Public:false}, "EntityHandling", $asm05.TypeRef("System.Xml.EntityHandling"));

    $.Property({Static:false, Public:false}, "XmlResolver", $asm05.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:false}, "DtdParserProxy_NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false}, "DtdParserProxy_NamespaceManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:false}, "DtdParserProxy_DtdValidation", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdParserProxy_Normalization", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdParserProxy_Namespaces", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdParserProxy_V1CompatibilityMode", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdParserProxy_BaseUri", $asm02.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false}, "DtdParserProxy_IsEof", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdParserProxy_ParsingBuffer", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:false, Public:false}, "DtdParserProxy_ParsingBufferLength", $.Int32);

    $.Property({Static:false, Public:false}, "DtdParserProxy_CurrentPosition", $.Int32);

    $.Property({Static:false, Public:false}, "DtdParserProxy_EntityStackLength", $.Int32);

    $.Property({Static:false, Public:false}, "DtdParserProxy_IsEntityEolNormalized", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdParserProxy_EventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Property({Static:false, Public:false}, "DtdParserProxy_LineNo", $.Int32);

    $.Property({Static:false, Public:false}, "DtdParserProxy_LineStartPosition", $.Int32);

    $.Property({Static:false, Public:false}, "IsResolverNull", $.Boolean);

    $.Property({Static:false, Public:false}, "InAttributeValueIterator", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdValidation", $.Boolean);

    $.Property({Static:false, Public:false}, "InEntity", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdSchemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:false}, "XmlValidatingReaderCompatibilityMode", $.Boolean);

    $.Property({Static:false, Public:false}, "ValidationEventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Property({Static:false, Public:false}, "FragmentType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:false}, "InternalSchemaType", $.Object);

    $.Property({Static:false, Public:false}, "InternalTypedValue", $.Object);

    $.Property({Static:false, Public:false}, "StandAlone", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:false}, "V1Compat", $.Boolean);

    $.Property({Static:false, Public:false}, "V1ComformanceLevel", $asm05.TypeRef("System.Xml.ConformanceLevel"));

    $.Property({Static:false, Public:false}, "DisableUndeclaredEntityCheck", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm05.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 2 */ $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XmlTextReaderImpl/ParsingFunction", false, {
    ElementContent: 0, 
    NoData: 1, 
    OpenUrl: 2, 
    SwitchToInteractive: 3, 
    SwitchToInteractiveXmlDecl: 4, 
    DocumentContent: 5, 
    MoveToElementContent: 6, 
    PopElementContext: 7, 
    PopEmptyElementContext: 8, 
    ResetAttributesRootLevel: 9, 
    Error: 10, 
    Eof: 11, 
    ReaderClosed: 12, 
    EntityReference: 13, 
    InIncrementalRead: 14, 
    FragmentAttribute: 15, 
    ReportEndEntity: 16, 
    AfterResolveEntityInContent: 17, 
    AfterResolveEmptyEntityInContent: 18, 
    XmlDeclarationFragment: 19, 
    GoToEof: 20, 
    PartialTextValue: 21, 
    InReadAttributeValue: 22, 
    InReadValueChunk: 23, 
    InReadContentAsBinary: 24, 
    InReadElementContentAsBinary: 25
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlTextReaderImpl/ParsingMode", false, {
    Full: 0, 
    SkipNode: 1, 
    SkipContent: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlTextReaderImpl/EntityType", false, {
    CharacterDec: 0, 
    CharacterHex: 1, 
    CharacterNamed: 2, 
    Expanded: 3, 
    ExpandedInAttribute: 4, 
    Skipped: 5, 
    Unexpanded: 6, 
    FakeExpanded: 7
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlTextReaderImpl/EntityExpandType", false, {
    OnlyGeneral: 0, 
    OnlyCharacter: 1, 
    All: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlTextReaderImpl/IncrementalReadState", false, {
    Text: 0, 
    StartTag: 1, 
    PI: 2, 
    CDATA: 3, 
    Comment: 4, 
    Attributes: 5, 
    AttributeValue: 6, 
    ReadData: 7, 
    EndElement: 8, 
    End: 9, 
    ReadValueChunk_OnCachedValue: 10, 
    ReadValueChunk_OnPartialValue: 11, 
    ReadContentAsBinary_OnCachedValue: 12, 
    ReadContentAsBinary_OnPartialValue: 13, 
    ReadContentAsBinary_End: 14
  }, false
);

(function ParsingState$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.XmlTextReaderImpl/ParsingState", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNo", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinePos", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "charPos", $.Int32); 
    $.Field({Static:false, Public:false}, "charsUsed", $.Int32); 
    $.Field({Static:false, Public:false}, "encoding", $asm01.TypeRef("System.Text.Encoding")); 
    $.Field({Static:false, Public:false}, "appendMode", $.Boolean); 
    $.Field({Static:false, Public:false}, "stream", $asm01.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "decoder", $asm01.TypeRef("System.Text.Decoder")); 
    $.Field({Static:false, Public:false}, "bytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "bytePos", $.Int32); 
    $.Field({Static:false, Public:false}, "bytesUsed", $.Int32); 
    $.Field({Static:false, Public:false}, "textReader", $asm01.TypeRef("System.IO.TextReader")); 
    $.Field({Static:false, Public:false}, "lineNo", $.Int32); 
    $.Field({Static:false, Public:false}, "lineStartPos", $.Int32); 
    $.Field({Static:false, Public:false}, "baseUriStr", $.String); 
    $.Field({Static:false, Public:false}, "baseUri", $asm02.TypeRef("System.Uri")); 
    $.Field({Static:false, Public:false}, "isEof", $.Boolean); 
    $.Field({Static:false, Public:false}, "isStreamEof", $.Boolean); 
    $.Field({Static:false, Public:false}, "entity", $asm05.TypeRef("System.Xml.Schema.SchemaEntity")); 
    $.Field({Static:false, Public:false}, "entityId", $.Int32); 
    $.Field({Static:false, Public:false}, "eolNormalized", $.Boolean); 
    $.Field({Static:false, Public:false}, "entityResolvedManually", $.Boolean); 
    $.Property({Static:false, Public:false}, "LineNo", $.Int32);

    $.Property({Static:false, Public:false}, "LinePos", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlContext$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlTextReaderImpl/XmlContext", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.Field({Static:false, Public:false}, "xmlSpace", $asm05.TypeRef("System.Xml.XmlSpace")); 
    $.Field({Static:false, Public:false}, "xmlLang", $.String); 
    $.Field({Static:false, Public:false}, "defaultNamespace", $.String); 
    $.Field({Static:false, Public:false}, "previousContext", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NoNamespaceManager$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlNamespaceManager"), "System.Xml.XmlTextReaderImpl/NoNamespaceManager", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddNamespace", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultNamespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopScope", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PushScope", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveNamespace", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultNamespace", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DtdParserProxy$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlTextReaderImpl/DtdParserProxy", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlTextReaderImpl")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlTextReaderImpl"), $asm05.TypeRef("System.Xml.Schema.SchemaInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlTextReaderImpl")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdSchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalDtdSubset", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Parse", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_BaseUri", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Uri"), [], [])
    )
      .Overrides(0, "get_BaseUri");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_CurrentPosition");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_DtdValidation", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_DtdValidation");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_EntityStackLength", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_EntityStackLength");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_EventHandler", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), [], [])
    )
      .Overrides(0, "get_EventHandler");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_IsEntityEolNormalized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_IsEntityEolNormalized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_IsEof", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_IsEof");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_LineNo", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_LineNo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_LineStartPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_LineStartPosition");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_NamespaceManager", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNamespaceManager"), [], [])
    )
      .Overrides(0, "get_NamespaceManager");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_Namespaces", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_Namespaces");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    )
      .Overrides(0, "get_NameTable");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_Normalization", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_Normalization");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_ParsingBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [], [])
    )
      .Overrides(0, "get_ParsingBuffer");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_ParsingBufferLength", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ParsingBufferLength");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_V1CompatibilityMode", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_V1CompatibilityMode");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.OnNewLine", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Overrides(0, "OnNewLine");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.OnPublicId", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.LineInfo"), 
          $asm05.TypeRef("System.Xml.LineInfo")
        ], [])
    )
      .Overrides(0, "OnPublicId");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.OnSystemId", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.LineInfo"), 
          $asm05.TypeRef("System.Xml.LineInfo")
        ], [])
    )
      .Overrides(0, "OnSystemId");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.ParseComment", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.BufferBuilder")], [])
    )
      .Overrides(0, "ParseComment");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.ParseNamedCharRef", 
      new JSIL.MethodSignature($.Int32, [$.Boolean, $asm05.TypeRef("System.Xml.BufferBuilder")], [])
    )
      .Overrides(0, "ParseNamedCharRef");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.ParseNumericCharRef", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.BufferBuilder")], [])
    )
      .Overrides(0, "ParseNumericCharRef");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.ParsePI", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.BufferBuilder")], [])
    )
      .Overrides(0, "ParsePI");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.PopEntity", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Schema.SchemaEntity")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    )
      .Overrides(0, "PopEntity");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.PushEntity", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.SchemaEntity"), $.Int32], [])
    )
      .Overrides(0, "PushEntity");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.PushExternalSubset", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    )
      .Overrides(0, "PushExternalSubset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.PushInternalDtd", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    )
      .Overrides(0, "PushInternalDtd");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.ReadData", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "ReadData");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSeverityType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
    )
      .Overrides(0, "SendValidationEvent");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.set_CurrentPosition", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Overrides(0, "set_CurrentPosition");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.set_EventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    )
      .Overrides(0, "set_EventHandler");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.Throw", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Exception")], [])
    )
      .Overrides(0, "Throw");

    $.Field({Static:false, Public:false}, "reader", $asm05.TypeRef("System.Xml.XmlTextReaderImpl")); 
    $.Field({Static:false, Public:false}, "dtdParser", $asm05.TypeRef("System.Xml.DtdParser")); 
    $.Field({Static:false, Public:false}, "schemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo")); 
    $.Property({Static:false, Public:false}, "DtdSchemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:false}, "InternalDtdSubset", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.NamespaceManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.DtdValidation", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.Normalization", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.Namespaces", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.V1CompatibilityMode", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.BaseUri", $asm02.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.IsEof", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.ParsingBuffer", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.ParsingBufferLength", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.CurrentPosition", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.EntityStackLength", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.IsEntityEolNormalized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.EventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.LineNo", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.LineStartPosition", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("System.Xml.IDtdParserAdapter")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NodeData$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlTextReaderImpl/NodeData", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustLineInfo", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.LineInfo")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearName", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.BufferBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.BufferBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyToBinary", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.IncrementalReadDecoder"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateNameWPrefix", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDefaultAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNo", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinePos", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_None", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StringValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueBuffered", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNameWPrefix", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnBufferInvalidated", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsDefaultAttribute", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsEmptyElement", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLineInfo", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLineInfo2", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNamedNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeType"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNamedNode", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNodeType"), $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValueNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeType"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValueNode", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNodeType"), $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IComparable.CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object], [])
    )
      .Overrides(0, "CompareTo");

    $.ExternalMethod({Static:false, Public:false}, "TrimSpacesInValue", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "s_None", $.Type); 
    $.Field({Static:false, Public:false}, "type", $asm05.TypeRef("System.Xml.XmlNodeType")); 
    $.Field({Static:false, Public:false}, "localName", $.String); 
    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "nameWPrefix", $.String); 
    $.Field({Static:false, Public:false}, "value", $.String); 
    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "valueStartPos", $.Int32); 
    $.Field({Static:false, Public:false}, "valueLength", $.Int32); 
    $.Field({Static:false, Public:false}, "lineInfo", $asm05.TypeRef("System.Xml.LineInfo")); 
    $.Field({Static:false, Public:false}, "lineInfo2", $asm05.TypeRef("System.Xml.LineInfo")); 
    $.Field({Static:false, Public:false}, "quoteChar", $.Char); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "isEmptyOrDefault", $.Boolean); 
    $.Field({Static:false, Public:false}, "entityId", $.Int32); 
    $.Field({Static:false, Public:false}, "xmlContextPushed", $.Boolean); 
    $.Field({Static:false, Public:false}, "nextAttrValueChunk", $.Type); 
    $.Field({Static:false, Public:false}, "schemaType", $.Object); 
    $.Field({Static:false, Public:false}, "typedValue", $.Object); 
    $.Property({Static:true , Public:false}, "None", $.Type);

    $.Property({Static:false, Public:false}, "LineNo", $.Int32);

    $.Property({Static:false, Public:false}, "LinePos", $.Int32);

    $.Property({Static:false, Public:false}, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDefaultAttribute", $.Boolean);

    $.Property({Static:false, Public:false}, "ValueBuffered", $.Boolean);

    $.Property({Static:false, Public:false}, "StringValue", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IComparable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SchemaAttDefToNodeDataComparer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlTextReaderImpl/SchemaAttDefToNodeDataComparer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IComparer"), [], [])
    );

    $.Field({Static:true , Public:false}, "s_instance", $asm01.TypeRef("System.Collections.IComparer")); 
    $.Property({Static:true , Public:false}, "Instance", $asm01.TypeRef("System.Collections.IComparer"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IComparer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeInterface(
  "System.Xml.IDtdParserAdapter", false, [], function ($) {
    $.Method({}, "get_NameTable", new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], []));
    $.Method({}, "get_NamespaceManager", new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNamespaceManager"), [], []));
    $.Method({}, "get_DtdValidation", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_Normalization", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_Namespaces", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_V1CompatibilityMode", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_BaseUri", new JSIL.MethodSignature($asm02.TypeRef("System.Uri"), [], []));
    $.Method({}, "get_ParsingBuffer", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [], []));
    $.Method({}, "get_ParsingBufferLength", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_CurrentPosition", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "set_CurrentPosition", new JSIL.MethodSignature(null, [$.Int32], []));
    $.Method({}, "get_LineNo", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_LineStartPosition", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_IsEof", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_EntityStackLength", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_IsEntityEolNormalized", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "ReadData", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "OnNewLine", new JSIL.MethodSignature(null, [$.Int32], []));
    $.Method({}, "get_EventHandler", new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), [], []));
    $.Method({}, "set_EventHandler", new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], []));
    $.Method({}, "SendValidationEvent", new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSeverityType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaException")], []));
    $.Method({}, "ParseNumericCharRef", new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.BufferBuilder")], []));
    $.Method({}, "ParseNamedCharRef", new JSIL.MethodSignature($.Int32, [$.Boolean, $asm05.TypeRef("System.Xml.BufferBuilder")], []));
    $.Method({}, "ParsePI", new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.BufferBuilder")], []));
    $.Method({}, "ParseComment", new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.BufferBuilder")], []));
    $.Method({}, "PushEntity", new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.SchemaEntity"), $.Int32], []));
    $.Method({}, "PopEntity", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Schema.SchemaEntity")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], []));
    $.Method({}, "PushExternalSubset", new JSIL.MethodSignature($.Boolean, [$.String, $.String], []));
    $.Method({}, "PushInternalDtd", new JSIL.MethodSignature(null, [$.String, $.String], []));
    $.Method({}, "OnSystemId", new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.LineInfo"), 
          $asm05.TypeRef("System.Xml.LineInfo")
        ], []));
    $.Method({}, "OnPublicId", new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.LineInfo"), 
          $asm05.TypeRef("System.Xml.LineInfo")
        ], []));
    $.Method({}, "Throw", new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Exception")], []));
    $.Property({}, "NameTable");
    $.Property({}, "NamespaceManager");
    $.Property({}, "DtdValidation");
    $.Property({}, "Normalization");
    $.Property({}, "Namespaces");
    $.Property({}, "V1CompatibilityMode");
    $.Property({}, "BaseUri");
    $.Property({}, "ParsingBuffer");
    $.Property({}, "ParsingBufferLength");
    $.Property({}, "CurrentPosition");
    $.Property({}, "LineNo");
    $.Property({}, "LineStartPosition");
    $.Property({}, "IsEof");
    $.Property({}, "EntityStackLength");
    $.Property({}, "IsEntityEolNormalized");
    $.Property({}, "EventHandler");
  }, []);

JSIL.MakeEnum(
  "System.Xml.Formatting", true, {
    None: 0, 
    Indented: 1
  }, false
);

(function XmlTextWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlWriter"), "System.Xml.XmlTextWriter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamespace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToNamespaceHashtable", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AutoComplete", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlTextWriter/Token")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AutoCompleteAll", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushEncoders", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GeneratePrefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseStream", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Formatting", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Formatting"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Indentation", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IndentChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.WriteState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleSpecialAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Indent", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteEndElement", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteName", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespaceInCurrentScope", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopNamespaces", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushNamespace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushStack", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Formatting", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Formatting")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Indentation", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IndentChar", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespaces", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_QuoteChar", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartDocument", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateName", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyPrefixXml", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndAttributeQuote", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndStartTag", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "NamespaceStackInitialSize", 8); 
    $.Constant({Static:true , Public:false}, "MaxNamespacesWalkCount", 16); 
    $.Field({Static:false, Public:false}, "textWriter", $asm01.TypeRef("System.IO.TextWriter")); 
    $.Field({Static:false, Public:false}, "xmlEncoder", $asm05.TypeRef("System.Xml.XmlTextEncoder")); 
    $.Field({Static:false, Public:false}, "encoding", $asm01.TypeRef("System.Text.Encoding")); 
    $.Field({Static:false, Public:false}, "formatting", $asm05.TypeRef("System.Xml.Formatting")); 
    $.Field({Static:false, Public:false}, "indented", $.Boolean); 
    $.Field({Static:false, Public:false}, "indentation", $.Int32); 
    $.Field({Static:false, Public:false}, "indentChar", $.Char); 
    $.Field({Static:false, Public:false}, "stack", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlTextWriter/TagInfo")])); 
    $.Field({Static:false, Public:false}, "top", $.Int32); 
    $.Field({Static:false, Public:false}, "stateTable", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlTextWriter/State")])); 
    $.Field({Static:false, Public:false}, "currentState", $asm05.TypeRef("System.Xml.XmlTextWriter/State")); 
    $.Field({Static:false, Public:false}, "lastToken", $asm05.TypeRef("System.Xml.XmlTextWriter/Token")); 
    $.Field({Static:false, Public:false}, "base64Encoder", $asm05.TypeRef("System.Xml.XmlTextWriterBase64Encoder")); 
    $.Field({Static:false, Public:false}, "quoteChar", $.Char); 
    $.Field({Static:false, Public:false}, "curQuoteChar", $.Char); 
    $.Field({Static:false, Public:false}, "namespaces", $.Boolean); 
    $.Field({Static:false, Public:false}, "specialAttr", $asm05.TypeRef("System.Xml.XmlTextWriter/SpecialAttr")); 
    $.Field({Static:false, Public:false}, "prefixForXmlNs", $.String); 
    $.Field({Static:false, Public:false}, "flush", $.Boolean); 
    $.Field({Static:false, Public:false}, "nsStack", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlTextWriter/Namespace")])); 
    $.Field({Static:false, Public:false}, "nsTop", $.Int32); 
    $.Field({Static:false, Public:false}, "nsHashtable", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])); 
    $.Field({Static:false, Public:false}, "useNsHashtable", $.Boolean); 
    $.Field({Static:false, Public:false}, "xmlCharType", $asm05.TypeRef("System.Xml.XmlCharType")); 
    $.Field({Static:true , Public:false}, "stateName", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:true , Public:false}, "tokenName", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "stateTableDefault", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlTextWriter/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "stateTableDocument", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlTextWriter/State")])); 
    $.Property({Static:false, Public:true }, "BaseStream", $asm01.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:true }, "Namespaces", $.Boolean);

    $.Property({Static:false, Public:true }, "Formatting", $asm05.TypeRef("System.Xml.Formatting"));

    $.Property({Static:false, Public:true }, "Indentation", $.Int32);

    $.Property({Static:false, Public:true }, "IndentChar", $.Char);

    $.Property({Static:false, Public:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm05.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XmlTextWriter/NamespaceState", false, {
    Uninitialized: 0, 
    NotDeclaredButInScope: 1, 
    DeclaredButNotWrittenOut: 2, 
    DeclaredAndWrittenOut: 3
  }, false
);

(function TagInfo$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.XmlTextWriter/TagInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "defaultNs", $.String); 
    $.Field({Static:false, Public:false}, "defaultNsState", $asm05.TypeRef("System.Xml.XmlTextWriter/NamespaceState")); 
    $.Field({Static:false, Public:false}, "xmlSpace", $asm05.TypeRef("System.Xml.XmlSpace")); 
    $.Field({Static:false, Public:false}, "xmlLang", $.String); 
    $.Field({Static:false, Public:false}, "prevNsTop", $.Int32); 
    $.Field({Static:false, Public:false}, "prefixCount", $.Int32); 
    $.Field({Static:false, Public:false}, "mixed", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Namespace$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.XmlTextWriter/Namespace", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "declared", $.Boolean); 
    $.Field({Static:false, Public:false}, "prevNsIndex", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XmlTextWriter/SpecialAttr", false, {
    None: 0, 
    XmlSpace: 1, 
    XmlLang: 2, 
    XmlNs: 3
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlTextWriter/State", false, {
    Start: 0, 
    Prolog: 1, 
    PostDTD: 2, 
    Element: 3, 
    Attribute: 4, 
    Content: 5, 
    AttrOnly: 6, 
    Epilog: 7, 
    Error: 8, 
    Closed: 9
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlTextWriter/Token", false, {
    PI: 0, 
    Doctype: 1, 
    Comment: 2, 
    CData: 3, 
    StartElement: 4, 
    EndElement: 5, 
    LongEndElement: 6, 
    StartAttribute: 7, 
    EndAttribute: 8, 
    Content: 9, 
    Base64: 10, 
    RawData: 11, 
    Whitespace: 12, 
    Empty: 13
  }, false
);

(function XmlUtf8RawTextWriterIndent$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlUtf8RawTextWriter"), "System.Xml.XmlUtf8RawTextWriterIndent", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Text.Encoding"), 
          $asm05.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriterSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRootElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.ConformanceLevel")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "indentLevel", $.Int32); 
    $.Field({Static:false, Public:false}, "newLineOnAttributes", $.Boolean); 
    $.Field({Static:false, Public:false}, "indentChars", $.String); 
    $.Field({Static:false, Public:false}, "mixedContent", $.Boolean); 
    $.Field({Static:false, Public:false}, "mixedContentStack", $asm05.TypeRef("System.Xml.BitStack")); 
    $.Field({Static:false, Public:false}, "conformanceLevel", $asm05.TypeRef("System.Xml.ConformanceLevel")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlWriterSettings"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlValidatingReader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlReader"), "System.Xml.XmlValidatingReader", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.XmlNodeType"), 
          $asm05.TypeRef("System.Xml.XmlParserContext")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.XmlNodeType"), 
          $asm05.TypeRef("System.Xml.XmlParserContext")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ValidationEventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EntityHandling", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.EntityHandling"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Impl", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlValidatingReaderImpl"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Reader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schemas", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidationType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ValidationType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadTypedValue", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ValidationEventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EntityHandling", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.EntityHandling")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespaces", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ValidationType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.ValidationType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    )
      .Overrides(2, "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(2, "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(2, "LookupPrefix");

    $.Field({Static:false, Public:false}, "impl", $asm05.TypeRef("System.Xml.XmlValidatingReaderImpl")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm05.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "SchemaType", $.Object);

    $.Property({Static:false, Public:true }, "Reader", $asm05.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:true }, "ValidationType", $asm05.TypeRef("System.Xml.ValidationType"));

    $.Property({Static:false, Public:true }, "Schemas", $asm05.TypeRef("System.Xml.Schema.XmlSchemaCollection"));

    $.Property({Static:false, Public:true }, "EntityHandling", $asm05.TypeRef("System.Xml.EntityHandling"));

    $.Property({Static:false, Public:true }, "XmlResolver", $asm05.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "Namespaces", $.Boolean);

    $.Property({Static:false, Public:true }, "Encoding", $asm01.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false}, "Impl", $asm05.TypeRef("System.Xml.XmlValidatingReaderImpl"));

    $.ImplementInterfaces(
      /* 1 */ $asm05.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 2 */ $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["Use XmlReader created by XmlReader.Create() method using appropriate XmlReaderSettings instead. http://go.microsoft.com/fwlink/?linkid=14202"]; });

})();

(function XmlValidatingReaderImpl$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlReader"), "System.Xml.XmlValidatingReaderImpl", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.XmlNodeType"), 
          $asm05.TypeRef("System.Xml.XmlParserContext")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.XmlNodeType"), 
          $asm05.TypeRef("System.Xml.XmlParserContext")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "add_ValidationEventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDefaultAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Encoding", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EntityHandling", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.EntityHandling"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceManager", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNamespaceManager"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespaces", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Normalization", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OuterReader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Reader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReaderImpl", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTextReaderImpl"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Schemas", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaType", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StandAlone", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypedValueObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValidationType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ValidationType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Validator", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.BaseValidator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResolver", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlResolver"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalValidationCallback", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("System.Xml.Schema.ValidationEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveOffEntityReference", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDtdFromParserContext", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessCoreReaderEvent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadTypedValue", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_ValidationEventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveEntityInternally", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EntityHandling", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.EntityHandling")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Namespaces", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_OuterReader", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SchemaTypeObject", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TypedValueObject", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ValidationType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.ValidationType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Validator", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.BaseValidator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupValidation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.ValidationType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    )
      .Overrides(2, "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(2, "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(2, "LookupPrefix");

    $.ExternalMethod({Static:false, Public:false}, "UpdateHandlers", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateDtd", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "coreReader", $asm05.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "coreReaderImpl", $asm05.TypeRef("System.Xml.XmlTextReaderImpl")); 
    $.Field({Static:false, Public:false}, "coreReaderNSResolver", $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")); 
    $.Field({Static:false, Public:false}, "validationType", $asm05.TypeRef("System.Xml.ValidationType")); 
    $.Field({Static:false, Public:false}, "validator", $asm05.TypeRef("System.Xml.Schema.BaseValidator")); 
    $.Field({Static:false, Public:false}, "schemaCollection", $asm05.TypeRef("System.Xml.Schema.XmlSchemaCollection")); 
    $.Field({Static:false, Public:false}, "processIdentityConstraints", $.Boolean); 
    $.Field({Static:false, Public:false}, "parsingFunction", $asm05.TypeRef("System.Xml.XmlValidatingReaderImpl/ParsingFunction")); 
    $.Field({Static:false, Public:false}, "internalEventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "eventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "parserContext", $asm05.TypeRef("System.Xml.XmlParserContext")); 
    $.Field({Static:false, Public:false}, "readBinaryHelper", $asm05.TypeRef("System.Xml.ReadContentAsBinaryHelper")); 
    $.Field({Static:false, Public:false}, "outerReader", $asm05.TypeRef("System.Xml.XmlReader")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm05.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false}, "Encoding", $asm01.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:false}, "OuterReader", $asm05.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:false}, "SchemaType", $.Object);

    $.Property({Static:false, Public:false}, "Reader", $asm05.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:false}, "ReaderImpl", $asm05.TypeRef("System.Xml.XmlTextReaderImpl"));

    $.Property({Static:false, Public:false}, "ValidationType", $asm05.TypeRef("System.Xml.ValidationType"));

    $.Property({Static:false, Public:false}, "Schemas", $asm05.TypeRef("System.Xml.Schema.XmlSchemaCollection"));

    $.Property({Static:false, Public:false}, "EntityHandling", $asm05.TypeRef("System.Xml.EntityHandling"));

    $.Property({Static:false, Public:false}, "XmlResolver", $asm05.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:false}, "Namespaces", $.Boolean);

    $.Property({Static:false, Public:false}, "Validator", $asm05.TypeRef("System.Xml.Schema.BaseValidator"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:false}, "StandAlone", $.Boolean);

    $.Property({Static:false, Public:false}, "SchemaTypeObject", $.Object);

    $.Property({Static:false, Public:false}, "TypedValueObject", $.Object);

    $.Property({Static:false, Public:false}, "Normalization", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm05.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 2 */ $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XmlValidatingReaderImpl/ParsingFunction", false, {
    Read: 0, 
    Init: 1, 
    ParseDtdFromContext: 2, 
    ResolveEntityInternally: 3, 
    InReadBinaryContent: 4, 
    ReaderClosed: 5, 
    Error: 6, 
    None: 7
  }, false
);

(function XmlWellFormedWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlWriter"), "System.Xml.XmlWellFormedWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter"), $asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToAttrHashTable", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToNamespaceHashtable", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdvanceState", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWellFormedWriter/Token")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNCName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DupAttrException", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlException"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GeneratePrefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerWriter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsClosedOrErrorState", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RawWriter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlRawWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SaveAttrValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriterSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.WriteState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStateName", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlWellFormedWriter/State")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCharsException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupLocalNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespaceIndex", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopNamespaces", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushNamespace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSpecialAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWellFormedWriter/SpecialAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartFragment", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidStateTransition", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWellFormedWriter/Token"), $asm05.TypeRef("System.Xml.XmlWellFormedWriter/State")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartDocumentImpl", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlStandalone")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "ElementStackInitialSize", 8); 
    $.Constant({Static:true , Public:false}, "NamespaceStackInitialSize", 8); 
    $.Constant({Static:true , Public:false}, "AttributeArrayInitialSize", 8); 
    $.Constant({Static:true , Public:false}, "MaxAttrDuplWalkCount", 14); 
    $.Constant({Static:true , Public:false}, "MaxNamespacesWalkCount", 16); 
    $.Field({Static:false, Public:false}, "writer", $asm05.TypeRef("System.Xml.XmlWriter")); 
    $.Field({Static:false, Public:false}, "rawWriter", $asm05.TypeRef("System.Xml.XmlRawWriter")); 
    $.Field({Static:false, Public:false}, "predefinedNamespaces", $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")); 
    $.Field({Static:false, Public:false}, "nsStack", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlWellFormedWriter/Namespace")])); 
    $.Field({Static:false, Public:false}, "nsTop", $.Int32); 
    $.Field({Static:false, Public:false}, "nsHashtable", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])); 
    $.Field({Static:false, Public:false}, "useNsHashtable", $.Boolean); 
    $.Field({Static:false, Public:false}, "elemScopeStack", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlWellFormedWriter/ElementScope")])); 
    $.Field({Static:false, Public:false}, "elemTop", $.Int32); 
    $.Field({Static:false, Public:false}, "attrStack", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlWellFormedWriter/AttrName")])); 
    $.Field({Static:false, Public:false}, "attrCount", $.Int32); 
    $.Field({Static:false, Public:false}, "attrHashTable", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])); 
    $.Field({Static:false, Public:false}, "specAttr", $asm05.TypeRef("System.Xml.XmlWellFormedWriter/SpecialAttribute")); 
    $.Field({Static:false, Public:false}, "attrValue", $asm01.TypeRef("System.Text.StringBuilder")); 
    $.Field({Static:false, Public:false}, "curDeclPrefix", $.String); 
    $.Field({Static:false, Public:false}, "stateTable", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlWellFormedWriter/State")])); 
    $.Field({Static:false, Public:false}, "currentState", $asm05.TypeRef("System.Xml.XmlWellFormedWriter/State")); 
    $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean); 
    $.Field({Static:false, Public:false}, "conformanceLevel", $asm05.TypeRef("System.Xml.ConformanceLevel")); 
    $.Field({Static:false, Public:false}, "dtdWritten", $.Boolean); 
    $.Field({Static:false, Public:false}, "xmlDeclFollows", $.Boolean); 
    $.Field({Static:false, Public:false}, "xmlCharType", $asm05.TypeRef("System.Xml.XmlCharType")); 
    $.Field({Static:false, Public:false}, "hasher", $asm05.TypeRef("System.Xml.SecureStringHasher")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "stateName", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "tokenName", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:true , Public:false}, "state2WriteState", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.WriteState")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "StateTableDocument", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlWellFormedWriter/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "StateTableAuto", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlWellFormedWriter/State")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm05.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlWriterSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:false}, "InnerWriter", $asm05.TypeRef("System.Xml.XmlWriter"));

    $.Property({Static:false, Public:false}, "SaveAttrValue", $.Boolean);

    $.Property({Static:false, Public:false}, "IsClosedOrErrorState", $.Boolean);

    $.Property({Static:false, Public:false}, "RawWriter", $asm05.TypeRef("System.Xml.XmlRawWriter"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NamespaceResolverProxy$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlWellFormedWriter/NamespaceResolverProxy", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWellFormedWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    )
      .Overrides(0, "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(0, "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(0, "LookupPrefix");

    $.Field({Static:false, Public:false}, "wfWriter", $asm05.TypeRef("System.Xml.XmlWellFormedWriter")); 
    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ElementScope$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.XmlWellFormedWriter/ElementScope", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlRawWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlRawWriter")], [])
    );

    $.Field({Static:false, Public:false}, "prevNSTop", $.Int32); 
    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "localName", $.String); 
    $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
    $.Field({Static:false, Public:false}, "xmlSpace", $asm05.TypeRef("System.Xml.XmlSpace")); 
    $.Field({Static:false, Public:false}, "xmlLang", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XmlWellFormedWriter/NamespaceKind", false, {
    Written: 0, 
    NeedToWrite: 1, 
    Implied: 2, 
    Special: 3
  }, false
);

(function Namespace$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.XmlWellFormedWriter/Namespace", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XmlWellFormedWriter/NamespaceKind")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDecl", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter"), $asm05.TypeRef("System.Xml.XmlRawWriter")], [])
    );

    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
    $.Field({Static:false, Public:false}, "kind", $asm05.TypeRef("System.Xml.XmlWellFormedWriter/NamespaceKind")); 
    $.Field({Static:false, Public:false}, "prevNsIndex", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AttrName$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.XmlWellFormedWriter/AttrName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, "IsDuplicate", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
    $.Field({Static:false, Public:false}, "localName", $.String); 
    $.Field({Static:false, Public:false}, "prev", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XmlWellFormedWriter/State", false, {
    Start: 0, 
    TopLevel: 1, 
    Document: 2, 
    Element: 3, 
    Content: 4, 
    B64Content: 5, 
    B64Attribute: 6, 
    AfterRootEle: 7, 
    Attribute: 8, 
    SpecialAttr: 9, 
    EndDocument: 10, 
    RootLevelAttr: 11, 
    RootLevelSpecAttr: 12, 
    RootLevelB64Attr: 13, 
    AfterRootLevelAttr: 14, 
    Closed: 15, 
    Error: 16, 
    StartContent: 101, 
    StartContentEle: 102, 
    StartContentB64: 103, 
    StartDoc: 104, 
    StartDocEle: 106, 
    EndAttrSEle: 107, 
    EndAttrEEle: 108, 
    EndAttrSCont: 109, 
    EndAttrSAttr: 111, 
    PostB64Cont: 112, 
    PostB64Attr: 113, 
    PostB64RootAttr: 114, 
    StartFragEle: 115, 
    StartFragCont: 116, 
    StartFragB64: 117, 
    StartRootLevelAttr: 118
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlWellFormedWriter/Token", false, {
    StartDocument: 0, 
    EndDocument: 1, 
    PI: 2, 
    Comment: 3, 
    Dtd: 4, 
    StartElement: 5, 
    EndElement: 6, 
    StartAttribute: 7, 
    EndAttribute: 8, 
    Text: 9, 
    CData: 10, 
    AtomicValue: 11, 
    Base64: 12, 
    RawData: 13, 
    Whitespace: 14
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlWellFormedWriter/SpecialAttribute", false, {
    No: 0, 
    DefaultXmlns: 1, 
    PrefixedXmlns: 2, 
    XmlSpace: 3, 
    XmlLang: 4
  }, false
);

JSIL.MakeEnum(
  "System.Xml.WriteState", true, {
    Start: 0, 
    Prolog: 1, 
    Element: 2, 
    Attribute: 3, 
    Content: 4, 
    Closed: 5, 
    Error: 6
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlOutputMethod", true, {
    Xml: 0, 
    Html: 1, 
    Text: 2, 
    AutoDetect: 3
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlStandalone", false, {
    Omit: 0, 
    Yes: 1, 
    No: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.TriState", false, {
    Unknown: -1, 
    False: 0, 
    True: 1
  }, false
);

(function XmlWriterSettings$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlWriterSettings", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Xsl.Runtime.XmlQueryDataReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckReadOnly", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AutoXmlDeclaration", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CDataSectionElements", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.XmlQualifiedName")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CheckCharacters", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CloseOutput", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConformanceLevel", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ConformanceLevel"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DocTypePublic", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DocTypeSystem", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DoNotEscapeUriAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Indent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IndentChars", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalIndent", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.TriState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsQuerySpecific", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MediaType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MergeCDataSections", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewLineChars", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewLineHandling", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.NewLineHandling"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewLineOnAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OmitXmlDeclaration", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputMethod", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlOutputMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Standalone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlStandalone"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Xsl.Runtime.XmlQueryDataWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AutoXmlDeclaration", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CheckCharacters", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CloseOutput", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConformanceLevel", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.ConformanceLevel")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DocTypePublic", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DocTypeSystem", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DoNotEscapeUriAttributes", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Encoding", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Indent", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IndentChars", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MediaType", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MergeCDataSections", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NewLineChars", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NewLineHandling", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.NewLineHandling")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NewLineOnAttributes", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OmitXmlDeclaration", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_OutputMethod", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlOutputMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReadOnly", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Standalone", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlStandalone")], [])
    );

    $.Field({Static:false, Public:false}, "encoding", $asm01.TypeRef("System.Text.Encoding")); 
    $.Field({Static:false, Public:false}, "omitXmlDecl", $.Boolean); 
    $.Field({Static:false, Public:false}, "newLineHandling", $asm05.TypeRef("System.Xml.NewLineHandling")); 
    $.Field({Static:false, Public:false}, "newLineChars", $.String); 
    $.Field({Static:false, Public:false}, "indent", $asm05.TypeRef("System.Xml.TriState")); 
    $.Field({Static:false, Public:false}, "indentChars", $.String); 
    $.Field({Static:false, Public:false}, "newLineOnAttributes", $.Boolean); 
    $.Field({Static:false, Public:false}, "closeOutput", $.Boolean); 
    $.Field({Static:false, Public:false}, "conformanceLevel", $asm05.TypeRef("System.Xml.ConformanceLevel")); 
    $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean); 
    $.Field({Static:false, Public:false}, "outputMethod", $asm05.TypeRef("System.Xml.XmlOutputMethod")); 
    $.Field({Static:false, Public:false}, "cdataSections", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.XmlQualifiedName")])); 
    $.Field({Static:false, Public:false}, "doNotEscapeUriAttributes", $.Boolean); 
    $.Field({Static:false, Public:false}, "mergeCDataSections", $.Boolean); 
    $.Field({Static:false, Public:false}, "mediaType", $.String); 
    $.Field({Static:false, Public:false}, "docTypeSystem", $.String); 
    $.Field({Static:false, Public:false}, "docTypePublic", $.String); 
    $.Field({Static:false, Public:false}, "standalone", $asm05.TypeRef("System.Xml.XmlStandalone")); 
    $.Field({Static:false, Public:false}, "autoXmlDecl", $.Boolean); 
    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean); 
    $.Property({Static:false, Public:true }, "Encoding", $asm01.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:true }, "OmitXmlDeclaration", $.Boolean);

    $.Property({Static:false, Public:true }, "NewLineHandling", $asm05.TypeRef("System.Xml.NewLineHandling"));

    $.Property({Static:false, Public:true }, "NewLineChars", $.String);

    $.Property({Static:false, Public:true }, "Indent", $.Boolean);

    $.Property({Static:false, Public:true }, "IndentChars", $.String);

    $.Property({Static:false, Public:true }, "NewLineOnAttributes", $.Boolean);

    $.Property({Static:false, Public:true }, "CloseOutput", $.Boolean);

    $.Property({Static:false, Public:true }, "ConformanceLevel", $asm05.TypeRef("System.Xml.ConformanceLevel"));

    $.Property({Static:false, Public:true }, "CheckCharacters", $.Boolean);

    $.Property({Static:false, Public:false}, "ReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "OutputMethod", $asm05.TypeRef("System.Xml.XmlOutputMethod"));

    $.Property({Static:false, Public:false}, "CDataSectionElements", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.XmlQualifiedName")]));

    $.Property({Static:false, Public:true }, "DoNotEscapeUriAttributes", $.Boolean);

    $.Property({Static:false, Public:false}, "MergeCDataSections", $.Boolean);

    $.Property({Static:false, Public:false}, "MediaType", $.String);

    $.Property({Static:false, Public:false}, "DocTypeSystem", $.String);

    $.Property({Static:false, Public:false}, "DocTypePublic", $.String);

    $.Property({Static:false, Public:false}, "Standalone", $asm05.TypeRef("System.Xml.XmlStandalone"));

    $.Property({Static:false, Public:false}, "AutoXmlDeclaration", $.Boolean);

    $.Property({Static:false, Public:false}, "InternalIndent", $asm05.TypeRef("System.Xml.TriState"));

    $.Property({Static:false, Public:false}, "IsQuerySpecific", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.Xml.CachingEventHandler", false, []);

(function AttributePSVIInfo$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.AttributePSVIInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "localName", $.String); 
    $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
    $.Field({Static:false, Public:false}, "typedAttributeValue", $.Object); 
    $.Field({Static:false, Public:false}, "attributeSchemaInfo", $asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xml.Schema");
JSIL.MakeInterface(
  "System.Xml.Schema.IXmlSchemaInfo", true, [], function ($) {
    $.Method({}, "get_Validity", new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaValidity"), [], []));
    $.Method({}, "get_IsDefault", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_IsNil", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_MemberType", new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], []));
    $.Method({}, "get_SchemaType", new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], []));
    $.Method({}, "get_SchemaElement", new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [], []));
    $.Method({}, "get_SchemaAttribute", new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], []));
    $.Property({}, "Validity");
    $.Property({}, "IsDefault");
    $.Property({}, "IsNil");
    $.Property({}, "MemberType");
    $.Property({}, "SchemaType");
    $.Property({}, "SchemaElement");
    $.Property({}, "SchemaAttribute");
  }, []);

(function XsdValidatingReader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlReader"), "System.Xml.XsdValidatingReader", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.XmlResolver"), 
          $asm05.TypeRef("System.Xml.XmlReaderSettings"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.XmlResolver"), 
          $asm05.TypeRef("System.Xml.XmlReaderSettings")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttributePSVI", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.AttributePSVIInfo"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CachingCallBack", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XsdCachingReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearAttributesInfo", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateDummyTextNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ValidatingReaderNodeData"), [$.String, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttributeSchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttributeXmlType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementXmlType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributePSVI", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.AttributePSVIInfo"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributePSVI", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.AttributePSVIInfo"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCachingReader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XsdCachingReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ValidatingReaderNodeData"), [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ValidatingReaderNodeData"), [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIsDefault", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemberType", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOriginalAtomicValueStringOfElement", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringValue", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalReadContentAsObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalReadContentAsObject", 
      new JSIL.MethodSignature($.Object, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalReadContentAsObject", 
      new JSIL.MethodSignature($.Object, [$.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalReadElementContentAsObject", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalReadElementContentAsObject", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")]), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalReadElementContentAsObject", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")]), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsXSDRoot", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessElementEvent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessEndElementEvent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessInlineSchema", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessReaderEvent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAheadForMemberType", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAs", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsFloat", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTillEndElement", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReturnBoxedValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupValidator", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlReaderSettings"), $asm05.TypeRef("System.Xml.XmlReader"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SwitchReader", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    )
      .Overrides(3, "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(3, "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(3, "LookupPrefix");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "get_IsDefault");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.get_IsNil", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "get_IsNil");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.get_MemberType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    )
      .Overrides(1, "get_MemberType");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.get_SchemaAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], [])
    )
      .Overrides(1, "get_SchemaAttribute");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.get_SchemaElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [], [])
    )
      .Overrides(1, "get_SchemaElement");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.get_SchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    )
      .Overrides(1, "get_SchemaType");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.get_Validity", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaValidity"), [], [])
    )
      .Overrides(1, "get_Validity");

    $.ExternalMethod({Static:false, Public:false}, "ValidateAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "InitialAttributeCount", 8); 
    $.Field({Static:false, Public:false}, "coreReader", $asm05.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "coreReaderNSResolver", $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")); 
    $.Field({Static:false, Public:false}, "thisNSResolver", $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")); 
    $.Field({Static:false, Public:false}, "validator", $asm05.TypeRef("System.Xml.Schema.XmlSchemaValidator")); 
    $.Field({Static:false, Public:false}, "xmlResolver", $asm05.TypeRef("System.Xml.XmlResolver")); 
    $.Field({Static:false, Public:false}, "validationEvent", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "validationState", $asm05.TypeRef("System.Xml.XsdValidatingReader/ValidatingReaderState")); 
    $.Field({Static:false, Public:false}, "valueGetter", $asm05.TypeRef("System.Xml.Schema.XmlValueGetter")); 
    $.Field({Static:false, Public:false}, "nsManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Field({Static:false, Public:false}, "manageNamespaces", $.Boolean); 
    $.Field({Static:false, Public:false}, "processInlineSchema", $.Boolean); 
    $.Field({Static:false, Public:false}, "replayCache", $.Boolean); 
    $.Field({Static:false, Public:false}, "cachedNode", $asm05.TypeRef("System.Xml.ValidatingReaderNodeData")); 
    $.Field({Static:false, Public:false}, "attributePSVI", $asm05.TypeRef("System.Xml.AttributePSVIInfo")); 
    $.Field({Static:false, Public:false}, "attributeCount", $.Int32); 
    $.Field({Static:false, Public:false}, "coreReaderAttributeCount", $.Int32); 
    $.Field({Static:false, Public:false}, "currentAttrIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "attributePSVINodes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.AttributePSVIInfo")])); 
    $.Field({Static:false, Public:false}, "defaultAttributes", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "inlineSchemaParser", $asm05.TypeRef("System.Xml.Schema.Parser")); 
    $.Field({Static:false, Public:false}, "atomicValue", $.Object); 
    $.Field({Static:false, Public:false}, "xmlSchemaInfo", $asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo")); 
    $.Field({Static:false, Public:false}, "originalAtomicValueString", $.String); 
    $.Field({Static:false, Public:false}, "coreReaderNameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "cachingReader", $asm05.TypeRef("System.Xml.XsdCachingReader")); 
    $.Field({Static:false, Public:false}, "textNode", $asm05.TypeRef("System.Xml.ValidatingReaderNodeData")); 
    $.Field({Static:false, Public:false}, "NsXmlNs", $.String); 
    $.Field({Static:false, Public:false}, "NsXs", $.String); 
    $.Field({Static:false, Public:false}, "NsXsi", $.String); 
    $.Field({Static:false, Public:false}, "XsiType", $.String); 
    $.Field({Static:false, Public:false}, "XsiNil", $.String); 
    $.Field({Static:false, Public:false}, "XsdSchema", $.String); 
    $.Field({Static:false, Public:false}, "XsiSchemaLocation", $.String); 
    $.Field({Static:false, Public:false}, "XsiNoNamespaceSchemaLocation", $.String); 
    $.Field({Static:false, Public:false}, "xmlCharType", $asm05.TypeRef("System.Xml.XmlCharType")); 
    $.Field({Static:false, Public:false}, "lineInfo", $asm05.TypeRef("System.Xml.IXmlLineInfo")); 
    $.Field({Static:false, Public:false}, "readBinaryHelper", $asm05.TypeRef("System.Xml.ReadContentAsBinaryHelper")); 
    $.Field({Static:false, Public:false}, "savedState", $asm05.TypeRef("System.Xml.XsdValidatingReader/ValidatingReaderState")); 
    $.Field({Static:true , Public:false}, "TypeOfString", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm05.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.IsDefault", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.IsNil", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.Validity", $asm05.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.MemberType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.SchemaType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.SchemaElement", $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:false}, "ElementXmlType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:false}, "AttributeXmlType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:false}, "AttributeSchemaInfo", $asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo"));

    $.ImplementInterfaces(
      /* 1 */ $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), 
      /* 2 */ $asm05.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 3 */ $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XsdValidatingReader/ValidatingReaderState", false, {
    OnReadAttributeValue: -2, 
    OnDefaultAttribute: -1, 
    None: 0, 
    Init: 1, 
    Read: 2, 
    OnAttribute: 3, 
    ClearAttributes: 4, 
    ParseInlineSchema: 5, 
    ReadAhead: 6, 
    OnReadBinaryContent: 7, 
    ReaderClosed: 8, 
    EOF: 9, 
    Error: 10
  }, false
);

(function XsdCachingReader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlReader"), "System.Xml.XsdCachingReader", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.IXmlLineInfo"), 
          $asm05.TypeRef("System.Xml.CachingEventHandler")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ValidatingReaderNodeData"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddContent", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ValidatingReaderNodeData"), [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearAttributesInfo", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateDummyTextNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ValidatingReaderNodeData"), [$.String, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeIndexWithoutPrefix", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeIndexWithPrefix", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCoreReader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLineInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.IXmlLineInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadOriginalContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordEndElementNode", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordTextNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ValidatingReaderNodeData"), [
          $.String, $.String, 
          $.Int32, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToReplayMode", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SwitchTextNodeAndEndElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(1, "get_LineNumber");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(1, "get_LinePosition");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "HasLineInfo");

    $.Constant({Static:true , Public:false}, "InitialAttributeCount", 8); 
    $.Constant({Static:true , Public:false}, "InitialContentCount", 4); 
    $.Field({Static:false, Public:false}, "coreReader", $asm05.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "coreReaderNameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "contentEvents", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.ValidatingReaderNodeData")])); 
    $.Field({Static:false, Public:false}, "attributeEvents", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.ValidatingReaderNodeData")])); 
    $.Field({Static:false, Public:false}, "cachedNode", $asm05.TypeRef("System.Xml.ValidatingReaderNodeData")); 
    $.Field({Static:false, Public:false}, "cacheState", $asm05.TypeRef("System.Xml.XsdCachingReader/CachingReaderState")); 
    $.Field({Static:false, Public:false}, "contentIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "attributeCount", $.Int32); 
    $.Field({Static:false, Public:false}, "returnOriginalStringValues", $.Boolean); 
    $.Field({Static:false, Public:false}, "cacheHandler", $asm05.TypeRef("System.Xml.CachingEventHandler")); 
    $.Field({Static:false, Public:false}, "currentAttrIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "currentContentIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "readAhead", $.Boolean); 
    $.Field({Static:false, Public:false}, "lineInfo", $asm05.TypeRef("System.Xml.IXmlLineInfo")); 
    $.Field({Static:false, Public:false}, "textNode", $asm05.TypeRef("System.Xml.ValidatingReaderNodeData")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm05.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm05.TypeRef("System.Xml.IXmlLineInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

JSIL.MakeEnum(
  "System.Xml.XsdCachingReader/CachingReaderState", false, {
    None: 0, 
    Init: 1, 
    Record: 2, 
    Replay: 3, 
    ReaderClosed: 4, 
    Error: 5
  }, false
);

JSIL.MakeEnum(
  "System.Xml.DocumentXmlWriterType", false, {
    InsertSiblingAfter: 0, 
    InsertSiblingBefore: 1, 
    PrependChild: 2, 
    AppendChild: 3, 
    AppendAttribute: 4, 
    ReplaceToFollowingSibling: 5
  }, false
);

(function DocumentXmlWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlRawWriter"), "System.Xml.DocumentXmlWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.DocumentXmlWriterType"), $asm05.TypeRef("System.Xml.XmlNode"), 
          $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlAttribute"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddChild", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.WriteState")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseWithAppendAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseWithReplaceToFollowingSibling", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriterSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EndNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NamespaceManager", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNamespaceManager")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Navigator", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.DocumentXPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSettings", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriterSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DocumentXmlWriter/State"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    )
      .Overrides(1, "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(1, "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(1, "LookupPrefix");

    $.ExternalMethod({Static:false, Public:false}, "VerifyState", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.DocumentXmlWriter/Method")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlStandalone")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "type", $asm05.TypeRef("System.Xml.DocumentXmlWriterType")); 
    $.Field({Static:false, Public:false}, "start", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "document", $asm05.TypeRef("System.Xml.XmlDocument")); 
    $.Field({Static:false, Public:false}, "namespaceManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Field({Static:false, Public:false}, "state", $asm05.TypeRef("System.Xml.DocumentXmlWriter/State")); 
    $.Field({Static:false, Public:false}, "write", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "fragment", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.XmlNode")])); 
    $.Field({Static:false, Public:false}, "settings", $asm05.TypeRef("System.Xml.XmlWriterSettings")); 
    $.Field({Static:false, Public:false}, "navigator", $asm05.TypeRef("System.Xml.DocumentXPathNavigator")); 
    $.Field({Static:false, Public:false}, "end", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:true , Public:false}, "changeState", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.DocumentXmlWriter/State")])); 
    $.Property({Static:false, Public:true }, "NamespaceManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlWriterSettings"));

    $.Property({Static:false, Public:true }, "Navigator", $asm05.TypeRef("System.Xml.DocumentXPathNavigator"));

    $.Property({Static:false, Public:true }, "EndNode", $asm05.TypeRef("System.Xml.XmlNode"));

    $.ImplementInterfaces(
      /* 1 */ $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.DocumentXmlWriter/State", false, {
    Error: 0, 
    Attribute: 1, 
    Prolog: 2, 
    Fragment: 3, 
    Content: 4, 
    Last: 5
  }, false
);

JSIL.MakeEnum(
  "System.Xml.DocumentXmlWriter/Method", false, {
    WriteXmlDeclaration: 0, 
    WriteStartDocument: 1, 
    WriteEndDocument: 2, 
    WriteDocType: 3, 
    WriteStartElement: 4, 
    WriteEndElement: 5, 
    WriteFullEndElement: 6, 
    WriteStartAttribute: 7, 
    WriteEndAttribute: 8, 
    WriteNamespaceDeclaration: 9, 
    WriteCData: 10, 
    WriteComment: 11, 
    WriteProcessingInstruction: 12, 
    WriteEntityRef: 13, 
    WriteWhitespace: 14, 
    WriteString: 15
  }, false
);

JSIL.DeclareNamespace("System.Xml.XPath");
(function XPathItem$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XPath.XPathItem", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNode", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypedValue", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValueAs", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValueAs", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNode", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "TypedValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsBoolean", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDateTime", $asm01.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDouble", $.Double);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsInt", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsLong", $.Int64);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeInterface(
  "System.Xml.XPath.IXPathNavigable", true, [], function ($) {
    $.Method({}, "CreateNavigator", new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], []));
  }, []);

(function XPathNavigator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XPath.XPathItem"), "System.Xml.XPath.XPathNavigator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChildElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSubtree", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CheckValidity", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ComparePosition", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeOrder"), [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareSiblings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeOrder"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compile", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathExpression"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompileMatchPattern", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathExpression"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateAttributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateContextReader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateNavigator", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeleteRange", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeleteSelf", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$.String, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathExpression"), $asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanEdit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_debuggerDisplayProxy", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasChildren", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IndexInParent", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNode", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_NavigatorComparer", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEqualityComparer"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OuterXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypedValue", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UnderlyingObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_UniqueId", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetContentKindMask", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDepth", 
      new JSIL.MethodSignature($.Int32, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKindMask", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamespaces", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNamespaceManager"), [$asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValidatingReader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
          $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertElementAfter", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertElementBefore", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDescendant", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSamePosition", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsText", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidChildType", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidSiblingType", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveTo", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToChild", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToChild", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirst", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstChild", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNamespaceScope")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToFirstNamespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFollowing", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType"), $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToId", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNamespaceScope")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToNextNamespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNonDescendant", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToParent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToPrevious", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToPrevious", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToPrevious", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToRoot", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrependChild", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrependChild", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrependChild", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrependChild", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrependChildElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSubtree", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceRange", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriter"), [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceSelf", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceSelf", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceSelf", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$.String, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm05.TypeRef("System.Xml.XPath.XPathExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectAncestors", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm05.TypeRef("System.Xml.XPath.XPathNodeType"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectAncestors", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectChildren", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectChildren", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectDescendants", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm05.TypeRef("System.Xml.XPath.XPathNodeType"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectDescendants", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectSingleNode", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectSingleNode", 
      new JSIL.MethodSignature($.Type, [$.String, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectSingleNode", 
      new JSIL.MethodSignature($.Type, [$asm05.TypeRef("System.Xml.XPath.XPathExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_OuterXml", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetTypedValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValueAs", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSubtree", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Constant({Static:true , Public:false}, "AllMask", 2147483647); 
    $.Constant({Static:true , Public:false}, "NoAttrNmspMask", 2147483635); 
    $.Constant({Static:true , Public:false}, "TextMask", 112); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "comparer", $asm05.TypeRef("System.Xml.XPath.XPathNavigatorKeyComparer")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "NodeTypeLetter", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "UniqueIdTbl", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ContentKindMasks", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Property({Static:false, Public:true , Virtual:true }, "IsNode", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypedValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsBoolean", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDateTime", $asm01.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDouble", $.Double);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsInt", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsLong", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:true , Public:true }, "NavigatorComparer", $asm01.TypeRef("System.Collections.IEqualityComparer"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "UnderlyingObject", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasChildren", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanEdit", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "OuterXml", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.Property({Static:false, Public:false}, "IndexInParent", $.UInt32);

    $.Property({Static:false, Public:false, Virtual:true }, "UniqueId", $.String);

    $.Property({Static:false, Public:false}, "debuggerDisplayProxy", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.ICloneable"), 
      /* 1 */ $asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), 
      /* 2 */ $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{debuggerDisplayProxy}"]; });

})();

(function CheckValidityHelper$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XPath.XPathNavigator/CheckValidityHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm05.TypeRef("System.Xml.XPath.XPathNavigatorReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValid", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidationCallback", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("System.Xml.Schema.ValidationEventArgs")], [])
    );

    $.Field({Static:false, Public:false}, "isValid", $.Boolean); 
    $.Field({Static:false, Public:false}, "nextEventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "reader", $asm05.TypeRef("System.Xml.XPath.XPathNavigatorReader")); 
    $.Property({Static:false, Public:false}, "IsValid", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DebuggerDisplayProxy$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.XPath.XPathNavigator/DebuggerDisplayProxy", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "nav", $asm05.TypeRef("System.Xml.XPath.XPathNavigator")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{ToString()}"]; });

})();

(function DocumentXPathNavigator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), "System.Xml.DocumentXPathNavigator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlDocument"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalibrateText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckAttributePosition", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.XmlAttribute"), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.XmlAttributeCollection")]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CheckValidity", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compare", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeOrder"), [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ComparePosition", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeOrder"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateAttributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriter"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeleteAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlAttribute"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeleteRange", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeleteSelf", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeleteToFollowingSibling", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FirstChild", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FirstChildTail", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanEdit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasChildren", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UnderlyingObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueDocument", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDepth", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamespaceManager", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNamespaceManager"), [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDescendant", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDescendant", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFollowingSibling", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSamePosition", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidChild", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveTo", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToChild", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToChild", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirst", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstChild", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNamespaceScope")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MoveToFirstNamespaceGlobal", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.XmlAttributeCollection")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MoveToFirstNamespaceLocal", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlAttributeCollection"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFollowing", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType"), $asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToId", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNamespaceScope")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MoveToNextNamespaceGlobal", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.XmlAttributeCollection")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MoveToNextNamespaceLocal", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlAttributeCollection"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToParent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToPrevious", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToRoot", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextSibling", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextSiblingTail", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OwnerNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParentNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParentNodeTail", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PathHasDuplicateNamespace", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.XmlElement"), $asm05.TypeRef("System.Xml.XmlElement"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrependChild", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreviousSibling", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreviousSiblingTail", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreviousText", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreviousTextTail", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceRange", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriter"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResetAttributePosition", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.XmlAttribute"), $asm05.TypeRef("System.Xml.XmlAttributeCollection"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetPosition", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectDescendants", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectDescendants", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm05.TypeRef("System.Xml.XPath.XPathNodeType"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IHasXmlNode.GetNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    )
      .Overrides(3, "GetNode");

    $.ExternalMethod({Static:false, Public:false}, "TextEnd", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TextStart", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.Field({Static:false, Public:false}, "document", $asm05.TypeRef("System.Xml.XmlDocument")); 
    $.Field({Static:false, Public:false}, "source", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "attributeIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "namespaceParent", $asm05.TypeRef("System.Xml.XmlElement")); 
    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:false}, "ValueDocument", $.String);

    $.Property({Static:false, Public:false}, "ValueText", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "UnderlyingObject", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasChildren", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanEdit", $.Boolean);

    $.ImplementInterfaces(
      /* 3 */ $asm05.TypeRef("System.Xml.IHasXmlNode")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathNodeIterator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XPath.XPathNodeIterator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_debuggerDisplayProxy", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "Clone");

    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "debuggerDisplayProxy", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.ICloneable"), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Position={CurrentPosition}, Current={debuggerDisplayProxy}"]; });

})();

(function Enumerator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XPath.XPathNodeIterator/Enumerator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "original", $asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
    $.Field({Static:false, Public:false}, "current", $asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
    $.Field({Static:false, Public:false}, "iterationStarted", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DocumentXPathNodeIterator_Empty$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), "System.Xml.DocumentXPathNodeIterator_Empty", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.DocumentXPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "nav", $asm05.TypeRef("System.Xml.XPath.XPathNavigator")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DocumentXPathNodeIterator_ElemDescendants$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), "System.Xml.DocumentXPathNodeIterator_ElemDescendants", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.DocumentXPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Match", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPosition", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "nav", $asm05.TypeRef("System.Xml.DocumentXPathNavigator")); 
    $.Field({Static:false, Public:false}, "level", $.Int32); 
    $.Field({Static:false, Public:false}, "position", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DocumentXPathNodeIterator_AllElemChildren$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.DocumentXPathNodeIterator_ElemDescendants"), "System.Xml.DocumentXPathNodeIterator_AllElemChildren", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.DocumentXPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Match", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DocumentXPathNodeIterator_AllElemChildren_AndSelf$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.DocumentXPathNodeIterator_AllElemChildren"), "System.Xml.DocumentXPathNodeIterator_AllElemChildren_AndSelf", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.DocumentXPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DocumentXPathNodeIterator_ElemChildren_NoLocalName$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.DocumentXPathNodeIterator_ElemDescendants"), "System.Xml.DocumentXPathNodeIterator_ElemChildren_NoLocalName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.DocumentXPathNavigator"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Match", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.Field({Static:false, Public:false}, "nsAtom", $.String); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.DocumentXPathNodeIterator_ElemChildren_NoLocalName"), "System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.DocumentXPathNavigator"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DocumentXPathNodeIterator_ElemChildren$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.DocumentXPathNodeIterator_ElemDescendants"), "System.Xml.DocumentXPathNodeIterator_ElemChildren", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.DocumentXPathNavigator"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Match", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.Field({Static:false, Public:false}, "localNameAtom", $.String); 
    $.Field({Static:false, Public:false}, "nsAtom", $.String); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DocumentXPathNodeIterator_ElemChildren_AndSelf$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.DocumentXPathNodeIterator_ElemChildren"), "System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.DocumentXPathNavigator"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DomNameTable$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.DomNameTable", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlName"), [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlName"), [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Grow", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "InitialSize", 64); 
    $.Field({Static:false, Public:false}, "entries", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlName")])); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Field({Static:false, Public:false}, "mask", $.Int32); 
    $.Field({Static:false, Public:false}, "ownerDocument", $asm05.TypeRef("System.Xml.XmlDocument")); 
    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlNode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlNode", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AfterEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AncestorNode", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AppendChildForLoad", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendChildText", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeforeEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanInsertAfter", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanInsertBefore", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($.Type, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyChildren", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlDocument"), $.Type, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateNavigator", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindChild", 
      new JSIL.MethodSignature($.Type, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttributeCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ChildNodes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_debuggerDisplayProxy", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Document", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDocument"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FirstChild", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasChildNodes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsContainer", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsText", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlElement"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlElement"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LastChild", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LastNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlLinkedNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NextSibling", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OuterXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OwnerDocument", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDocument"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreviousSibling", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_PreviousText", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPLocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEventArgs", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeChangedEventArgs"), [
          $.Type, $.Type, 
          $.Type, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlNodeChangedAction")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespaceOfPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespaceOfPrefixStrict", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPrefixOfNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPrefixOfNamespaceStrict", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetXPAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasReadOnlyParent", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsConnected", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidChildType", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NestTextNodes", 
      new JSIL.MethodSignature(null, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Normalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NormalizeWinner", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrependChild", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAll", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveChild", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceChild", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SelectNodes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeList"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SelectNodes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeList"), [$.String, $asm05.TypeRef("System.Xml.XmlNamespaceManager")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SelectSingleNode", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SelectSingleNode", 
      new JSIL.MethodSignature($.Type, [$.String, $asm05.TypeRef("System.Xml.XmlNamespaceManager")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_LastNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlLinkedNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Prefix", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParentForLoad", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SplitName", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Supports", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "Clone");

    $.ExternalMethod({Static:true , Public:false}, "UnnestTextNodes", 
      new JSIL.MethodSignature(null, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Field({Static:false, Public:false}, "parentNode", $.Type); 
    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "ChildNodes", $asm05.TypeRef("System.Xml.XmlNodeList"));

    $.Property({Static:false, Public:true , Virtual:true }, "PreviousSibling", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "NextSibling", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm05.TypeRef("System.Xml.XmlAttributeCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "OwnerDocument", $asm05.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:true , Virtual:true }, "FirstChild", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "LastChild", $.Type);

    $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm05.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasChildNodes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "OuterXml", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:false}, "Document", $asm05.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm05.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm05.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "XPLocalName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "IsText", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "PreviousText", $.Type);

    $.Property({Static:false, Public:false}, "debuggerDisplayProxy", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.ICloneable"), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm05.TypeRef("System.Xml.XPath.IXPathNavigable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{debuggerDisplayProxy}"]; })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function XmlAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlNode"), "System.Xml.XmlAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlName"), $asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AppendChildForLoad", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsContainer", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNamespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LastNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlLinkedNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalNameHash", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OwnerDocument", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDocument"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OwnerElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Specified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPLocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidChildType", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareOwnerElementInElementIdAttrMap", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrependChild", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveChild", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceChild", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetOwnerElementInElementIdAttrMap", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_LastNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlLinkedNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Prefix", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlName")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Field({Static:false, Public:false}, "$name", $asm05.TypeRef("System.Xml.XmlName")); 
    $.Field({Static:false, Public:false}, "lastChild", $asm05.TypeRef("System.Xml.XmlLinkedNode")); 
    $.Property({Static:false, Public:false}, "LocalNameHash", $.Int32);

    $.Property({Static:false, Public:false}, "XmlName", $asm05.TypeRef("System.Xml.XmlName"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm05.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "OwnerDocument", $asm05.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm05.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Specified", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "OwnerElement", $asm05.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "XPLocalName", $.String);

    $.Property({Static:false, Public:false}, "IsNamespace", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlNamedNodeMap$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlNamedNodeMap", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddNodeForLoad", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNodeOffset", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNodeOffset", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Nodes", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamedItem", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamedItem", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InsertNodeAt", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Int32, $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveNamedItem", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveNamedItem", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RemoveNodeAt", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceNodeAt", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Int32, $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetNamedItem", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.Field({Static:false, Public:false}, "parent", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "nodes", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "Nodes", $asm01.TypeRef("System.Collections.ArrayList"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlAttributeCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlNamedNodeMap"), "System.Xml.XmlAttributeCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Detach", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNodeOffset", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNodeOffsetNS", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemOf", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemOf", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemOf", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertAfter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$asm05.TypeRef("System.Xml.XmlAttribute"), $asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertBefore", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$asm05.TypeRef("System.Xml.XmlAttribute"), $asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InsertNodeAt", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Int32, $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InsertParentIntoElementIdAttrMap", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalAppendAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareParentInElementIdAttrMap", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Prepend", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAll", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDuplicateAttribute", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RemoveNodeAt", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveParentFromElementIdAttrMap", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetParentInElementIdAttrMap", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetNamedItem", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Array"), $.Int32], [])
    )
      .Overrides(1, "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(1, "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_SyncRoot");

    $.Property({Static:false, Public:true }, "ItemOf", $asm05.TypeRef("System.Xml.XmlAttribute"));

    $.Property({Static:false, Public:true }, "ItemOf", $asm05.TypeRef("System.Xml.XmlAttribute"));

    $.Property({Static:false, Public:true }, "ItemOf", $asm05.TypeRef("System.Xml.XmlAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm01.TypeRef("System.Collections.ICollection"), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["ItemOf"]; });

})();

(function XmlLinkedNode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlNode"), "System.Xml.XmlLinkedNode", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NextSibling", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreviousSibling", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.Field({Static:false, Public:false}, "next", $.Type); 
    $.Property({Static:false, Public:true , Virtual:true }, "PreviousSibling", $asm05.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "NextSibling", $asm05.TypeRef("System.Xml.XmlNode"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlCharacterData$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlLinkedNode"), "System.Xml.XmlCharacterData", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckOnData", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecideXPNodeTypeForTextNodes", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNode"), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeleteData", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Data", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertData", 
      new JSIL.MethodSignature(null, [$.Int32, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceData", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Data", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Substring", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32], [])
    );

    $.Field({Static:false, Public:false}, "data", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Data", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlCDataSection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlCharacterData"), "System.Xml.XmlCDataSection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsText", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_PreviousText", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm05.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsText", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "PreviousText", $asm05.TypeRef("System.Xml.XmlNode"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlChildEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlChildEnumerator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(0, "Reset");

    $.Field({Static:false, Public:false}, "container", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "child", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "isFirst", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.Property({Static:false, Public:false}, "Current", $asm05.TypeRef("System.Xml.XmlNode"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlNodeList$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlNodeList", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ItemOf", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ItemOf", $asm05.TypeRef("System.Xml.XmlNode"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["ItemOf"]; });

})();

(function XmlChildNodes$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlNodeList"), "System.Xml.XmlChildNodes", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "container", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlComment$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlCharacterData"), "System.Xml.XmlComment", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlDeclaration$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlLinkedNode"), "System.Xml.XmlDeclaration", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Standalone", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Encoding", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Standalone", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Constant({Static:true , Public:false}, "YES", "yes"); 
    $.Constant({Static:true , Public:false}, "NO", "no"); 
    $.Constant({Static:true , Public:false}, "VERNUM", "1.0"); 
    $.Field({Static:false, Public:false}, "encoding", $.String); 
    $.Field({Static:false, Public:false}, "standalone", $.String); 
    $.Property({Static:false, Public:true }, "Version", $.String);

    $.Property({Static:false, Public:true }, "Encoding", $.String);

    $.Property({Static:false, Public:true }, "Standalone", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlDocument$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlNode"), "System.Xml.XmlDocument", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlImplementation")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_NodeChanged", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_NodeChanging", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_NodeInserted", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_NodeInserting", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_NodeRemoved", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_NodeRemoving", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttrXmlName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlName"), [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDefaultAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddElementWithId", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIdInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlName"), $asm05.TypeRef("System.Xml.XmlName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXmlName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlName"), [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AfterEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AppendChildForLoad", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode"), $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeforeEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanInsertAfter", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanInsertBefore", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToNodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCDataSection", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlCDataSection"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateComment", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlComment"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateDefaultAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDocumentFragment", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDocumentFragment"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDocumentType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDocumentType"), [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlElement"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlElement"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlElement"), [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEntityReference", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlEntityReference"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateNavigator", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNavigator", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [
          $asm05.TypeRef("System.Xml.XmlNodeType"), $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [
          $asm05.TypeRef("System.Xml.XmlNodeType"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateProcessingInstruction", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlProcessingInstruction"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSignificantWhitespace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSignificantWhitespace"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateTextNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlText"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateWhitespace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWhitespace"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateXmlDeclaration", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDeclaration"), [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ActualLoadingStatus", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanReportValidity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Declaration", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDeclaration"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DocumentElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DocumentType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDocumentType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdSchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Encoding", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Entities", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNamedNodeMap"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasEntityReferences", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasSetResolver", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Implementation", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlImplementation"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsContainer", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLoading", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LastNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlLinkedNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceXml", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OwnerDocument", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreserveWhitespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schemas", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Standalone", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TextEncoding", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Text.Encoding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Version", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [
          $asm05.TypeRef("System.Xml.XmlElement"), $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetElement", 
      new JSIL.MethodSignature($asm01.TypeRef("System.WeakReference"), [$asm01.TypeRef("System.Collections.ArrayList"), $asm05.TypeRef("System.Xml.XmlElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetElementById", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlElement"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetElementsByTagName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeList"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetElementsByTagName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeList"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEntityNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlEntity"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEventArgs", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeChangedEventArgs"), [
          $asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode"), 
          $asm05.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlNodeChangedAction")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIDInfoByElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlName"), [$asm05.TypeRef("System.Xml.XmlName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIDInfoByElement_", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlName"), [$asm05.TypeRef("System.Xml.XmlName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInsertEventArgsForLoad", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeChangedEventArgs"), [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResolver", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlResolver"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaElementDecl", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"), [$asm05.TypeRef("System.Xml.XmlElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXmlName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlName"), [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasNodeTypeInNextSiblings", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNodeType"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasNodeTypeInPrevSiblings", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNodeType"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportChildren", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportNodeInternal", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode"), $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTextNode", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidChildType", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadXml", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NormalizeText", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareDefaultAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [
          $asm05.TypeRef("System.Xml.Schema.SchemaAttDef"), $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_NodeChanged", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_NodeChanging", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_NodeInserted", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_NodeInserting", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_NodeRemoved", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_NodeRemoving", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveElementWithId", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Save", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Save", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Save", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Save", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ActualLoadingStatus", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DtdSchemaInfo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Entities", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNamedNodeMap")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsLoading", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_LastNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlLinkedNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PreserveWhitespace", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schemas", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_XmlResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBaseURI", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDefaultNamespace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupReader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTextReader"), [$asm05.TypeRef("System.Xml.XmlTextReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Validate", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Validate", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Field({Static:false, Public:false}, "implementation", $asm05.TypeRef("System.Xml.XmlImplementation")); 
    $.Field({Static:false, Public:false}, "domNameTable", $asm05.TypeRef("System.Xml.DomNameTable")); 
    $.Field({Static:false, Public:false}, "lastChild", $asm05.TypeRef("System.Xml.XmlLinkedNode")); 
    $.Field({Static:false, Public:false}, "entities", $asm05.TypeRef("System.Xml.XmlNamedNodeMap")); 
    $.Field({Static:false, Public:false}, "htElementIdMap", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "htElementIDAttrDecl", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "schemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo")); 
    $.Field({Static:false, Public:false}, "schemas", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
    $.Field({Static:false, Public:false}, "reportValidity", $.Boolean); 
    $.Field({Static:false, Public:false}, "actualLoadingStatus", $.Boolean); 
    $.Field({Static:false, Public:false}, "onNodeInsertingDelegate", $asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")); 
    $.Field({Static:false, Public:false}, "onNodeInsertedDelegate", $asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")); 
    $.Field({Static:false, Public:false}, "onNodeRemovingDelegate", $asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")); 
    $.Field({Static:false, Public:false}, "onNodeRemovedDelegate", $asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")); 
    $.Field({Static:false, Public:false}, "onNodeChangingDelegate", $asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")); 
    $.Field({Static:false, Public:false}, "onNodeChangedDelegate", $asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")); 
    $.Field({Static:false, Public:false}, "fEntRefNodesPresent", $.Boolean); 
    $.Field({Static:false, Public:false}, "fCDataNodesPresent", $.Boolean); 
    $.Field({Static:false, Public:false}, "preserveWhitespace", $.Boolean); 
    $.Field({Static:false, Public:false}, "isLoading", $.Boolean); 
    $.Field({Static:false, Public:false}, "strDocumentName", $.String); 
    $.Field({Static:false, Public:false}, "strDocumentFragmentName", $.String); 
    $.Field({Static:false, Public:false}, "strCommentName", $.String); 
    $.Field({Static:false, Public:false}, "strTextName", $.String); 
    $.Field({Static:false, Public:false}, "strCDataSectionName", $.String); 
    $.Field({Static:false, Public:false}, "strEntityName", $.String); 
    $.Field({Static:false, Public:false}, "strID", $.String); 
    $.Field({Static:false, Public:false}, "strXmlns", $.String); 
    $.Field({Static:false, Public:false}, "strXml", $.String); 
    $.Field({Static:false, Public:false}, "strSpace", $.String); 
    $.Field({Static:false, Public:false}, "strLang", $.String); 
    $.Field({Static:false, Public:false}, "strEmpty", $.String); 
    $.Field({Static:false, Public:false}, "strNonSignificantWhitespaceName", $.String); 
    $.Field({Static:false, Public:false}, "strSignificantWhitespaceName", $.String); 
    $.Field({Static:false, Public:false}, "strReservedXmlns", $.String); 
    $.Field({Static:false, Public:false}, "strReservedXml", $.String); 
    $.Field({Static:false, Public:false}, "baseURI", $.String); 
    $.Field({Static:false, Public:false}, "resolver", $asm05.TypeRef("System.Xml.XmlResolver")); 
    $.Field({Static:false, Public:false}, "bSetResolver", $.Boolean); 
    $.Field({Static:false, Public:false}, "objLock", $.Object); 
    $.Field({Static:false, Public:false}, "namespaceXml", $asm05.TypeRef("System.Xml.XmlAttribute")); 
    $.Field({Static:true , Public:false}, "EmptyEnumerator", $asm05.TypeRef("System.Xml.EmptyEnumerator")); 
    $.Field({Static:true , Public:false}, "NotKnownSchemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")); 
    $.Field({Static:true , Public:false}, "ValidSchemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")); 
    $.Field({Static:true , Public:false}, "InvalidSchemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")); 
    $.Property({Static:false, Public:false}, "DtdSchemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm05.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "DocumentType", $asm05.TypeRef("System.Xml.XmlDocumentType"));

    $.Property({Static:false, Public:false, Virtual:true }, "Declaration", $asm05.TypeRef("System.Xml.XmlDeclaration"));

    $.Property({Static:false, Public:true }, "Implementation", $asm05.TypeRef("System.Xml.XmlImplementation"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true }, "DocumentElement", $asm05.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm05.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "OwnerDocument", $.Type);

    $.Property({Static:false, Public:true }, "Schemas", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Property({Static:false, Public:false}, "CanReportValidity", $.Boolean);

    $.Property({Static:false, Public:false}, "HasSetResolver", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlResolver", $asm05.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true }, "PreserveWhitespace", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "Entities", $asm05.TypeRef("System.Xml.XmlNamedNodeMap"));

    $.Property({Static:false, Public:false}, "IsLoading", $.Boolean);

    $.Property({Static:false, Public:false}, "ActualLoadingStatus", $.Boolean);

    $.Property({Static:false, Public:false}, "TextEncoding", $asm01.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.Property({Static:false, Public:false}, "Version", $.String);

    $.Property({Static:false, Public:false}, "Encoding", $.String);

    $.Property({Static:false, Public:false}, "Standalone", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false}, "HasEntityReferences", $.Boolean);

    $.Property({Static:false, Public:false}, "NamespaceXml", $asm05.TypeRef("System.Xml.XmlAttribute"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlDocumentFragment$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlNode"), "System.Xml.XmlDocumentFragment", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanInsertAfter", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanInsertBefore", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsContainer", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LastNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlLinkedNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OwnerDocument", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDocument"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidChildType", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_LastNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlLinkedNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Field({Static:false, Public:false}, "lastChild", $asm05.TypeRef("System.Xml.XmlLinkedNode")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm05.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "OwnerDocument", $asm05.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm05.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlDocumentType$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlLinkedNode"), "System.Xml.XmlDocumentType", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdSchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Entities", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNamedNodeMap"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InternalSubset", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Notations", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNamedNodeMap"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParseWithNamespaces", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicId", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SystemId", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DtdSchemaInfo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ParseWithNamespaces", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "publicId", $.String); 
    $.Field({Static:false, Public:false}, "systemId", $.String); 
    $.Field({Static:false, Public:false}, "internalSubset", $.String); 
    $.Field({Static:false, Public:false}, "namespaces", $.Boolean); 
    $.Field({Static:false, Public:false}, "entities", $asm05.TypeRef("System.Xml.XmlNamedNodeMap")); 
    $.Field({Static:false, Public:false}, "notations", $asm05.TypeRef("System.Xml.XmlNamedNodeMap")); 
    $.Field({Static:false, Public:false}, "schemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "Entities", $asm05.TypeRef("System.Xml.XmlNamedNodeMap"));

    $.Property({Static:false, Public:true }, "Notations", $asm05.TypeRef("System.Xml.XmlNamedNodeMap"));

    $.Property({Static:false, Public:true }, "PublicId", $.String);

    $.Property({Static:false, Public:true }, "SystemId", $.String);

    $.Property({Static:false, Public:true }, "InternalSubset", $.String);

    $.Property({Static:false, Public:false}, "ParseWithNamespaces", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdSchemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DocumentSchemaValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.DocumentSchemaValidator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlDocument"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
          $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AncestorTypeHasWildcard", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNodeSequenceCapacity", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTypeFinderValidator", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaValidator"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateValidator", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$asm05.TypeRef("System.Xml.XmlElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [$asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceResolver", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PsviAugmentation", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetComplexType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNodeValue", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeFromAncestors", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [
          $asm05.TypeRef("System.Xml.XmlElement"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeFromParent", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm05.TypeRef("System.Xml.XmlElement"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalValidationCallBack", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("System.Xml.Schema.ValidationEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PsviAugmentation", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDefaultAttributeSchemaInfo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TypeFinderCallBack", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("System.Xml.Schema.ValidationEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Validate", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateChildrenTillNextAncestor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateSingleElement", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlElement"), $.Boolean, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo")
        ], [])
    );

    $.Field({Static:false, Public:false}, "validator", $asm05.TypeRef("System.Xml.Schema.XmlSchemaValidator")); 
    $.Field({Static:false, Public:false}, "schemas", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
    $.Field({Static:false, Public:false}, "nsManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "defaultAttributes", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "nodeValueGetter", $asm05.TypeRef("System.Xml.Schema.XmlValueGetter")); 
    $.Field({Static:false, Public:false}, "attributeSchemaInfo", $asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo")); 
    $.Field({Static:false, Public:false}, "schemaInfo", $asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo")); 
    $.Field({Static:false, Public:false}, "eventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "internalEventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "startNode", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "currentNode", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "document", $asm05.TypeRef("System.Xml.XmlDocument")); 
    $.Field({Static:false, Public:false}, "nodeSequenceToValidate", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNode")])); 
    $.Field({Static:false, Public:false}, "isPartialTreeValid", $.Boolean); 
    $.Field({Static:false, Public:false}, "psviAugmentation", $.Boolean); 
    $.Field({Static:false, Public:false}, "isValid", $.Boolean); 
    $.Field({Static:false, Public:false}, "NsXmlNs", $.String); 
    $.Field({Static:false, Public:false}, "NsXsi", $.String); 
    $.Field({Static:false, Public:false}, "XsiType", $.String); 
    $.Field({Static:false, Public:false}, "XsiNil", $.String); 
    $.Property({Static:false, Public:true }, "PsviAugmentation", $.Boolean);

    $.Property({Static:false, Public:false}, "NamespaceResolver", $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlDOMTextWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlTextWriter"), "System.Xml.XmlDOMTextWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream"), $asm01.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlElement$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlLinkedNode"), "System.Xml.XmlElement", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlName"), $.Boolean, 
          $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AppendChildForLoad", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttributeCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsContainer", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LastNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlLinkedNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NextSibling", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OwnerDocument", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDocument"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPLocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttributeNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttributeNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetElementsByTagName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeList"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetElementsByTagName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeList"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetXPAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidChildType", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAll", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAllAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveAllChildren", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAttributeAt", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAttributeNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAttributeNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsEmpty", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_LastNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlLinkedNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Prefix", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlName")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetAttribute", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetAttributeNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetAttributeNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteElementTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter"), $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Field({Static:false, Public:false}, "$name", $asm05.TypeRef("System.Xml.XmlName")); 
    $.Field({Static:false, Public:false}, "attributes", $asm05.TypeRef("System.Xml.XmlAttributeCollection")); 
    $.Field({Static:false, Public:false}, "lastChild", $asm05.TypeRef("System.Xml.XmlLinkedNode")); 
    $.Property({Static:false, Public:false}, "XmlName", $asm05.TypeRef("System.Xml.XmlName"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm05.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "OwnerDocument", $asm05.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm05.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm05.TypeRef("System.Xml.XmlAttributeCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NextSibling", $asm05.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "XPLocalName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlElementList$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlNodeList"), "System.Xml.XmlElementList", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConcurrencyCheck", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNodeChangedEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChangeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMatchingNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNextNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNthMatchingNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [
          $asm05.TypeRef("System.Xml.XmlNode"), $.Boolean, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMatch", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextElemInPreOrder", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrevElemInPreOrder", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.Field({Static:false, Public:false}, "asterisk", $.String); 
    $.Field({Static:false, Public:false}, "changeCount", $.Int32); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "localName", $.String); 
    $.Field({Static:false, Public:false}, "namespaceURI", $.String); 
    $.Field({Static:false, Public:false}, "rootNode", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "curInd", $.Int32); 
    $.Field({Static:false, Public:false}, "curElem", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "empty", $.Boolean); 
    $.Field({Static:false, Public:false}, "atomized", $.Boolean); 
    $.Field({Static:false, Public:false}, "matchCount", $.Int32); 
    $.Property({Static:false, Public:false}, "ChangeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlElementListEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlElementListEnumerator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlElementList")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "list", $asm05.TypeRef("System.Xml.XmlElementList")); 
    $.Field({Static:false, Public:false}, "curElem", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "changeCount", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlEmptyElementListEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlEmptyElementListEnumerator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlElementList")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlElementListListener$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlElementListListener", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlDocument"), $asm05.TypeRef("System.Xml.XmlElementList")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnListChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("System.Xml.XmlNodeChangedEventArgs")], [])
    );

    $.Field({Static:false, Public:false}, "elemList", $asm01.TypeRef("System.WeakReference")); 
    $.Field({Static:false, Public:false}, "doc", $asm05.TypeRef("System.Xml.XmlDocument")); 
    $.Field({Static:false, Public:false}, "nodeChangeHandler", $asm05.TypeRef("System.Xml.XmlNodeChangedEventHandler")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlEntity$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlNode"), "System.Xml.XmlEntity", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsContainer", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LastNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlLinkedNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NotationName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OuterXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicId", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SystemId", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidChildType", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_LastNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlLinkedNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBaseURI", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Field({Static:false, Public:false}, "publicId", $.String); 
    $.Field({Static:false, Public:false}, "systemId", $.String); 
    $.Field({Static:false, Public:false}, "notationName", $.String); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "unparsedReplacementStr", $.String); 
    $.Field({Static:false, Public:false}, "baseURI", $.String); 
    $.Field({Static:false, Public:false}, "lastChild", $asm05.TypeRef("System.Xml.XmlLinkedNode")); 
    $.Field({Static:false, Public:false}, "childrenFoliating", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm05.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true }, "PublicId", $.String);

    $.Property({Static:false, Public:true }, "SystemId", $.String);

    $.Property({Static:false, Public:true }, "NotationName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "OuterXml", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlEntityReference$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlLinkedNode"), "System.Xml.XmlEntityReference", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructBaseURI", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChildBaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsContainer", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LastNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlLinkedNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidChildType", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_LastNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlLinkedNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParentForLoad", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "lastChild", $asm05.TypeRef("System.Xml.XmlLinkedNode")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm05.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:false}, "ChildBaseURI", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XmlNodeChangedAction", true, {
    Insert: 0, 
    Remove: 1, 
    Change: 2
  }, false
);

(function XmlImplementation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlImplementation", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDocument", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDocument"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasFeature", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Property({Static:false, Public:false}, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlLoader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlLoader", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInnerXmlReader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNodeType"), 
          $asm05.TypeRef("System.Xml.XmlParserContext"), $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EntitizeName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpandEntity", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlEntity")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpandEntityReference", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlEntityReference")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetContext", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlParserContext"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Load", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlDocument"), $asm05.TypeRef("System.Xml.XmlReader"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadAttributeNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadAttributeNodeDirect", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadAttributeValue", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDeclarationNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDeclaration"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDefaultAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDocSequence", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDocumentType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaInfo"), $asm05.TypeRef("System.Xml.XmlDocumentType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDocumentTypeNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDocumentType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadEntityReferenceNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlEntityReference"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadInnerXmlAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlAttribute"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadInnerXmlElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlElement"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadNodeDirect", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDocumentType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlDocumentType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDocumentType", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlDocumentType"), $.Boolean, 
          $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePartialContent", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNamespaceManager"), [
          $asm05.TypeRef("System.Xml.XmlNode"), $.String, 
          $asm05.TypeRef("System.Xml.XmlNodeType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseXmlDeclarationValue", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCurrentNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlDocument"), $asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDuplicateNamespace", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlElement"), $asm05.TypeRef("System.Xml.XmlNamespaceManager"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedNodeType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.Field({Static:false, Public:false}, "doc", $asm05.TypeRef("System.Xml.XmlDocument")); 
    $.Field({Static:false, Public:false}, "reader", $asm05.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "preserveWhitespace", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlName$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32, 
          $asm05.TypeRef("System.Xml.XmlDocument"), $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $.String, $.Int32, 
          $asm05.TypeRef("System.Xml.XmlDocument"), $.Type, 
          $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNil", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OwnerDocument", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDocument"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Validity", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaValidity"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "localName", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
    $.Field({Static:false, Public:false}, "ownerDoc", $asm05.TypeRef("System.Xml.XmlDocument")); 
    $.Field({Static:false, Public:false}, "next", $.Type); 
    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "HashCode", $.Int32);

    $.Property({Static:false, Public:true }, "OwnerDocument", $asm05.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Validity", $asm05.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsNil", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaElement", $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlNameEx$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlName"), "System.Xml.XmlNameEx", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32, 
          $asm05.TypeRef("System.Xml.XmlDocument"), $asm05.TypeRef("System.Xml.XmlName"), 
          $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNil", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Validity", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaValidity"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetIsDefault", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetIsNil", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValidity", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaValidity")], [])
    );

    $.Constant({Static:true , Public:false}, "ValidityMask", 3); 
    $.Constant({Static:true , Public:false}, "IsDefaultBit", 4); 
    $.Constant({Static:true , Public:false}, "IsNilBit", 8); 
    $.Field({Static:false, Public:false}, "flags", $.Byte); 
    $.Field({Static:false, Public:false}, "memberType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Field({Static:false, Public:false}, "schemaType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType")); 
    $.Field({Static:false, Public:false}, "decl", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "Validity", $asm05.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsNil", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaElement", $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DebuggerDisplayXmlNodeProxy$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.DebuggerDisplayXmlNodeProxy", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "node", $asm05.TypeRef("System.Xml.XmlNode")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{ToString()}"]; });

})();

(function XmlNodeChangedEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.EventArgs"), "System.Xml.XmlNodeChangedEventArgs", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode"), 
          $asm05.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlNodeChangedAction")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Action", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeChangedAction"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewParent", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Node", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OldParent", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OldValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "action", $asm05.TypeRef("System.Xml.XmlNodeChangedAction")); 
    $.Field({Static:false, Public:false}, "node", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "oldParent", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "newParent", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "oldValue", $.String); 
    $.Field({Static:false, Public:false}, "newValue", $.String); 
    $.Property({Static:false, Public:true }, "Action", $asm05.TypeRef("System.Xml.XmlNodeChangedAction"));

    $.Property({Static:false, Public:true }, "Node", $asm05.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true }, "OldParent", $asm05.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true }, "NewParent", $asm05.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true }, "OldValue", $.String);

    $.Property({Static:false, Public:true }, "NewValue", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.Xml.XmlNodeChangedEventHandler", true, []);

(function XmlNodeReaderNavigator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlNodeReaderNavigator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIndexCondition", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefaultLookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CreatedOnAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOnAttrVal", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOnDeclOrDocType", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OwnerElementNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeFromElement", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlElement"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeFromElement", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("System.Xml.XmlElement"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDecAttrInd", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDeclarationAttr", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlDeclaration"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDeclarationAttr", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDocTypeAttrInd", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDocumentTypeAttr", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlDocumentType"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDocumentTypeAttr", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitDecAttr", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitDocTypeAttr", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsLocalNameEmpty", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "LogMove", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAttributeFromElement", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.XmlElement"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToFirstChild", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNextSibling", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToParent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.XmlNodeType")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetMove", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.XmlNodeType")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetToAttribute", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RollBackMove", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Constant({Static:true , Public:false}, "strPublicID", "PUBLIC"); 
    $.Constant({Static:true , Public:false}, "strSystemID", "SYSTEM"); 
    $.Constant({Static:true , Public:false}, "strVersion", "version"); 
    $.Constant({Static:true , Public:false}, "strStandalone", "standalone"); 
    $.Constant({Static:true , Public:false}, "strEncoding", "encoding"); 
    $.Field({Static:false, Public:false}, "curNode", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "elemNode", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "logNode", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "attrIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "logAttrIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "doc", $asm05.TypeRef("System.Xml.XmlDocument")); 
    $.Field({Static:false, Public:false}, "nAttrInd", $.Int32); 
    $.Field({Static:false, Public:false}, "nDeclarationAttrCount", $.Int32); 
    $.Field({Static:false, Public:false}, "nDocTypeAttrCount", $.Int32); 
    $.Field({Static:false, Public:false}, "nLogLevel", $.Int32); 
    $.Field({Static:false, Public:false}, "nLogAttrInd", $.Int32); 
    $.Field({Static:false, Public:false}, "bLogOnAttrVal", $.Boolean); 
    $.Field({Static:false, Public:false}, "bCreatedOnAttribute", $.Boolean); 
    $.Field({Static:false, Public:false}, "decNodeAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNodeReaderNavigator/VirtualAttribute")])); 
    $.Field({Static:false, Public:false}, "docTypeNodeAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNodeReaderNavigator/VirtualAttribute")])); 
    $.Field({Static:false, Public:false}, "bOnAttrVal", $.Boolean); 
    $.Property({Static:false, Public:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:false}, "IsOnAttrVal", $.Boolean);

    $.Property({Static:false, Public:false}, "OwnerElementNode", $asm05.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:false}, "CreatedOnAttribute", $.Boolean);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.String);

    $.Property({Static:false, Public:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true }, "SchemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:false}, "IsOnDeclOrDocType", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function VirtualAttribute$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.XmlNodeReaderNavigator/VirtualAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "value", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlNodeReader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlReader"), "System.Xml.XmlNodeReader", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadBinary", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsInReadingStates", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAtZeroLevel", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadForward", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNextNode", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReSetReadingMarks", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetEndOfFile", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    )
      .Overrides(1, "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(1, "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(1, "LookupPrefix");

    $.Field({Static:false, Public:false}, "readerNav", $asm05.TypeRef("System.Xml.XmlNodeReaderNavigator")); 
    $.Field({Static:false, Public:false}, "nodeType", $asm05.TypeRef("System.Xml.XmlNodeType")); 
    $.Field({Static:false, Public:false}, "curDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "readState", $asm05.TypeRef("System.Xml.ReadState")); 
    $.Field({Static:false, Public:false}, "fEOF", $.Boolean); 
    $.Field({Static:false, Public:false}, "bResolveEntity", $.Boolean); 
    $.Field({Static:false, Public:false}, "bStartFromDocument", $.Boolean); 
    $.Field({Static:false, Public:false}, "bInReadBinary", $.Boolean); 
    $.Field({Static:false, Public:false}, "readBinaryHelper", $asm05.TypeRef("System.Xml.ReadContentAsBinaryHelper")); 
    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm05.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlNotation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlNode"), "System.Xml.XmlNotation", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OuterXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicId", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SystemId", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Field({Static:false, Public:false}, "publicId", $.String); 
    $.Field({Static:false, Public:false}, "systemId", $.String); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "PublicId", $.String);

    $.Property({Static:false, Public:true }, "SystemId", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "OuterXml", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlProcessingInstruction$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlLinkedNode"), "System.Xml.XmlProcessingInstruction", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Data", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPLocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Data", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Field({Static:false, Public:false}, "target", $.String); 
    $.Field({Static:false, Public:false}, "data", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true }, "Target", $.String);

    $.Property({Static:false, Public:true }, "Data", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "XPLocalName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSignificantWhitespace$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlCharacterData"), "System.Xml.XmlSignificantWhitespace", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsText", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_PreviousText", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm05.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsText", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "PreviousText", $asm05.TypeRef("System.Xml.XmlNode"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlText$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlCharacterData"), "System.Xml.XmlText", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsText", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_PreviousText", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SplitText", 
      new JSIL.MethodSignature($.Type, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm05.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsText", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "PreviousText", $asm05.TypeRef("System.Xml.XmlNode"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlUnspecifiedAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlAttribute"), "System.Xml.XmlUnspecifiedAttribute", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlDocument")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Specified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveChild", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceChild", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XmlNode"), $asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSpecified", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Field({Static:false, Public:false}, "fSpecified", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Specified", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlWhitespace$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlCharacterData"), "System.Xml.XmlWhitespace", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsText", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_PreviousText", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm05.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsText", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "PreviousText", $asm05.TypeRef("System.Xml.XmlNode"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathNodeList$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlNodeList"), "System.Xml.XPathNodeList", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUntil", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "list", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.XmlNode")])); 
    $.Field({Static:false, Public:false}, "nodeIterator", $asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
    $.Field({Static:false, Public:false}, "done", $.Boolean); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "nullparams", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return JSIL.Array.New($asm01.System.Object, 0);
      }); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlNodeListEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlNodeListEnumerator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPathNodeList")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "list", $asm05.TypeRef("System.Xml.XPathNodeList")); 
    $.Field({Static:false, Public:false}, "index", $.Int32); 
    $.Field({Static:false, Public:false}, "valid", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.BinXmlToken", false, {
    NotImpl: -2, 
    EOF: -1, 
    Error: 0, 
    SQL_SMALLINT: 1, 
    SQL_INT: 2, 
    SQL_REAL: 3, 
    SQL_FLOAT: 4, 
    SQL_MONEY: 5, 
    SQL_BIT: 6, 
    SQL_TINYINT: 7, 
    SQL_BIGINT: 8, 
    SQL_UUID: 9, 
    SQL_DECIMAL: 10, 
    SQL_NUMERIC: 11, 
    SQL_BINARY: 12, 
    SQL_CHAR: 13, 
    SQL_NCHAR: 14, 
    SQL_VARBINARY: 15, 
    SQL_VARCHAR: 16, 
    SQL_NVARCHAR: 17, 
    SQL_DATETIME: 18, 
    SQL_SMALLDATETIME: 19, 
    SQL_SMALLMONEY: 20, 
    SQL_TEXT: 22, 
    SQL_IMAGE: 23, 
    SQL_NTEXT: 24, 
    SQL_UDT: 27, 
    XSD_KATMAI_TIMEOFFSET: 122, 
    XSD_KATMAI_DATETIMEOFFSET: 123, 
    XSD_KATMAI_DATEOFFSET: 124, 
    XSD_KATMAI_TIME: 125, 
    XSD_KATMAI_DATETIME: 126, 
    XSD_KATMAI_DATE: 127, 
    XSD_TIME: 129, 
    XSD_DATETIME: 130, 
    XSD_DATE: 131, 
    XSD_BINHEX: 132, 
    XSD_BASE64: 133, 
    XSD_BOOLEAN: 134, 
    XSD_DECIMAL: 135, 
    XSD_BYTE: 136, 
    XSD_UNSIGNEDSHORT: 137, 
    XSD_UNSIGNEDINT: 138, 
    XSD_UNSIGNEDLONG: 139, 
    XSD_QNAME: 140, 
    NmFlush: 233, 
    Extn: 234, 
    EndNest: 235, 
    Nest: 236, 
    XmlText: 237, 
    QName: 239, 
    Name: 240, 
    EndCData: 241, 
    CData: 242, 
    Comment: 243, 
    PI: 244, 
    EndAttrs: 245, 
    Attr: 246, 
    EndElem: 247, 
    Element: 248, 
    Subset: 249, 
    Public: 250, 
    System: 251, 
    DocType: 252, 
    Encoding: 253, 
    XmlDecl: 254
  }, false
);

(function BinXmlSqlDecimal$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.BinXmlSqlDecimal", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddULong", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustScale", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertValid", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "ChFromDigit", 
      new JSIL.MethodSignature($.Char, [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CLenFromPrec", 
      new JSIL.MethodSignature($.Byte, [$.Byte], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DivByULong", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FGt10_38", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FZero", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPositive", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MpDiv1", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MpNormalize", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MultByULong", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreFromWorkingArray", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrimTrailingZeros", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UIntFromByteArray", 
      new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUI4", 
      new JSIL.MethodSignature(null, [$.UInt32, $asm01.TypeRef("System.IO.Stream")], [])
    );

    $.Field({Static:false, Public:false}, "m_bLen", $.Byte); 
    $.Field({Static:false, Public:false}, "m_bPrec", $.Byte); 
    $.Field({Static:false, Public:false}, "m_bScale", $.Byte); 
    $.Field({Static:false, Public:false}, "m_bSign", $.Byte); 
    $.Field({Static:false, Public:false}, "m_data1", $.UInt32); 
    $.Field({Static:false, Public:false}, "m_data2", $.UInt32); 
    $.Field({Static:false, Public:false}, "m_data3", $.UInt32); 
    $.Field({Static:false, Public:false}, "m_data4", $.UInt32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "NUMERIC_MAX_PRECISION", $.Byte, 38); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MaxPrecision", $.Byte, function ($pi) {
        return $pi.NUMERIC_MAX_PRECISION;
      }); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MaxScale", $.Byte, function ($pi) {
        return $pi.NUMERIC_MAX_PRECISION;
      }); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "x_cNumeMax", $.Int32, 4); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "x_lInt32Base", $.Int64, 4294967296); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "x_ulInt32Base", $.UInt64, 4294967296); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "x_ulInt32BaseForMod", $.UInt64, function ($pi) {
        return ($pi.x_ulInt32Base - ($asm01.System.Int64.FromNumber(1)).ToUInt64());
      }); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "x_llMax", $.UInt64, 9223372036854775807); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DUINT_BASE", $.Double, function ($pi) {
        return +$pi.x_lInt32Base.ToNumber(-1, false);
      }); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DUINT_BASE2", $.Double, function ($pi) {
        return +($pi.DUINT_BASE * $pi.DUINT_BASE);
      }); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DUINT_BASE3", $.Double, function ($pi) {
        return +($pi.DUINT_BASE2 * $pi.DUINT_BASE);
      }); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "x_rgulShiftBase", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "rgCLenFromPrec", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Property({Static:false, Public:true }, "IsPositive", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function BinXmlSqlMoney$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.BinXmlSqlMoney", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "data", $.Int64); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function BinXmlDateTime$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.BinXmlDateTime", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BreakDownXsdDate", 
      new JSIL.MethodSignature(null, [
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BreakDownXsdDateTime", 
      new JSIL.MethodSignature(null, [
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BreakDownXsdTime", 
      new JSIL.MethodSignature(null, [
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFractions", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFractions", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKatmaiDateTicks", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKatmaiTimeTicks", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKatmaiTimeZoneTicks", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SqlDateTimeToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Int32, $.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SqlDateTimeToString", 
      new JSIL.MethodSignature($.String, [$.Int32, $.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SqlSmallDateTimeToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Int16, $.UInt16], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SqlSmallDateTimeToString", 
      new JSIL.MethodSignature($.String, [$.Int16, $.UInt16], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Write2Dig", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Write3Dec", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Write4DigNeg", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteDate", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteTime", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteTimeFullPrecision", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteTimeZone", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder"), $asm01.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteTimeZone", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Text.StringBuilder"), $.Boolean, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdDateTimeToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdDateTimeToString", 
      new JSIL.MethodSignature($.String, [$.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdDateToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdDateToString", 
      new JSIL.MethodSignature($.String, [$.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateOffsetToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateOffsetToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateOffsetToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeOffsetToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeOffsetToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeOffsetToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeOffsetToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeOffsetToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeOffsetToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdTimeToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdTimeToString", 
      new JSIL.MethodSignature($.String, [$.Int64], [])
    );

    $.Constant({Static:true , Public:false}, "MaxFractionDigits", 7); 
    $.Field({Static:true , Public:false}, "KatmaiTimeScaleMultiplicator", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SQLTicksPerMillisecond", $.Double, 0.3); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SQLTicksPerSecond", $.Int32, 300); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SQLTicksPerMinute", $.Int32, function ($pi) {
        return (($pi.SQLTicksPerSecond * 60) | 0);
      }); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SQLTicksPerHour", $.Int32, function ($pi) {
        return (($pi.SQLTicksPerMinute * 60) | 0);
      }); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SQLTicksPerDay", $.Int32, function ($pi) {
        return (($pi.SQLTicksPerHour * 24) | 0);
      }); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSqlBinaryReader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlReader"), "System.Xml.XmlSqlBinaryReader", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.String, 
          $.Boolean, $asm05.TypeRef("System.Xml.XmlReaderSettings")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddInitNamespace", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddName", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddQName", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CDATAValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAllowContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckText", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTextIsWS", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckValueTokenBounds", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Fill", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Fill_", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillAllowEOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishCDATA", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishContentAsXXX", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateImpliedXmlnsAttrs", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateTokenTypeMap", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeText", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSingle", 
      new JSIL.MethodSignature($.Single, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetString", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringAligned", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlTypeCode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm05.TypeRef("System.Xml.BinXmlToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXsdKatmaiTokenLength", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.BinXmlToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GrowAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GrowElements", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HashCheckForDuplicateAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadCDATA", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadComment", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadData", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.BinXmlToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadDoctype", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadEndNest", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadNest", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadPI", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadXmlText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LocateAttribute", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LocateAttribute", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NameFlush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextToken", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.BinXmlToken"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextToken1", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.BinXmlToken"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextToken2", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.BinXmlToken"), [$asm05.TypeRef("System.Xml.BinXmlToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseMB32", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseMB32", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseMB32_", 
      new JSIL.MethodSignature($.Int32, [$.Byte], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseMB64", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PeekNextToken", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.BinXmlToken"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PeekToken", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.BinXmlToken"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopNamespaces", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlSqlBinaryReader/NamespaceDecl")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PositionOnAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushNamespace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadByte", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDoc", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadInit", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNameRef", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadQNameRef", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadToken", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.BinXmlToken"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUShort", 
      new JSIL.MethodSignature($.UInt16, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RescanNextToken", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.BinXmlToken"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReScanOverValue", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.BinXmlToken")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanOverAnyValue", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [
          $asm05.TypeRef("System.Xml.BinXmlToken"), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanOverValue", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [
          $asm05.TypeRef("System.Xml.BinXmlToken"), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanText", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupContentAsXXX", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SimpleCheckForDuplicateAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipExtn", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    )
      .Overrides(1, "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(1, "LookupPrefix");

    $.ExternalMethod({Static:false, Public:false}, "ThrowNotSupported", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm05.TypeRef("System.Xml.BinXmlToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowXmlException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowXmlException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateFromTextReader", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateFromTextReader", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAs", 
      new JSIL.MethodSignature($.Object, [
          $asm05.TypeRef("System.Xml.BinXmlToken"), $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsDateTimeString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsObject", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.BinXmlToken"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsString", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.BinXmlToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsULong", 
      new JSIL.MethodSignature($.UInt64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyVersion", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.BinXmlToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "XmlDeclValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "XsdKatmaiTimeScaleToValueLength", 
      new JSIL.MethodSignature($.Int32, [$.Byte], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "TypeOfObject", $asm01.TypeRef("System.Type"), $asm01.System.Object.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "TypeOfString", $asm01.TypeRef("System.Type"), $asm01.System.String.__Type__); 
    $.Field({Static:true , Public:false}, "TokenTypeMap", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), null); 
    $.Field({Static:true , Public:false}, "XsdKatmaiTimeScaleToValueLengthMap", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false}, "ScanState2ReadState", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.ReadState")])); 
    $.Field({Static:false, Public:false}, "inStrm", $asm01.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "data", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "pos", $.Int32); 
    $.Field({Static:false, Public:false}, "mark", $.Int32); 
    $.Field({Static:false, Public:false}, "end", $.Int32); 
    $.Field({Static:false, Public:false}, "offset", $.Int64); 
    $.Field({Static:false, Public:false}, "eof", $.Boolean); 
    $.Field({Static:false, Public:false}, "sniffed", $.Boolean); 
    $.Field({Static:false, Public:false}, "isEmpty", $.Boolean); 
    $.Field({Static:false, Public:false}, "docState", $.Int32); 
    $.Field({Static:false, Public:false}, "symbolTables", $asm05.TypeRef("System.Xml.XmlSqlBinaryReader/SymbolTables")); 
    $.Field({Static:false, Public:false}, "xnt", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "xntFromSettings", $.Boolean); 
    $.Field({Static:false, Public:false}, "xml", $.String); 
    $.Field({Static:false, Public:false}, "xmlns", $.String); 
    $.Field({Static:false, Public:false}, "nsxmlns", $.String); 
    $.Field({Static:false, Public:false}, "baseUri", $.String); 
    $.Field({Static:false, Public:false}, "state", $asm05.TypeRef("System.Xml.XmlSqlBinaryReader/ScanState")); 
    $.Field({Static:false, Public:false}, "nodetype", $asm05.TypeRef("System.Xml.XmlNodeType")); 
    $.Field({Static:false, Public:false}, "token", $asm05.TypeRef("System.Xml.BinXmlToken")); 
    $.Field({Static:false, Public:false}, "attrIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "qnameOther", $asm05.TypeRef("System.Xml.XmlSqlBinaryReader/QName")); 
    $.Field({Static:false, Public:false}, "qnameElement", $asm05.TypeRef("System.Xml.XmlSqlBinaryReader/QName")); 
    $.Field({Static:false, Public:false}, "parentNodeType", $asm05.TypeRef("System.Xml.XmlNodeType")); 
    $.Field({Static:false, Public:false}, "elementStack", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlSqlBinaryReader/ElemInfo")])); 
    $.Field({Static:false, Public:false}, "elemDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "attributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlSqlBinaryReader/AttrInfo")])); 
    $.Field({Static:false, Public:false}, "attrHashTbl", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "attrCount", $.Int32); 
    $.Field({Static:false, Public:false}, "posAfterAttrs", $.Int32); 
    $.Field({Static:false, Public:false}, "xmlspacePreserve", $.Boolean); 
    $.Field({Static:false, Public:false}, "tokLen", $.Int32); 
    $.Field({Static:false, Public:false}, "tokDataPos", $.Int32); 
    $.Field({Static:false, Public:false}, "hasTypedValue", $.Boolean); 
    $.Field({Static:false, Public:false}, "valueType", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "stringValue", $.String); 
    $.Field({Static:false, Public:false}, "namespaces", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm05.TypeRef("System.Xml.XmlSqlBinaryReader/NamespaceDecl")])); 
    $.Field({Static:false, Public:false}, "prevNameInfo", $asm05.TypeRef("System.Xml.XmlSqlBinaryReader/NestedBinXml")); 
    $.Field({Static:false, Public:false}, "textXmlReader", $asm05.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "closeInput", $.Boolean); 
    $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean); 
    $.Field({Static:false, Public:false}, "ignoreWhitespace", $.Boolean); 
    $.Field({Static:false, Public:false}, "ignorePIs", $.Boolean); 
    $.Field({Static:false, Public:false}, "ignoreComments", $.Boolean); 
    $.Field({Static:false, Public:false}, "prohibitDtd", $.Boolean); 
    $.Field({Static:false, Public:false}, "hasher", $asm05.TypeRef("System.Xml.SecureStringHasher")); 
    $.Field({Static:false, Public:false}, "xmlCharType", $asm05.TypeRef("System.Xml.XmlCharType")); 
    $.Field({Static:false, Public:false}, "unicode", $asm01.TypeRef("System.Text.Encoding")); 
    $.Field({Static:false, Public:false}, "version", $.Byte); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm05.TypeRef("System.Xml.ReadState"));

    $.ImplementInterfaces(
      /* 1 */ $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XmlSqlBinaryReader/ScanState", false, {
    Doc: 0, 
    XmlText: 1, 
    Attr: 2, 
    AttrVal: 3, 
    AttrValPseudoValue: 4, 
    Init: 5, 
    Error: 6, 
    EOF: 7, 
    Closed: 8
  }, false
);

(function QName$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.XmlSqlBinaryReader/QName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckPrefixNS", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNSHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.SecureStringHasher")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MatchNs", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MatchPrefix", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:true }, "prefix", $.String); 
    $.Field({Static:false, Public:true }, "localname", $.String); 
    $.Field({Static:false, Public:true }, "namespaceUri", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ElemInfo$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.XmlSqlBinaryReader/ElemInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSqlBinaryReader/NamespaceDecl"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlSqlBinaryReader/QName"), $.Boolean], [])
    );

    $.Field({Static:false, Public:true }, "$name", $asm05.TypeRef("System.Xml.XmlSqlBinaryReader/QName")); 
    $.Field({Static:false, Public:true }, "xmlLang", $.String); 
    $.Field({Static:false, Public:true }, "xmlSpace", $asm05.TypeRef("System.Xml.XmlSpace")); 
    $.Field({Static:false, Public:true }, "xmlspacePreserve", $.Boolean); 
    $.Field({Static:false, Public:true }, "nsdecls", $asm05.TypeRef("System.Xml.XmlSqlBinaryReader/NamespaceDecl")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AttrInfo$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.XmlSqlBinaryReader/AttrInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, "AdjustPosition", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLocalnameAndNamespaceUri", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLocalnameAndNamespaceUriAndHash", 
      new JSIL.MethodSignature($.Int32, [
          $asm05.TypeRef("System.Xml.SecureStringHasher"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MatchHashNS", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MatchNS", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlSqlBinaryReader/QName"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlSqlBinaryReader/QName"), $.Int32], [])
    );

    $.Field({Static:false, Public:true }, "$name", $asm05.TypeRef("System.Xml.XmlSqlBinaryReader/QName")); 
    $.Field({Static:false, Public:true }, "val", $.String); 
    $.Field({Static:false, Public:true }, "contentPos", $.Int32); 
    $.Field({Static:false, Public:true }, "hashCode", $.Int32); 
    $.Field({Static:false, Public:true }, "prevHash", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NamespaceDecl$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlSqlBinaryReader/NamespaceDecl", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Type, $.Type, 
          $.Int32, $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:true }, "prefix", $.String); 
    $.Field({Static:false, Public:true }, "uri", $.String); 
    $.Field({Static:false, Public:true }, "scopeLink", $.Type); 
    $.Field({Static:false, Public:true }, "prevLink", $.Type); 
    $.Field({Static:false, Public:true }, "scope", $.Int32); 
    $.Field({Static:false, Public:true }, "implied", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SymbolTables$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.XmlSqlBinaryReader/SymbolTables", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, "Init", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "symtable", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:false, Public:true }, "symCount", $.Int32); 
    $.Field({Static:false, Public:true }, "qnametable", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlSqlBinaryReader/QName")])); 
    $.Field({Static:false, Public:true }, "qnameCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NestedBinXml$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XmlSqlBinaryReader/NestedBinXml", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlSqlBinaryReader/SymbolTables"), $.Int32, 
          $.Type
        ], [])
    );

    $.Field({Static:false, Public:true }, "symbolTables", $asm05.TypeRef("System.Xml.XmlSqlBinaryReader/SymbolTables")); 
    $.Field({Static:false, Public:true }, "docState", $.Int32); 
    $.Field({Static:false, Public:true }, "next", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("MS");
JSIL.DeclareNamespace("MS.Internal");
JSIL.DeclareNamespace("MS.Internal.Xml");
JSIL.DeclareNamespace("MS.Internal.Xml.Cache");
JSIL.MakeEnum(
  "MS.Internal.Xml.Cache.TextBlockType", false, {
    None: 0, 
    Text: 4, 
    SignificantWhitespace: 5, 
    Whitespace: 6
  }, false
);

(function XPathDocumentBuilder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlRawWriter"), "MS.Internal.Xml.Cache.XPathDocumentBuilder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathDocument"), $asm05.TypeRef("System.Xml.IXmlLineInfo"), 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathDocument/LoadFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSibling", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNodeType"), $.String, 
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CachedTextNode", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeLineInfo", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateIdTables", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathDocument"), $asm05.TypeRef("System.Xml.IXmlLineInfo"), 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathDocument/LoadFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LinkSimilarElements", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef"), [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewNamespaceNode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewNode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $asm05.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("MS.Internal.Xml.Cache.TextBlockType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlStandalone")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "ElementIndexSize", 64); 
    $.Field({Static:false, Public:false}, "nodePageFact", $asm05.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBuilder/NodePageFactory")); 
    $.Field({Static:false, Public:false}, "nmspPageFact", $asm05.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBuilder/NodePageFactory")); 
    $.Field({Static:false, Public:false}, "textBldr", $asm05.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBuilder/TextBlockBuilder")); 
    $.Field({Static:false, Public:false}, "stkNmsp", $asm02.TypeRef("System.Collections.Generic.Stack`1", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef")])); 
    $.Field({Static:false, Public:false}, "infoTable", $asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoTable")); 
    $.Field({Static:false, Public:false}, "doc", $asm05.TypeRef("System.Xml.XPath.XPathDocument")); 
    $.Field({Static:false, Public:false}, "lineInfo", $asm05.TypeRef("System.Xml.IXmlLineInfo")); 
    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "atomizeNames", $.Boolean); 
    $.Field({Static:false, Public:false}, "pageNmsp", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
    $.Field({Static:false, Public:false}, "idxNmsp", $.Int32); 
    $.Field({Static:false, Public:false}, "pageParent", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
    $.Field({Static:false, Public:false}, "idxParent", $.Int32); 
    $.Field({Static:false, Public:false}, "pageSibling", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
    $.Field({Static:false, Public:false}, "idxSibling", $.Int32); 
    $.Field({Static:false, Public:false}, "lineNumBase", $.Int32); 
    $.Field({Static:false, Public:false}, "linePosBase", $.Int32); 
    $.Field({Static:false, Public:false}, "idAttrName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "elemIdMap", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "elemNameIndex", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef")])); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NodePageFactory$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "MS.Internal.Xml.Cache.XPathDocumentBuilder/NodePageFactory", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, "AllocateSlot", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NextNodeIndex", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NextNodePage", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Init", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "page", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
    $.Field({Static:false, Public:false}, "pageInfo", $asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo")); 
    $.Field({Static:false, Public:false}, "pageSize", $.Int32); 
    $.Property({Static:false, Public:true }, "NextNodePage", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Property({Static:false, Public:true }, "NextNodeIndex", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TextBlockBuilder$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "MS.Internal.Xml.Cache.XPathDocumentBuilder/TextBlockBuilder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, "get_HasText", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TextType", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.Cache.TextBlockType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.IXmlLineInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTextBlock", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("MS.Internal.Xml.Cache.TextBlockType")], [])
    );

    $.Field({Static:false, Public:false}, "lineInfo", $asm05.TypeRef("System.Xml.IXmlLineInfo")); 
    $.Field({Static:false, Public:false}, "textType", $asm05.TypeRef("MS.Internal.Xml.Cache.TextBlockType")); 
    $.Field({Static:false, Public:false}, "text", $.String); 
    $.Field({Static:false, Public:false}, "lineNum", $.Int32); 
    $.Field({Static:false, Public:false}, "linePos", $.Int32); 
    $.Property({Static:false, Public:true }, "TextType", $asm05.TypeRef("MS.Internal.Xml.Cache.TextBlockType"));

    $.Property({Static:false, Public:true }, "HasText", $.Boolean);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathDocumentBaseIterator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), "MS.Internal.Xml.Cache.XPathDocumentBaseIterator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "ctxt", $asm05.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator")); 
    $.Field({Static:false, Public:false}, "pos", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathDocumentElementChildIterator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBaseIterator"), "MS.Internal.Xml.Cache.XPathDocumentElementChildIterator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "localName", $.String); 
    $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathDocumentKindChildIterator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBaseIterator"), "MS.Internal.Xml.Cache.XPathDocumentKindChildIterator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator"), $asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "typ", $asm05.TypeRef("System.Xml.XPath.XPathNodeType")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathDocumentElementDescendantIterator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBaseIterator"), "MS.Internal.Xml.Cache.XPathDocumentElementDescendantIterator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator"), $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "end", $asm05.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator")); 
    $.Field({Static:false, Public:false}, "localName", $.String); 
    $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
    $.Field({Static:false, Public:false}, "matchSelf", $.Boolean); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathDocumentKindDescendantIterator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBaseIterator"), "MS.Internal.Xml.Cache.XPathDocumentKindDescendantIterator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator"), $asm05.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "end", $asm05.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator")); 
    $.Field({Static:false, Public:false}, "typ", $asm05.TypeRef("System.Xml.XPath.XPathNodeType")); 
    $.Field({Static:false, Public:false}, "matchSelf", $.Boolean); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathDocumentNavigator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), "MS.Internal.Xml.Cache.XPathDocumentNavigator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ComparePosition", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeOrder"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasChildren", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_UniqueId", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFollowingEnd", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetPositionHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPrimaryLocation", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSecondaryLocation", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsContentKindMatch", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDescendant", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsElementMatch", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsKindMatch", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSamePosition", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveTo", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToChild", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToChild", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstChild", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNamespaceScope")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFollowing", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType"), $asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToId", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNamespaceScope")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToParent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToPrevious", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToRoot", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectChildren", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectChildren", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectDescendants", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm05.TypeRef("System.Xml.XPath.XPathNodeType"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectDescendants", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:false}, "pageCurrent", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
    $.Field({Static:false, Public:false}, "pageParent", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
    $.Field({Static:false, Public:false}, "idxCurrent", $.Int32); 
    $.Field({Static:false, Public:false}, "idxParent", $.Int32); 
    $.Field({Static:false, Public:false}, "atomizedLocalName", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasChildren", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "UniqueId", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 3 */ $asm05.TypeRef("System.Xml.IXmlLineInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathNode$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "MS.Internal.Xml.Cache.XPathNode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, "Create", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Create", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom"), $asm05.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ElementMatch", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowShortcutTag", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseUri", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CollapsedLinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Document", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathDocument"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasCollapsedText", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasContentChild", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasElementChild", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasNamespaceDecls", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasSibling", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAttrNmsp", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsText", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsXmlNamespaceNode", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalNameHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceUri", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PageInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParent", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Type])])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRoot", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Type])])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSibling", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Type])])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSimilarElement", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Type])])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "NameMatch", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HasNamespaceDecls", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetCollapsedLineInfoOffset", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetCollapsedValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetEmptyValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetLineInfoOffsets", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetParentProperties", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSibling", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoTable"), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSimilarElement", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoTable"), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "NodeTypeMask", 15); 
    $.Constant({Static:true , Public:false}, "HasAttributeBit", 16); 
    $.Constant({Static:true , Public:false}, "HasContentChildBit", 32); 
    $.Constant({Static:true , Public:false}, "HasElementChildBit", 64); 
    $.Constant({Static:true , Public:false}, "HasCollapsedTextBit", 128); 
    $.Constant({Static:true , Public:false}, "AllowShortcutTagBit", 256); 
    $.Constant({Static:true , Public:false}, "HasNmspDeclsBit", 512); 
    $.Constant({Static:true , Public:false}, "LineNumberMask", 16776192); 
    $.Constant({Static:true , Public:false}, "LineNumberShift", 10); 
    $.Constant({Static:true , Public:false}, "CollapsedPositionShift", 24); 
    $.Constant({Static:true , Public:true }, "MaxLineNumberOffset", 16383); 
    $.Constant({Static:true , Public:true }, "MaxLinePositionOffset", 65535); 
    $.Constant({Static:true , Public:true }, "MaxCollapsedPositionOffset", 255); 
    $.Field({Static:false, Public:false}, "info", $asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom")); 
    $.Field({Static:false, Public:false}, "idxSibling", $.UInt16); 
    $.Field({Static:false, Public:false}, "idxParent", $.UInt16); 
    $.Field({Static:false, Public:false}, "idxSimilar", $.UInt16); 
    $.Field({Static:false, Public:false}, "posOffset", $.UInt16); 
    $.Field({Static:false, Public:false}, "props", $.UInt32); 
    $.Field({Static:false, Public:false}, "value", $.String); 
    $.Property({Static:false, Public:true }, "NodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "NamespaceUri", $.String);

    $.Property({Static:false, Public:true }, "Document", $asm05.TypeRef("System.Xml.XPath.XPathDocument"));

    $.Property({Static:false, Public:true }, "BaseUri", $.String);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "CollapsedLinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "PageInfo", $asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo"));

    $.Property({Static:false, Public:true }, "IsXmlNamespaceNode", $.Boolean);

    $.Property({Static:false, Public:true }, "HasSibling", $.Boolean);

    $.Property({Static:false, Public:true }, "HasCollapsedText", $.Boolean);

    $.Property({Static:false, Public:true }, "HasAttribute", $.Boolean);

    $.Property({Static:false, Public:true }, "HasContentChild", $.Boolean);

    $.Property({Static:false, Public:true }, "HasElementChild", $.Boolean);

    $.Property({Static:false, Public:true }, "IsAttrNmsp", $.Boolean);

    $.Property({Static:false, Public:true }, "IsText", $.Boolean);

    $.Property({Static:false, Public:true }, "HasNamespaceDecls", $.Boolean);

    $.Property({Static:false, Public:true }, "AllowShortcutTag", $.Boolean);

    $.Property({Static:false, Public:true }, "LocalNameHashCode", $.Int32);

    $.Property({Static:false, Public:true }, "Value", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathNodeRef$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "MS.Internal.Xml.Cache.XPathNodeRef", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Index", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Null", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Page", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "page", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
    $.Field({Static:false, Public:false}, "idx", $.Int32); 
    $.Property({Static:true , Public:true }, "Null", $.Type);

    $.Property({Static:false, Public:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Page", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Property({Static:false, Public:true }, "Index", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathNodeHelper$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "MS.Internal.Xml.Cache.XPathNodeHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetChild", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetContentChild", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetContentChild", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetContentFollowing", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
          $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetContentSibling", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetContentSibling", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetElementChild", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetElementFollowing", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetElementSibling", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFollowing", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetInScopeNamespaces", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetLocalNamespaces", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetLocation", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetNonDescendant", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetParent", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPreviousContentSibling", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPreviousContentSibling", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPreviousElementSibling", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTextFollowing", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathNodePageInfo$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "MS.Internal.Xml.Cache.XPathNodePageInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NextPage", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PageNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreviousPage", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NextPage", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NodeCount", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "pageNum", $.Int32); 
    $.Field({Static:false, Public:false}, "nodeCount", $.Int32); 
    $.Field({Static:false, Public:false}, "pagePrev", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
    $.Field({Static:false, Public:false}, "pageNext", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
    $.Property({Static:false, Public:true }, "PageNumber", $.Int32);

    $.Property({Static:false, Public:true }, "NodeCount", $.Int32);

    $.Property({Static:false, Public:true }, "PreviousPage", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Property({Static:false, Public:true }, "NextPage", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathNodeInfoAtom$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "MS.Internal.Xml.Cache.XPathNodeInfoAtom", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $asm05.TypeRef("System.Xml.XPath.XPathDocument"), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseUri", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Document", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathDocument"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumberBase", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePositionBase", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalNameHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceUri", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Next", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PageInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentPage", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SiblingPage", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SimilarElementPage", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Init", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $asm05.TypeRef("System.Xml.XPath.XPathDocument"), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Next", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "localName", $.String); 
    $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "baseUri", $.String); 
    $.Field({Static:false, Public:false}, "pageParent", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
    $.Field({Static:false, Public:false}, "pageSibling", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
    $.Field({Static:false, Public:false}, "pageSimilar", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
    $.Field({Static:false, Public:false}, "doc", $asm05.TypeRef("System.Xml.XPath.XPathDocument")); 
    $.Field({Static:false, Public:false}, "lineNumBase", $.Int32); 
    $.Field({Static:false, Public:false}, "linePosBase", $.Int32); 
    $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
    $.Field({Static:false, Public:false}, "localNameHash", $.Int32); 
    $.Field({Static:false, Public:false}, "next", $.Type); 
    $.Field({Static:false, Public:false}, "pageInfo", $asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo")); 
    $.Property({Static:false, Public:true }, "PageInfo", $asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo"));

    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true }, "NamespaceUri", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "BaseUri", $.String);

    $.Property({Static:false, Public:true }, "SiblingPage", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Property({Static:false, Public:true }, "SimilarElementPage", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Property({Static:false, Public:true }, "ParentPage", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Property({Static:false, Public:true }, "Document", $asm05.TypeRef("System.Xml.XPath.XPathDocument"));

    $.Property({Static:false, Public:true }, "LineNumberBase", $.Int32);

    $.Property({Static:false, Public:true }, "LinePositionBase", $.Int32);

    $.Property({Static:false, Public:true }, "LocalNameHashCode", $.Int32);

    $.Property({Static:false, Public:true }, "Next", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathNodeInfoTable$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "MS.Internal.Xml.Cache.XPathNodeInfoTable", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddInfo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Atomize", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom"), [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Create", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom"), [
          $.String, $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $asm05.TypeRef("System.Xml.XPath.XPathDocument"), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Constant({Static:true , Public:false}, "DefaultTableSize", 32); 
    $.Field({Static:false, Public:false}, "hashTable", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom")])); 
    $.Field({Static:false, Public:false}, "sizeTable", $.Int32); 
    $.Field({Static:false, Public:false}, "infoCached", $asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathDocument$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XPath.XPathDocument", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.XmlSpace")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlSpace")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIdElement", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamespace", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateNavigator", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCollapsedTextNode", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRootNode", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXmlNamespaceNode", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadFromReader", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.XmlSpace")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadFromWriter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlRawWriter"), [$asm05.TypeRef("System.Xml.XPath.XPathDocument/LoadFlags"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupIdElement", 
      new JSIL.MethodSignature($.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespaces", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCollapsedTextNode", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRootNode", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupReader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTextReaderImpl"), [$asm05.TypeRef("System.Xml.XmlTextReaderImpl")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetXmlNamespaceNode", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32], [])
    );

    $.Field({Static:false, Public:false}, "pageText", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
    $.Field({Static:false, Public:false}, "pageRoot", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
    $.Field({Static:false, Public:false}, "pageXmlNmsp", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNode")])); 
    $.Field({Static:false, Public:false}, "idxText", $.Int32); 
    $.Field({Static:false, Public:false}, "idxRoot", $.Int32); 
    $.Field({Static:false, Public:false}, "idxXmlNmsp", $.Int32); 
    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "hasLineInfo", $.Boolean); 
    $.Field({Static:false, Public:false}, "mapNmsp", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef"), $asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef")])); 
    $.Field({Static:false, Public:false}, "idValueMap", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm05.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef")])); 
    $.Property({Static:false, Public:false}, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false}, "HasLineInfo", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("System.Xml.XPath.IXPathNavigable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XPath.XPathDocument/LoadFlags", false, {
    None: 0, 
    AtomizeNames: 1, 
    Fragment: 2
  }, false
);

(function XPathException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.SystemException"), "System.Xml.XPath.XPathException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm01.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $asm01.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateMessage", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.Field({Static:false, Public:false}, "res", $.String); 
    $.Field({Static:false, Public:false}, "args", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:false, Public:false}, "message", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XPath.XmlSortOrder", true, {
    Ascending: 1, 
    Descending: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XPath.XmlCaseOrder", true, {
    None: 0, 
    UpperFirst: 1, 
    LowerFirst: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XPath.XmlDataType", true, {
    Text: 1, 
    Number: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XPath.XPathResultType", true, {
    Number: 0, 
    String: 1, 
    Navigator: 1, 
    Boolean: 2, 
    NodeSet: 3, 
    Any: 5, 
    Error: 6
  }, false
);

(function XPathExpression$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XPath.XPathExpression", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddSort", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.Collections.IComparer")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddSort", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm05.TypeRef("System.Xml.XPath.XmlSortOrder"), 
          $asm05.TypeRef("System.Xml.XPath.XmlCaseOrder"), $.String, 
          $asm05.TypeRef("System.Xml.XPath.XmlDataType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compile", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compile", 
      new JSIL.MethodSignature($.Type, [$.String, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Expression", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNamespaceManager")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Expression", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XPath.XPathNamespaceScope", true, {
    All: 0, 
    ExcludeXml: 1, 
    Local: 2
  }, false
);

(function XPathNavigatorKeyComparer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.XPath.XPathNavigatorKeyComparer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object], [])
    )
      .Overrides(0, "Equals");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object], [])
    )
      .Overrides(0, "GetHashCode");

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEqualityComparer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathNavigatorReader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlReader"), "System.Xml.XPath.XPathNavigatorReader", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.IXmlLineInfo"), 
          $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReading", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceManager", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNamespaceManager"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetElemNav", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetElemNav", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamespaceByIndex", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAttr", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetEOF", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    )
      .Overrides(1, "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(1, "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Overrides(1, "LookupPrefix");

    $.ExternalMethod({Static:true , Public:false}, "ToXmlNodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [$asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.Constant({Static:true , Public:false}, "space", "space"); 
    $.Field({Static:false, Public:false}, "nav", $asm05.TypeRef("System.Xml.XPath.XPathNavigator")); 
    $.Field({Static:false, Public:false}, "navToRead", $asm05.TypeRef("System.Xml.XPath.XPathNavigator")); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "state", $asm05.TypeRef("System.Xml.XPath.XPathNavigatorReader/State")); 
    $.Field({Static:false, Public:false}, "nodeType", $asm05.TypeRef("System.Xml.XmlNodeType")); 
    $.Field({Static:false, Public:false}, "attrCount", $.Int32); 
    $.Field({Static:false, Public:false}, "readEntireDocument", $.Boolean); 
    $.Field({Static:false, Public:false}, "lineInfo", $asm05.TypeRef("System.Xml.IXmlLineInfo")); 
    $.Field({Static:false, Public:false}, "schemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")); 
    $.Field({Static:false, Public:false}, "readBinaryHelper", $asm05.TypeRef("System.Xml.ReadContentAsBinaryHelper")); 
    $.Field({Static:false, Public:false}, "savedState", $asm05.TypeRef("System.Xml.XPath.XPathNavigatorReader/State")); 
    $.Field({Static:true , Public:false}, "convertFromXPathNodeType", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNodeType")])); 
    $.Property({Static:false, Public:false}, "UnderlyingObject", $.Object);

    $.Property({Static:false, Public:false}, "IsReading", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm05.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XPath.XPathNavigatorReader/State", false, {
    Initial: 0, 
    Content: 1, 
    EndElement: 2, 
    Attribute: 3, 
    AttrVal: 4, 
    InReadBinary: 5, 
    EOF: 6, 
    Closed: 7, 
    Error: 8
  }, false
);

(function XPathNavigatorReaderWithSI$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XPath.XPathNavigatorReader"), "System.Xml.XPath.XPathNavigatorReaderWithSI", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.IXmlLineInfo"), 
          $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNil", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Validity", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaValidity"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Validity", $asm05.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsNil", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaElement", $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.ImplementInterfaces(
      /* 2 */ $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlEmptyNavigator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), "System.Xml.XPath.XmlEmptyNavigator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ComparePosition", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeOrder"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasChildren", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Singleton", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSamePosition", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveTo", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirst", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstChild", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNamespaceScope")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToId", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNamespaceScope")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToParent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToPrevious", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToRoot", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "singleton", $.Type); 
    $.Property({Static:true , Public:true }, "Singleton", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasChildren", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.XPath.XPathNodeType", true, {
    Root: 0, 
    Element: 1, 
    Attribute: 2, 
    Namespace: 3, 
    Text: 4, 
    SignificantWhitespace: 5, 
    Whitespace: 6, 
    ProcessingInstruction: 7, 
    Comment: 8, 
    All: 9
  }, false
);

JSIL.DeclareNamespace("MS.Internal.Xml.XPath");
(function ResetableIterator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), "MS.Internal.Xml.XPath.ResetableIterator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToPosition", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetCount", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Query$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), "MS.Internal.Xml.XPath.Query", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertDOD", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")]), $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), 
          $.Int32
        ], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "AssertQuery", 
      new JSIL.MethodSignature(null, [$.Type], [])
    )
      .Attribute($asm01.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CompareNodes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeOrder"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XsltDefaultPriority", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMedian", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXPathType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")]), $asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], [])
    );

    $.Constant({Static:true , Public:true }, "XPathResultType_Navigator", 4); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "XsltDefaultPriority", $.Double);

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{ToString()}"]; });

})();

(function ContextQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), "MS.Internal.Xml.XPath.ContextQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "contextNode", $asm05.TypeRef("System.Xml.XPath.XPathNavigator")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AbsoluteQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ContextQuery"), "MS.Internal.Xml.XPath.AbsoluteQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AstNode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "MS.Internal.Xml.XPath.AstNode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "MS.Internal.Xml.XPath.AstNode/AstType", false, {
    Axis: 0, 
    Operator: 1, 
    Filter: 2, 
    ConstantOperand: 3, 
    Function: 4, 
    Group: 5, 
    Root: 6, 
    Variable: 7, 
    Error: 8
  }, false
);

(function BaseAxisQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), "MS.Internal.Xml.XPath.BaseAxisQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Query")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NameTest", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeTest", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XsltDefaultPriority", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "matches", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], [])
    );

    $.Field({Static:false, Public:false}, "qyInput", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Field({Static:false, Public:false}, "nameTest", $.Boolean); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "nsUri", $.String); 
    $.Field({Static:false, Public:false}, "typeTest", $asm05.TypeRef("System.Xml.XPath.XPathNodeType")); 
    $.Field({Static:false, Public:false}, "currentNode", $asm05.TypeRef("System.Xml.XPath.XPathNavigator")); 
    $.Field({Static:false, Public:false}, "position", $.Int32); 
    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Prefix", $.String);

    $.Property({Static:false, Public:false}, "Namespace", $.String);

    $.Property({Static:false, Public:false}, "NameTest", $.Boolean);

    $.Property({Static:false, Public:false}, "TypeTest", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "XsltDefaultPriority", $.Double);

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AttributeQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.AttributeQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "onAttribute", $.Boolean); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Axis$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), "MS.Internal.Xml.XPath.Axis", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Axis/AxisType"), $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), 
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Axis/AxisType"), $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AbbrAxis", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Input", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeOfAxis", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Axis/AxisType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Urn", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Input", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Urn", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "axisType", $asm05.TypeRef("MS.Internal.Xml.XPath.Axis/AxisType")); 
    $.Field({Static:false, Public:false}, "input", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")); 
    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "nodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType")); 
    $.Field({Static:false, Public:false}, "abbrAxis", $.Boolean); 
    $.Field({Static:false, Public:false}, "urn", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true }, "Input", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"));

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm05.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true }, "TypeOfAxis", $asm05.TypeRef("MS.Internal.Xml.XPath.Axis/AxisType"));

    $.Property({Static:false, Public:true }, "AbbrAxis", $.Boolean);

    $.Property({Static:false, Public:true }, "Urn", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "MS.Internal.Xml.XPath.Axis/AxisType", false, {
    Ancestor: 0, 
    AncestorOrSelf: 1, 
    Attribute: 2, 
    Child: 3, 
    Descendant: 4, 
    DescendantOrSelf: 5, 
    Following: 6, 
    FollowingSibling: 7, 
    Namespace: 8, 
    Parent: 9, 
    Preceding: 10, 
    PrecedingSibling: 11, 
    Self: 12, 
    None: 13
  }, false
);

(function ValueQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), "MS.Internal.Xml.XPath.ValueQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function BooleanExpr$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), "MS.Internal.Xml.XPath.BooleanExpr", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), 
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], [])
    );

    $.Field({Static:false, Public:false}, "opnd1", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Field({Static:false, Public:false}, "opnd2", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Field({Static:false, Public:false}, "isOr", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function BooleanFunctions$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), "MS.Internal.Xml.XPath.BooleanFunctions", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), $asm05.TypeRef("MS.Internal.Xml.XPath.Query")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Lang", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Not", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "toBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Double], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "toBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "toBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.Field({Static:false, Public:false}, "arg", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Field({Static:false, Public:false}, "funcType", $asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType")); 
    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CacheAxisQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.CacheAxisQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "outputBuffer", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ChildrenQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.ChildrenQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "iterator", $asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CacheChildrenQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ChildrenQuery"), "MS.Internal.Xml.XPath.CacheChildrenQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecideNextNode", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextInput", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "nextInput", $asm05.TypeRef("System.Xml.XPath.XPathNavigator")); 
    $.Field({Static:false, Public:false}, "elementStk", $asm05.TypeRef("MS.Internal.Xml.XPath.ClonableStack`1", [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")])); 
    $.Field({Static:false, Public:false}, "positionStk", $asm05.TypeRef("MS.Internal.Xml.XPath.ClonableStack`1", [$.Int32])); 
    $.Field({Static:false, Public:false}, "needInput", $.Boolean); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CacheOutputQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), "MS.Internal.Xml.XPath.CacheOutputQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Query")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], [])
    );

    $.Field({Static:false, Public:false}, "input", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Field({Static:false, Public:false}, "outputBuffer", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ClonableStack$b1$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("T", "MS.Internal.Xml.XPath.ClonableStack`1")]), "MS.Internal.Xml.XPath.ClonableStack`1", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "MS.Internal.Xml.XPath.ClonableStack`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Peek", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "MS.Internal.Xml.XPath.ClonableStack`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Pop", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "MS.Internal.Xml.XPath.ClonableStack`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Push", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "MS.Internal.Xml.XPath.ClonableStack`1")], [])
    );

    $.ImplementInterfaces(
      /* 7 */ $asm06.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CompiledXpathExpr$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XPath.XPathExpression"), "MS.Internal.Xml.XPath.CompiledXpathExpr", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddSort", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.Collections.IComparer")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddSort", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm05.TypeRef("System.Xml.XPath.XmlSortOrder"), 
          $asm05.TypeRef("System.Xml.XPath.XmlCaseOrder"), $.String, 
          $asm05.TypeRef("System.Xml.XPath.XmlDataType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CheckErrors", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathExpression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Expression", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QueryTree", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNamespaceManager")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.Field({Static:false, Public:false}, "query", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Field({Static:false, Public:false}, "expr", $.String); 
    $.Field({Static:false, Public:false}, "needContext", $.Boolean); 
    $.Property({Static:false, Public:false}, "QueryTree", $asm05.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Property({Static:false, Public:true , Virtual:true }, "Expression", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xml.Xsl");
(function XsltContext$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlNamespaceManager"), "System.Xml.Xsl.XsltContext", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.NameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareDocument", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Whitespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveFunction", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Xsl.IXsltContextFunction"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveVariable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Xsl.IXsltContextVariable"), [$.String, $.String], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Whitespace", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function UndefinedXsltContext$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Xsl.XsltContext"), "MS.Internal.Xml.XPath.CompiledXpathExpr/UndefinedXsltContext", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNamespaceManager")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareDocument", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultNamespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Whitespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveFunction", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Xsl.IXsltContextFunction"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveVariable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Xsl.IXsltContextVariable"), [$.String, $.String], [])
    );

    $.Field({Static:false, Public:false}, "nsManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Property({Static:false, Public:true , Virtual:true }, "DefaultNamespace", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Whitespace", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathComparerHelper$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "MS.Internal.Xml.XPath.XPathComparerHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XmlSortOrder"), $asm05.TypeRef("System.Xml.XPath.XmlCaseOrder"), 
          $.String, $asm05.TypeRef("System.Xml.XPath.XmlDataType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.Field({Static:false, Public:false}, "order", $asm05.TypeRef("System.Xml.XPath.XmlSortOrder")); 
    $.Field({Static:false, Public:false}, "caseOrder", $asm05.TypeRef("System.Xml.XPath.XmlCaseOrder")); 
    $.Field({Static:false, Public:false}, "cinfo", $asm01.TypeRef("System.Globalization.CultureInfo")); 
    $.Field({Static:false, Public:false}, "dataType", $asm05.TypeRef("System.Xml.XPath.XmlDataType")); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IComparer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DescendantBaseQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.DescendantBaseQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Field({Static:false, Public:false}, "matchSelf", $.Boolean); 
    $.Field({Static:false, Public:false}, "abbrAxis", $.Boolean); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DescendantQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.DescendantBaseQuery"), "MS.Internal.Xml.XPath.DescendantQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "nodeIterator", $asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DescendantOverDescendantQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.DescendantBaseQuery"), "MS.Internal.Xml.XPath.DescendantOverDescendantQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.Boolean, 
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XPath.XPathNodeType"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToFirstChild", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveUpUntillNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "level", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DocumentOrderQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.CacheOutputQuery"), "MS.Internal.Xml.XPath.DocumentOrderQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Query")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EmptyQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), "MS.Internal.Xml.XPath.EmptyQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ExtensionQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), "MS.Internal.Xml.XPath.ExtensionQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessResult", 
      new JSIL.MethodSignature($.Object, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "xsltContext", $asm05.TypeRef("System.Xml.Xsl.XsltContext")); 
    $.Field({Static:false, Public:false}, "queryIterator", $asm05.TypeRef("MS.Internal.Xml.XPath.ResetableIterator")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:false}, "QName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function FunctionQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ExtensionQuery"), "MS.Internal.Xml.XPath.FunctionQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("MS.Internal.Xml.XPath.Query")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], [])
    );

    $.Field({Static:false, Public:false}, "args", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm05.TypeRef("MS.Internal.Xml.XPath.Query")])); 
    $.Field({Static:false, Public:false}, "$function", $asm05.TypeRef("System.Xml.Xsl.IXsltContextFunction")); 
    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Filter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), "MS.Internal.Xml.XPath.Filter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Condition", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Input", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
    );

    $.Field({Static:false, Public:false}, "input", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")); 
    $.Field({Static:false, Public:false}, "condition", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true }, "Input", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"));

    $.Property({Static:false, Public:true }, "Condition", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function FilterQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.FilterQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EvaluatePredicate", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Condition", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], [])
    );

    $.Field({Static:false, Public:false}, "cond", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Field({Static:false, Public:false}, "noPosition", $.Boolean); 
    $.Property({Static:false, Public:true }, "Condition", $asm05.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function FollowingQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.FollowingQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "input", $asm05.TypeRef("System.Xml.XPath.XPathNavigator")); 
    $.Field({Static:false, Public:false}, "iterator", $asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function FollSiblingQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.FollSiblingQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FetchInput", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Visited", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.Field({Static:false, Public:false}, "elementStk", $asm05.TypeRef("MS.Internal.Xml.XPath.ClonableStack`1", [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")])); 
    $.Field({Static:false, Public:false}, "parentStk", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")])); 
    $.Field({Static:false, Public:false}, "nextInput", $asm05.TypeRef("System.Xml.XPath.XPathNavigator")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ForwardPositionQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.CacheOutputQuery"), "MS.Internal.Xml.XPath.ForwardPositionQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Query")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Function$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), "MS.Internal.Xml.XPath.Function", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), $asm01.TypeRef("System.Collections.ArrayList")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm01.TypeRef("System.Collections.ArrayList")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ArgumentList", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeOfFunction", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), [], [])
    );

    $.Field({Static:false, Public:false}, "functionType", $asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType")); 
    $.Field({Static:false, Public:false}, "argumentList", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:true , Public:false}, "ReturnTypes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true }, "TypeOfFunction", $asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"));

    $.Property({Static:false, Public:true }, "ArgumentList", $asm01.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "MS.Internal.Xml.XPath.Function/FunctionType", false, {
    FuncLast: 0, 
    FuncPosition: 1, 
    FuncCount: 2, 
    FuncID: 3, 
    FuncLocalName: 4, 
    FuncNameSpaceUri: 5, 
    FuncName: 6, 
    FuncString: 7, 
    FuncBoolean: 8, 
    FuncNumber: 9, 
    FuncTrue: 10, 
    FuncFalse: 11, 
    FuncNot: 12, 
    FuncConcat: 13, 
    FuncStartsWith: 14, 
    FuncContains: 15, 
    FuncSubstringBefore: 16, 
    FuncSubstringAfter: 17, 
    FuncSubstring: 18, 
    FuncStringLength: 19, 
    FuncNormalize: 20, 
    FuncTranslate: 21, 
    FuncLang: 22, 
    FuncSum: 23, 
    FuncFloor: 24, 
    FuncCeiling: 25, 
    FuncRound: 26, 
    FuncUserDefined: 27
  }, false
);

(function Group$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), "MS.Internal.Xml.XPath.Group", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GroupNode", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
    );

    $.Field({Static:false, Public:false}, "groupNode", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true }, "GroupNode", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function GroupQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.GroupQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Query")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function IDQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.CacheOutputQuery"), "MS.Internal.Xml.XPath.IDQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Query")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessIds", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $.String], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function IteratorFilter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), "MS.Internal.Xml.XPath.IteratorFilter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "innerIterator", $asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "position", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "MS.Internal.Xml.XPath.QueryProps", false, {
    None: 0, 
    Position: 1, 
    Count: 2, 
    Cached: 4, 
    Reverse: 8, 
    Merge: 16
  }, false
);

(function LogicalExpr$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), "MS.Internal.Xml.XPath.LogicalExpr", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), 
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpBoolBoolE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpBoolBoolE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpBoolBoolO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpBoolNumberE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpBoolNumberO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpBoolStringE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpBoolStringO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpNumberNumber", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Double, 
          $.Double
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpNumberNumber", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpNumberNumberO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Double, 
          $.Double
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpQueryBoolE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpQueryBoolO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpQueryNumber", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpQueryQueryE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpQueryQueryO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpQueryStringE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpQueryStringO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfBoolE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfBoolO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfNumber", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfQueryE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfQueryO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfRtfE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfRtfO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfStringE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfStringO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpStringNumber", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpStringStringE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpStringStringE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpStringStringO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Rtf", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], [])
    );

    $.Field({Static:false, Public:false}, "op", $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op")); 
    $.Field({Static:false, Public:false}, "opnd1", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Field({Static:false, Public:false}, "opnd2", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Field({Static:false, Public:false}, "invertOp", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "CompXsltE", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.XPath.LogicalExpr/cmpXslt")])])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "CompXsltO", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.XPath.LogicalExpr/cmpXslt")])])); 
    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("MS.Internal.Xml.XPath.LogicalExpr/cmpXslt", false, []);

(function NodeSet$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "MS.Internal.Xml.XPath.LogicalExpr/NodeSet", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "opnd", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Field({Static:false, Public:false}, "current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator")); 
    $.Property({Static:false, Public:true }, "Value", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function MergeFilterQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.CacheOutputQuery"), "MS.Internal.Xml.XPath.MergeFilterQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $asm05.TypeRef("MS.Internal.Xml.XPath.Query")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], [])
    );

    $.Field({Static:false, Public:false}, "child", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NamespaceQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.NamespaceQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "matches", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "onNamespace", $.Boolean); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NodeFunctions$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), "MS.Internal.Xml.XPath.NodeFunctions", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), $asm05.TypeRef("MS.Internal.Xml.XPath.Query")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EvaluateArg", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], [])
    );

    $.Field({Static:false, Public:false}, "arg", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Field({Static:false, Public:false}, "funcType", $asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType")); 
    $.Field({Static:false, Public:false}, "xsltContext", $asm05.TypeRef("System.Xml.Xsl.XsltContext")); 
    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NumberFunctions$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), "MS.Internal.Xml.XPath.NumberFunctions", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), $asm05.TypeRef("MS.Internal.Xml.XPath.Query")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ceiling", 
      new JSIL.MethodSignature($.Double, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Floor", 
      new JSIL.MethodSignature($.Double, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Number", 
      new JSIL.MethodSignature($.Double, [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Number", 
      new JSIL.MethodSignature($.Double, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Number", 
      new JSIL.MethodSignature($.Double, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Round", 
      new JSIL.MethodSignature($.Double, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.Field({Static:false, Public:false}, "arg", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Field({Static:false, Public:false}, "ftype", $asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType")); 
    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NumericExpr$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), "MS.Internal.Xml.XPath.NumericExpr", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), 
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValue", 
      new JSIL.MethodSignature($.Double, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $.Double, 
          $.Double
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], [])
    );

    $.Field({Static:false, Public:false}, "op", $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op")); 
    $.Field({Static:false, Public:false}, "opnd1", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Field({Static:false, Public:false}, "opnd2", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Operand$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), "MS.Internal.Xml.XPath.Operand", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OperandValue", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
    );

    $.Field({Static:false, Public:false}, "type", $asm05.TypeRef("System.Xml.XPath.XPathResultType")); 
    $.Field({Static:false, Public:false}, "val", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true }, "OperandValue", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function OperandQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), "MS.Internal.Xml.XPath.OperandQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Field({Static:false, Public:false}, "val", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Operator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), "MS.Internal.Xml.XPath.Operator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), 
          $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operand1", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operand2", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OperatorType", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
    );

    $.Field({Static:false, Public:false}, "opType", $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op")); 
    $.Field({Static:false, Public:false}, "opnd1", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")); 
    $.Field({Static:false, Public:false}, "opnd2", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true }, "OperatorType", $asm05.TypeRef("MS.Internal.Xml.XPath.Operator/Op"));

    $.Property({Static:false, Public:true }, "Operand1", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"));

    $.Property({Static:false, Public:true }, "Operand2", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "MS.Internal.Xml.XPath.Operator/Op", false, {
    LT: 0, 
    GT: 1, 
    LE: 2, 
    GE: 3, 
    EQ: 4, 
    NE: 5, 
    OR: 6, 
    AND: 7, 
    PLUS: 8, 
    MINUS: 9, 
    MUL: 10, 
    MOD: 11, 
    DIV: 12, 
    UNION: 13, 
    INVALID: 14
  }, false
);

(function ParentQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.CacheAxisQuery"), "MS.Internal.Xml.XPath.ParentQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PrecedingQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.PrecedingQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "workIterator", $asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")); 
    $.Field({Static:false, Public:false}, "ancestorStk", $asm05.TypeRef("MS.Internal.Xml.XPath.ClonableStack`1", [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PreSiblingQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.CacheAxisQuery"), "MS.Internal.Xml.XPath.PreSiblingQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NotVisited", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")])], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function QueryBuilder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "MS.Internal.Xml.XPath.QueryBuilder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Build", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Build", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), [
          $.String, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Build", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildPatternQuery", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), [
          $.String, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildPatternQuery", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanBeNumber", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("MS.Internal.Xml.XPath.Query")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessArguments", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("MS.Internal.Xml.XPath.Query")]), [$asm01.TypeRef("System.Collections.ArrayList"), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Props")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAxis", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Axis"), $asm05.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Flags"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Props")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessFilter", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Filter"), $asm05.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Flags"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Props")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessFunction", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), [$asm05.TypeRef("MS.Internal.Xml.XPath.Function"), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Props")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessNode", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), [
          $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), $asm05.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Flags"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Props")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessOperator", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), [$asm05.TypeRef("MS.Internal.Xml.XPath.Operator"), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("MS.Internal.Xml.XPath.QueryBuilder/Props")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessVariable", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), [$asm05.TypeRef("MS.Internal.Xml.XPath.Variable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "query", $.String); 
    $.Field({Static:false, Public:false}, "allowVar", $.Boolean); 
    $.Field({Static:false, Public:false}, "allowKey", $.Boolean); 
    $.Field({Static:false, Public:false}, "allowCurrent", $.Boolean); 
    $.Field({Static:false, Public:false}, "needContext", $.Boolean); 
    $.Field({Static:false, Public:false}, "firstInput", $asm05.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "MS.Internal.Xml.XPath.QueryBuilder/Flags", false, {
    None: 0, 
    SmartDesc: 1, 
    PosFilter: 2, 
    Filter: 4
  }, false
);

JSIL.MakeEnum(
  "MS.Internal.Xml.XPath.QueryBuilder/Props", false, {
    None: 0, 
    PosFilter: 1, 
    HasPosition: 2, 
    HasLast: 4, 
    NonFlat: 8
  }, false
);

(function UnionExpr$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), "MS.Internal.Xml.XPath.UnionExpr", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $asm05.TypeRef("MS.Internal.Xml.XPath.Query")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAfterPosition", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessBeforePosition", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessSamePosition", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], [])
    );

    $.Field({Static:false, Public:false}, "qy1", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Field({Static:false, Public:false}, "qy2", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Field({Static:false, Public:false}, "advance1", $.Boolean); 
    $.Field({Static:false, Public:false}, "advance2", $.Boolean); 
    $.Field({Static:false, Public:false}, "currentNode", $asm05.TypeRef("System.Xml.XPath.XPathNavigator")); 
    $.Field({Static:false, Public:false}, "nextNode", $asm05.TypeRef("System.Xml.XPath.XPathNavigator")); 
    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ReversePositionQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ForwardPositionQuery"), "MS.Internal.Xml.XPath.ReversePositionQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Query")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Root$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), "MS.Internal.Xml.XPath.Root", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SortQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), "MS.Internal.Xml.XPath.SortQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Query")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSort", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $asm01.TypeRef("System.Collections.IComparer")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildResultsList", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], [])
    );

    $.Field({Static:false, Public:false}, "results", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("MS.Internal.Xml.XPath.SortKey")])); 
    $.Field({Static:false, Public:false}, "comparer", $asm05.TypeRef("MS.Internal.Xml.XPath.XPathSortComparer")); 
    $.Field({Static:false, Public:false}, "qyInput", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SortKey$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "MS.Internal.Xml.XPath.SortKey", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Node", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NumKeys", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OriginalPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    );

    $.Field({Static:false, Public:false}, "numKeys", $.Int32); 
    $.Field({Static:false, Public:false}, "keys", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:false}, "originalPosition", $.Int32); 
    $.Field({Static:false, Public:false}, "node", $asm05.TypeRef("System.Xml.XPath.XPathNavigator")); 
    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "NumKeys", $.Int32);

    $.Property({Static:false, Public:true }, "OriginalPosition", $.Int32);

    $.Property({Static:false, Public:true }, "Node", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function XPathSortComparer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "MS.Internal.Xml.XPath.XPathSortComparer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddSort", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $asm01.TypeRef("System.Collections.IComparer")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Expression", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Query"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NumSorts", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IComparer$lMS.Internal.Xml.XPath.SortKey$g.Compare", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("MS.Internal.Xml.XPath.SortKey"), $asm05.TypeRef("MS.Internal.Xml.XPath.SortKey")], [])
    )
      .Overrides(0, "Compare");

    $.Constant({Static:true , Public:false}, "minSize", 3); 
    $.Field({Static:false, Public:false}, "expressions", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.XPath.Query")])); 
    $.Field({Static:false, Public:false}, "comparers", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Collections.IComparer")])); 
    $.Field({Static:false, Public:false}, "numSorts", $.Int32); 
    $.Property({Static:false, Public:true }, "NumSorts", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IComparer`1", [$asm05.TypeRef("MS.Internal.Xml.XPath.SortKey")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function StringFunctions$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), "MS.Internal.Xml.XPath.StringFunctions", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm05.TypeRef("MS.Internal.Xml.XPath.Query")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Concat", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Normalize", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartsWith", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StringLength", 
      new JSIL.MethodSignature($.Double, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Substring", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SubstringAfter", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SubstringBefore", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "toString", 
      new JSIL.MethodSignature($.String, [$.Double], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "toString", 
      new JSIL.MethodSignature($.String, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "toString", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Translate", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.Field({Static:false, Public:false}, "funcType", $asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType")); 
    $.Field({Static:false, Public:false}, "argList", $asm01.TypeRef("System.Collections.Generic.IList`1", [$asm05.TypeRef("MS.Internal.Xml.XPath.Query")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "compareInfo", $asm01.TypeRef("System.Globalization.CompareInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Variable$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), "MS.Internal.Xml.XPath.Variable", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Localname", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"), [], [])
    );

    $.Field({Static:false, Public:false}, "localname", $.String); 
    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode/AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true }, "Localname", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function VariableQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ExtensionQuery"), "MS.Internal.Xml.XPath.VariableQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], [])
    );

    $.Field({Static:false, Public:false}, "variable", $asm05.TypeRef("System.Xml.Xsl.IXsltContextVariable")); 
    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm05.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathAxisIterator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), "MS.Internal.Xml.XPath.XPathAxisIterator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Matches", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "nav", $asm05.TypeRef("System.Xml.XPath.XPathNavigator")); 
    $.Field({Static:false, Public:false}, "type", $asm05.TypeRef("System.Xml.XPath.XPathNodeType")); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "uri", $.String); 
    $.Field({Static:false, Public:false}, "position", $.Int32); 
    $.Field({Static:false, Public:false}, "matchSelf", $.Boolean); 
    $.Field({Static:false, Public:false}, "first", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "Matches", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathAncestorIterator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.XPathAxisIterator"), "MS.Internal.Xml.XPath.XPathAncestorIterator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathAncestorQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.CacheAxisQuery"), "MS.Internal.Xml.XPath.XPathAncestorQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Field({Static:false, Public:false}, "matchSelf", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm05.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathArrayIterator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), "MS.Internal.Xml.XPath.XPathArrayIterator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.IList")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNodeIterator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AsList", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_debuggerDisplayProxy", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "list", $asm01.TypeRef("System.Collections.IList")); 
    $.Field({Static:false, Public:false}, "index", $.Int32); 
    $.Property({Static:false, Public:true }, "AsList", $asm01.TypeRef("System.Collections.IList"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "debuggerDisplayProxy", $.Object);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Position={CurrentPosition}, Current={debuggerDisplayProxy, nq}"]; });

})();

(function XPathChildIterator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.XPathAxisIterator"), "MS.Internal.Xml.XPath.XPathChildIterator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.XPath.XPathNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathDescendantIterator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.XPathAxisIterator"), "MS.Internal.Xml.XPath.XPathDescendantIterator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "level", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathEmptyIterator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), "MS.Internal.Xml.XPath.XPathEmptyIterator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:true }, "Instance", $.Type); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathMultyIterator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), "MS.Internal.Xml.XPath.XPathMultyIterator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.ArrayList")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Advance", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SiftItem", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "arr", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("MS.Internal.Xml.XPath.ResetableIterator")])); 
    $.Field({Static:false, Public:false}, "firstNotEmpty", $.Int32); 
    $.Field({Static:false, Public:false}, "position", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathParser$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "MS.Internal.Xml.XPath.XPathParser", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.XPathScanner")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNodeSet", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathResultType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckToken", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.XPathScanner/LexKind")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAxesTable", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateFunctionTable", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAxis", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Axis/AxisType"), [$asm05.TypeRef("MS.Internal.Xml.XPath.XPathScanner")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNodeType", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("MS.Internal.Xml.XPath.XPathScanner")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPrimaryExpr", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("MS.Internal.Xml.XPath.XPathScanner")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsStep", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("MS.Internal.Xml.XPath.XPathScanner/LexKind")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextLex", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAdditiveExpr", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAndExpr", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseEqualityExpr", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseExpresion", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseFilterExpr", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseIdKeyPattern", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseLocationPath", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseLocationPathPattern", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseMethod", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseMultiplicativeExpr", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseNodeTest", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [
          $asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), $asm05.TypeRef("MS.Internal.Xml.XPath.Axis/AxisType"), 
          $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseOrExpr", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePathExpr", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePattern", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePredicate", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePrimaryExpr", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseRelationalExpr", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseRelativeLocationPath", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseRelativePathPattern", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseStep", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseStepPattern", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseUnaryExpr", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseUnionExpr", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm05.TypeRef("MS.Internal.Xml.XPath.AstNode")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseXPathExpresion", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseXPathPattern", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PassToken", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.XPathScanner/LexKind")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TestOp", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "scanner", $asm05.TypeRef("MS.Internal.Xml.XPath.XPathScanner")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray1", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")]), function ($pi) {
        return JSIL.Array.New($asm05.System.Xml.XPath.XPathResultType, 0);
      }); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray2", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray3", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray4", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray5", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray6", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray7", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray8", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray9", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")])); 
    $.Field({Static:true , Public:false}, "functionTable", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:true , Public:false}, "AxesTable", $asm01.TypeRef("System.Collections.Hashtable")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ParamInfo$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "MS.Internal.Xml.XPath.XPathParser/ParamInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ArgTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FType", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Maxargs", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Minargs", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "ftype", $asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType")); 
    $.Field({Static:false, Public:false}, "minargs", $.Int32); 
    $.Field({Static:false, Public:false}, "maxargs", $.Int32); 
    $.Field({Static:false, Public:false}, "argTypes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")])); 
    $.Property({Static:false, Public:true }, "FType", $asm05.TypeRef("MS.Internal.Xml.XPath.Function/FunctionType"));

    $.Property({Static:false, Public:true }, "Minargs", $.Int32);

    $.Property({Static:false, Public:true }, "Maxargs", $.Int32);

    $.Property({Static:false, Public:true }, "ArgTypes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathScanner$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "MS.Internal.Xml.XPath.XPathScanner", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanBeFunction", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurerntChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.XPathScanner/LexKind"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NumberValue", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StringValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextChar", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "NextLex", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanFraction", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanNumber", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipSpace", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "xpathExpr", $.String); 
    $.Field({Static:false, Public:false}, "xpathExprIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "kind", $asm05.TypeRef("MS.Internal.Xml.XPath.XPathScanner/LexKind")); 
    $.Field({Static:false, Public:false}, "currentChar", $.Char); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "stringValue", $.String); 
    $.Field({Static:false, Public:false}, "numberValue", $.Double); 
    $.Field({Static:false, Public:false}, "canBeFunction", $.Boolean); 
    $.Field({Static:false, Public:false}, "xmlCharType", $asm05.TypeRef("System.Xml.XmlCharType")); 
    $.Property({Static:false, Public:true }, "SourceText", $.String);

    $.Property({Static:false, Public:false}, "CurerntChar", $.Char);

    $.Property({Static:false, Public:true }, "Kind", $asm05.TypeRef("MS.Internal.Xml.XPath.XPathScanner/LexKind"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "StringValue", $.String);

    $.Property({Static:false, Public:true }, "NumberValue", $.Double);

    $.Property({Static:false, Public:true }, "CanBeFunction", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "MS.Internal.Xml.XPath.XPathScanner/LexKind", false, {
    Bang: 33, 
    Quote: 34, 
    Dollar: 36, 
    Apos: 39, 
    LParens: 40, 
    RParens: 41, 
    Star: 42, 
    Plus: 43, 
    Comma: 44, 
    Minus: 45, 
    Dot: 46, 
    Slash: 47, 
    Lt: 60, 
    Eq: 61, 
    Gt: 62, 
    At: 64, 
    And: 65, 
    DotDot: 68, 
    Eof: 69, 
    Ge: 71, 
    Le: 76, 
    Ne: 78, 
    Or: 79, 
    SlashSlash: 83, 
    LBracket: 91, 
    RBracket: 93, 
    Axe: 97, 
    Number: 100, 
    Name: 110, 
    String: 115, 
    Union: 124
  }, false
);

(function XPathSelectionIterator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), "MS.Internal.Xml.XPath.XPathSelectionIterator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("MS.Internal.Xml.XPath.Query")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "nav", $asm05.TypeRef("System.Xml.XPath.XPathNavigator")); 
    $.Field({Static:false, Public:false}, "query", $asm05.TypeRef("MS.Internal.Xml.XPath.Query")); 
    $.Field({Static:false, Public:false}, "position", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathSelfQuery$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), "MS.Internal.Xml.XPath.XPathSelfQuery", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.XPath.XPathNodeType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XPathSingletonIterator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), "MS.Internal.Xml.XPath.XPathSingletonIterator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNodeIterator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "nav", $asm05.TypeRef("System.Xml.XPath.XPathNavigator")); 
    $.Field({Static:false, Public:false}, "position", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XslCompiledTransform$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Xsl.XslCompiledTransform", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCommand", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckInput", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileQilToMsil", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltSettings")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CompileToType", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.Compiler.CompilerErrorCollection"), [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.Xsl.XsltSettings"), 
          $asm05.TypeRef("System.Xml.XmlResolver"), $.Boolean, 
          $asm01.TypeRef("System.Reflection.Emit.TypeBuilder"), $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileXsltToQil", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm05.TypeRef("System.Xml.Xsl.XsltSettings"), 
          $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Errors", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.Compiler.CompilerErrorCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputSettings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriterSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TemporaryFiles", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.Compiler.TempFileCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFirstError", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.Compiler.CompilerError"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.Xsl.XsltSettings"), 
          $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.IXPathNavigable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm05.TypeRef("System.Xml.Xsl.XsltSettings"), 
          $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.Xsl.XsltSettings"), 
          $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadInternal", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.Compiler.CompilerResults"), [
          $.Object, $asm05.TypeRef("System.Xml.Xsl.XsltSettings"), 
          $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrintQil", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm05.TypeRef("System.Xml.XmlWriter"), 
          $.Boolean, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TestCompile", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Xsl.Qil.QilExpression"), [
          $.Object, $asm05.TypeRef("System.Xml.Xsl.XsltSettings"), 
          $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TestGenerate", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm05.TypeRef("System.Xml.XmlWriter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm01.TypeRef("System.IO.TextWriter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm01.TypeRef("System.IO.Stream")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm05.TypeRef("System.Xml.XmlWriter"), $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm05.TypeRef("System.Xml.XmlWriter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm01.TypeRef("System.IO.TextWriter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm01.TypeRef("System.IO.Stream")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm05.TypeRef("System.Xml.XmlWriter"), $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm05.TypeRef("System.Xml.XmlWriter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm01.TypeRef("System.IO.TextWriter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm01.TypeRef("System.IO.Stream")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Transform", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm05.TypeRef("System.Xml.XmlWriter"), $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.Constant({Static:true , Public:false}, "Version", "2.0.0.0"); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MemberAccessPermissionSet", $asm01.TypeRef("System.Security.PermissionSet")); 
    $.Field({Static:false, Public:false}, "enableDebug", $.Boolean); 
    $.Field({Static:false, Public:false}, "compilerResults", $asm02.TypeRef("System.CodeDom.Compiler.CompilerResults")); 
    $.Field({Static:false, Public:false}, "outputSettings", $asm05.TypeRef("System.Xml.XmlWriterSettings")); 
    $.Field({Static:false, Public:false}, "qil", $asm07.TypeRef("System.Xml.Xsl.Qil.QilExpression")); 
    $.Field({Static:false, Public:false}, "command", $asm07.TypeRef("System.Xml.Xsl.XmlILCommand")); 
    $.Field({Static:true , Public:false}, "GeneratedCodeCtor", $asm01.TypeRef("System.Reflection.ConstructorInfo")); 
    $.Property({Static:false, Public:false}, "Errors", $asm02.TypeRef("System.CodeDom.Compiler.CompilerErrorCollection"));

    $.Property({Static:false, Public:true }, "OutputSettings", $asm05.TypeRef("System.Xml.XmlWriterSettings"));

    $.Property({Static:false, Public:true }, "TemporaryFiles", $asm02.TypeRef("System.CodeDom.Compiler.TempFileCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XsltMessageEncounteredEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.EventArgs"), "System.Xml.Xsl.XsltMessageEncounteredEventArgs", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.Xml.Xsl.XsltMessageEncounteredEventHandler", true, []);

(function XsltArgumentList$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Xsl.XsltArgumentList", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_XsltMessageEncountered", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltMessageEncounteredEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddExtensionObject", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddParam", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckArgumentNull", 
      new JSIL.MethodSignature(null, [$.Object, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetExtensionObject", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParam", 
      new JSIL.MethodSignature($.Object, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_XsltMessageEncountered", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Xsl.XsltMessageEncounteredEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveExtensionObject", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveParam", 
      new JSIL.MethodSignature($.Object, [$.String, $.String], [])
    );

    $.Field({Static:false, Public:false}, "parameters", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "extensions", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "xsltMessageEncountered", $asm05.TypeRef("System.Xml.Xsl.XsltMessageEncounteredEventHandler")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeInterface(
  "System.Xml.Xsl.IXsltContextFunction", true, [], function ($) {
    $.Method({}, "get_Minargs", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_Maxargs", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_ReturnType", new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], []));
    $.Method({}, "get_ArgTypes", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XPath.XPathResultType")]), [], []));
    $.Method({}, "Invoke", new JSIL.MethodSignature($.Object, [
          $asm05.TypeRef("System.Xml.Xsl.XsltContext"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator")
        ], []));
    $.Property({}, "Minargs");
    $.Property({}, "Maxargs");
    $.Property({}, "ReturnType");
    $.Property({}, "ArgTypes");
  }, []);

JSIL.MakeInterface(
  "System.Xml.Xsl.IXsltContextVariable", true, [], function ($) {
    $.Method({}, "get_IsLocal", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_IsParam", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_VariableType", new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathResultType"), [], []));
    $.Method({}, "Evaluate", new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.Xsl.XsltContext")], []));
    $.Property({}, "IsLocal");
    $.Property({}, "IsParam");
    $.Property({}, "VariableType");
  }, []);

(function XsltException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.SystemException"), "System.Xml.Xsl.XsltException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.Int32, 
          $.Int32, $asm01.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm01.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateMessage", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatMessage", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceUri", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.Field({Static:false, Public:false}, "res", $.String); 
    $.Field({Static:false, Public:false}, "args", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:false, Public:false}, "sourceUri", $.String); 
    $.Field({Static:false, Public:false}, "lineNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "linePosition", $.Int32); 
    $.Field({Static:false, Public:false}, "message", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "SourceUri", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XsltCompileException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Xsl.XsltException"), "System.Xml.Xsl.XsltCompileException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Exception"), $.String, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XslTransform$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Xsl.XslTransform", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCommand", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compile", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.XmlResolver"), 
          $asm01.TypeRef("System.Security.Policy.Evidence")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get__DocumentResolver", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlResolver"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Debugger", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Xsl.XsltOld.Debugger.IXsltDebugger"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.IXPathNavigable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm05.TypeRef("System.Xml.XmlResolver"), 
          $asm01.TypeRef("System.Security.Policy.Evidence")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.XmlResolver"), 
          $asm01.TypeRef("System.Security.Policy.Evidence")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.XmlResolver"), 
          $asm01.TypeRef("System.Security.Policy.Evidence")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm05.TypeRef("System.Xml.XmlWriter"), $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm05.TypeRef("System.Xml.XmlWriter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm01.TypeRef("System.IO.Stream")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm01.TypeRef("System.IO.TextWriter"), $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.XPathNavigator"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm01.TypeRef("System.IO.TextWriter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [
          $asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [$asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm01.TypeRef("System.IO.TextWriter"), $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm01.TypeRef("System.IO.TextWriter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm01.TypeRef("System.IO.Stream")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm05.TypeRef("System.Xml.XmlWriter"), $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm05.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm05.TypeRef("System.Xml.XmlWriter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.Field({Static:false, Public:false}, "_documentResolver", $asm05.TypeRef("System.Xml.XmlResolver")); 
    $.Field({Static:false, Public:false}, "isDocumentResolverSet", $.Boolean); 
    $.Field({Static:false, Public:false}, "_CompiledStylesheet", $asm07.TypeRef("System.Xml.Xsl.XsltOld.Stylesheet")); 
    $.Field({Static:false, Public:false}, "_QueryStore", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.Xsl.XsltOld.TheQuery")])); 
    $.Field({Static:false, Public:false}, "_RootAction", $asm07.TypeRef("System.Xml.Xsl.XsltOld.RootAction")); 
    $.Field({Static:false, Public:false}, "$debugger", $asm07.TypeRef("System.Xml.Xsl.XsltOld.Debugger.IXsltDebugger")); 
    $.Property({Static:false, Public:false}, "_DocumentResolver", $asm05.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "XmlResolver", $asm05.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:false}, "Debugger", $asm07.TypeRef("System.Xml.Xsl.XsltOld.Debugger.IXsltDebugger"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["This class has been deprecated. Please use System.Xml.Xsl.XslCompiledTransform instead. http://go.microsoft.com/fwlink/?linkid=14202"]; });

})();

(function DebuggerAddapter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Xsl.XslTransform/DebuggerAddapter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBuiltInTemplatesUri", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnInstructionCompile", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnInstructionExecute", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Xsl.XsltOld.Debugger.IXsltProcessor")], [])
    );

    $.Field({Static:false, Public:false}, "unknownDebugger", $.Object); 
    $.Field({Static:false, Public:false}, "getBltIn", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "onCompile", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "onExecute", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Xml.Xsl.XsltOld.Debugger.IXsltDebugger")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XsltSettings$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Xsl.XsltSettings", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CheckOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Default", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnableDocumentFunction", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnableScript", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IncludeDebugInformation", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TempFiles", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.Compiler.TempFileCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TreatWarningsAsErrors", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TrustedXslt", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WarningLevel", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CheckOnly", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EnableDocumentFunction", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EnableScript", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IncludeDebugInformation", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TempFiles", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.CodeDom.Compiler.TempFileCollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TreatWarningsAsErrors", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_WarningLevel", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "enableDocumentFunction", $.Boolean); 
    $.Field({Static:false, Public:false}, "enableScript", $.Boolean); 
    $.Field({Static:false, Public:false}, "checkOnly", $.Boolean); 
    $.Field({Static:false, Public:false}, "includeDebugInformation", $.Boolean); 
    $.Field({Static:false, Public:false}, "warningLevel", $.Int32); 
    $.Field({Static:false, Public:false}, "treatWarningsAsErrors", $.Boolean); 
    $.Field({Static:false, Public:false}, "tempFiles", $asm02.TypeRef("System.CodeDom.Compiler.TempFileCollection")); 
    $.Property({Static:true , Public:true }, "Default", $.Type);

    $.Property({Static:true , Public:true }, "TrustedXslt", $.Type);

    $.Property({Static:false, Public:true }, "EnableDocumentFunction", $.Boolean);

    $.Property({Static:false, Public:true }, "EnableScript", $.Boolean);

    $.Property({Static:false, Public:false}, "CheckOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "IncludeDebugInformation", $.Boolean);

    $.Property({Static:false, Public:false}, "WarningLevel", $.Int32);

    $.Property({Static:false, Public:false}, "TreatWarningsAsErrors", $.Boolean);

    $.Property({Static:false, Public:false}, "TempFiles", $asm02.TypeRef("System.CodeDom.Compiler.TempFileCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AxisElement$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.AxisElement", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.DoubleLinkAxis"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.DoubleLinkAxis"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToChild", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Int32, $asm05.TypeRef("System.Xml.Schema.ForwardAxis")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToParent", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.Schema.ForwardAxis")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDepth", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "curNode", $asm05.TypeRef("System.Xml.Schema.DoubleLinkAxis")); 
    $.Field({Static:false, Public:false}, "rootDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "curDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "isMatch", $.Boolean); 
    $.Property({Static:false, Public:false}, "CurNode", $asm05.TypeRef("System.Xml.Schema.DoubleLinkAxis"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AxisStack$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.AxisStack", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ForwardAxis"), $asm05.TypeRef("System.Xml.Schema.ActiveAxis")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Equal", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Subtree", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.ForwardAxis"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToChild", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToParent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "stack", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "subtree", $asm05.TypeRef("System.Xml.Schema.ForwardAxis")); 
    $.Field({Static:false, Public:false}, "parent", $asm05.TypeRef("System.Xml.Schema.ActiveAxis")); 
    $.Property({Static:false, Public:false}, "Subtree", $asm05.TypeRef("System.Xml.Schema.ForwardAxis"));

    $.Property({Static:false, Public:false}, "Length", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ActiveAxis$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.ActiveAxis", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.Asttree")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentDepth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reactivate", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "currentDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "isActive", $.Boolean); 
    $.Field({Static:false, Public:false}, "axisTree", $asm05.TypeRef("System.Xml.Schema.Asttree")); 
    $.Field({Static:false, Public:false}, "axisStack", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Property({Static:false, Public:true }, "CurrentDepth", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DoubleLinkAxis$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("MS.Internal.Xml.XPath.Axis"), "System.Xml.Schema.DoubleLinkAxis", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Axis"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertTree", 
      new JSIL.MethodSignature($.Type, [$asm05.TypeRef("MS.Internal.Xml.XPath.Axis")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Next", 
      new JSIL.MethodSignature($asm05.TypeRef("MS.Internal.Xml.XPath.Axis"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Next", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Axis")], [])
    );

    $.Field({Static:false, Public:false}, "next", $asm05.TypeRef("MS.Internal.Xml.XPath.Axis")); 
    $.Property({Static:false, Public:false}, "Next", $asm05.TypeRef("MS.Internal.Xml.XPath.Axis"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ForwardAxis$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.ForwardAxis", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.DoubleLinkAxis"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDss", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSelfAxis", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RootNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.DoubleLinkAxis"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TopNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.DoubleLinkAxis"), [], [])
    );

    $.Field({Static:false, Public:false}, "topNode", $asm05.TypeRef("System.Xml.Schema.DoubleLinkAxis")); 
    $.Field({Static:false, Public:false}, "rootNode", $asm05.TypeRef("System.Xml.Schema.DoubleLinkAxis")); 
    $.Field({Static:false, Public:false}, "isAttribute", $.Boolean); 
    $.Field({Static:false, Public:false}, "isDss", $.Boolean); 
    $.Field({Static:false, Public:false}, "isSelfAxis", $.Boolean); 
    $.Property({Static:false, Public:false}, "RootNode", $asm05.TypeRef("System.Xml.Schema.DoubleLinkAxis"));

    $.Property({Static:false, Public:false}, "TopNode", $asm05.TypeRef("System.Xml.Schema.DoubleLinkAxis"));

    $.Property({Static:false, Public:false}, "IsAttribute", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDss", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSelfAxis", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Asttree$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.Asttree", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $asm05.TypeRef("System.Xml.XmlNamespaceManager")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompileXPath", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $asm05.TypeRef("System.Xml.XmlNamespaceManager")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SubtreeArray", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("MS.Internal.Xml.XPath.Axis")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDescendantOrSelf", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("MS.Internal.Xml.XPath.Axis")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNameTest", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("MS.Internal.Xml.XPath.Axis")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSelf", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("MS.Internal.Xml.XPath.Axis")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetURN", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("MS.Internal.Xml.XPath.Axis"), $asm05.TypeRef("System.Xml.XmlNamespaceManager")], [])
    );

    $.Field({Static:false, Public:false}, "fAxisArray", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "xpathexpr", $.String); 
    $.Field({Static:false, Public:false}, "isField", $.Boolean); 
    $.Field({Static:false, Public:false}, "nsmgr", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Property({Static:false, Public:false}, "SubtreeArray", $asm01.TypeRef("System.Collections.ArrayList"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function BaseValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.BaseValidator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlValidatingReaderImpl"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaCollection"), 
          $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Type, [
          $asm05.TypeRef("System.Xml.ValidationType"), $asm05.TypeRef("System.Xml.XmlValidatingReaderImpl"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaCollection"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindId", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseUri", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Uri"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventHandler", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PositionInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.PositionInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreserveWhitespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Reader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlValidatingReaderImpl"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaCollection", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaNames", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaNames"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlResolver", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlResolver"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessEntity", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.SchemaInfo"), $.String, 
          $.Object, $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveTextValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseUri", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Uri")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaInfo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateWhitespace", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "schemaCollection", $asm05.TypeRef("System.Xml.Schema.XmlSchemaCollection")); 
    $.Field({Static:false, Public:false}, "eventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "schemaNames", $asm05.TypeRef("System.Xml.Schema.SchemaNames")); 
    $.Field({Static:false, Public:false}, "positionInfo", $asm05.TypeRef("System.Xml.PositionInfo")); 
    $.Field({Static:false, Public:false}, "xmlResolver", $asm05.TypeRef("System.Xml.XmlResolver")); 
    $.Field({Static:false, Public:false}, "baseUri", $asm02.TypeRef("System.Uri")); 
    $.Field({Static:false, Public:false}, "schemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo")); 
    $.Field({Static:false, Public:false}, "reader", $asm05.TypeRef("System.Xml.XmlValidatingReaderImpl")); 
    $.Field({Static:false, Public:false}, "elementName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "context", $asm05.TypeRef("System.Xml.Schema.ValidationState")); 
    $.Field({Static:false, Public:false}, "textValue", $asm01.TypeRef("System.Text.StringBuilder")); 
    $.Field({Static:false, Public:false}, "textString", $.String); 
    $.Field({Static:false, Public:false}, "hasSibling", $.Boolean); 
    $.Field({Static:false, Public:false}, "checkDatatype", $.Boolean); 
    $.Property({Static:false, Public:true }, "Reader", $asm05.TypeRef("System.Xml.XmlValidatingReaderImpl"));

    $.Property({Static:false, Public:true }, "SchemaCollection", $asm05.TypeRef("System.Xml.Schema.XmlSchemaCollection"));

    $.Property({Static:false, Public:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true }, "SchemaNames", $asm05.TypeRef("System.Xml.Schema.SchemaNames"));

    $.Property({Static:false, Public:true }, "PositionInfo", $asm05.TypeRef("System.Xml.PositionInfo"));

    $.Property({Static:false, Public:true }, "XmlResolver", $asm05.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "BaseUri", $asm02.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "EventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Property({Static:false, Public:true }, "SchemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AutoValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.BaseValidator"), "System.Xml.Schema.AutoValidator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlValidatingReaderImpl"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaCollection"), 
          $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DetectValidationType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ValidationType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindId", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreserveWhitespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "x_schema", "x-schema"); 
    $.Property({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function BaseProcessor$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.BaseProcessor", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.Schema.SchemaNames"), 
          $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.Schema.SchemaNames"), 
          $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToTable", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $asm05.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CompilationSettings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EventHandler", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasErrors", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaNames", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaNames"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidAttributeGroupRedefine", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidGroupRedefine", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidTypeRedefine", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm01.TypeRef("System.Exception"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEventNoThrow", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
    );

    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "schemaNames", $asm05.TypeRef("System.Xml.Schema.SchemaNames")); 
    $.Field({Static:false, Public:false}, "eventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "compilationSettings", $asm05.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")); 
    $.Field({Static:false, Public:false}, "errorCount", $.Int32); 
    $.Field({Static:false, Public:false}, "NsXml", $.String); 
    $.Property({Static:false, Public:false}, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false}, "SchemaNames", $asm05.TypeRef("System.Xml.Schema.SchemaNames"));

    $.Property({Static:false, Public:false}, "EventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Property({Static:false, Public:false}, "CompilationSettings", $asm05.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings"));

    $.Property({Static:false, Public:false}, "HasErrors", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function BitSet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.BitSet", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "And", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureLength", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Get", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "NextSet", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Or", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Subscript", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.Constant({Static:true , Public:false}, "bitSlotShift", 5); 
    $.Constant({Static:true , Public:false}, "bitSlotMask", 31); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Field({Static:false, Public:false}, "bits", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $.Boolean);

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function ChameleonKey$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.ChameleonKey", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Uri")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "targetNS", $.String); 
    $.Field({Static:false, Public:false}, "chameleonLocation", $asm02.TypeRef("System.Uri")); 
    $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CompiledIdentityConstraint$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.CompiledIdentityConstraint", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"), $asm05.TypeRef("System.Xml.XmlNamespaceManager")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fields", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.Asttree")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Role", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.CompiledIdentityConstraint/ConstraintRole"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Selector", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.Asttree"), [], [])
    );

    $.Field({Static:false, Public:false}, "$name", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "role", $asm05.TypeRef("System.Xml.Schema.CompiledIdentityConstraint/ConstraintRole")); 
    $.Field({Static:false, Public:false}, "selector", $asm05.TypeRef("System.Xml.Schema.Asttree")); 
    $.Field({Static:false, Public:false}, "fields", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.Asttree")])); 
    $.Field({Static:false, Public:false}, "refer", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
    $.Property({Static:false, Public:true }, "Role", $asm05.TypeRef("System.Xml.Schema.CompiledIdentityConstraint/ConstraintRole"));

    $.Property({Static:false, Public:true }, "Selector", $asm05.TypeRef("System.Xml.Schema.Asttree"));

    $.Property({Static:false, Public:true }, "Fields", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.Asttree")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.CompiledIdentityConstraint/ConstraintRole", false, {
    Unique: 0, 
    Key: 1, 
    Keyref: 2
  }, false
);

(function Compiler$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.BaseProcessor"), "System.Xml.Schema.Compiler", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchema"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildParticleContentModel", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.ParticleContentValidator"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateEffectiveTotalRange", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Decimal")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Decimal")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeAll", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAll"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeChoice", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaChoice"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeGroupRef", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupRef"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeParticle", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizePointlessRoot", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeSequence", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAtrributeGroupRestriction", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckParticleDerivation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckParticleDerivation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckUnionType", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupAttributeGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupComplexType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupParticle", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupSimpleType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compile", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileAnyAttributeIntersection", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileAnyAttributeUnion", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileAttributeGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileBaseMemberTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexContent", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.ContentValidator"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexContentExtension", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexContentRestriction", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexContentRestriction")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexTypeElements", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileContentTypeParticle", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileIdentityConstraint", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileLocalAttributes", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileParticleElements", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileParticleElements", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSimpleContentExtension", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSimpleContentRestriction", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentRestriction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSimpleType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSubstitutionGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSubstitutionGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyPosition", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Execute", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm05.TypeRef("System.Xml.Schema.SchemaInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAnySchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetComplexType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMappingParticle", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaContentType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSimpleType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAllCompiledSchemas", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAnyFromAny", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAny"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAny")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsChoiceFromChoiceSubstGroup", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaChoice"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaChoice")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsElementFromAny", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAny")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsElementFromElement", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsElementFromGroupBase", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsFixedEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.SchemaDeclBase"), $asm05.TypeRef("System.Xml.Schema.SchemaDeclBase")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsGroupBaseFromAny", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAny")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsGroupBaseFromGroupBase", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsParticleEmptiable", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsProcessContentsRestricted", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSequenceFromAll", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAll")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSequenceFromChoice", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaChoice")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidOccurrenceRangeRestriction", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidOccurrenceRangeRestriction", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Decimal"), $asm01.TypeRef("System.Decimal"), 
          $asm01.TypeRef("System.Decimal"), $asm01.TypeRef("System.Decimal")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidRestriction", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Output", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Prepare", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessSubstitutionGroups", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushComplexType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecursivelyCheckRedefinedAttributeGroups", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecursivelyCheckRedefinedGroups", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDefaultFixed", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), $asm05.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateSForSSimpleTypes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "restrictionErrorMsg", $.String); 
    $.Field({Static:false, Public:false}, "attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "attributeGroups", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "elements", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "schemaTypes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "groups", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "notations", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "examplars", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "identityConstraints", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "complexTypeStack", $asm01.TypeRef("System.Collections.Stack")); 
    $.Field({Static:false, Public:false}, "schemasToCompile", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "importedSchemas", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "schemaForSchema", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConstraintStruct$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.ConstraintStruct", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TableDim", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "constraint", $asm05.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")); 
    $.Field({Static:false, Public:false}, "axisSelector", $asm05.TypeRef("System.Xml.Schema.SelectorActiveAxis")); 
    $.Field({Static:false, Public:false}, "axisFields", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "qualifiedTable", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "keyrefTable", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "tableDim", $.Int32); 
    $.Property({Static:false, Public:false}, "TableDim", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function LocatedActiveAxis$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.ActiveAxis"), "System.Xml.Schema.LocatedActiveAxis", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.Asttree"), $asm05.TypeRef("System.Xml.Schema.KeySequence"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Column", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reactivate", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.KeySequence")], [])
    );

    $.Field({Static:false, Public:false}, "column", $.Int32); 
    $.Field({Static:false, Public:false}, "isMatched", $.Boolean); 
    $.Field({Static:false, Public:false}, "Ks", $asm05.TypeRef("System.Xml.Schema.KeySequence")); 
    $.Property({Static:false, Public:false}, "Column", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SelectorActiveAxis$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.ActiveAxis"), "System.Xml.Schema.SelectorActiveAxis", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.Asttree"), $asm05.TypeRef("System.Xml.Schema.ConstraintStruct")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EmptyStack", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_lastDepth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "PopKS", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.KeySequence"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "PushKS", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], [])
    );

    $.Field({Static:false, Public:false}, "cs", $asm05.TypeRef("System.Xml.Schema.ConstraintStruct")); 
    $.Field({Static:false, Public:false}, "KSs", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "KSpointer", $.Int32); 
    $.Property({Static:false, Public:true }, "EmptyStack", $.Boolean);

    $.Property({Static:false, Public:true }, "lastDepth", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function KSStruct$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.KSStruct", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.KeySequence"), $.Int32], [])
    );

    $.Field({Static:false, Public:true }, "depth", $.Int32); 
    $.Field({Static:false, Public:true }, "ks", $asm05.TypeRef("System.Xml.Schema.KeySequence")); 
    $.Field({Static:false, Public:true }, "fields", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.LocatedActiveAxis")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TypedObject$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.TypedObject", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Dim", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Dvalue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Decimal")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDecimal", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsList", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ListDValueEquals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetDecimal", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "dstruct", $asm05.TypeRef("System.Xml.Schema.TypedObject/DecimalStruct")); 
    $.Field({Static:false, Public:false}, "ovalue", $.Object); 
    $.Field({Static:false, Public:false}, "svalue", $.String); 
    $.Field({Static:false, Public:false}, "xsdtype", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
    $.Field({Static:false, Public:false}, "dim", $.Int32); 
    $.Field({Static:false, Public:false}, "isList", $.Boolean); 
    $.Property({Static:false, Public:true }, "Dim", $.Int32);

    $.Property({Static:false, Public:true }, "IsList", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDecimal", $.Boolean);

    $.Property({Static:false, Public:true }, "Dvalue", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Decimal")]));

    $.Property({Static:false, Public:true }, "Value", $.Object);

    $.Property({Static:false, Public:true }, "Type", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DecimalStruct$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.TypedObject/DecimalStruct", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Dvalue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Decimal")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDecimal", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsDecimal", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "isDecimal", $.Boolean); 
    $.Field({Static:false, Public:false}, "dvalue", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Decimal")])); 
    $.Property({Static:false, Public:true }, "IsDecimal", $.Boolean);

    $.Property({Static:false, Public:true }, "Dvalue", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Decimal")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function KeySequence$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.KeySequence", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.TypedObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PosCol", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PosLine", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsQualified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "ks", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.TypedObject")])); 
    $.Field({Static:false, Public:false}, "dim", $.Int32); 
    $.Field({Static:false, Public:false}, "hashcode", $.Int32); 
    $.Field({Static:false, Public:false}, "posline", $.Int32); 
    $.Field({Static:false, Public:false}, "poscol", $.Int32); 
    $.Property({Static:false, Public:true }, "PosLine", $.Int32);

    $.Property({Static:false, Public:true }, "PosCol", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function UpaException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Exception"), "System.Xml.Schema.UpaException", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Particle1", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Particle2", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.Field({Static:false, Public:false}, "particle1", $.Object); 
    $.Field({Static:false, Public:false}, "particle2", $.Object); 
    $.Property({Static:false, Public:true }, "Particle1", $.Object);

    $.Property({Static:false, Public:true }, "Particle2", $.Object);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SymbolsDictionary$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.SymbolsDictionary", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddName", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNamespaceList", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.NamespaceList"), $.Object, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWildcard", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CountOfNames", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsUpaEnforced", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNamespaceListSymbols", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ICollection"), [$asm05.TypeRef("System.Xml.Schema.NamespaceList")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParticle", 
      new JSIL.MethodSignature($.Object, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "NameOf", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsUpaEnforced", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "last", $.Int32); 
    $.Field({Static:false, Public:false}, "names", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "wildcards", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "particles", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "particleLast", $.Object); 
    $.Field({Static:false, Public:false}, "isUpaEnforced", $.Boolean); 
    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "CountOfNames", $.Int32);

    $.Property({Static:false, Public:true }, "IsUpaEnforced", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function Position$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.Schema.Position", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    );

    $.Field({Static:false, Public:true }, "symbol", $.Int32); 
    $.Field({Static:false, Public:true }, "particle", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Positions$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.Positions", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.Position"), [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "positions", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Property({Static:false, Public:true }, "Item", $asm05.TypeRef("System.Xml.Schema.Position"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function SyntaxTreeNode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.SyntaxTreeNode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [$asm05.TypeRef("System.Xml.Schema.Positions")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConstructPos", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.BitSet"), $asm05.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpandTree", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.InteriorNode"), $asm05.TypeRef("System.Xml.Schema.SymbolsDictionary"), 
          $asm05.TypeRef("System.Xml.Schema.Positions")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsRangeNode", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsRangeNode", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function LeafNode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode"), "System.Xml.Schema.LeafNode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode"), [$asm05.TypeRef("System.Xml.Schema.Positions")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConstructPos", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.BitSet"), $asm05.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpandTree", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.InteriorNode"), $asm05.TypeRef("System.Xml.Schema.SymbolsDictionary"), 
          $asm05.TypeRef("System.Xml.Schema.Positions")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Pos", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Pos", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "pos", $.Int32); 
    $.Property({Static:false, Public:true }, "Pos", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NamespaceListNode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode"), "System.Xml.Schema.NamespaceListNode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.NamespaceList"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode"), [$asm05.TypeRef("System.Xml.Schema.Positions")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConstructPos", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.BitSet"), $asm05.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpandTree", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.InteriorNode"), $asm05.TypeRef("System.Xml.Schema.SymbolsDictionary"), 
          $asm05.TypeRef("System.Xml.Schema.Positions")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResolvedSymbols", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ICollection"), [$asm05.TypeRef("System.Xml.Schema.SymbolsDictionary")], [])
    );

    $.Field({Static:false, Public:false}, "namespaceList", $asm05.TypeRef("System.Xml.Schema.NamespaceList")); 
    $.Field({Static:false, Public:false}, "particle", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function InteriorNode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode"), "System.Xml.Schema.InteriorNode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode"), [$asm05.TypeRef("System.Xml.Schema.Positions")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpandTree", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm05.TypeRef("System.Xml.Schema.SymbolsDictionary"), 
          $asm05.TypeRef("System.Xml.Schema.Positions")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LeftChild", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RightChild", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LeftChild", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RightChild", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode")], [])
    );

    $.Field({Static:false, Public:false}, "leftChild", $asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode")); 
    $.Field({Static:false, Public:false}, "rightChild", $asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode")); 
    $.Property({Static:false, Public:true }, "LeftChild", $asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode"));

    $.Property({Static:false, Public:true }, "RightChild", $asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SequenceNode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.InteriorNode"), "System.Xml.Schema.SequenceNode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConstructPos", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.BitSet"), $asm05.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ChoiceNode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.InteriorNode"), "System.Xml.Schema.ChoiceNode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConstructPos", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.BitSet"), $asm05.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PlusNode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.InteriorNode"), "System.Xml.Schema.PlusNode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConstructPos", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.BitSet"), $asm05.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function QmarkNode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.InteriorNode"), "System.Xml.Schema.QmarkNode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConstructPos", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.BitSet"), $asm05.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function StarNode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.InteriorNode"), "System.Xml.Schema.StarNode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConstructPos", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.BitSet"), $asm05.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function LeafRangeNode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.LeafNode"), "System.Xml.Schema.LeafRangeNode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Decimal"), $asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm01.TypeRef("System.Decimal"), 
          $asm01.TypeRef("System.Decimal")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode"), [$asm05.TypeRef("System.Xml.Schema.Positions")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsRangeNode", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Max", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Min", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NextIteration", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.BitSet"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NextIteration", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.BitSet")], [])
    );

    $.Field({Static:false, Public:false}, "min", $asm01.TypeRef("System.Decimal")); 
    $.Field({Static:false, Public:false}, "max", $asm01.TypeRef("System.Decimal")); 
    $.Field({Static:false, Public:false}, "nextIteration", $asm05.TypeRef("System.Xml.Schema.BitSet")); 
    $.Property({Static:false, Public:true }, "Max", $asm01.TypeRef("System.Decimal"));

    $.Property({Static:false, Public:true }, "Min", $asm01.TypeRef("System.Decimal"));

    $.Property({Static:false, Public:true }, "NextIteration", $asm05.TypeRef("System.Xml.Schema.BitSet"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsRangeNode", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ContentValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.ContentValidator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.ValidationState")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedElements", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [$asm05.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedParticles", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [$asm05.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptiable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsOpen", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreserveWhitespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitValidation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationState")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsOpen", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateElement", 
      new JSIL.MethodSignature($.Object, [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Schema.ValidationState"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.Field({Static:false, Public:false}, "contentType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType")); 
    $.Field({Static:false, Public:false}, "isOpen", $.Boolean); 
    $.Field({Static:false, Public:false}, "isEmptiable", $.Boolean); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "TextOnly", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Mixed", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Any", $.Type); 
    $.Property({Static:false, Public:true }, "ContentType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"));

    $.Property({Static:false, Public:true }, "PreserveWhitespace", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptiable", $.Boolean);

    $.Property({Static:false, Public:true }, "IsOpen", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ParticleContentValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.ContentValidator"), "System.Xml.Schema.ParticleContentValidator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddChoice", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLeafNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddLeafRange", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Decimal"), $asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNamespaceList", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.NamespaceList"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddPlus", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddQMark", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddSequence", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddStar", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildTransitionTable", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])]), [
          $asm05.TypeRef("System.Xml.Schema.BitSet"), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateTotalFollowposForRangeNodes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")]), [
          $asm05.TypeRef("System.Xml.Schema.BitSet"), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Schema.BitSet")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCMUPAWithLeafRangeNodes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.BitSet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckUniqueParticleAttribution", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.BitSet"), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckUniqueParticleAttribution", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.BitSet")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CloseGroup", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Closure", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.InteriorNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.ValidationState")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Finish", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.ContentValidator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Finish", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.ContentValidator"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetApplicableMinMaxFollowPos", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.BitSet"), [
          $asm05.TypeRef("System.Xml.Schema.BitSet"), $asm05.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitValidation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationState")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenGroup", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Start", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateElement", 
      new JSIL.MethodSignature($.Object, [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Schema.ValidationState"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.Field({Static:false, Public:false}, "symbols", $asm05.TypeRef("System.Xml.Schema.SymbolsDictionary")); 
    $.Field({Static:false, Public:false}, "positions", $asm05.TypeRef("System.Xml.Schema.Positions")); 
    $.Field({Static:false, Public:false}, "stack", $asm01.TypeRef("System.Collections.Stack")); 
    $.Field({Static:false, Public:false}, "contentNode", $asm05.TypeRef("System.Xml.Schema.SyntaxTreeNode")); 
    $.Field({Static:false, Public:false}, "isPartial", $.Boolean); 
    $.Field({Static:false, Public:false}, "minMaxNodesCount", $.Int32); 
    $.Field({Static:false, Public:false}, "enableUpaCheck", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DfaContentValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.ContentValidator"), "System.Xml.Schema.DfaContentValidator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])]), $asm05.TypeRef("System.Xml.Schema.SymbolsDictionary"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.ValidationState")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedElements", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [$asm05.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedParticles", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [$asm05.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitValidation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationState")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateElement", 
      new JSIL.MethodSignature($.Object, [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Schema.ValidationState"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.Field({Static:false, Public:false}, "transitionTable", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])])); 
    $.Field({Static:false, Public:false}, "symbols", $asm05.TypeRef("System.Xml.Schema.SymbolsDictionary")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NfaContentValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.ContentValidator"), "System.Xml.Schema.NfaContentValidator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.BitSet"), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")]), 
          $asm05.TypeRef("System.Xml.Schema.SymbolsDictionary"), $asm05.TypeRef("System.Xml.Schema.Positions"), 
          $.Int32, $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"), 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.ValidationState")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedElements", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [$asm05.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedParticles", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [$asm05.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitValidation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationState")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateElement", 
      new JSIL.MethodSignature($.Object, [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Schema.ValidationState"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.Field({Static:false, Public:false}, "firstpos", $asm05.TypeRef("System.Xml.Schema.BitSet")); 
    $.Field({Static:false, Public:false}, "followpos", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")])); 
    $.Field({Static:false, Public:false}, "symbols", $asm05.TypeRef("System.Xml.Schema.SymbolsDictionary")); 
    $.Field({Static:false, Public:false}, "positions", $asm05.TypeRef("System.Xml.Schema.Positions")); 
    $.Field({Static:false, Public:false}, "endMarkerPos", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function RangePositionInfo$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.Schema.RangePositionInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "curpos", $asm05.TypeRef("System.Xml.Schema.BitSet")); 
    $.Field({Static:false, Public:true }, "rangeCounters", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Decimal")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function RangeContentValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.ContentValidator"), "System.Xml.Schema.RangeContentValidator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.BitSet"), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")]), 
          $asm05.TypeRef("System.Xml.Schema.SymbolsDictionary"), $asm05.TypeRef("System.Xml.Schema.Positions"), 
          $.Int32, $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"), 
          $.Boolean, $asm05.TypeRef("System.Xml.Schema.BitSet"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.ValidationState")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedElements", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [$asm05.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedParticles", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [$asm05.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitValidation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationState")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateElement", 
      new JSIL.MethodSignature($.Object, [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Schema.ValidationState"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.Field({Static:false, Public:false}, "firstpos", $asm05.TypeRef("System.Xml.Schema.BitSet")); 
    $.Field({Static:false, Public:false}, "followpos", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")])); 
    $.Field({Static:false, Public:false}, "positionsWithRangeTerminals", $asm05.TypeRef("System.Xml.Schema.BitSet")); 
    $.Field({Static:false, Public:false}, "symbols", $asm05.TypeRef("System.Xml.Schema.SymbolsDictionary")); 
    $.Field({Static:false, Public:false}, "positions", $asm05.TypeRef("System.Xml.Schema.Positions")); 
    $.Field({Static:false, Public:false}, "minMaxNodesCount", $.Int32); 
    $.Field({Static:false, Public:false}, "endMarkerPos", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AllElementsContentValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.ContentValidator"), "System.Xml.Schema.AllElementsContentValidator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"), $.Int32, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddElement", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $.Object, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.ValidationState")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedElements", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [$asm05.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedParticles", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [$asm05.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptiable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitValidation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationState")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateElement", 
      new JSIL.MethodSignature($.Object, [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Schema.ValidationState"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.Field({Static:false, Public:false}, "elements", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "particles", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:false}, "isRequired", $asm05.TypeRef("System.Xml.Schema.BitSet")); 
    $.Field({Static:false, Public:false}, "countRequired", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptiable", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaDatatypeVariety", true, {
    Atomic: 0, 
    List: 1, 
    Union: 2
  }, false
);

(function XsdSimpleValue$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XsdSimpleValue", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypedValue", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.Field({Static:false, Public:false}, "xmlType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Field({Static:false, Public:false}, "typedValue", $.Object); 
    $.Property({Static:false, Public:true }, "XmlType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:false, Public:true }, "TypedValue", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.RestrictionFlags", false, {
    Length: 1, 
    MinLength: 2, 
    MaxLength: 4, 
    Pattern: 8, 
    Enumeration: 16, 
    WhiteSpace: 32, 
    MaxInclusive: 64, 
    MaxExclusive: 128, 
    MinInclusive: 256, 
    MinExclusive: 512, 
    TotalDigits: 1024, 
    FractionDigits: 2048
  }, true
);

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaWhiteSpace", false, {
    Preserve: 0, 
    Replace: 1, 
    Collapse: 2
  }, false
);

(function RestrictionFacets$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.RestrictionFacets", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "Length", $.Int32); 
    $.Field({Static:false, Public:false}, "MinLength", $.Int32); 
    $.Field({Static:false, Public:false}, "MaxLength", $.Int32); 
    $.Field({Static:false, Public:false}, "Patterns", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "Enumeration", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "WhiteSpace", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace")); 
    $.Field({Static:false, Public:false}, "MaxInclusive", $.Object); 
    $.Field({Static:false, Public:false}, "MaxExclusive", $.Object); 
    $.Field({Static:false, Public:false}, "MinInclusive", $.Object); 
    $.Field({Static:false, Public:false}, "MinExclusive", $.Object); 
    $.Field({Static:false, Public:false}, "TotalDigits", $.Int32); 
    $.Field({Static:false, Public:false}, "FractionDigits", $.Int32); 
    $.Field({Static:false, Public:false}, "Flags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags")); 
    $.Field({Static:false, Public:false}, "FixedFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaDatatype$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaDatatype", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConcatenatedToString", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeriveByList", 
      new JSIL.MethodSignature($.Type, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeriveByRestriction", 
      new JSIL.MethodSignature($.Type, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeriveByUnion", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), $asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXdrName", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlTokenizedType", 
      new JSIL.MethodSignature($.Type, [$asm05.TypeRef("System.Xml.XmlTokenizedType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlTokenizedTypeXsd", 
      new JSIL.MethodSignature($.Type, [$asm05.TypeRef("System.Xml.XmlTokenizedType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasLexicalFacets", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasValueFacets", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Restriction", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFacets"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTokenizedType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeCodeString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Variety", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatypeVariety"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsComparable", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDerivedFrom", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_Restriction", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.RestrictionFacets")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.Object, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TypeCodeToString", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Schema.XmlTypeCode")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VerifySchemaValid", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XdrCanonizeUri", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.Schema.SchemaNames")
        ], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm05.TypeRef("System.Xml.XmlTokenizedType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Variety", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatypeVariety"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasLexicalFacets", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ValueConverter", $asm05.TypeRef("System.Xml.Schema.XmlValueConverter"));

    $.Property({Static:false, Public:false, Virtual:true }, "Restriction", $asm05.TypeRef("System.Xml.Schema.RestrictionFacets"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false}, "TypeCodeString", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DatatypeImplementation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), "System.Xml.Schema.DatatypeImplementation", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateBuiltinTypes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeriveByList", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeriveByList", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [$.Int32, $asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeriveByRestriction", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeriveByUnion", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), $asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FinishBuiltinType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromTypeName", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXdrName", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlTokenizedType", 
      new JSIL.MethodSignature($.Type, [$asm05.TypeRef("System.Xml.XmlTokenizedType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlTokenizedTypeXsd", 
      new JSIL.MethodSignature($.Type, [$asm05.TypeRef("System.Xml.XmlTokenizedType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AnyAtomicType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AnySimpleType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Base", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DayTimeDurationType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasLexicalFacets", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasValueFacets", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Restriction", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFacets"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTokenizedType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UntypedAtomicType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Variety", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatypeVariety"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_YearMonthDurationType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBuiltInTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNormalizedStringTypeV1Compat", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPrimitiveTypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [$asm05.TypeRef("System.Xml.Schema.XmlTypeCode")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSimpleTypeFromTypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm05.TypeRef("System.Xml.Schema.XmlTypeCode")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSimpleTypeFromXsdType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTokenTypeV1Compat", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsComparable", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDerivedFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_Restriction", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.RestrictionFacets")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StartBuiltinType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.Object, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VerifySchemaValid", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.Constant({Static:true , Public:false}, "anySimpleTypeIndex", 11); 
    $.Field({Static:false, Public:false}, "variety", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatypeVariety")); 
    $.Field({Static:false, Public:false}, "restriction", $asm05.TypeRef("System.Xml.Schema.RestrictionFacets")); 
    $.Field({Static:false, Public:false}, "baseType", $.Type); 
    $.Field({Static:false, Public:false}, "valueConverter", $asm05.TypeRef("System.Xml.Schema.XmlValueConverter")); 
    $.Field({Static:false, Public:false}, "parentSchemaType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType")); 
    $.Field({Static:true , Public:false}, "builtinTypes", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:true , Public:false}, "enumToTypeCode", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), function ($pi) {
        return JSIL.Array.New($asm05.System.Xml.Schema.XmlSchemaSimpleType, 55);
      }); 
    $.Field({Static:true , Public:false}, "anySimpleType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Field({Static:true , Public:false}, "anyAtomicType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Field({Static:true , Public:false}, "untypedAtomicType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Field({Static:true , Public:false}, "yearMonthDurationType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Field({Static:true , Public:false}, "dayTimeDurationType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Field({Static:true , Public:false}, "normalizedStringTypeV1Compat", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Field({Static:true , Public:false}, "tokenTypeV1Compat", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Field({Static:true , Public:false}, "QnAnySimpleType", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "QnAnyType", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "stringFacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Field({Static:true , Public:false}, "miscFacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Field({Static:true , Public:false}, "numeric2FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Field({Static:true , Public:false}, "binaryFacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Field({Static:true , Public:false}, "dateTimeFacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Field({Static:true , Public:false}, "durationFacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Field({Static:true , Public:false}, "listFacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Field({Static:true , Public:false}, "qnameFacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Field({Static:true , Public:false}, "unionFacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_anySimpleType", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_anyURI", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_base64Binary", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_boolean", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_byte", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_char", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_date", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_dateTime", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_dateTimeNoTz", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_dateTimeTz", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_day", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_decimal", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_double", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_doubleXdr", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_duration", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_ENTITY", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_ENTITIES", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_ENUMERATION", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_fixed", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_float", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_floatXdr", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_hexBinary", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_ID", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_IDREF", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_IDREFS", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_int", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_integer", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_language", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_long", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_month", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_monthDay", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_Name", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_NCName", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_negativeInteger", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_NMTOKEN", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_NMTOKENS", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_nonNegativeInteger", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_nonPositiveInteger", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_normalizedString", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_NOTATION", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_positiveInteger", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_QName", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_QNameXdr", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_short", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_string", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_time", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_timeNoTz", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_timeTz", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_token", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_unsignedByte", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_unsignedInt", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_unsignedLong", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_unsignedShort", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_uuid", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_year", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_yearMonth", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_normalizedStringV1Compat", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_tokenV1Compat", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_anyAtomicType", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_dayTimeDuration", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_untypedAtomicType", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_yearMonthDuration", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_tokenizedTypes", $jsilcore.TypeRef("System.Array", [$.Type])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_tokenizedTypesXsd", $jsilcore.TypeRef("System.Array", [$.Type])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_XdrTypes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.DatatypeImplementation/SchemaDatatypeMap")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_XsdTypes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.DatatypeImplementation/SchemaDatatypeMap")])); 
    $.Property({Static:true , Public:false}, "AnySimpleType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:true , Public:false}, "AnyAtomicType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:true , Public:false}, "UntypedAtomicType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:true , Public:false}, "YearMonthDurationType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:true , Public:false}, "DayTimeDurationType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValueConverter", $asm05.TypeRef("System.Xml.Schema.XmlValueConverter"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm05.TypeRef("System.Xml.XmlTokenizedType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Variety", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatypeVariety"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "Restriction", $asm05.TypeRef("System.Xml.Schema.RestrictionFacets"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasLexicalFacets", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

    $.Property({Static:false, Public:false}, "Base", $.Type);

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SchemaDatatypeMap$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.DatatypeImplementation/SchemaDatatypeMap", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Schema.DatatypeImplementation")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.Schema.DatatypeImplementation"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentIndex", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.DatatypeImplementation"), [$.Type], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "type", $asm05.TypeRef("System.Xml.Schema.DatatypeImplementation")); 
    $.Field({Static:false, Public:false}, "parentIndex", $.Int32); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "ParentIndex", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.IComparable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_anySimpleType$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.DatatypeImplementation"), "System.Xml.Schema.Datatype_anySimpleType", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTokenizedType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.String.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.String).__Type__); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm05.TypeRef("System.Xml.XmlTokenizedType"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_List$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_List", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.DatatypeImplementation")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.DatatypeImplementation"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.DatatypeImplementation"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTokenizedType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.Object, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:false, Public:false}, "itemType", $asm05.TypeRef("System.Xml.Schema.DatatypeImplementation")); 
    $.Field({Static:false, Public:false}, "minListSize", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm05.TypeRef("System.Xml.XmlTokenizedType"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    $.Property({Static:false, Public:false}, "ItemType", $asm05.TypeRef("System.Xml.Schema.DatatypeImplementation"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_union$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_union", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseMemberTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasAtomicMembers", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsUnionBaseOf", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.DatatypeImplementation")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.Object, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.Object.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.Object).__Type__); 
    $.Field({Static:false, Public:false}, "types", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    $.Property({Static:false, Public:false}, "BaseMemberTypes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_anyAtomicType$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_anyAtomicType", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_untypedAtomicType$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anyAtomicType"), "System.Xml.Schema.Datatype_untypedAtomicType", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_string$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_string", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTokenizedType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm05.TypeRef("System.Xml.XmlTokenizedType"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_boolean$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_boolean", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.Boolean.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.Boolean).__Type__); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_float$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_float", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.Single.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.Single).__Type__); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_double$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_double", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.Double.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.Double).__Type__); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_decimal$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_decimal", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.Decimal.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.Decimal).__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_duration$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_duration", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.TimeSpan.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.TimeSpan).__Type__); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_yearMonthDuration$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_duration"), "System.Xml.Schema.Datatype_yearMonthDuration", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_dayTimeDuration$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_duration"), "System.Xml.Schema.Datatype_dayTimeDuration", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_dateTimeBase$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_dateTimeBase", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XsdDateTimeFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.DateTime.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.DateTime).__Type__); 
    $.Field({Static:false, Public:false}, "dateTimeFlags", $asm05.TypeRef("System.Xml.Schema.XsdDateTimeFlags")); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_dateTimeNoTimeZone$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_dateTimeNoTimeZone", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_dateTimeTimeZone$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_dateTimeTimeZone", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_dateTime$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_dateTime", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_timeNoTimeZone$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_timeNoTimeZone", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_timeTimeZone$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_timeTimeZone", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_time$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_time", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_date$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_date", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_yearMonth$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_yearMonth", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_year$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_year", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_monthDay$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_monthDay", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_day$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_day", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_month$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), "System.Xml.Schema.Datatype_month", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_hexBinary$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_hexBinary", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.Byte).__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of(System.Array.Of($asm01.System.Byte)).__Type__); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_base64Binary$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_base64Binary", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.Byte).__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of(System.Array.Of($asm01.System.Byte)).__Type__); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_anyURI$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_anyURI", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasValueFacets", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm02.System.Uri.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm02.System.Uri).__Type__); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_QName$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_QName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTokenizedType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm05.System.Xml.XmlQualifiedName.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm05.System.Xml.XmlQualifiedName).__Type__); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm05.TypeRef("System.Xml.XmlTokenizedType"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_normalizedString$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_string"), "System.Xml.Schema.Datatype_normalizedString", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasValueFacets", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_normalizedStringV1Compat$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_string"), "System.Xml.Schema.Datatype_normalizedStringV1Compat", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasValueFacets", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_token$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_normalizedString"), "System.Xml.Schema.Datatype_token", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_tokenV1Compat$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_normalizedStringV1Compat"), "System.Xml.Schema.Datatype_tokenV1Compat", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_language$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_token"), "System.Xml.Schema.Datatype_language", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_NMTOKEN$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_token"), "System.Xml.Schema.Datatype_NMTOKEN", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTokenizedType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm05.TypeRef("System.Xml.XmlTokenizedType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_Name$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_token"), "System.Xml.Schema.Datatype_Name", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_NCName$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_Name"), "System.Xml.Schema.Datatype_NCName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_ID$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_NCName"), "System.Xml.Schema.Datatype_ID", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTokenizedType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm05.TypeRef("System.Xml.XmlTokenizedType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_IDREF$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_NCName"), "System.Xml.Schema.Datatype_IDREF", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTokenizedType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm05.TypeRef("System.Xml.XmlTokenizedType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_ENTITY$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_NCName"), "System.Xml.Schema.Datatype_ENTITY", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTokenizedType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm05.TypeRef("System.Xml.XmlTokenizedType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_NOTATION$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_NOTATION", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTokenizedType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VerifySchemaValid", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm05.System.Xml.XmlQualifiedName.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm05.System.Xml.XmlQualifiedName).__Type__); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm05.TypeRef("System.Xml.XmlTokenizedType"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_integer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_decimal"), "System.Xml.Schema.Datatype_integer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_nonPositiveInteger$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_integer"), "System.Xml.Schema.Datatype_nonPositiveInteger", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasValueFacets", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_negativeInteger$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_nonPositiveInteger"), "System.Xml.Schema.Datatype_negativeInteger", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_long$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_integer"), "System.Xml.Schema.Datatype_long", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasValueFacets", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.Int64.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.Int64).__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_int$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_long"), "System.Xml.Schema.Datatype_int", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.Int32.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.Int32).__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_short$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_int"), "System.Xml.Schema.Datatype_short", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.Int16.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.Int16).__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_byte$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_short"), "System.Xml.Schema.Datatype_byte", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.SByte.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.SByte).__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_nonNegativeInteger$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_integer"), "System.Xml.Schema.Datatype_nonNegativeInteger", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasValueFacets", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_unsignedLong$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_nonNegativeInteger"), "System.Xml.Schema.Datatype_unsignedLong", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.UInt64.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.UInt64).__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_unsignedInt$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_unsignedLong"), "System.Xml.Schema.Datatype_unsignedInt", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.UInt32.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.UInt32).__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_unsignedShort$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_unsignedInt"), "System.Xml.Schema.Datatype_unsignedShort", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.UInt16.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.UInt16).__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_unsignedByte$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_unsignedShort"), "System.Xml.Schema.Datatype_unsignedByte", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.Byte.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.Byte).__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_positiveInteger$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_nonNegativeInteger"), "System.Xml.Schema.Datatype_positiveInteger", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker")); 
    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm05.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_doubleXdr$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_double"), "System.Xml.Schema.Datatype_doubleXdr", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_floatXdr$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_float"), "System.Xml.Schema.Datatype_floatXdr", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_QNameXdr$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_QNameXdr", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTokenizedType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm05.System.Xml.XmlQualifiedName.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm05.System.Xml.XmlQualifiedName).__Type__); 
    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm05.TypeRef("System.Xml.XmlTokenizedType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_ENUMERATION$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_NMTOKEN"), "System.Xml.Schema.Datatype_ENUMERATION", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlTokenizedType"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm05.TypeRef("System.Xml.XmlTokenizedType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_char$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_char", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.Char.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.Char).__Type__); 
    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_fixed$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_decimal"), "System.Xml.Schema.Datatype_fixed", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Datatype_uuid$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), "System.Xml.Schema.Datatype_uuid", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm01.TypeRef("System.Type"), $asm01.System.Guid.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.Guid).__Type__); 
    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DtdParser$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.DtdParser", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.IDtdParserAdapter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.IDtdParserAdapter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EatPublicKeyword", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EatSystemKeyword", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseUriStr", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IgnoreEntityReferences", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalSubset", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNo", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinePos", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParsingInternalSubset", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParsingTopLevelMarkup", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PublicID", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SaveInternalSubsetValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SystemID", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNameQualified", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNameString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNmtokenString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetToken", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueWithStrippedSpaces", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleEntityEnd", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleEntityReference", 
      new JSIL.MethodSignature($.Boolean, [
          $.Boolean, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleEntityReference", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean, 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAttributeValueType", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.DtdParser/Token")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadParsingBuffer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnUnexpectedError", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Parse", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaInfo"), [
          $asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.XmlNamespaceManager"), 
          $.Boolean, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Parse", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaInfo"), [
          $asm05.TypeRef("System.Xml.XmlTextReaderImpl"), $.String, 
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Parse", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAttlistDecl", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAttlistDefault", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAttlistType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaAttDef"), $asm05.TypeRef("System.Xml.Schema.SchemaElementDecl")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseComment", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseCondSection", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseElementDecl", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseElementMixedContent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ParticleContentValidator"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseElementOnlyContent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ParticleContentValidator"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseEntityDecl", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseExternalId", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.DtdParser/Token"), $asm05.TypeRef("System.Xml.DtdParser/Token"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseExternalSubset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseFreeFloatingDtd", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseHowMany", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ParticleContentValidator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseInDocumentDtd", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseInternalSubset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseNotationDecl", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePI", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseSubset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseUnexpectedToken", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadData", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDataInName", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveParsingBuffer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveParsingBuffer", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAttlist1", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAttlist2", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAttlist3", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAttlist4", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAttlist5", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAttlist6", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAttlist7", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanClosingTag", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanCondSection1", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanCondSection2", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanCondSection3", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanDoctype1", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanDoctype2", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanElement1", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanElement2", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanElement3", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanElement4", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanElement5", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanElement6", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanElement7", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanEntity1", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanEntity2", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanEntity3", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanEntityName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanLiteral", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [$asm05.TypeRef("System.Xml.DtdParser/LiteralType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanName", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanNameExpected", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanNmtoken", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanNmtokenExpected", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanNotation1", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanPublicId1", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanPublicId2", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanQName", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanQName", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanQNameExpected", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanSubsetContent", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanSystemId", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.DtdParser/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm05.TypeRef("System.Xml.Schema.XmlSeverityType"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSeverityType"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSeverityType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [$.Int32, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidChar", 
      new JSIL.MethodSignature(null, [$.Int32, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
      new JSIL.MethodSignature(null, [$.Int32, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyEntityReference", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaEntity"), [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean, 
          $.Boolean, $.Boolean
        ], [])
    );

    $.Constant({Static:true , Public:false}, "CondSectionEntityIdsInitialSize", 2); 
    $.Field({Static:false, Public:false}, "readerAdapter", $asm05.TypeRef("System.Xml.IDtdParserAdapter")); 
    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "schemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo")); 
    $.Field({Static:false, Public:false}, "xmlCharType", $asm05.TypeRef("System.Xml.XmlCharType")); 
    $.Field({Static:false, Public:false}, "systemId", $.String); 
    $.Field({Static:false, Public:false}, "publicId", $.String); 
    $.Field({Static:false, Public:false}, "validate", $.Boolean); 
    $.Field({Static:false, Public:false}, "normalize", $.Boolean); 
    $.Field({Static:false, Public:false}, "supportNamespaces", $.Boolean); 
    $.Field({Static:false, Public:false}, "v1Compat", $.Boolean); 
    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "charsUsed", $.Int32); 
    $.Field({Static:false, Public:false}, "curPos", $.Int32); 
    $.Field({Static:false, Public:false}, "scanningFunction", $asm05.TypeRef("System.Xml.DtdParser/ScanningFunction")); 
    $.Field({Static:false, Public:false}, "nextScaningFunction", $asm05.TypeRef("System.Xml.DtdParser/ScanningFunction")); 
    $.Field({Static:false, Public:false}, "savedScanningFunction", $asm05.TypeRef("System.Xml.DtdParser/ScanningFunction")); 
    $.Field({Static:false, Public:false}, "whitespaceSeen", $.Boolean); 
    $.Field({Static:false, Public:false}, "tokenStartPos", $.Int32); 
    $.Field({Static:false, Public:false}, "colonPos", $.Int32); 
    $.Field({Static:false, Public:false}, "internalSubsetValueSb", $asm05.TypeRef("System.Xml.BufferBuilder")); 
    $.Field({Static:false, Public:false}, "internalSubsetValue", $.String); 
    $.Field({Static:false, Public:false}, "externalEntitiesDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "currentEntityId", $.Int32); 
    $.Field({Static:false, Public:false}, "nextEntityId", $.Int32); 
    $.Field({Static:false, Public:false}, "condSectionEntityIds", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "freeFloatingDtd", $.Boolean); 
    $.Field({Static:false, Public:false}, "hasFreeFloatingInternalSubset", $.Boolean); 
    $.Field({Static:false, Public:false}, "stringBuilder", $asm05.TypeRef("System.Xml.BufferBuilder")); 
    $.Field({Static:false, Public:false}, "undeclaredNotations", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "condSectionDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "literalLineInfo", $asm05.TypeRef("System.Xml.LineInfo")); 
    $.Field({Static:false, Public:false}, "literalQuoteChar", $.Char); 
    $.Field({Static:false, Public:false}, "documentBaseUri", $.String); 
    $.Field({Static:false, Public:false}, "externalDtdBaseUri", $.String); 
    $.Property({Static:false, Public:false}, "SystemID", $.String);

    $.Property({Static:false, Public:false}, "PublicID", $.String);

    $.Property({Static:false, Public:false}, "InternalSubset", $.String);

    $.Property({Static:false, Public:false}, "SchemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:false}, "ParsingInternalSubset", $.Boolean);

    $.Property({Static:false, Public:false}, "IgnoreEntityReferences", $.Boolean);

    $.Property({Static:false, Public:false}, "SaveInternalSubsetValue", $.Boolean);

    $.Property({Static:false, Public:false}, "ParsingTopLevelMarkup", $.Boolean);

    $.Property({Static:false, Public:false}, "LineNo", $.Int32);

    $.Property({Static:false, Public:false}, "LinePos", $.Int32);

    $.Property({Static:false, Public:false}, "BaseUriStr", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.DtdParser/Token", false, {
    CDATA: 0, 
    ID: 1, 
    IDREF: 2, 
    IDREFS: 3, 
    ENTITY: 4, 
    ENTITIES: 5, 
    NMTOKEN: 6, 
    NMTOKENS: 7, 
    NOTATION: 8, 
    None: 9, 
    PERef: 10, 
    AttlistDecl: 11, 
    ElementDecl: 12, 
    EntityDecl: 13, 
    NotationDecl: 14, 
    Comment: 15, 
    PI: 16, 
    CondSectionStart: 17, 
    CondSectionEnd: 18, 
    Eof: 19, 
    REQUIRED: 20, 
    IMPLIED: 21, 
    FIXED: 22, 
    QName: 23, 
    Name: 24, 
    Nmtoken: 25, 
    Quote: 26, 
    LeftParen: 27, 
    RightParen: 28, 
    GreaterThan: 29, 
    Or: 30, 
    LeftBracket: 31, 
    RightBracket: 32, 
    PUBLIC: 33, 
    SYSTEM: 34, 
    Literal: 35, 
    DOCTYPE: 36, 
    NData: 37, 
    Percent: 38, 
    Star: 39, 
    QMark: 40, 
    Plus: 41, 
    PCDATA: 42, 
    Comma: 43, 
    ANY: 44, 
    EMPTY: 45, 
    IGNORE: 46, 
    INCLUDE: 47
  }, false
);

JSIL.MakeEnum(
  "System.Xml.DtdParser/ScanningFunction", false, {
    SubsetContent: 0, 
    Name: 1, 
    QName: 2, 
    Nmtoken: 3, 
    Doctype1: 4, 
    Doctype2: 5, 
    Element1: 6, 
    Element2: 7, 
    Element3: 8, 
    Element4: 9, 
    Element5: 10, 
    Element6: 11, 
    Element7: 12, 
    Attlist1: 13, 
    Attlist2: 14, 
    Attlist3: 15, 
    Attlist4: 16, 
    Attlist5: 17, 
    Attlist6: 18, 
    Attlist7: 19, 
    Entity1: 20, 
    Entity2: 21, 
    Entity3: 22, 
    Notation1: 23, 
    CondSection1: 24, 
    CondSection2: 25, 
    CondSection3: 26, 
    Literal: 27, 
    SystemId: 28, 
    PublicId1: 29, 
    PublicId2: 30, 
    ClosingTag: 31, 
    ParamEntitySpace: 32, 
    None: 33
  }, false
);

JSIL.MakeEnum(
  "System.Xml.DtdParser/LiteralType", false, {
    AttributeValue: 0, 
    EntityReplText: 1, 
    SystemOrPublicID: 2
  }, false
);

(function UndeclaredNotation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.DtdParser/UndeclaredNotation", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "lineNo", $.Int32); 
    $.Field({Static:false, Public:false}, "linePos", $.Int32); 
    $.Field({Static:false, Public:false}, "next", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ParseElementOnlyContent_LocalFrame$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.DtdParser/ParseElementOnlyContent_LocalFrame", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:true }, "startParenEntityId", $.Int32); 
    $.Field({Static:false, Public:true }, "parsingSchema", $asm05.TypeRef("System.Xml.DtdParser/Token")); 
    $.Field({Static:false, Public:true }, "connectorEntityId", $.Int32); 
    $.Field({Static:false, Public:true }, "contentEntityId", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DtdValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.BaseValidator"), "System.Xml.Schema.DtdValidator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlValidatingReaderImpl"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddID", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckDefaultValue", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.SchemaAttDef"), $asm05.TypeRef("System.Xml.Schema.SchemaInfo"), 
          $asm05.TypeRef("System.Xml.IDtdParserAdapter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForwardRefs", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckValue", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindId", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenEntity", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreserveWhitespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEntity", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaEntity"), [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MeetsStandAloneConstraint", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessTokenizedType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlTokenizedType"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetDefaultTypedValue", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaAttDef"), $asm05.TypeRef("System.Xml.IDtdParserAdapter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateChildElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEndStartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidatePIComment", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateStartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "STACK_INCREMENT", 10); 
    $.Field({Static:true , Public:false}, "namespaceManager", $asm05.TypeRef("System.Xml.Schema.DtdValidator/NamespaceManager")); 
    $.Field({Static:false, Public:false}, "validationStack", $asm05.TypeRef("System.Xml.HWStack")); 
    $.Field({Static:false, Public:false}, "attPresence", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "$name", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "IDs", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "idRefListHead", $asm05.TypeRef("System.Xml.Schema.IdRefNode")); 
    $.Field({Static:false, Public:false}, "processIdentityConstraints", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NamespaceManager$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlNamespaceManager"), "System.Xml.Schema.DtdValidator/NamespaceManager", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function FacetsChecker$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.FacetsChecker", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckLexicalFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckPatternFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm05.TypeRef("System.Xml.Schema.RestrictionFacets"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.Decimal"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Int64, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Int32, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Int16, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Byte, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.DateTime"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Double, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Single, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.TimeSpan"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckWhitespaceFacets", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ConstructRestriction", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.RestrictionFacets"), [
          $asm05.TypeRef("System.Xml.Schema.DatatypeImplementation"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), 
          $asm05.TypeRef("System.Xml.XmlNameTable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Power", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Int32, $.Int32], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function FacetsCompiler$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.Schema.FacetsChecker/FacetsCompiler", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.DatatypeImplementation"), $asm05.TypeRef("System.Xml.Schema.RestrictionFacets")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDupFlag", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet"), $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckProhibitedFlag", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet"), $asm05.TypeRef("System.Xml.Schema.RestrictionFlags"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckValue", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileEnumerationFacet", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), 
          $asm05.TypeRef("System.Xml.XmlNameTable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileFacetCombinations", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileFractionDigitsFacet", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileLengthFacet", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileMaxExclusiveFacet", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileMaxInclusiveFacet", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileMaxLengthFacet", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileMinExclusiveFacet", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileMinInclusiveFacet", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileMinLengthFacet", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompilePatternFacet", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaPatternFacet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileTotalDigitsFacet", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileWhitespaceFacet", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyFacetsFromBaseType", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishFacetCompile", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseFacetValue", 
      new JSIL.MethodSignature($.Object, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet"), 
          $.String, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), 
          $asm05.TypeRef("System.Xml.XmlNameTable")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Preprocess", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFlag", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet"), $asm05.TypeRef("System.Xml.Schema.RestrictionFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFlag", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.RestrictionFlags")], [])
    );

    $.Field({Static:false, Public:false}, "datatype", $asm05.TypeRef("System.Xml.Schema.DatatypeImplementation")); 
    $.Field({Static:false, Public:false}, "derivedRestriction", $asm05.TypeRef("System.Xml.Schema.RestrictionFacets")); 
    $.Field({Static:false, Public:false}, "baseFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags")); 
    $.Field({Static:false, Public:false}, "baseFixedFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags")); 
    $.Field({Static:false, Public:false}, "validRestrictionFlags", $asm05.TypeRef("System.Xml.Schema.RestrictionFlags")); 
    $.Field({Static:false, Public:false}, "nonNegativeInt", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
    $.Field({Static:false, Public:false}, "builtInType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
    $.Field({Static:false, Public:false}, "builtInEnum", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode")); 
    $.Field({Static:false, Public:false}, "firstPattern", $.Boolean); 
    $.Field({Static:false, Public:false}, "regStr", $asm01.TypeRef("System.Text.StringBuilder")); 
    $.Field({Static:false, Public:false}, "pattern_facet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaPatternFacet")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "c_map", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.FacetsChecker/FacetsCompiler/Map")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Map$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.Schema.FacetsChecker/FacetsCompiler/Map", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Char, $.String], [])
    );

    $.Field({Static:false, Public:false}, "match", $.Char); 
    $.Field({Static:false, Public:false}, "replacement", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Numeric10FacetsChecker$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.Numeric10FacetsChecker", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Decimal"), $asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTotalAndFractionDigits", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $asm01.TypeRef("System.Decimal"), $.Int32, 
          $.Int32, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.Decimal"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Int64, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Int32, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Int16, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Byte, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Decimal"), $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlValueConverter")
        ], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "signs", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "maxValue", $asm01.TypeRef("System.Decimal")); 
    $.Field({Static:false, Public:false}, "minValue", $asm01.TypeRef("System.Decimal")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Numeric2FacetsChecker$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.Numeric2FacetsChecker", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Double, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Single, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Double, $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlValueConverter")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DurationFacetsChecker$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.DurationFacetsChecker", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.TimeSpan"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.TimeSpan"), $asm01.TypeRef("System.Collections.ArrayList")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DateTimeFacetsChecker$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.DateTimeFacetsChecker", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.DateTime"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function StringFacetsChecker$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.StringFacetsChecker", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckBuiltInFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LanguagePattern", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Text.RegularExpressions.Regex"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ], [])
    );

    $.Field({Static:true , Public:false}, "languagePattern", $asm02.TypeRef("System.Text.RegularExpressions.Regex")); 
    $.Property({Static:true , Public:false}, "LanguagePattern", $asm02.TypeRef("System.Text.RegularExpressions.Regex"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function QNameFacetsChecker$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.QNameFacetsChecker", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm01.TypeRef("System.Collections.ArrayList")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function MiscFacetsChecker$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.MiscFacetsChecker", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function BinaryFacetsChecker$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.BinaryFacetsChecker", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ListFacetsChecker$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.ListFacetsChecker", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function UnionFacetsChecker$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.FacetsChecker"), "System.Xml.Schema.UnionFacetsChecker", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NamespaceList$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.NamespaceList", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Allows", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Allows", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareSetToOther", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Enumerate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ICollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Excluded", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.NamespaceList/ListType"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Intersection", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsSubset", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveNamespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:false}, "type", $asm05.TypeRef("System.Xml.Schema.NamespaceList/ListType")); 
    $.Field({Static:false, Public:false}, "set", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "targetNamespace", $.String); 
    $.Property({Static:false, Public:true }, "Type", $asm05.TypeRef("System.Xml.Schema.NamespaceList/ListType"));

    $.Property({Static:false, Public:true }, "Excluded", $.String);

    $.Property({Static:false, Public:true }, "Enumerate", $asm01.TypeRef("System.Collections.ICollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.NamespaceList/ListType", false, {
    Any: 0, 
    Other: 1, 
    Set: 2
  }, false
);

(function NamespaceListV1Compat$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.NamespaceList"), "System.Xml.Schema.NamespaceListV1Compat", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Allows", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Parser$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.Parser", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.SchemaType"), $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.Schema.SchemaNames"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSchemaRoot", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.SchemaType"), $jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateXmlNsAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FinishParsing", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XdrSchema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSchema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadAttributeNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadElementNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlElement"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadEntityReferenceInAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlEntityReference"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Parse", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaType"), [$asm05.TypeRef("System.Xml.XmlReader"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ParseReaderNode", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAppInfoDocMarkup", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "StartParsing", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader"), $.String], [])
    );

    $.Field({Static:false, Public:false}, "schemaType", $asm05.TypeRef("System.Xml.Schema.SchemaType")); 
    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "schemaNames", $asm05.TypeRef("System.Xml.Schema.SchemaNames")); 
    $.Field({Static:false, Public:false}, "eventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "namespaceManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Field({Static:false, Public:false}, "reader", $asm05.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "positionInfo", $asm05.TypeRef("System.Xml.PositionInfo")); 
    $.Field({Static:false, Public:false}, "isProcessNamespaces", $.Boolean); 
    $.Field({Static:false, Public:false}, "schemaXmlDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "markupDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "builder", $asm05.TypeRef("System.Xml.Schema.SchemaBuilder")); 
    $.Field({Static:false, Public:false}, "schema", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    $.Field({Static:false, Public:false}, "xdrSchema", $asm05.TypeRef("System.Xml.Schema.SchemaInfo")); 
    $.Field({Static:false, Public:false}, "xmlResolver", $asm05.TypeRef("System.Xml.XmlResolver")); 
    $.Field({Static:false, Public:false}, "dummyDocument", $asm05.TypeRef("System.Xml.XmlDocument")); 
    $.Field({Static:false, Public:false}, "processMarkup", $.Boolean); 
    $.Field({Static:false, Public:false}, "parentNode", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "annotationNSManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Field({Static:false, Public:false}, "xmlns", $.String); 
    $.Field({Static:false, Public:false}, "xmlCharType", $asm05.TypeRef("System.Xml.XmlCharType")); 
    $.Property({Static:false, Public:true }, "XmlSchema", $asm05.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:false}, "XmlResolver", $asm05.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "XdrSchema", $asm05.TypeRef("System.Xml.Schema.SchemaInfo"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.Compositor", false, {
    Root: 0, 
    Include: 1, 
    Import: 2, 
    Redefine: 3
  }, false
);

(function RedefineEntry$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.RedefineEntry", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaRedefine"), $asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.Field({Static:false, Public:false}, "redefine", $asm05.TypeRef("System.Xml.Schema.XmlSchemaRedefine")); 
    $.Field({Static:false, Public:false}, "schemaToUpdate", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Preprocessor$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.BaseProcessor"), "System.Xml.Schema.Preprocessor", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.Schema.SchemaNames"), 
          $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.Schema.SchemaNames"), 
          $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildRefNamespaces", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSchemaList", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRefinedAttributeGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRefinedComplexType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRefinedGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRefinedSimpleType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Cleanup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupRedefine", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaExternal")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyIncludedComponents", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema"), $asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CountGroupSelfReference", 
      new JSIL.MethodSignature($.Int32, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm05.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Execute", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchema"), $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReaderSettings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RootSchema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBuildInSchema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChameleonSchema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIncludedSet", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema"), $asm01.TypeRef("System.Collections.ArrayList")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParentSchema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaEntity", 
      new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.Uri")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadExternals", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseUri", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Preprocess", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchema"), $.String, 
          $asm01.TypeRef("System.Collections.ArrayList")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAnnotation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAnnotation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributeContent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributeGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributes", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessComplexType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessElementContent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessIdentityConstraint", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessLocalAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessLocalElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessNotation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaNotation")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessParticle", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessRedefine", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.RedefineEntry")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessSimpleType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveSchemaLocationUri", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Uri"), [$asm05.TypeRef("System.Xml.Schema.XmlSchema"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ChameleonSchemas", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Hashtable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReaderSettings", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReaderSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SchemaLocations", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Hashtable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSchemaDefaults", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateIdAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateNameAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateQNameAttribute", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String, 
          $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.Constant({Static:true , Public:false}, "schemaBlockDefaultAllowed", 7); 
    $.Constant({Static:true , Public:false}, "schemaFinalDefaultAllowed", 30); 
    $.Constant({Static:true , Public:false}, "elementBlockAllowed", 7); 
    $.Constant({Static:true , Public:false}, "elementFinalAllowed", 6); 
    $.Constant({Static:true , Public:false}, "simpleTypeFinalAllowed", 30); 
    $.Constant({Static:true , Public:false}, "complexTypeBlockAllowed", 6); 
    $.Constant({Static:true , Public:false}, "complexTypeFinalAllowed", 6); 
    $.Field({Static:false, Public:false}, "Xmlns", $.String); 
    $.Field({Static:false, Public:false}, "NsXsi", $.String); 
    $.Field({Static:false, Public:false}, "targetNamespace", $.String); 
    $.Field({Static:false, Public:false}, "rootSchema", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    $.Field({Static:false, Public:false}, "currentSchema", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    $.Field({Static:false, Public:false}, "elementFormDefault", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
    $.Field({Static:false, Public:false}, "attributeFormDefault", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
    $.Field({Static:false, Public:false}, "blockDefault", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
    $.Field({Static:false, Public:false}, "finalDefault", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
    $.Field({Static:false, Public:false}, "schemaLocations", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "chameleonSchemas", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "referenceNamespaces", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "processedExternals", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "lockList", $asm01.TypeRef("System.Collections.SortedList")); 
    $.Field({Static:false, Public:false}, "readerSettings", $asm05.TypeRef("System.Xml.XmlReaderSettings")); 
    $.Field({Static:false, Public:false}, "rootSchemaForRedefine", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    $.Field({Static:false, Public:false}, "redefinedList", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:true , Public:false}, "builtInSchemaForXmlNS", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    $.Field({Static:false, Public:false}, "xmlResolver", $asm05.TypeRef("System.Xml.XmlResolver")); 
    $.Property({Static:false, Public:false}, "XmlResolver", $asm05.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:false}, "ReaderSettings", $asm05.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:false}, "SchemaLocations", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "ChameleonSchemas", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "RootSchema", $asm05.TypeRef("System.Xml.Schema.XmlSchema"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SchemaDeclBase$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.SchemaDeclBase", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckEnumeration", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckValue", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Datatype", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValueRaw", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValueTyped", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDeclaredInExternal", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxLength", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinLength", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Presence", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaDeclBase/Use"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Values", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Datatype", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultValueRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultValueTyped", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsDeclaredInExternal", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxLength", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinLength", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Presence", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaDeclBase/Use")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Values", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.ArrayList")], [])
    );

    $.Field({Static:false, Public:false}, "$name", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "values", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "schemaType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType")); 
    $.Field({Static:false, Public:false}, "datatype", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
    $.Field({Static:false, Public:false}, "isDeclaredInExternal", $.Boolean); 
    $.Field({Static:false, Public:false}, "presence", $asm05.TypeRef("System.Xml.Schema.SchemaDeclBase/Use")); 
    $.Field({Static:false, Public:false}, "defaultValueRaw", $.String); 
    $.Field({Static:false, Public:false}, "defaultValueTyped", $.Object); 
    $.Field({Static:false, Public:false}, "maxLength", $.Int64); 
    $.Field({Static:false, Public:false}, "minLength", $.Int64); 
    $.Property({Static:false, Public:true }, "Name", $asm05.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Values", $asm01.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "Presence", $asm05.TypeRef("System.Xml.Schema.SchemaDeclBase/Use"));

    $.Property({Static:false, Public:true }, "MaxLength", $.Int64);

    $.Property({Static:false, Public:true }, "MinLength", $.Int64);

    $.Property({Static:false, Public:true }, "IsDeclaredInExternal", $.Boolean);

    $.Property({Static:false, Public:true }, "SchemaType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:true }, "Datatype", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    $.Property({Static:false, Public:true }, "DefaultValueRaw", $.String);

    $.Property({Static:false, Public:true }, "DefaultValueTyped", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.SchemaDeclBase/Use", false, {
    Default: 0, 
    Required: 1, 
    Implied: 2, 
    Fixed: 3, 
    RequiredFixed: 4
  }, false
);

(function SchemaAttDef$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.SchemaDeclBase"), "System.Xml.Schema.SchemaAttDef", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDefaultValue", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaInfo"), $asm05.TypeRef("System.Xml.IDtdParserAdapter")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckXmlSpace", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultValueChecked", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValueExpanded", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasEntityRef", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNum", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinePos", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Reserved", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaAttDef/Reserve"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueLineNum", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueLinePos", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultValueExpanded", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HasEntityRef", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LineNum", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LinePos", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Reserved", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaAttDef/Reserve")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ValueLineNum", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ValueLinePos", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "reserved", $asm05.TypeRef("System.Xml.Schema.SchemaAttDef/Reserve")); 
    $.Field({Static:false, Public:false}, "defExpanded", $.String); 
    $.Field({Static:false, Public:false}, "hasEntityRef", $.Boolean); 
    $.Field({Static:false, Public:false}, "schemaAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")); 
    $.Field({Static:false, Public:false}, "defaultValueChecked", $.Boolean); 
    $.Field({Static:false, Public:false}, "lineNum", $.Int32); 
    $.Field({Static:false, Public:false}, "linePos", $.Int32); 
    $.Field({Static:false, Public:false}, "valueLineNum", $.Int32); 
    $.Field({Static:false, Public:false}, "valueLinePos", $.Int32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
    $.Property({Static:false, Public:false}, "LinePos", $.Int32);

    $.Property({Static:false, Public:false}, "LineNum", $.Int32);

    $.Property({Static:false, Public:false}, "ValueLinePos", $.Int32);

    $.Property({Static:false, Public:false}, "ValueLineNum", $.Int32);

    $.Property({Static:false, Public:false}, "DefaultValueChecked", $.Boolean);

    $.Property({Static:false, Public:true }, "DefaultValueExpanded", $.String);

    $.Property({Static:false, Public:true }, "Reserved", $asm05.TypeRef("System.Xml.Schema.SchemaAttDef/Reserve"));

    $.Property({Static:false, Public:true }, "HasEntityRef", $.Boolean);

    $.Property({Static:false, Public:true }, "SchemaAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.SchemaAttDef/Reserve", false, {
    None: 0, 
    XmlSpace: 1, 
    XmlLang: 2
  }, false
);

(function SchemaBuilder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.SchemaBuilder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndChildren", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsContentParsed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessElement", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessMarkup", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNode")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartChildren", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SchemaCollectionCompiler$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.BaseProcessor"), "System.Xml.Schema.SchemaCollectionCompiler", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildParticleContentModel", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ParticleContentValidator"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateEffectiveTotalRange", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Decimal")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Decimal")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateSequenceRange", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Decimal")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Decimal")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeAll", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaAll"), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeChoice", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaChoice"), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeGroupRef", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupRef"), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeParticle", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeSequence", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckParticleDerivation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSubstitutionGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSubstitutionGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckUnionType", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Cleanup", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Cleanup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupAttributeGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupComplexType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupParticle", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupSimpleType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compile", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileAnyAttributeIntersection", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileAnyAttributeUnion", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileAttributeGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileBaseMemberTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileCompexTypeElements", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexContent", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.ContentValidator"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexContentExtension", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexContentRestriction", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexContentRestriction")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileContentTypeParticle", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileIdentityConstraint", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileLocalAttributes", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileParticleElements", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSimpleContentExtension", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSimpleContentRestriction", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentRestriction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSimpleType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSubstitutionGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSubstitutionGroupV1Compat")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Execute", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchema"), $asm05.TypeRef("System.Xml.Schema.SchemaInfo"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAnySchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetComplexType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMappingParticle", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaContentType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSimpleType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAnyFromAny", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAny"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAny")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsElementFromAny", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAny")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsElementFromElement", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsElementFromGroupBase", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsGroupBaseFromAny", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAny")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsGroupBaseFromGroupBase", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsParticleEmptiable", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSequenceFromAll", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAll")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSequenceFromChoice", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaChoice")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidOccurrenceRangeRestriction", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidOccurrenceRangeRestriction", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Decimal"), $asm01.TypeRef("System.Decimal"), 
          $asm01.TypeRef("System.Decimal"), $asm01.TypeRef("System.Decimal")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidRestriction", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Output", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Prepare", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushComplexType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.Field({Static:false, Public:false}, "compileContentModel", $.Boolean); 
    $.Field({Static:false, Public:false}, "examplars", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "complexTypeStack", $asm01.TypeRef("System.Collections.Stack")); 
    $.Field({Static:false, Public:false}, "schema", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SchemaCollectionPreprocessor$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.BaseProcessor"), "System.Xml.Schema.SchemaCollectionPreprocessor", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.Schema.SchemaNames"), 
          $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildRefNamespaces", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRefinedAttributeGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRefinedComplexType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRefinedGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRefinedSimpleType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Cleanup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CountGroupSelfReference", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Execute", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchema"), $.String, 
          $.Boolean, $asm05.TypeRef("System.Xml.Schema.XmlSchemaCollection")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaEntity", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.Stream"), [$asm02.TypeRef("System.Uri")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadExternals", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaCollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Preprocess", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchema"), $.String, 
          $asm05.TypeRef("System.Xml.Schema.SchemaCollectionPreprocessor/Compositor")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAnnotation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributeContent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributeGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributes", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessComplexType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessElementContent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessIdentityConstraint", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessLocalAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessLocalElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessNotation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaNotation")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessParticle", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessRedefine", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaRedefine")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessSimpleType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveSchemaLocationUri", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Uri"), [$asm05.TypeRef("System.Xml.Schema.XmlSchema"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateIdAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateNameAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateQNameAttribute", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String, 
          $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.Constant({Static:true , Public:false}, "schemaBlockDefaultAllowed", 7); 
    $.Constant({Static:true , Public:false}, "schemaFinalDefaultAllowed", 30); 
    $.Constant({Static:true , Public:false}, "elementBlockAllowed", 7); 
    $.Constant({Static:true , Public:false}, "elementFinalAllowed", 6); 
    $.Constant({Static:true , Public:false}, "simpleTypeFinalAllowed", 28); 
    $.Constant({Static:true , Public:false}, "complexTypeBlockAllowed", 6); 
    $.Constant({Static:true , Public:false}, "complexTypeFinalAllowed", 6); 
    $.Field({Static:false, Public:false}, "schema", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    $.Field({Static:false, Public:false}, "targetNamespace", $.String); 
    $.Field({Static:false, Public:false}, "buildinIncluded", $.Boolean); 
    $.Field({Static:false, Public:false}, "elementFormDefault", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
    $.Field({Static:false, Public:false}, "attributeFormDefault", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
    $.Field({Static:false, Public:false}, "blockDefault", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
    $.Field({Static:false, Public:false}, "finalDefault", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
    $.Field({Static:false, Public:false}, "schemaLocations", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "referenceNamespaces", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "Xmlns", $.String); 
    $.Field({Static:false, Public:false}, "xmlResolver", $asm05.TypeRef("System.Xml.XmlResolver")); 
    $.Property({Static:false, Public:false}, "XmlResolver", $asm05.TypeRef("System.Xml.XmlResolver"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.SchemaCollectionPreprocessor/Compositor", false, {
    Root: 0, 
    Include: 1, 
    Import: 2
  }, false
);

(function SchemaElementDecl$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.SchemaDeclBase"), "System.Xml.Schema.SchemaElementDecl", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $.String, 
          $asm05.TypeRef("System.Xml.Schema.SchemaType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAttDef", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckAttributes", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Hashtable"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateAnyTypeElementDecl", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndAddAttDef", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttDefs", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Block", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Constraints", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentValidator", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.ContentValidator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultAttDefs", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.SchemaAttDef")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasDefaultAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasNonCDataAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasRequiredAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAbstract", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsIdDeclared", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNillable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNotationDeclared", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProhibitedAttributes", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttDef", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaAttDef"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Block", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Constraints", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContentValidator", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ContentValidator")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HasNonCDataAttribute", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HasRequiredAttribute", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsAbstract", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsIdDeclared", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNillable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNotationDeclared", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.Field({Static:false, Public:false}, "contentValidator", $asm05.TypeRef("System.Xml.Schema.ContentValidator")); 
    $.Field({Static:false, Public:false}, "attdefs", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "prohibitedAttributes", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "tmpDefaultAttdefs", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "defaultAttdefs", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.SchemaAttDef")])); 
    $.Field({Static:false, Public:false}, "isAbstract", $.Boolean); 
    $.Field({Static:false, Public:false}, "isNillable", $.Boolean); 
    $.Field({Static:false, Public:false}, "block", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
    $.Field({Static:false, Public:false}, "isIdDeclared", $.Boolean); 
    $.Field({Static:false, Public:false}, "isNotationDeclared", $.Boolean); 
    $.Field({Static:false, Public:false}, "hasRequiredAttribute", $.Boolean); 
    $.Field({Static:false, Public:false}, "hasNonCDataAttribute", $.Boolean); 
    $.Field({Static:false, Public:false}, "anyAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
    $.Field({Static:false, Public:false}, "constraints", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")])); 
    $.Field({Static:false, Public:false}, "schemaElement", $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
    $.Property({Static:false, Public:true }, "IsAbstract", $.Boolean);

    $.Property({Static:false, Public:true }, "IsNillable", $.Boolean);

    $.Property({Static:false, Public:true }, "Block", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Property({Static:false, Public:true }, "IsIdDeclared", $.Boolean);

    $.Property({Static:false, Public:true }, "IsNotationDeclared", $.Boolean);

    $.Property({Static:false, Public:true }, "HasDefaultAttribute", $.Boolean);

    $.Property({Static:false, Public:true }, "HasRequiredAttribute", $.Boolean);

    $.Property({Static:false, Public:true }, "HasNonCDataAttribute", $.Boolean);

    $.Property({Static:false, Public:true }, "ContentValidator", $asm05.TypeRef("System.Xml.Schema.ContentValidator"));

    $.Property({Static:false, Public:true }, "AnyAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"));

    $.Property({Static:false, Public:true }, "Constraints", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")]));

    $.Property({Static:false, Public:true }, "SchemaElement", $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Property({Static:false, Public:true }, "AttDefs", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "DefaultAttDefs", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.SchemaAttDef")]));

    $.Property({Static:false, Public:true }, "ProhibitedAttributes", $asm01.TypeRef("System.Collections.Hashtable"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SchemaEntity$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.SchemaEntity", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DeclaredInExternal", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DeclaredURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsExternal", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsParEntity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsProcessed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Line", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NData", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Pos", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Pubid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Text", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Url", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPredefinedEntity", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseURI", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DeclaredInExternal", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DeclaredURI", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsExternal", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsParEntity", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsProcessed", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Line", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NData", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Pos", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Pubid", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Text", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Url", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "$name", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "url", $.String); 
    $.Field({Static:false, Public:false}, "pubid", $.String); 
    $.Field({Static:false, Public:false}, "text", $.String); 
    $.Field({Static:false, Public:false}, "ndata", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "lineNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "linePosition", $.Int32); 
    $.Field({Static:false, Public:false}, "isParameter", $.Boolean); 
    $.Field({Static:false, Public:false}, "isExternal", $.Boolean); 
    $.Field({Static:false, Public:false}, "isProcessed", $.Boolean); 
    $.Field({Static:false, Public:false}, "isDeclaredInExternal", $.Boolean); 
    $.Field({Static:false, Public:false}, "baseURI", $.String); 
    $.Field({Static:false, Public:false}, "declaredURI", $.String); 
    $.Property({Static:false, Public:false}, "Name", $asm05.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "Url", $.String);

    $.Property({Static:false, Public:false}, "Pubid", $.String);

    $.Property({Static:false, Public:false}, "IsProcessed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsExternal", $.Boolean);

    $.Property({Static:false, Public:false}, "DeclaredInExternal", $.Boolean);

    $.Property({Static:false, Public:false}, "IsParEntity", $.Boolean);

    $.Property({Static:false, Public:false}, "NData", $asm05.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "Text", $.String);

    $.Property({Static:false, Public:false}, "Line", $.Int32);

    $.Property({Static:false, Public:false}, "Pos", $.Int32);

    $.Property({Static:false, Public:false}, "BaseURI", $.String);

    $.Property({Static:false, Public:false}, "DeclaredURI", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.AttributeMatchState", false, {
    AttributeFound: 0, 
    AnyIdAttributeFound: 1, 
    UndeclaredElementAndAttribute: 2, 
    UndeclaredAttribute: 3, 
    AnyAttributeLax: 4, 
    AnyAttributeSkip: 5, 
    ProhibitedAnyAttribute: 6, 
    ProhibitedAttribute: 7, 
    AttributeNameMismatch: 8, 
    ValidateAttributeInvalidCall: 9
  }, false
);

(function SchemaInfo$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.SchemaInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Type, $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Finish", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeDecls", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DocTypeName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementDecls", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementDeclsByType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GeneralEntities", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDefaultAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasNonCDataAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Notations", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParameterEntities", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetNamespaces", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UndeclaredElementDecls", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttributeXdr", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaAttDef"), [$asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"), $asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttributeXsd", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaAttDef"), [
          $asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"), $asm05.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Schema.AttributeMatchState")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttributeXsd", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaAttDef"), [
          $asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"), $asm05.TypeRef("System.Xml.XmlQualifiedName"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetElementDecl", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypeDecl", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasSchema", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DocTypeName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ErrorCount", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasDefaultAttributes", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasNonCDataAttributes", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaType")], [])
    );

    $.Field({Static:false, Public:false}, "schemaType", $asm05.TypeRef("System.Xml.Schema.SchemaType")); 
    $.Field({Static:false, Public:false}, "targetNamespaces", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "elementDecls", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "undeclaredElementDecls", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "elementDeclsByType", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "attributeDecls", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "generalEntities", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "parameterEntities", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "notations", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "docTypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "errorCount", $.Int32); 
    $.Field({Static:false, Public:false}, "hasNonCDataAttributes", $.Boolean); 
    $.Field({Static:false, Public:false}, "hasDefaultAttributes", $.Boolean); 
    $.Property({Static:false, Public:true }, "SchemaType", $asm05.TypeRef("System.Xml.Schema.SchemaType"));

    $.Property({Static:false, Public:true }, "TargetNamespaces", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "ElementDecls", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "UndeclaredElementDecls", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "ElementDeclsByType", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "AttributeDecls", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "GeneralEntities", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "ParameterEntities", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Notations", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "DocTypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:true }, "ErrorCount", $.Int32);

    $.Property({Static:false, Public:false}, "HasDefaultAttributes", $.Boolean);

    $.Property({Static:false, Public:false}, "HasNonCDataAttributes", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SchemaNames$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.SchemaNames", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateTokenToQNameTable", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm05.TypeRef("System.Xml.Schema.SchemaNames/Token")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsXDRRoot", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsXSDRoot", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SchemaTypeFromRoot", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaType"), [$.String, $.String], [])
    );

    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:true }, "NsDataType", $.String); 
    $.Field({Static:false, Public:true }, "NsDataTypeAlias", $.String); 
    $.Field({Static:false, Public:true }, "NsDataTypeOld", $.String); 
    $.Field({Static:false, Public:true }, "NsXml", $.String); 
    $.Field({Static:false, Public:true }, "NsXmlNs", $.String); 
    $.Field({Static:false, Public:true }, "NsXdr", $.String); 
    $.Field({Static:false, Public:true }, "NsXdrAlias", $.String); 
    $.Field({Static:false, Public:true }, "NsXs", $.String); 
    $.Field({Static:false, Public:true }, "NsXsi", $.String); 
    $.Field({Static:false, Public:true }, "XsiType", $.String); 
    $.Field({Static:false, Public:true }, "XsiNil", $.String); 
    $.Field({Static:false, Public:true }, "XsiSchemaLocation", $.String); 
    $.Field({Static:false, Public:true }, "XsiNoNamespaceSchemaLocation", $.String); 
    $.Field({Static:false, Public:true }, "XsdSchema", $.String); 
    $.Field({Static:false, Public:true }, "XdrSchema", $.String); 
    $.Field({Static:false, Public:true }, "QnPCData", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXml", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXmlNs", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnDtDt", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXmlLang", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnType", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnMaxOccurs", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnMinOccurs", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnInfinite", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnModel", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnOpen", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnClosed", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnContent", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnMixed", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnEmpty", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnEltOnly", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnTextOnly", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnOrder", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnSeq", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnOne", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnMany", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnRequired", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnYes", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnNo", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnString", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnID", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnIDRef", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnIDRefs", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnEntity", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnEntities", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnNmToken", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnNmTokens", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnEnumeration", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnDefault", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXdrSchema", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXdrElementType", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXdrElement", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXdrGroup", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXdrAttributeType", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXdrAttribute", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXdrDataType", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXdrDescription", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXdrExtends", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXdrAliasSchema", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnDtType", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnDtValues", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnDtMaxLength", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnDtMinLength", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnDtMax", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnDtMin", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnDtMinExclusive", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnDtMaxExclusive", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnTargetNamespace", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnVersion", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnFinalDefault", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnBlockDefault", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnFixed", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnAbstract", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnBlock", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnSubstitutionGroup", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnFinal", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnNillable", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnRef", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnBase", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnDerivedBy", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnNamespace", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnProcessContents", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnRefer", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnPublic", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnSystem", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnSchemaLocation", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnValue", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnUse", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnForm", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnElementFormDefault", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnAttributeFormDefault", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnItemType", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnMemberTypes", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXPath", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdSchema", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdAnnotation", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdInclude", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdImport", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdElement", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdAttribute", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdAttributeGroup", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdAnyAttribute", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdGroup", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdAll", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdChoice", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdSequence", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdAny", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdNotation", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdSimpleType", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdComplexType", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdUnique", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdKey", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdKeyRef", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdSelector", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdField", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdMinExclusive", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdMinInclusive", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdMaxInclusive", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdMaxExclusive", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdTotalDigits", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdFractionDigits", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdLength", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdMinLength", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdMaxLength", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdEnumeration", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdPattern", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdDocumentation", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdAppinfo", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnSource", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdComplexContent", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdSimpleContent", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdRestriction", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdExtension", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdUnion", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdList", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdWhiteSpace", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdRedefine", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:true }, "QnXsdAnyType", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "TokenToQName", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlQualifiedName")])); 
    $.Property({Static:false, Public:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.SchemaNames/Token", false, {
    Empty: 0, 
    SchemaName: 1, 
    SchemaType: 2, 
    SchemaMaxOccurs: 3, 
    SchemaMinOccurs: 4, 
    SchemaInfinite: 5, 
    SchemaModel: 6, 
    SchemaOpen: 7, 
    SchemaClosed: 8, 
    SchemaContent: 9, 
    SchemaMixed: 10, 
    SchemaEmpty: 11, 
    SchemaElementOnly: 12, 
    SchemaTextOnly: 13, 
    SchemaOrder: 14, 
    SchemaSeq: 15, 
    SchemaOne: 16, 
    SchemaMany: 17, 
    SchemaRequired: 18, 
    SchemaYes: 19, 
    SchemaNo: 20, 
    SchemaString: 21, 
    SchemaId: 22, 
    SchemaIdref: 23, 
    SchemaIdrefs: 24, 
    SchemaEntity: 25, 
    SchemaEntities: 26, 
    SchemaNmtoken: 27, 
    SchemaNmtokens: 28, 
    SchemaEnumeration: 29, 
    SchemaDefault: 30, 
    XdrRoot: 31, 
    XdrElementType: 32, 
    XdrElement: 33, 
    XdrGroup: 34, 
    XdrAttributeType: 35, 
    XdrAttribute: 36, 
    XdrDatatype: 37, 
    XdrDescription: 38, 
    XdrExtends: 39, 
    SchemaXdrRootAlias: 40, 
    SchemaDtType: 41, 
    SchemaDtValues: 42, 
    SchemaDtMaxLength: 43, 
    SchemaDtMinLength: 44, 
    SchemaDtMax: 45, 
    SchemaDtMin: 46, 
    SchemaDtMinExclusive: 47, 
    SchemaDtMaxExclusive: 48, 
    SchemaTargetNamespace: 49, 
    SchemaVersion: 50, 
    SchemaFinalDefault: 51, 
    SchemaBlockDefault: 52, 
    SchemaFixed: 53, 
    SchemaAbstract: 54, 
    SchemaBlock: 55, 
    SchemaSubstitutionGroup: 56, 
    SchemaFinal: 57, 
    SchemaNillable: 58, 
    SchemaRef: 59, 
    SchemaBase: 60, 
    SchemaDerivedBy: 61, 
    SchemaNamespace: 62, 
    SchemaProcessContents: 63, 
    SchemaRefer: 64, 
    SchemaPublic: 65, 
    SchemaSystem: 66, 
    SchemaSchemaLocation: 67, 
    SchemaValue: 68, 
    SchemaSource: 69, 
    SchemaAttributeFormDefault: 70, 
    SchemaElementFormDefault: 71, 
    SchemaUse: 72, 
    SchemaForm: 73, 
    XsdSchema: 74, 
    XsdAnnotation: 75, 
    XsdInclude: 76, 
    XsdImport: 77, 
    XsdElement: 78, 
    XsdAttribute: 79, 
    xsdAttributeGroup: 80, 
    XsdAnyAttribute: 81, 
    XsdGroup: 82, 
    XsdAll: 83, 
    XsdChoice: 84, 
    XsdSequence: 85, 
    XsdAny: 86, 
    XsdNotation: 87, 
    XsdSimpleType: 88, 
    XsdComplexType: 89, 
    XsdUnique: 90, 
    XsdKey: 91, 
    XsdKeyref: 92, 
    XsdSelector: 93, 
    XsdField: 94, 
    XsdMinExclusive: 95, 
    XsdMinInclusive: 96, 
    XsdMaxExclusive: 97, 
    XsdMaxInclusive: 98, 
    XsdTotalDigits: 99, 
    XsdFractionDigits: 100, 
    XsdLength: 101, 
    XsdMinLength: 102, 
    XsdMaxLength: 103, 
    XsdEnumeration: 104, 
    XsdPattern: 105, 
    XsdDocumentation: 106, 
    XsdAppInfo: 107, 
    XsdComplexContent: 108, 
    XsdComplexContentExtension: 109, 
    XsdComplexContentRestriction: 110, 
    XsdSimpleContent: 111, 
    XsdSimpleContentExtension: 112, 
    XsdSimpleContentRestriction: 113, 
    XsdSimpleTypeList: 114, 
    XsdSimpleTypeRestriction: 115, 
    XsdSimpleTypeUnion: 116, 
    XsdWhitespace: 117, 
    XsdRedefine: 118, 
    SchemaItemType: 119, 
    SchemaMemberTypes: 120, 
    SchemaXPath: 121, 
    XmlLang: 122
  }, false
);

(function SchemaNamespaceManager$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlNamespaceManager"), "System.Xml.Schema.SchemaNamespaceManager", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "node", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SchemaNotation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.SchemaNotation", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Pubid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SystemLiteral", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Pubid", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SystemLiteral", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "SYSTEM", 0); 
    $.Constant({Static:true , Public:false}, "PUBLIC", 1); 
    $.Field({Static:false, Public:false}, "$name", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "systemLiteral", $.String); 
    $.Field({Static:false, Public:false}, "pubid", $.String); 
    $.Property({Static:false, Public:false}, "Name", $asm05.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "SystemLiteral", $.String);

    $.Property({Static:false, Public:false}, "Pubid", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.SchemaType", false, {
    None: 0, 
    DTD: 1, 
    XDR: 2, 
    XSD: 3
  }, false
);

(function ValidationEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.EventArgs"), "System.Xml.Schema.ValidationEventArgs", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Exception", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaException"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Message", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Severity", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSeverityType"), [], [])
    );

    $.Field({Static:false, Public:false}, "ex", $asm05.TypeRef("System.Xml.Schema.XmlSchemaException")); 
    $.Field({Static:false, Public:false}, "severity", $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")); 
    $.Property({Static:false, Public:true }, "Severity", $asm05.TypeRef("System.Xml.Schema.XmlSeverityType"));

    $.Property({Static:false, Public:true }, "Exception", $asm05.TypeRef("System.Xml.Schema.XmlSchemaException"));

    $.Property({Static:false, Public:true }, "Message", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.Xml.Schema.ValidationEventHandler", true, []);

(function StateUnion$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.Schema.StateUnion", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "State", $.Int32); 
    $.Field({Static:false, Public:true }, "AllElementsRequired", $.Int32); 
    $.Field({Static:false, Public:true }, "CurPosIndex", $.Int32); 
    $.Field({Static:false, Public:true }, "NumberOfRunningPos", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ValidationState$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.ValidationState", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "IsNill", $.Boolean); 
    $.Field({Static:false, Public:true }, "IsDefault", $.Boolean); 
    $.Field({Static:false, Public:true }, "NeedValidateChildren", $.Boolean); 
    $.Field({Static:false, Public:true }, "CheckRequiredAttribute", $.Boolean); 
    $.Field({Static:false, Public:true }, "ValidationSkipped", $.Boolean); 
    $.Field({Static:false, Public:true }, "Depth", $.Int32); 
    $.Field({Static:false, Public:true }, "ProcessContents", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")); 
    $.Field({Static:false, Public:true }, "Validity", $asm05.TypeRef("System.Xml.Schema.XmlSchemaValidity")); 
    $.Field({Static:false, Public:true }, "ElementDecl", $asm05.TypeRef("System.Xml.Schema.SchemaElementDecl")); 
    $.Field({Static:false, Public:true }, "ElementDeclBeforeXsi", $asm05.TypeRef("System.Xml.Schema.SchemaElementDecl")); 
    $.Field({Static:false, Public:true }, "LocalName", $.String); 
    $.Field({Static:false, Public:true }, "Namespace", $.String); 
    $.Field({Static:false, Public:true }, "Constr", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.ConstraintStruct")])); 
    $.Field({Static:false, Public:true }, "CurrentState", $asm05.TypeRef("System.Xml.Schema.StateUnion")); 
    $.Field({Static:false, Public:true }, "HasMatched", $.Boolean); 
    $.Field({Static:false, Public:true }, "CurPos", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.BitSet")])); 
    $.Field({Static:false, Public:true }, "AllElementsSet", $asm05.TypeRef("System.Xml.Schema.BitSet")); 
    $.Field({Static:false, Public:true }, "RunningPositions", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.Schema.RangePositionInfo")])); 
    $.Field({Static:false, Public:true }, "TooComplex", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XdrBuilder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.SchemaBuilder"), "System.Xml.Schema.XdrBuilder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.XmlNamespaceManager"), 
          $asm05.TypeRef("System.Xml.Schema.SchemaInfo"), $.String, 
          $asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.Schema.SchemaNames"), 
          $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddOrder", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDatatype", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDefaultAttValue", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareMinMaxLength", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndChildren", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetContent", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetModel", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextState", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOrder", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleMinMax", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.ParticleContentValidator"), $.UInt32, 
          $.UInt32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsContentParsed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsGlobal", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSkipableAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSkipableElement", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsXdrSchema", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsYes", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadSchema", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseDtMaxLength", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.Object, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseDtMinLength", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.Object, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseInteger", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseMaxOccurs", 
      new JSIL.MethodSignature($.UInt32, [$.Object, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseMinOccurs", 
      new JSIL.MethodSignature($.UInt32, [$.Object, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopGroupInfo", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessElement", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessMarkup", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNode")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushGroupInfo", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributePresence", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaAttDef"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartChildren", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BeginAttribute", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BeginAttributeType", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BeginElementType", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BeginRoot", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttribute_Default", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttribute_Required", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttribute_Type", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_Default", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_DtMaxLength", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_DtMinLength", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_DtType", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_DtValues", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_Name", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_Required", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElement_MaxOccurs", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElement_MinOccurs", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElement_Type", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_Content", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_DtMaxLength", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_DtMinLength", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_DtType", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_DtValues", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_Model", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_Name", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_Order", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildGroup_MaxOccurs", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildGroup_MinOccurs", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildGroup_Order", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildRoot_ID", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildRoot_Name", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "XDR_CheckAttributeDefault", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XdrBuilder/DeclBaseInfo"), $asm05.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_EndAttribute", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_EndAttributeDtType", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_EndAttributeType", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_EndElement", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_EndElementDtType", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_EndElementType", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_EndGroup", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_EndRoot", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_InitAttribute", 
      new JSIL.MethodSignature(null, [$.Type, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_InitAttributeDtType", 
      new JSIL.MethodSignature(null, [$.Type, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_InitAttributeType", 
      new JSIL.MethodSignature(null, [$.Type, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_InitElement", 
      new JSIL.MethodSignature(null, [$.Type, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_InitElementDtType", 
      new JSIL.MethodSignature(null, [$.Type, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_InitElementType", 
      new JSIL.MethodSignature(null, [$.Type, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_InitGroup", 
      new JSIL.MethodSignature(null, [$.Type, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_InitRoot", 
      new JSIL.MethodSignature(null, [$.Type, $.Object], [])
    );

    $.Constant({Static:true , Public:false}, "XdrSchema", 1); 
    $.Constant({Static:true , Public:false}, "XdrElementType", 2); 
    $.Constant({Static:true , Public:false}, "XdrAttributeType", 3); 
    $.Constant({Static:true , Public:false}, "XdrElement", 4); 
    $.Constant({Static:true , Public:false}, "XdrAttribute", 5); 
    $.Constant({Static:true , Public:false}, "XdrGroup", 6); 
    $.Constant({Static:true , Public:false}, "XdrElementDatatype", 7); 
    $.Constant({Static:true , Public:false}, "XdrAttributeDatatype", 8); 
    $.Constant({Static:true , Public:false}, "SchemaFlagsNs", 256); 
    $.Constant({Static:true , Public:false}, "StackIncrement", 10); 
    $.Constant({Static:true , Public:false}, "SchemaOrderNone", 0); 
    $.Constant({Static:true , Public:false}, "SchemaOrderMany", 1); 
    $.Constant({Static:true , Public:false}, "SchemaOrderSequence", 2); 
    $.Constant({Static:true , Public:false}, "SchemaOrderChoice", 3); 
    $.Constant({Static:true , Public:false}, "SchemaOrderAll", 4); 
    $.Constant({Static:true , Public:false}, "SchemaContentNone", 0); 
    $.Constant({Static:true , Public:false}, "SchemaContentEmpty", 1); 
    $.Constant({Static:true , Public:false}, "SchemaContentText", 2); 
    $.Constant({Static:true , Public:false}, "SchemaContentMixed", 3); 
    $.Constant({Static:true , Public:false}, "SchemaContentElement", 4); 
    $.Constant({Static:true , Public:false}, "x_schema", "x-schema:"); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Root_Element", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Root_SubElements", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_ElementType_SubElements", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_AttributeType_SubElements", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Group_SubElements", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Root_Attributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_ElementType_Attributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_AttributeType_Attributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Element_Attributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Attribute_Attributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Group_Attributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_ElementDataType_Attributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_AttributeDataType_Attributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "S_SchemaEntries", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrEntry")])); 
    $.Field({Static:false, Public:false}, "_SchemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo")); 
    $.Field({Static:false, Public:false}, "_TargetNamespace", $.String); 
    $.Field({Static:false, Public:false}, "_reader", $asm05.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "positionInfo", $asm05.TypeRef("System.Xml.PositionInfo")); 
    $.Field({Static:false, Public:false}, "_contentValidator", $asm05.TypeRef("System.Xml.Schema.ParticleContentValidator")); 
    $.Field({Static:false, Public:false}, "_CurState", $asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrEntry")); 
    $.Field({Static:false, Public:false}, "_NextState", $asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrEntry")); 
    $.Field({Static:false, Public:false}, "_StateHistory", $asm05.TypeRef("System.Xml.HWStack")); 
    $.Field({Static:false, Public:false}, "_GroupStack", $asm05.TypeRef("System.Xml.HWStack")); 
    $.Field({Static:false, Public:false}, "_XdrName", $.String); 
    $.Field({Static:false, Public:false}, "_XdrPrefix", $.String); 
    $.Field({Static:false, Public:false}, "_ElementDef", $asm05.TypeRef("System.Xml.Schema.XdrBuilder/ElementContent")); 
    $.Field({Static:false, Public:false}, "_GroupDef", $asm05.TypeRef("System.Xml.Schema.XdrBuilder/GroupContent")); 
    $.Field({Static:false, Public:false}, "_AttributeDef", $asm05.TypeRef("System.Xml.Schema.XdrBuilder/AttributeContent")); 
    $.Field({Static:false, Public:false}, "_UndefinedAttributeTypes", $asm05.TypeRef("System.Xml.Schema.XdrBuilder/DeclBaseInfo")); 
    $.Field({Static:false, Public:false}, "_BaseDecl", $asm05.TypeRef("System.Xml.Schema.XdrBuilder/DeclBaseInfo")); 
    $.Field({Static:false, Public:false}, "_NameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "_SchemaNames", $asm05.TypeRef("System.Xml.Schema.SchemaNames")); 
    $.Field({Static:false, Public:false}, "_CurNsMgr", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Field({Static:false, Public:false}, "_Text", $.String); 
    $.Field({Static:false, Public:false}, "validationEventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "_UndeclaredElements", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "xmlResolver", $asm05.TypeRef("System.Xml.XmlResolver")); 
    $.Property({Static:false, Public:false}, "XmlResolver", $asm05.TypeRef("System.Xml.XmlResolver"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DeclBaseInfo$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XdrBuilder/DeclBaseInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "_Name", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "_Prefix", $.String); 
    $.Field({Static:false, Public:false}, "_TypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "_TypePrefix", $.String); 
    $.Field({Static:false, Public:false}, "_Default", $.Object); 
    $.Field({Static:false, Public:false}, "_Revises", $.Object); 
    $.Field({Static:false, Public:false}, "_MaxOccurs", $.UInt32); 
    $.Field({Static:false, Public:false}, "_MinOccurs", $.UInt32); 
    $.Field({Static:false, Public:false}, "_Checking", $.Boolean); 
    $.Field({Static:false, Public:false}, "_ElementDecl", $asm05.TypeRef("System.Xml.Schema.SchemaElementDecl")); 
    $.Field({Static:false, Public:false}, "_Attdef", $asm05.TypeRef("System.Xml.Schema.SchemaAttDef")); 
    $.Field({Static:false, Public:false}, "_Next", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function GroupContent$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XdrBuilder/GroupContent", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Copy", 
      new JSIL.MethodSignature(null, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Copy", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.Field({Static:false, Public:false}, "_MinVal", $.UInt32); 
    $.Field({Static:false, Public:false}, "_MaxVal", $.UInt32); 
    $.Field({Static:false, Public:false}, "_HasMaxAttr", $.Boolean); 
    $.Field({Static:false, Public:false}, "_HasMinAttr", $.Boolean); 
    $.Field({Static:false, Public:false}, "_Order", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ElementContent$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XdrBuilder/ElementContent", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "_ElementDecl", $asm05.TypeRef("System.Xml.Schema.SchemaElementDecl")); 
    $.Field({Static:false, Public:false}, "_ContentAttr", $.Int32); 
    $.Field({Static:false, Public:false}, "_OrderAttr", $.Int32); 
    $.Field({Static:false, Public:false}, "_MasterGroupRequired", $.Boolean); 
    $.Field({Static:false, Public:false}, "_ExistTerminal", $.Boolean); 
    $.Field({Static:false, Public:false}, "_AllowDataType", $.Boolean); 
    $.Field({Static:false, Public:false}, "_HasDataType", $.Boolean); 
    $.Field({Static:false, Public:false}, "_HasType", $.Boolean); 
    $.Field({Static:false, Public:false}, "_EnumerationRequired", $.Boolean); 
    $.Field({Static:false, Public:false}, "_MinVal", $.UInt32); 
    $.Field({Static:false, Public:false}, "_MaxVal", $.UInt32); 
    $.Field({Static:false, Public:false}, "_MaxLength", $.UInt32); 
    $.Field({Static:false, Public:false}, "_MinLength", $.UInt32); 
    $.Field({Static:false, Public:false}, "_AttDefList", $asm01.TypeRef("System.Collections.Hashtable")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AttributeContent$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XdrBuilder/AttributeContent", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "_AttDef", $asm05.TypeRef("System.Xml.Schema.SchemaAttDef")); 
    $.Field({Static:false, Public:false}, "_Name", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "_Prefix", $.String); 
    $.Field({Static:false, Public:false}, "_Required", $.Boolean); 
    $.Field({Static:false, Public:false}, "_MinVal", $.UInt32); 
    $.Field({Static:false, Public:false}, "_MaxVal", $.UInt32); 
    $.Field({Static:false, Public:false}, "_MaxLength", $.UInt32); 
    $.Field({Static:false, Public:false}, "_MinLength", $.UInt32); 
    $.Field({Static:false, Public:false}, "_EnumerationRequired", $.Boolean); 
    $.Field({Static:false, Public:false}, "_HasDataType", $.Boolean); 
    $.Field({Static:false, Public:false}, "_Global", $.Boolean); 
    $.Field({Static:false, Public:false}, "_Default", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.Xml.Schema.XdrBuilder/XdrBuildFunction", false, []);

JSIL.MakeDelegate("System.Xml.Schema.XdrBuilder/XdrInitFunction", false, []);

JSIL.MakeDelegate("System.Xml.Schema.XdrBuilder/XdrBeginChildFunction", false, []);

JSIL.MakeDelegate("System.Xml.Schema.XdrBuilder/XdrEndChildFunction", false, []);

(function XdrAttributeEntry$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XdrBuilder/XdrAttributeEntry", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.SchemaNames/Token"), $asm05.TypeRef("System.Xml.XmlTokenizedType"), 
          $asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrBuildFunction")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.SchemaNames/Token"), $asm05.TypeRef("System.Xml.XmlTokenizedType"), 
          $.Int32, $asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrBuildFunction")
        ], [])
    );

    $.Field({Static:false, Public:false}, "_Attribute", $asm05.TypeRef("System.Xml.Schema.SchemaNames/Token")); 
    $.Field({Static:false, Public:false}, "_SchemaFlags", $.Int32); 
    $.Field({Static:false, Public:false}, "_Datatype", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
    $.Field({Static:false, Public:false}, "_BuildFunc", $asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrBuildFunction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XdrEntry$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XdrBuilder/XdrEntry", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.SchemaNames/Token"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")]), $asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrInitFunction"), 
          $asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrBeginChildFunction"), $asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrEndChildFunction"), 
          $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:false}, "_Name", $asm05.TypeRef("System.Xml.Schema.SchemaNames/Token")); 
    $.Field({Static:false, Public:false}, "_NextStates", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "_Attributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrAttributeEntry")])); 
    $.Field({Static:false, Public:false}, "_InitFunc", $asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrInitFunction")); 
    $.Field({Static:false, Public:false}, "_BeginChildFunc", $asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrBeginChildFunction")); 
    $.Field({Static:false, Public:false}, "_EndChildFunc", $asm05.TypeRef("System.Xml.Schema.XdrBuilder/XdrEndChildFunction")); 
    $.Field({Static:false, Public:false}, "_AllowText", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XdrValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.BaseValidator"), "System.Xml.Schema.XdrValidator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.BaseValidator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlValidatingReaderImpl"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaCollection"), 
          $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddID", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckDefaultValue", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.Schema.SchemaAttDef"), 
          $asm05.TypeRef("System.Xml.Schema.SchemaInfo"), $asm05.TypeRef("System.Xml.XmlNamespaceManager"), 
          $asm05.TypeRef("System.Xml.XmlNameTable"), $.Object, 
          $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), $.String, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForwardRefs", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckValue", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindId", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasSchema", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsInlineSchemaStarted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreserveWhitespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadSchema", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadSchemaFromLocation", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessInlineSchema", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessTokenizedType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlTokenizedType"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "QualifiedName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThoroughGetElementDecl", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateChildElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEndStartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateStartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "STACK_INCREMENT", 10); 
    $.Constant({Static:true , Public:false}, "x_schema", "x-schema:"); 
    $.Field({Static:false, Public:false}, "validationStack", $asm05.TypeRef("System.Xml.HWStack")); 
    $.Field({Static:false, Public:false}, "attPresence", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "$name", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "nsManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Field({Static:false, Public:false}, "isProcessContents", $.Boolean); 
    $.Field({Static:false, Public:false}, "IDs", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "idRefListHead", $asm05.TypeRef("System.Xml.Schema.IdRefNode")); 
    $.Field({Static:false, Public:false}, "inlineSchemaParser", $asm05.TypeRef("System.Xml.Schema.Parser")); 
    $.Property({Static:false, Public:false}, "IsInlineSchemaStarted", $.Boolean);

    $.Property({Static:false, Public:false}, "HasSchema", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlAtomicValue$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XPath.XPathItem"), "System.Xml.Schema.XmlAtomicValue", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Double], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Object, 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNode", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypedValue", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPrefixFromQName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValueAs", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.Field({Static:false, Public:false}, "xmlType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType")); 
    $.Field({Static:false, Public:false}, "objVal", $.Object); 
    $.Field({Static:false, Public:false}, "clrType", $asm01.TypeRef("System.TypeCode")); 
    $.Field({Static:false, Public:false}, "unionVal", $asm05.TypeRef("System.Xml.Schema.XmlAtomicValue/Union")); 
    $.Field({Static:false, Public:false}, "nsPrefix", $asm05.TypeRef("System.Xml.Schema.XmlAtomicValue/NamespacePrefixForQName")); 
    $.Property({Static:false, Public:true , Virtual:true }, "IsNode", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypedValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsBoolean", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDateTime", $asm01.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDouble", $.Double);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsInt", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsLong", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.ICloneable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Union$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.Schema.XmlAtomicValue/Union", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "boolVal", $.Boolean); 
    $.Field({Static:false, Public:true }, "dblVal", $.Double); 
    $.Field({Static:false, Public:true }, "i64Val", $.Int64); 
    $.Field({Static:false, Public:true }, "i32Val", $.Int32); 
    $.Field({Static:false, Public:true }, "dtVal", $asm01.TypeRef("System.DateTime")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NamespacePrefixForQName$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlAtomicValue/NamespacePrefixForQName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm05.TypeRef("System.Xml.XmlNamespaceScope")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Field({Static:false, Public:true }, "prefix", $.String); 
    $.Field({Static:false, Public:true }, "ns", $.String); 
    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaObject$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaObject", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddAnnotation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IdAttribute", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsProcessing", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameAttribute", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parent", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceUri", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAdd", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClear", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemove", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IdAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsProcessing", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LineNumber", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LinePosition", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NameAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespaces", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Parent", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SourceUri", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetUnhandledAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")])], [])
    );

    $.Field({Static:false, Public:false}, "lineNum", $.Int32); 
    $.Field({Static:false, Public:false}, "linePos", $.Int32); 
    $.Field({Static:false, Public:false}, "sourceUri", $.String); 
    $.Field({Static:false, Public:false}, "namespaces", $asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")); 
    $.Field({Static:false, Public:false}, "parent", $.Type); 
    $.Field({Static:false, Public:false}, "isProcessing", $.Boolean); 
    $.Property({Static:false, Public:true }, "LineNumber", $.Int32)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "SourceUri", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Parent", $.Type)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Namespaces", $asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlNamespaceDeclarationsAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IdAttribute", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "IsProcessing", $.Boolean)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchema$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), "System.Xml.Schema.XmlSchema", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddAnnotation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCompiledInfo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    )
      .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202"]; });

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm05.TypeRef("System.Xml.XmlResolver")], [])
    )
      .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202"]; });

    $.ExternalMethod({Static:false, Public:false}, "CompileSchema", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaCollection"), $asm05.TypeRef("System.Xml.XmlResolver"), 
          $asm05.TypeRef("System.Xml.Schema.SchemaInfo"), $.String, 
          $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSchemaInSet", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeepClone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeFormDefault", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeGroups", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseUri", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Uri"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BlockDefault", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Document", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDocument"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementFormDefault", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Elements", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FinalDefault", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Groups", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IdAttribute", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IdentityConstraints", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Ids", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImportedNamespaces", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImportedSchemas", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Includes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsChameleon", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsCompiled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCompiledBySet", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPreprocessed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRedefined", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Notations", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaId", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaTypes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetNamespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnhandledAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExternalSchemasList", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.IList"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.IO.TextReader"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AttributeFormDefault", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseUri", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Uri")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BlockDefault", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ElementFormDefault", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ErrorCount", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FinalDefault", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IdAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsChameleon", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsCompiledBySet", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsPreprocessed", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsRedefined", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetNamespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UnhandledAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Version", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetIsCompiled", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetUnhandledAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream"), $asm05.TypeRef("System.Xml.XmlNamespaceManager")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter"), $asm05.TypeRef("System.Xml.XmlNamespaceManager")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter"), $asm05.TypeRef("System.Xml.XmlNamespaceManager")], [])
    );

    $.Constant({Static:true , Public:true }, "Namespace", "http://www.w3.org/2001/XMLSchema"); 
    $.Constant({Static:true , Public:true }, "InstanceNamespace", "http://www.w3.org/2001/XMLSchema-instance"); 
    $.Field({Static:false, Public:false}, "attributeFormDefault", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
    $.Field({Static:false, Public:false}, "elementFormDefault", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
    $.Field({Static:false, Public:false}, "blockDefault", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
    $.Field({Static:false, Public:false}, "finalDefault", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
    $.Field({Static:false, Public:false}, "targetNs", $.String); 
    $.Field({Static:false, Public:false}, "version", $.String); 
    $.Field({Static:false, Public:false}, "includes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Field({Static:false, Public:false}, "items", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Field({Static:false, Public:false}, "id", $.String); 
    $.Field({Static:false, Public:false}, "moreAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")])); 
    $.Field({Static:false, Public:false}, "isCompiled", $.Boolean); 
    $.Field({Static:false, Public:false}, "isCompiledBySet", $.Boolean); 
    $.Field({Static:false, Public:false}, "isPreprocessed", $.Boolean); 
    $.Field({Static:false, Public:false}, "isRedefined", $.Boolean); 
    $.Field({Static:false, Public:false}, "errorCount", $.Int32); 
    $.Field({Static:false, Public:false}, "attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "attributeGroups", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "elements", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "types", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "groups", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "notations", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "identityConstraints", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:true , Public:false}, "globalIdCounter", $.Int32, -1); 
    $.Field({Static:false, Public:false}, "importedSchemas", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "importedNamespaces", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "schemaId", $.Int32); 
    $.Field({Static:false, Public:false}, "baseUri", $asm02.TypeRef("System.Uri")); 
    $.Field({Static:false, Public:false}, "isChameleon", $.Boolean); 
    $.Field({Static:false, Public:false}, "ids", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "document", $asm05.TypeRef("System.Xml.XmlDocument")); 
    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Property({Static:false, Public:true }, "AttributeFormDefault", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"))
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm05.System.Xml.Schema.XmlSchemaForm.None]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["attributeFormDefault"]; });

    $.Property({Static:false, Public:true }, "BlockDefault", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["blockDefault"]; })
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm05.System.Xml.Schema.XmlSchemaDerivationMethod.None]; });

    $.Property({Static:false, Public:true }, "FinalDefault", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm05.System.Xml.Schema.XmlSchemaDerivationMethod.None]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["finalDefault"]; });

    $.Property({Static:false, Public:true }, "ElementFormDefault", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"))
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm05.System.Xml.Schema.XmlSchemaForm.None]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["elementFormDefault"]; });

    $.Property({Static:false, Public:true }, "TargetNamespace", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["targetNamespace"]; });

    $.Property({Static:false, Public:true }, "Version", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["version"]; });

    $.Property({Static:false, Public:true }, "Includes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["redefine", $asm05.System.Xml.Schema.XmlSchemaRedefine.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["include", $asm05.System.Xml.Schema.XmlSchemaInclude.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["import", $asm05.System.Xml.Schema.XmlSchemaImport.__Type__]; });

    $.Property({Static:false, Public:true }, "Items", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["element", $asm05.System.Xml.Schema.XmlSchemaElement.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["annotation", $asm05.System.Xml.Schema.XmlSchemaAnnotation.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm05.System.Xml.Schema.XmlSchemaAttribute.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm05.System.Xml.Schema.XmlSchemaAttributeGroup.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["complexType", $asm05.System.Xml.Schema.XmlSchemaComplexType.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm05.System.Xml.Schema.XmlSchemaSimpleType.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm05.System.Xml.Schema.XmlSchemaGroup.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["notation", $asm05.System.Xml.Schema.XmlSchemaNotation.__Type__]; });

    $.Property({Static:false, Public:true }, "IsCompiled", $.Boolean)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "IsCompiledBySet", $.Boolean)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "IsPreprocessed", $.Boolean)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "IsRedefined", $.Boolean)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "AttributeGroups", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "SchemaTypes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Elements", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Id", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["id"]; });

    $.Property({Static:false, Public:true }, "UnhandledAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")]))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

    $.Property({Static:false, Public:true }, "Groups", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Notations", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "IdentityConstraints", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "BaseUri", $asm02.TypeRef("System.Uri"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "SchemaId", $.Int32)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "IsChameleon", $.Boolean)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Ids", $asm01.TypeRef("System.Collections.Hashtable"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Document", $asm05.TypeRef("System.Xml.XmlDocument"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "ErrorCount", $.Int32)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IdAttribute", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false}, "ImportedSchemas", $asm01.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "ImportedNamespaces", $asm01.TypeRef("System.Collections.ArrayList"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlRootAttribute"), function () { return ["schema"]; });

})();

(function XmlSchemaAnnotated$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), "System.Xml.Schema.XmlSchemaAnnotated", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddAnnotation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Annotation", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IdAttribute", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnhandledAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Annotation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IdAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UnhandledAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetUnhandledAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")])], [])
    );

    $.Field({Static:false, Public:false}, "id", $.String); 
    $.Field({Static:false, Public:false}, "annotation", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")); 
    $.Field({Static:false, Public:false}, "moreAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")])); 
    $.Property({Static:false, Public:true }, "Id", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["id"]; });

    $.Property({Static:false, Public:true }, "Annotation", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["annotation", $asm05.System.Xml.Schema.XmlSchemaAnnotation.__Type__]; });

    $.Property({Static:false, Public:true }, "UnhandledAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")]))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IdAttribute", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaParticle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaParticle", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsMultipleOccurrence", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxOccurs", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxOccursString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinOccurs", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinOccursString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetQualifiedName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxOccurs", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxOccursString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinOccurs", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinOccursString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "minOccurs", $asm01.TypeRef("System.Decimal")); 
    $.Field({Static:false, Public:false}, "maxOccurs", $asm01.TypeRef("System.Decimal")); 
    $.Field({Static:false, Public:false}, "flags", $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle/Occurs")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Empty", $.Type); 
    $.Property({Static:false, Public:true }, "MinOccursString", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["minOccurs"]; });

    $.Property({Static:false, Public:true }, "MaxOccursString", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["maxOccurs"]; });

    $.Property({Static:false, Public:true }, "MinOccurs", $asm01.TypeRef("System.Decimal"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "MaxOccurs", $asm01.TypeRef("System.Decimal"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:false}, "IsMultipleOccurrence", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "NameString", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaParticle/Occurs", false, {
    None: 0, 
    Min: 1, 
    Max: 2
  }, true
);

(function EmptyParticle$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), "System.Xml.Schema.XmlSchemaParticle/EmptyParticle", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "IsEmpty", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaGroupBase$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), "System.Xml.Schema.XmlSchemaGroupBase", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Items", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetItems", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Items", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaAll$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), "System.Xml.Schema.XmlSchemaAll", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Items", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetItems", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.Field({Static:false, Public:false}, "items", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Items", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["element", $asm05.System.Xml.Schema.XmlSchemaElement.__Type__]; });

    $.Property({Static:false, Public:false, Virtual:true }, "IsEmpty", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaAnnotation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), "System.Xml.Schema.XmlSchemaAnnotation", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IdAttribute", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnhandledAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IdAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UnhandledAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetUnhandledAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")])], [])
    );

    $.Field({Static:false, Public:false}, "id", $.String); 
    $.Field({Static:false, Public:false}, "items", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Field({Static:false, Public:false}, "moreAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")])); 
    $.Property({Static:false, Public:true }, "Id", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["id"]; });

    $.Property({Static:false, Public:true }, "Items", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["appinfo", $asm05.System.Xml.Schema.XmlSchemaAppInfo.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["documentation", $asm05.System.Xml.Schema.XmlSchemaDocumentation.__Type__]; });

    $.Property({Static:false, Public:true }, "UnhandledAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")]))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IdAttribute", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaAny$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), "System.Xml.Schema.XmlSchemaAny", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Allows", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildNamespaceList", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildNamespaceListV1Compat", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceList", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.NamespaceList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProcessContents", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProcessContentsCorrect", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResolvedNamespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProcessContents", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")], [])
    );

    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "processContents", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")); 
    $.Field({Static:false, Public:false}, "namespaceList", $asm05.TypeRef("System.Xml.Schema.NamespaceList")); 
    $.Property({Static:false, Public:true }, "Namespace", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["namespace"]; });

    $.Property({Static:false, Public:true }, "ProcessContents", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["processContents"]; })
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm05.System.Xml.Schema.XmlSchemaContentProcessing.None]; });

    $.Property({Static:false, Public:false}, "NamespaceList", $asm05.TypeRef("System.Xml.Schema.NamespaceList"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "ResolvedNamespace", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "ProcessContentsCorrect", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameString", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaAnyAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaAnyAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Allows", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildNamespaceList", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildNamespaceListV1Compat", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceList", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.NamespaceList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProcessContents", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProcessContentsCorrect", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Intersection", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSubset", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProcessContents", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Union", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "processContents", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")); 
    $.Field({Static:false, Public:false}, "namespaceList", $asm05.TypeRef("System.Xml.Schema.NamespaceList")); 
    $.Property({Static:false, Public:true }, "Namespace", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["namespace"]; });

    $.Property({Static:false, Public:true }, "ProcessContents", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm05.System.Xml.Schema.XmlSchemaContentProcessing.None]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["processContents"]; });

    $.Property({Static:false, Public:false}, "NamespaceList", $asm05.TypeRef("System.Xml.Schema.NamespaceList"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "ProcessContentsCorrect", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaAppInfo$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), "System.Xml.Schema.XmlSchemaAppInfo", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Markup", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNode")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Markup", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNode")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Source", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "source", $.String); 
    $.Field({Static:false, Public:false}, "markup", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNode")])); 
    $.Property({Static:false, Public:true }, "Source", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["source"]; });

    $.Property({Static:false, Public:true }, "Markup", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNode")]))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlTextAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttDef", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaAttDef"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeSchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeType", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Datatype", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FixedValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Form", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameAttribute", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RefName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaTypeName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Use", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaUse"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AttDef", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FixedValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Form", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NameAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RefName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaTypeName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Use", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaUse")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributeType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.XmlResolver"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ], [])
    );

    $.Field({Static:false, Public:false}, "defaultValue", $.String); 
    $.Field({Static:false, Public:false}, "fixedValue", $.String); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "form", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
    $.Field({Static:false, Public:false}, "use", $asm05.TypeRef("System.Xml.Schema.XmlSchemaUse")); 
    $.Field({Static:false, Public:false}, "refName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "typeName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "qualifiedName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "type", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Field({Static:false, Public:false}, "attributeType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Field({Static:false, Public:false}, "attDef", $asm05.TypeRef("System.Xml.Schema.SchemaAttDef")); 
    $.Property({Static:false, Public:true }, "DefaultValue", $.String)
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["default"]; });

    $.Property({Static:false, Public:true }, "FixedValue", $.String)
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["fixed"]; });

    $.Property({Static:false, Public:true }, "Form", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"))
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm05.System.Xml.Schema.XmlSchemaForm.None]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["form"]; });

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "RefName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ref"]; });

    $.Property({Static:false, Public:true }, "SchemaTypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["type"]; });

    $.Property({Static:false, Public:true }, "SchemaType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType"]; });

    $.Property({Static:false, Public:true }, "Use", $asm05.TypeRef("System.Xml.Schema.XmlSchemaUse"))
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm05.System.Xml.Schema.XmlSchemaUse.None]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["use"]; });

    $.Property({Static:false, Public:true }, "QualifiedName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "AttributeType", $.Object)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"))
      .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["This property has been deprecated. Please use AttributeSchemaType property that returns a strongly typed attribute type. http://go.microsoft.com/fwlink/?linkid=14202"]; });

    $.Property({Static:false, Public:true }, "AttributeSchemaType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Datatype", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Prefix", $.String);

    $.Property({Static:false, Public:false}, "AttDef", $asm05.TypeRef("System.Xml.Schema.SchemaAttDef"));

    $.Property({Static:false, Public:false}, "HasDefault", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaAttributeGroup$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaAttributeGroup", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttributeUses", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttributeWildcard", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameAttribute", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Redefined", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RedefinedAttributeGroup", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SelfReferenceCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AttributeWildcard", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NameAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Redefined", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SelfReferenceCount", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Field({Static:false, Public:false}, "anyAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
    $.Field({Static:false, Public:false}, "qname", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "redefined", $.Type); 
    $.Field({Static:false, Public:false}, "attributeUses", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "attributeWildcard", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
    $.Field({Static:false, Public:false}, "selfReferenceCount", $.Int32); 
    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "Attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm05.System.Xml.Schema.XmlSchemaAttributeGroupRef.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm05.System.Xml.Schema.XmlSchemaAttribute.__Type__]; });

    $.Property({Static:false, Public:true }, "AnyAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });

    $.Property({Static:false, Public:true }, "QualifiedName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "AttributeUses", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "AttributeWildcard", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "RedefinedAttributeGroup", $.Type)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Redefined", $.Type)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "SelfReferenceCount", $.Int32)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaAttributeGroupRef$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaAttributeGroupRef", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RefName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RefName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.Field({Static:false, Public:false}, "refName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Property({Static:false, Public:true }, "RefName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ref"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaChoice$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), "System.Xml.Schema.XmlSchemaChoice", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Items", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetItems", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.Field({Static:false, Public:false}, "items", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Items", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm05.System.Xml.Schema.XmlSchemaSequence.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm05.System.Xml.Schema.XmlSchemaGroupRef.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["any", $asm05.System.Xml.Schema.XmlSchemaAny.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm05.System.Xml.Schema.XmlSchemaChoice.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["element", $asm05.System.Xml.Schema.XmlSchemaElement.__Type__]; });

    $.Property({Static:false, Public:false, Virtual:true }, "IsEmpty", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [
          $.String, $asm05.TypeRef("System.Xml.XmlReader"), 
          $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$asm05.TypeRef("System.Xml.Schema.XmlSchema"), $asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [
          $.String, $asm05.TypeRef("System.Xml.Schema.SchemaInfo"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [
          $.String, $asm05.TypeRef("System.Xml.Schema.SchemaInfo"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean, 
          $asm05.TypeRef("System.Xml.XmlResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Schema.XmlSchemaCollectionNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ValidationEventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchema")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EventHandler", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaCollectionEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaInfo"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaNames", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaNames"), [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ValidationEventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Array"), $.Int32], [])
    )
      .Overrides(0, "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.Field({Static:false, Public:false}, "collection", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "schemaNames", $asm05.TypeRef("System.Xml.Schema.SchemaNames")); 
    $.Field({Static:false, Public:false}, "wLock", $asm01.TypeRef("System.Threading.ReaderWriterLock")); 
    $.Field({Static:false, Public:false}, "timeout", $.Int32); 
    $.Field({Static:false, Public:false}, "isThreadSafe", $.Boolean); 
    $.Field({Static:false, Public:false}, "validationEventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "xmlResolver", $asm05.TypeRef("System.Xml.XmlResolver")); 
    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false}, "XmlResolver", $asm05.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "Item", $asm05.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.Property({Static:false, Public:false}, "EventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202"]; });

})();

(function XmlSchemaCollectionNode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaCollectionNode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Schema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NamespaceURI", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Schema", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SchemaInfo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaInfo")], [])
    );

    $.Field({Static:false, Public:false}, "namespaceUri", $.String); 
    $.Field({Static:false, Public:false}, "schemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo")); 
    $.Field({Static:false, Public:false}, "schema", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    $.Property({Static:false, Public:false}, "NamespaceURI", $.String);

    $.Property({Static:false, Public:false}, "SchemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:false}, "Schema", $asm05.TypeRef("System.Xml.Schema.XmlSchema"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaCollectionEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaCollectionEnumerator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Hashtable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaCollectionNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(0, "Reset");

    $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("System.Collections.IDictionaryEnumerator")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.Property({Static:false, Public:true }, "Current", $asm05.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:false}, "CurrentNode", $asm05.TypeRef("System.Xml.Schema.XmlSchemaCollectionNode"));

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaContentModel$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaContentModel", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Content", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaContent"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Content", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaContent")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Content", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContent"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaComplexContent$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaContentModel"), "System.Xml.Schema.XmlSchemaComplexContent", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Content", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaContent"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasMixedAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsMixed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Content", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaContent")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsMixed", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "content", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContent")); 
    $.Field({Static:false, Public:false}, "isMixed", $.Boolean); 
    $.Field({Static:false, Public:false}, "hasMixedAttribute", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsMixed", $.Boolean)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["mixed"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Content", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContent"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["extension", $asm05.System.Xml.Schema.XmlSchemaComplexContentExtension.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["restriction", $asm05.System.Xml.Schema.XmlSchemaComplexContentRestriction.__Type__]; });

    $.Property({Static:false, Public:false}, "HasMixedAttribute", $.Boolean)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaContent$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaContent", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaComplexContentExtension$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaContent"), "System.Xml.Schema.XmlSchemaComplexContentExtension", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseTypeName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Particle", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseTypeName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Particle", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.Field({Static:false, Public:false}, "particle", $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")); 
    $.Field({Static:false, Public:false}, "attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Field({Static:false, Public:false}, "anyAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
    $.Field({Static:false, Public:false}, "baseTypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Property({Static:false, Public:true }, "BaseTypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["base"]; });

    $.Property({Static:false, Public:true }, "Particle", $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm05.System.Xml.Schema.XmlSchemaChoice.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["all", $asm05.System.Xml.Schema.XmlSchemaAll.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm05.System.Xml.Schema.XmlSchemaSequence.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm05.System.Xml.Schema.XmlSchemaGroupRef.__Type__]; });

    $.Property({Static:false, Public:true }, "Attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm05.System.Xml.Schema.XmlSchemaAttributeGroupRef.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm05.System.Xml.Schema.XmlSchemaAttribute.__Type__]; });

    $.Property({Static:false, Public:true }, "AnyAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaComplexContentRestriction$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaContent"), "System.Xml.Schema.XmlSchemaComplexContentRestriction", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseTypeName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Particle", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseTypeName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Particle", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.Field({Static:false, Public:false}, "particle", $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")); 
    $.Field({Static:false, Public:false}, "attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Field({Static:false, Public:false}, "anyAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
    $.Field({Static:false, Public:false}, "baseTypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Property({Static:false, Public:true }, "BaseTypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["base"]; });

    $.Property({Static:false, Public:true }, "Particle", $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm05.System.Xml.Schema.XmlSchemaChoice.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm05.System.Xml.Schema.XmlSchemaGroupRef.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm05.System.Xml.Schema.XmlSchemaSequence.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["all", $asm05.System.Xml.Schema.XmlSchemaAll.__Type__]; });

    $.Property({Static:false, Public:true }, "Attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm05.System.Xml.Schema.XmlSchemaAttributeGroupRef.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm05.System.Xml.Schema.XmlSchemaAttribute.__Type__]; });

    $.Property({Static:false, Public:true }, "AnyAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaType$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaType", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseSchemaType", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseXmlSchemaType", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Datatype", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DerivedBy", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DerivedFrom", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementDecl", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Final", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FinalResolved", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsMixed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameAttribute", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Redefined", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaContentType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueConverter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInComplexType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm05.TypeRef("System.Xml.Schema.XmlTypeCode")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInComplexType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInSimpleType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInSimpleType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm05.TypeRef("System.Xml.Schema.XmlTypeCode")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsDerivedFrom", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $.Type, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDerivedFromDatatype", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ElementDecl", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaElementDecl")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Final", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IsMixed", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NameAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Redefined", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBaseSchemaType", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetContentType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDatatype", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDerivedBy", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFinalResolved", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.XmlResolver"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "final", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
    $.Field({Static:false, Public:false}, "derivedBy", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
    $.Field({Static:false, Public:false}, "baseSchemaType", $.Type); 
    $.Field({Static:false, Public:false}, "datatype", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
    $.Field({Static:false, Public:false}, "finalResolved", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
    $.Field({Static:false, Public:false}, "elementDecl", $asm05.TypeRef("System.Xml.Schema.SchemaElementDecl")); 
    $.Field({Static:false, Public:false}, "qname", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "redefined", $.Type); 
    $.Field({Static:false, Public:false}, "contentType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType")); 
    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "Final", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["final"]; })
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm05.System.Xml.Schema.XmlSchemaDerivationMethod.None]; });

    $.Property({Static:false, Public:true }, "QualifiedName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "FinalResolved", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "BaseSchemaType", $.Object)
      .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["This property has been deprecated. Please use BaseXmlSchemaType property that returns a strongly typed base schema type. http://go.microsoft.com/fwlink/?linkid=14202"]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "BaseXmlSchemaType", $.Type)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "DerivedBy", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Datatype", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsMixed", $.Boolean)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "ValueConverter", $asm05.TypeRef("System.Xml.Schema.XmlValueConverter"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "SchemaContentType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"));

    $.Property({Static:false, Public:false}, "ElementDecl", $asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"));

    $.Property({Static:false, Public:false}, "Redefined", $.Type)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "DerivedFrom", $asm05.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaComplexType$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), "System.Xml.Schema.XmlSchemaComplexType", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearCompiledState", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneAttributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneGroupBaseParticles", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneParticle", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsIdAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAnyType", 
      new JSIL.MethodSignature($.Type, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AnyType", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AnyTypeContentValidator", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.ContentValidator"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AnyTypeSkip", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeUses", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeWildcard", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Block", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BlockResolved", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentModel", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaContentModel"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentTypeParticle", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DerivedFrom", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDuplicateDecls", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasWildCard", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAbstract", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsMixed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalElements", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Particle", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UntypedAnyType", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasAttributeQNameRef", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasParticleRef", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Block", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContentModel", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaContentModel")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasDuplicateDecls", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasWildCard", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsAbstract", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IsMixed", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Particle", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributeWildcard", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBlockResolved", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetContentTypeParticle", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.Constant({Static:true , Public:false}, "wildCardMask", 1); 
    $.Constant({Static:true , Public:false}, "dupDeclMask", 2); 
    $.Constant({Static:true , Public:false}, "isMixedMask", 4); 
    $.Constant({Static:true , Public:false}, "isAbstractMask", 8); 
    $.Field({Static:false, Public:false}, "block", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
    $.Field({Static:false, Public:false}, "contentModel", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentModel")); 
    $.Field({Static:false, Public:false}, "particle", $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")); 
    $.Field({Static:false, Public:false}, "attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Field({Static:false, Public:false}, "anyAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
    $.Field({Static:false, Public:false}, "contentTypeParticle", $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")); 
    $.Field({Static:false, Public:false}, "blockResolved", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
    $.Field({Static:false, Public:false}, "localElements", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "attributeUses", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "attributeWildcard", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
    $.Field({Static:true , Public:false}, "anyTypeLax", $.Type); 
    $.Field({Static:true , Public:false}, "anyTypeSkip", $.Type); 
    $.Field({Static:true , Public:false}, "untypedAnyType", $.Type); 
    $.Field({Static:false, Public:false}, "pvFlags", $.Byte); 
    $.Property({Static:true , Public:false}, "AnyType", $.Type)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:true , Public:false}, "UntypedAnyType", $.Type)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:true , Public:false}, "AnyTypeSkip", $.Type)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:true , Public:false}, "AnyTypeContentValidator", $asm05.TypeRef("System.Xml.Schema.ContentValidator"));

    $.Property({Static:false, Public:true }, "IsAbstract", $.Boolean)
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["abstract"]; });

    $.Property({Static:false, Public:true }, "Block", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm05.System.Xml.Schema.XmlSchemaDerivationMethod.None]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["block"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsMixed", $.Boolean)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["mixed"]; })
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "ContentModel", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentModel"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleContent", $asm05.System.Xml.Schema.XmlSchemaSimpleContent.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["complexContent", $asm05.System.Xml.Schema.XmlSchemaComplexContent.__Type__]; });

    $.Property({Static:false, Public:true }, "Particle", $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm05.System.Xml.Schema.XmlSchemaSequence.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm05.System.Xml.Schema.XmlSchemaGroupRef.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm05.System.Xml.Schema.XmlSchemaChoice.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["all", $asm05.System.Xml.Schema.XmlSchemaAll.__Type__]; });

    $.Property({Static:false, Public:true }, "Attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm05.System.Xml.Schema.XmlSchemaAttributeGroupRef.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm05.System.Xml.Schema.XmlSchemaAttribute.__Type__]; });

    $.Property({Static:false, Public:true }, "AnyAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });

    $.Property({Static:false, Public:true }, "ContentType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ContentTypeParticle", $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "BlockResolved", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "AttributeUses", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "AttributeWildcard", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "LocalElements", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "HasWildCard", $.Boolean);

    $.Property({Static:false, Public:false}, "HasDuplicateDecls", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "DerivedFrom", $asm05.TypeRef("System.Xml.XmlQualifiedName"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaContentProcessing", true, {
    None: 0, 
    Skip: 1, 
    Lax: 2, 
    Strict: 3
  }, false
);

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaContentType", true, {
    TextOnly: 0, 
    Empty: 1, 
    ElementOnly: 2, 
    Mixed: 3
  }, false
);

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaDerivationMethod", true, {
    Empty: 0, 
    Substitution: 1, 
    Extension: 2, 
    Restriction: 4, 
    List: 8, 
    Union: 16, 
    All: 255, 
    None: 256
  }, true
);

(function XmlSchemaDocumentation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), "System.Xml.Schema.XmlSchemaDocumentation", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Language", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Markup", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNode")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Language", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Markup", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNode")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Source", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "source", $.String); 
    $.Field({Static:false, Public:false}, "language", $.String); 
    $.Field({Static:false, Public:false}, "markup", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNode")])); 
    $.Field({Static:true , Public:false}, "languageType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Property({Static:false, Public:true }, "Source", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["source"]; });

    $.Property({Static:false, Public:true }, "Language", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["xml:lang"]; });

    $.Property({Static:false, Public:true }, "Markup", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNode")]))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlTextAttribute"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaElement$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), "System.Xml.Schema.XmlSchemaElement", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Block", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BlockResolved", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Constraints", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementDecl", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementSchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementType", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Final", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FinalResolved", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FixedValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Form", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasAbstractAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasConstraints", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasNillableAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAbstract", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLocalTypeDerivationChecked", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNillable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameAttribute", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RefName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaTypeName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubstitutionGroup", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Block", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ElementDecl", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaElementDecl")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Final", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FixedValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Form", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsAbstract", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsLocalTypeDerivationChecked", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNillable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NameAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RefName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaTypeName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SubstitutionGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBlockResolved", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetElementType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFinalResolved", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.XmlResolver"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ], [])
    );

    $.Field({Static:false, Public:false}, "isAbstract", $.Boolean); 
    $.Field({Static:false, Public:false}, "hasAbstractAttribute", $.Boolean); 
    $.Field({Static:false, Public:false}, "isNillable", $.Boolean); 
    $.Field({Static:false, Public:false}, "hasNillableAttribute", $.Boolean); 
    $.Field({Static:false, Public:false}, "isLocalTypeDerivationChecked", $.Boolean); 
    $.Field({Static:false, Public:false}, "block", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
    $.Field({Static:false, Public:false}, "final", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
    $.Field({Static:false, Public:false}, "form", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
    $.Field({Static:false, Public:false}, "defaultValue", $.String); 
    $.Field({Static:false, Public:false}, "fixedValue", $.String); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "refName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "substitutionGroup", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "typeName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "type", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType")); 
    $.Field({Static:false, Public:false}, "qualifiedName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "elementType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType")); 
    $.Field({Static:false, Public:false}, "blockResolved", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
    $.Field({Static:false, Public:false}, "finalResolved", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")); 
    $.Field({Static:false, Public:false}, "constraints", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Field({Static:false, Public:false}, "elementDecl", $asm05.TypeRef("System.Xml.Schema.SchemaElementDecl")); 
    $.Property({Static:false, Public:true }, "IsAbstract", $.Boolean)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["abstract"]; })
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Block", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm05.System.Xml.Schema.XmlSchemaDerivationMethod.None]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["block"]; });

    $.Property({Static:false, Public:true }, "DefaultValue", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["default"]; })
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });

    $.Property({Static:false, Public:true }, "Final", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["final"]; })
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm05.System.Xml.Schema.XmlSchemaDerivationMethod.None]; });

    $.Property({Static:false, Public:true }, "FixedValue", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["fixed"]; })
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; });

    $.Property({Static:false, Public:true }, "Form", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["form"]; })
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm05.System.Xml.Schema.XmlSchemaForm.None]; });

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "IsNillable", $.Boolean)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["nillable"]; })
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "HasNillableAttribute", $.Boolean)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "HasAbstractAttribute", $.Boolean)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "RefName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ref"]; });

    $.Property({Static:false, Public:true }, "SubstitutionGroup", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["substitutionGroup"]; });

    $.Property({Static:false, Public:true }, "SchemaTypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["type"]; });

    $.Property({Static:false, Public:true }, "SchemaType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm05.System.Xml.Schema.XmlSchemaSimpleType.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["complexType", $asm05.System.Xml.Schema.XmlSchemaComplexType.__Type__]; });

    $.Property({Static:false, Public:true }, "Constraints", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["key", $asm05.System.Xml.Schema.XmlSchemaKey.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["keyref", $asm05.System.Xml.Schema.XmlSchemaKeyref.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["unique", $asm05.System.Xml.Schema.XmlSchemaUnique.__Type__]; });

    $.Property({Static:false, Public:true }, "QualifiedName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ElementType", $.Object)
      .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["This property has been deprecated. Please use ElementSchemaType property that returns a strongly typed element type. http://go.microsoft.com/fwlink/?linkid=14202"]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ElementSchemaType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "BlockResolved", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "FinalResolved", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "HasDefault", $.Boolean)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "HasConstraints", $.Boolean);

    $.Property({Static:false, Public:false}, "IsLocalTypeDerivationChecked", $.Boolean);

    $.Property({Static:false, Public:false}, "ElementDecl", $asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameString", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.SystemException"), "System.Xml.Schema.XmlSchemaException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Exception"), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm01.TypeRef("System.Exception"), $.String, 
          $.Int32, $.Int32, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateMessage", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Args", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GetRes", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceSchemaObject", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceUri", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetResourceId", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSchemaObject", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSource", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSource", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.Field({Static:false, Public:false}, "res", $.String); 
    $.Field({Static:false, Public:false}, "args", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:false, Public:false}, "sourceUri", $.String); 
    $.Field({Static:false, Public:false}, "lineNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "linePosition", $.Int32); 
    $.Field({Static:false, Public:false}, "sourceSchemaObject", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")); 
    $.Field({Static:false, Public:false}, "message", $.String); 
    $.Property({Static:false, Public:false}, "GetRes", $.String);

    $.Property({Static:false, Public:false}, "Args", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "SourceUri", $.String);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "SourceSchemaObject", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"));

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaExternal$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), "System.Xml.Schema.XmlSchemaExternal", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseUri", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Uri"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Compositor", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.Compositor"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IdAttribute", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaLocation", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnhandledAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseUri", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Uri")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Compositor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.Compositor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IdAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaLocation", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UnhandledAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetUnhandledAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")])], [])
    );

    $.Field({Static:false, Public:false}, "location", $.String); 
    $.Field({Static:false, Public:false}, "baseUri", $asm02.TypeRef("System.Uri")); 
    $.Field({Static:false, Public:false}, "schema", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    $.Field({Static:false, Public:false}, "id", $.String); 
    $.Field({Static:false, Public:false}, "moreAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")])); 
    $.Field({Static:false, Public:false}, "compositor", $asm05.TypeRef("System.Xml.Schema.Compositor")); 
    $.Property({Static:false, Public:true }, "SchemaLocation", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["schemaLocation"]; });

    $.Property({Static:false, Public:true }, "Schema", $asm05.TypeRef("System.Xml.Schema.XmlSchema"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Id", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["id"]; });

    $.Property({Static:false, Public:true }, "UnhandledAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")]))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

    $.Property({Static:false, Public:false}, "BaseUri", $asm02.TypeRef("System.Uri"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IdAttribute", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Compositor", $asm05.TypeRef("System.Xml.Schema.Compositor"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.FacetType", false, {
    None: 0, 
    Length: 1, 
    MinLength: 2, 
    MaxLength: 3, 
    Pattern: 4, 
    Whitespace: 5, 
    Enumeration: 6, 
    MinExclusive: 7, 
    MinInclusive: 8, 
    MaxExclusive: 9, 
    MaxInclusive: 10, 
    TotalDigits: 11, 
    FractionDigits: 12
  }, false
);

(function XmlSchemaFacet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaFacet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FacetType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.FacetType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FacetType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.FacetType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IsFixed", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "value", $.String); 
    $.Field({Static:false, Public:false}, "isFixed", $.Boolean); 
    $.Field({Static:false, Public:false}, "facetType", $asm05.TypeRef("System.Xml.Schema.FacetType")); 
    $.Property({Static:false, Public:true }, "Value", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["value"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixed", $.Boolean)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["fixed"]; })
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "FacetType", $asm05.TypeRef("System.Xml.Schema.FacetType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaNumericFacet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet"), "System.Xml.Schema.XmlSchemaNumericFacet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaLengthFacet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaNumericFacet"), "System.Xml.Schema.XmlSchemaLengthFacet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaMinLengthFacet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaNumericFacet"), "System.Xml.Schema.XmlSchemaMinLengthFacet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaMaxLengthFacet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaNumericFacet"), "System.Xml.Schema.XmlSchemaMaxLengthFacet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaPatternFacet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet"), "System.Xml.Schema.XmlSchemaPatternFacet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaEnumerationFacet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet"), "System.Xml.Schema.XmlSchemaEnumerationFacet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaMinExclusiveFacet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet"), "System.Xml.Schema.XmlSchemaMinExclusiveFacet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaMinInclusiveFacet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet"), "System.Xml.Schema.XmlSchemaMinInclusiveFacet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaMaxExclusiveFacet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet"), "System.Xml.Schema.XmlSchemaMaxExclusiveFacet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaMaxInclusiveFacet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet"), "System.Xml.Schema.XmlSchemaMaxInclusiveFacet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaTotalDigitsFacet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaNumericFacet"), "System.Xml.Schema.XmlSchemaTotalDigitsFacet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaFractionDigitsFacet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaNumericFacet"), "System.Xml.Schema.XmlSchemaFractionDigitsFacet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaWhiteSpaceFacet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet"), "System.Xml.Schema.XmlSchemaWhiteSpaceFacet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaForm", true, {
    None: 0, 
    Qualified: 1, 
    Unqualified: 2
  }, false
);

(function XmlSchemaGroup$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaGroup", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanonicalParticle", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameAttribute", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Particle", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Redefined", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SelfReferenceCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CanonicalParticle", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NameAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Particle", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Redefined", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SelfReferenceCount", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "particle", $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase")); 
    $.Field({Static:false, Public:false}, "canonicalParticle", $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")); 
    $.Field({Static:false, Public:false}, "qname", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "redefined", $.Type); 
    $.Field({Static:false, Public:false}, "selfReferenceCount", $.Int32); 
    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "Particle", $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm05.System.Xml.Schema.XmlSchemaChoice.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["all", $asm05.System.Xml.Schema.XmlSchemaAll.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm05.System.Xml.Schema.XmlSchemaSequence.__Type__]; });

    $.Property({Static:false, Public:true }, "QualifiedName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "CanonicalParticle", $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Redefined", $.Type)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "SelfReferenceCount", $.Int32)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaGroupRef$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), "System.Xml.Schema.XmlSchemaGroupRef", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Particle", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Redefined", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RefName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Redefined", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RefName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParticle", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase")], [])
    );

    $.Field({Static:false, Public:false}, "refName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "particle", $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase")); 
    $.Field({Static:false, Public:false}, "refined", $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup")); 
    $.Property({Static:false, Public:true }, "RefName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ref"]; });

    $.Property({Static:false, Public:true }, "Particle", $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Redefined", $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaIdentityConstraint$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaIdentityConstraint", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CompiledConstraint", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.CompiledIdentityConstraint"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fields", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameAttribute", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Selector", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaXPath"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CompiledConstraint", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NameAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Selector", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaXPath")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "selector", $asm05.TypeRef("System.Xml.Schema.XmlSchemaXPath")); 
    $.Field({Static:false, Public:false}, "fields", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Field({Static:false, Public:false}, "qualifiedName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "compiledConstraint", $asm05.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")); 
    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "Selector", $asm05.TypeRef("System.Xml.Schema.XmlSchemaXPath"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["selector", $asm05.System.Xml.Schema.XmlSchemaXPath.__Type__]; });

    $.Property({Static:false, Public:true }, "Fields", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["field", $asm05.System.Xml.Schema.XmlSchemaXPath.__Type__]; });

    $.Property({Static:false, Public:true }, "QualifiedName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "CompiledConstraint", $asm05.TypeRef("System.Xml.Schema.CompiledIdentityConstraint"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaXPath$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaXPath", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XPath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XPath", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "xpath", $.String); 
    $.Property({Static:false, Public:true }, "XPath", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["xpath"]; })
      .Attribute($asm02.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaUnique$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"), "System.Xml.Schema.XmlSchemaUnique", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaKey$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"), "System.Xml.Schema.XmlSchemaKey", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaKeyref$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"), "System.Xml.Schema.XmlSchemaKeyref", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Refer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Refer", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.Field({Static:false, Public:false}, "refer", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Property({Static:false, Public:true }, "Refer", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["refer"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaImport$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaExternal"), "System.Xml.Schema.XmlSchemaImport", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddAnnotation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Annotation", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Annotation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "annotation", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")); 
    $.Property({Static:false, Public:true }, "Namespace", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["namespace"]; });

    $.Property({Static:false, Public:true }, "Annotation", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["annotation", $asm05.System.Xml.Schema.XmlSchemaAnnotation.__Type__]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaInclude$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaExternal"), "System.Xml.Schema.XmlSchemaInclude", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddAnnotation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Annotation", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Annotation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
    );

    $.Field({Static:false, Public:false}, "annotation", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")); 
    $.Property({Static:false, Public:true }, "Annotation", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["annotation", $asm05.System.Xml.Schema.XmlSchemaAnnotation.__Type__]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaInfo$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaInfo", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaValidity")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDefaultValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNil", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnionType", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Validity", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaValidity"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContentType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsDefault", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNil", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Validity", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaValidity")], [])
    );

    $.Field({Static:false, Public:false}, "isDefault", $.Boolean); 
    $.Field({Static:false, Public:false}, "isNil", $.Boolean); 
    $.Field({Static:false, Public:false}, "schemaElement", $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")); 
    $.Field({Static:false, Public:false}, "schemaAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")); 
    $.Field({Static:false, Public:false}, "schemaType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType")); 
    $.Field({Static:false, Public:false}, "memberType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Field({Static:false, Public:false}, "validity", $asm05.TypeRef("System.Xml.Schema.XmlSchemaValidity")); 
    $.Field({Static:false, Public:false}, "contentType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Validity", $asm05.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsNil", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaElement", $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.Property({Static:false, Public:true }, "ContentType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"));

    $.Property({Static:false, Public:false}, "XmlType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:false}, "HasDefaultValue", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUnionType", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaNotation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaNotation", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameAttribute", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Public", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QualifiedName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_System", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NameAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Public", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_QualifiedName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_System", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "publicId", $.String); 
    $.Field({Static:false, Public:false}, "systemId", $.String); 
    $.Field({Static:false, Public:false}, "qname", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "Public", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["public"]; });

    $.Property({Static:false, Public:true }, "System", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["system"]; });

    $.Property({Static:false, Public:false}, "QualifiedName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaObjectCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Collections.CollectionBase"), "System.Xml.Schema.XmlSchemaObjectCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemove", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.Field({Static:false, Public:false}, "parent", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function XmlSchemaObjectEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaObjectEnumerator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.IEnumerator")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(0, "Reset");

    $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("System.Collections.IEnumerator")); 
    $.Property({Static:false, Public:true }, "Current", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaObjectTable$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaObjectTable", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindIndexByValue", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Names", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ICollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Values", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ICollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IDictionaryEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Insert", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Replace", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.Field({Static:false, Public:false}, "table", $asm01.TypeRef("System.Collections.Generic.Dictionary`2", [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")])); 
    $.Field({Static:false, Public:false}, "entries", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry")])); 
    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"));

    $.Property({Static:false, Public:true }, "Names", $asm01.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true }, "Values", $asm01.TypeRef("System.Collections.ICollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaObjectTable/EnumeratorType", false, {
    Keys: 0, 
    Values: 1, 
    DictionaryEntry: 2
  }, false
);

(function XmlSchemaObjectEntry$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsMatch", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "qname", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "xso", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NamesCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaObjectTable/NamesCollection", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Array"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.Field({Static:false, Public:false}, "entries", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry")])); 
    $.Field({Static:false, Public:false}, "size", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ValuesCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaObjectTable/ValuesCollection", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Array"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.Field({Static:false, Public:false}, "entries", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry")])); 
    $.Field({Static:false, Public:false}, "size", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XSOEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaObjectTable/XSOEnumerator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry")]), $.Int32, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/EnumeratorType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "entries", $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry")])); 
    $.Field({Static:false, Public:false}, "enumType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/EnumeratorType")); 
    $.Field({Static:false, Public:false}, "currentIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "size", $.Int32); 
    $.Field({Static:false, Public:false}, "currentKey", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "currentValue", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XSODictionaryEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XSOEnumerator"), "System.Xml.Schema.XmlSchemaObjectTable/XSODictionaryEnumerator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Collections.Generic.List`1", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/XmlSchemaObjectEntry")]), $.Int32, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable/EnumeratorType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Entry", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.DictionaryEntry"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Entry", $asm01.TypeRef("System.Collections.DictionaryEntry"));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.ImplementInterfaces(
      /* 1 */ $asm01.TypeRef("System.Collections.IDictionaryEnumerator"), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaRedefine$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaExternal"), "System.Xml.Schema.XmlSchemaRedefine", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddAnnotation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeGroups", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Groups", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaTypes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.Field({Static:false, Public:false}, "items", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Field({Static:false, Public:false}, "attributeGroups", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "types", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "groups", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Property({Static:false, Public:true }, "Items", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm05.System.Xml.Schema.XmlSchemaSimpleType.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["annotation", $asm05.System.Xml.Schema.XmlSchemaAnnotation.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm05.System.Xml.Schema.XmlSchemaAttributeGroup.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["complexType", $asm05.System.Xml.Schema.XmlSchemaComplexType.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm05.System.Xml.Schema.XmlSchemaGroup.__Type__]; });

    $.Property({Static:false, Public:true }, "AttributeGroups", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "SchemaTypes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Groups", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaSequence$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), "System.Xml.Schema.XmlSchemaSequence", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Items", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetItems", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.Field({Static:false, Public:false}, "items", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Items", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm05.System.Xml.Schema.XmlSchemaGroupRef.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["element", $asm05.System.Xml.Schema.XmlSchemaElement.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm05.System.Xml.Schema.XmlSchemaSequence.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["any", $asm05.System.Xml.Schema.XmlSchemaAny.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm05.System.Xml.Schema.XmlSchemaChoice.__Type__]; });

    $.Property({Static:false, Public:false, Virtual:true }, "IsEmpty", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaSet$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaSet", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.XmlReader"), 
          $asm01.TypeRef("System.Collections.Hashtable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ValidationEventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSchemaToSet", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToTable", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $asm05.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearTables", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyFromCompiledSet", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchema")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSchemaByNSAndUrl", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [
          $asm02.TypeRef("System.Uri"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Collections.DictionaryEntry")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompilationSettings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CompileAll", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CompiledInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GlobalAttributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GlobalElements", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GlobalTypes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalSyncObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsCompiled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReaderSettings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaLocations", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SortedSchemas", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.SortedList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SubstitutionGroups", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeExtensions", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEventHandler", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResolver", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlResolver"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaByUri", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Schema.XmlSchema")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaNames", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaNames"), [$asm05.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTargetNamespace", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalValidationCallback", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("System.Xml.Schema.ValidationEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSchemaLoaded", 
      new JSIL.MethodSignature($.Boolean, [
          $asm02.TypeRef("System.Uri"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Schema.XmlSchema")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseSchema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessSchema", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Schema.XmlSchema")]), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessNewSubstitutionGroups", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$asm05.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ValidationEventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveRecursive", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveSchemaFromCaches", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveSchemaFromGlobalTables", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reprocess", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveSubstitutionGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSubstitutionGroup"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Schemas", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ICollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Schemas", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ICollection"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CompilationSettings", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetProhibitDtd", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyTables", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "schemaNames", $asm05.TypeRef("System.Xml.Schema.SchemaNames")); 
    $.Field({Static:false, Public:false}, "schemas", $asm01.TypeRef("System.Collections.SortedList")); 
    $.Field({Static:false, Public:false}, "internalEventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "eventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "isCompiled", $.Boolean); 
    $.Field({Static:false, Public:false}, "schemaLocations", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "chameleonSchemas", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "targetNamespaces", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "compileAll", $.Boolean); 
    $.Field({Static:false, Public:false}, "cachedCompiledInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo")); 
    $.Field({Static:false, Public:false}, "readerSettings", $asm05.TypeRef("System.Xml.XmlReaderSettings")); 
    $.Field({Static:false, Public:false}, "schemaForSchema", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    $.Field({Static:false, Public:false}, "compilationSettings", $asm05.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")); 
    $.Field({Static:false, Public:false}, "elements", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "schemaTypes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "substitutionGroups", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "typeExtensions", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")); 
    $.Field({Static:false, Public:false}, "internalSyncObject", $.Object); 
    $.Property({Static:false, Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:false, Public:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true }, "IsCompiled", $.Boolean);

    $.Property({Static:false, Public:true }, "XmlResolver", $asm05.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "CompilationSettings", $asm05.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "GlobalElements", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Property({Static:false, Public:true }, "GlobalAttributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Property({Static:false, Public:true }, "GlobalTypes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Property({Static:false, Public:false}, "SubstitutionGroups", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Property({Static:false, Public:false}, "SchemaLocations", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "TypeExtensions", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Property({Static:false, Public:false}, "CompiledInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:false}, "ReaderSettings", $asm05.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:false}, "SortedSchemas", $asm01.TypeRef("System.Collections.SortedList"));

    $.Property({Static:false, Public:false}, "CompileAll", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaCompilationSettings$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaCompilationSettings", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnableUpaCheck", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EnableUpaCheck", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "enableUpaCheck", $.Boolean); 
    $.Property({Static:false, Public:true }, "EnableUpaCheck", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaSimpleContent$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaContentModel"), "System.Xml.Schema.XmlSchemaSimpleContent", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Content", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaContent"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Content", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaContent")], [])
    );

    $.Field({Static:false, Public:false}, "content", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContent")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Content", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContent"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["extension", $asm05.System.Xml.Schema.XmlSchemaSimpleContentExtension.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["restriction", $asm05.System.Xml.Schema.XmlSchemaSimpleContentRestriction.__Type__]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaSimpleContentExtension$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaContent"), "System.Xml.Schema.XmlSchemaSimpleContentExtension", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseTypeName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseTypeName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.Field({Static:false, Public:false}, "attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Field({Static:false, Public:false}, "anyAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
    $.Field({Static:false, Public:false}, "baseTypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Property({Static:false, Public:true }, "BaseTypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["base"]; });

    $.Property({Static:false, Public:true }, "Attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm05.System.Xml.Schema.XmlSchemaAttribute.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm05.System.Xml.Schema.XmlSchemaAttributeGroupRef.__Type__]; });

    $.Property({Static:false, Public:true }, "AnyAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaSimpleContentRestriction$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaContent"), "System.Xml.Schema.XmlSchemaSimpleContentRestriction", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseTypeName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Facets", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseTypeName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.Field({Static:false, Public:false}, "baseTypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "baseType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Field({Static:false, Public:false}, "facets", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Field({Static:false, Public:false}, "attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Field({Static:false, Public:false}, "anyAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
    $.Property({Static:false, Public:true }, "BaseTypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["base"]; });

    $.Property({Static:false, Public:true }, "BaseType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm05.System.Xml.Schema.XmlSchemaSimpleType.__Type__]; });

    $.Property({Static:false, Public:true }, "Facets", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minExclusive", $asm05.System.Xml.Schema.XmlSchemaMinExclusiveFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["fractionDigits", $asm05.System.Xml.Schema.XmlSchemaFractionDigitsFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["totalDigits", $asm05.System.Xml.Schema.XmlSchemaTotalDigitsFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["whiteSpace", $asm05.System.Xml.Schema.XmlSchemaWhiteSpaceFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["length", $asm05.System.Xml.Schema.XmlSchemaLengthFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minLength", $asm05.System.Xml.Schema.XmlSchemaMinLengthFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxLength", $asm05.System.Xml.Schema.XmlSchemaMaxLengthFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["pattern", $asm05.System.Xml.Schema.XmlSchemaPatternFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["enumeration", $asm05.System.Xml.Schema.XmlSchemaEnumerationFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxInclusive", $asm05.System.Xml.Schema.XmlSchemaMaxInclusiveFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxExclusive", $asm05.System.Xml.Schema.XmlSchemaMaxExclusiveFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minInclusive", $asm05.System.Xml.Schema.XmlSchemaMinInclusiveFacet.__Type__]; });

    $.Property({Static:false, Public:true }, "Attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm05.System.Xml.Schema.XmlSchemaAttributeGroupRef.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm05.System.Xml.Schema.XmlSchemaAttribute.__Type__]; });

    $.Property({Static:false, Public:true }, "AnyAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaSimpleType$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), "System.Xml.Schema.XmlSchemaSimpleType", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Content", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DerivedFrom", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Content", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent")], [])
    );

    $.Field({Static:false, Public:false}, "content", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent")); 
    $.Property({Static:false, Public:true }, "Content", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["restriction", $asm05.System.Xml.Schema.XmlSchemaSimpleTypeRestriction.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["union", $asm05.System.Xml.Schema.XmlSchemaSimpleTypeUnion.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["list", $asm05.System.Xml.Schema.XmlSchemaSimpleTypeList.__Type__]; });

    $.Property({Static:false, Public:false, Virtual:true }, "DerivedFrom", $asm05.TypeRef("System.Xml.XmlQualifiedName"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaSimpleTypeContent$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), "System.Xml.Schema.XmlSchemaSimpleTypeContent", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaSimpleTypeList$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"), "System.Xml.Schema.XmlSchemaSimpleTypeList", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseItemType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemTypeName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseItemType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ItemType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ItemTypeName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.Field({Static:false, Public:false}, "itemTypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "itemType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Field({Static:false, Public:false}, "baseItemType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Property({Static:false, Public:true }, "ItemTypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["itemType"]; });

    $.Property({Static:false, Public:true }, "ItemType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm05.System.Xml.Schema.XmlSchemaSimpleType.__Type__]; });

    $.Property({Static:false, Public:true }, "BaseItemType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaSimpleTypeRestriction$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"), "System.Xml.Schema.XmlSchemaSimpleTypeRestriction", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseTypeName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Facets", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseTypeName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.Field({Static:false, Public:false}, "baseTypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "baseType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Field({Static:false, Public:false}, "facets", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Property({Static:false, Public:true }, "BaseTypeName", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["base"]; });

    $.Property({Static:false, Public:true }, "BaseType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm05.System.Xml.Schema.XmlSchemaSimpleType.__Type__]; });

    $.Property({Static:false, Public:true }, "Facets", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["pattern", $asm05.System.Xml.Schema.XmlSchemaPatternFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["length", $asm05.System.Xml.Schema.XmlSchemaLengthFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["enumeration", $asm05.System.Xml.Schema.XmlSchemaEnumerationFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["whiteSpace", $asm05.System.Xml.Schema.XmlSchemaWhiteSpaceFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minLength", $asm05.System.Xml.Schema.XmlSchemaMinLengthFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxLength", $asm05.System.Xml.Schema.XmlSchemaMaxLengthFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minInclusive", $asm05.System.Xml.Schema.XmlSchemaMinInclusiveFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["fractionDigits", $asm05.System.Xml.Schema.XmlSchemaFractionDigitsFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxExclusive", $asm05.System.Xml.Schema.XmlSchemaMaxExclusiveFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxInclusive", $asm05.System.Xml.Schema.XmlSchemaMaxInclusiveFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minExclusive", $asm05.System.Xml.Schema.XmlSchemaMinExclusiveFacet.__Type__]; })
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["totalDigits", $asm05.System.Xml.Schema.XmlSchemaTotalDigitsFacet.__Type__]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaSimpleTypeUnion$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"), "System.Xml.Schema.XmlSchemaSimpleTypeUnion", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseMemberTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseTypes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlQualifiedName")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberTypes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlQualifiedName")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBaseMemberTypes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])], [])
    );

    $.Field({Static:false, Public:false}, "baseTypes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Field({Static:false, Public:false}, "memberTypes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlQualifiedName")])); 
    $.Field({Static:false, Public:false}, "baseMemberTypes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])); 
    $.Property({Static:false, Public:true }, "BaseTypes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm05.System.Xml.Schema.XmlSchemaSimpleType.__Type__]; });

    $.Property({Static:false, Public:true }, "MemberTypes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlQualifiedName")]))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["memberTypes"]; });

    $.Property({Static:false, Public:true }, "BaseMemberTypes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaSubstitutionGroup$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), "System.Xml.Schema.XmlSchemaSubstitutionGroup", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Examplar", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Examplar", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.Field({Static:false, Public:false}, "membersList", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "examplar", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Property({Static:false, Public:false}, "Members", $asm01.TypeRef("System.Collections.ArrayList"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Examplar", $asm05.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaSubstitutionGroupV1Compat$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaSubstitutionGroup"), "System.Xml.Schema.XmlSchemaSubstitutionGroupV1Compat", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Choice", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaChoice"), [], [])
    );

    $.Field({Static:false, Public:false}, "choice", $asm05.TypeRef("System.Xml.Schema.XmlSchemaChoice")); 
    $.Property({Static:false, Public:false}, "Choice", $asm05.TypeRef("System.Xml.Schema.XmlSchemaChoice"))
      .Attribute($asm05.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaUse", true, {
    None: 0, 
    Optional: 1, 
    Prohibited: 2, 
    Required: 3
  }, false
);

(function XmlSchemaValidationException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaException"), "System.Xml.Schema.XmlSchemaValidationException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Exception"), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm01.TypeRef("System.Exception"), $.String, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.Int32, 
          $.Int32, $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSourceObject", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Field({Static:false, Public:false}, "sourceNodeObject", $.Object); 
    $.Property({Static:false, Public:true }, "SourceObject", $.Object);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.Xml.Schema.XmlValueGetter", true, []);

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaValidationFlags", true, {
    None: 0, 
    ProcessInlineSchema: 1, 
    ProcessSchemaLocation: 2, 
    ReportValidationWarnings: 4, 
    ProcessIdentityConstraints: 8, 
    AllowXmlAttributes: 16
  }, true
);

JSIL.MakeEnum(
  "System.Xml.Schema.ValidatorState", false, {
    None: 0, 
    Start: 1, 
    TopLevelAttribute: 2, 
    TopLevelTextOrWS: 3, 
    Element: 4, 
    Attribute: 5, 
    EndOfAttributes: 6, 
    Text: 7, 
    Whitespace: 8, 
    EndElement: 9, 
    SkipToEndElement: 10, 
    Finish: 11
  }, false
);

(function IdRefNode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.IdRefNode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Type, $.String, 
          $.Int32, $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "Id", $.String); 
    $.Field({Static:false, Public:false}, "LineNo", $.Int32); 
    $.Field({Static:false, Public:false}, "LinePos", $.Int32); 
    $.Field({Static:false, Public:false}, "Next", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaValidator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNameTable"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ValidationEventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIdentityConstraints", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddSchema", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXmlNamespaceSchema", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXsiAttributes", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.ArrayList")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AttributeIdentityConstraints", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElementName", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElementName", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildXsiAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAttributeValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm05.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckElementProperties", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckElementValue", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForwardRefs", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIsXmlAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaAttDef"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMixedValueConstraint", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRequiredAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaElementDecl")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckStateTransition", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidatorState"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTokenizedTypes", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), $.Object, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckXsiTypeAndNil", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"), [
          $asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"), $.String, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearPSVI", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompleteValidationError", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.ValidationState"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
          $.Object, $.String, 
          $.Int32, $.Int32, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ElementIdentityConstraints", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementValidationError", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Schema.ValidationState"), 
          $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), $.Object, 
          $.String, $.Int32, 
          $.Int32, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndElementIdentityConstraints", 
      new JSIL.MethodSignature(null, [
          $.Object, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndValidation", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnumerateAny", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FastGetElementDecl", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"), [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindId", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentContentType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentProcessContents", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasIdentityConstraints", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasSchema", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineInfoProvider", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.IXmlLineInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProcessIdentityConstraints", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProcessInlineSchema", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProcessSchemaHints", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProcessSchemaLocation", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReportValidationWarnings", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaSet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceUri", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Uri"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StrictlyAssessed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidationEventSender", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValidationFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConcatenatedValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultAttributePrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetExpectedAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetExpectedParticles", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSubstitutionGroupHead", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeName", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Schema.SchemaDeclBase")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUnspecifiedDefaultAttributes", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.ArrayList")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUnspecifiedDefaultAttributes", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.ArrayList"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalValidateEndElement", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadSchema", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrintExpectedElements", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Collections.ArrayList"), $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrintNames", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Collections.ArrayList")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrintNamesWithNS", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.ArrayList"), $asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessEntity", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessSchemaLocations", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessTokenizedType", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlTokenizedType"), $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "QNameString", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecompileSchemaSet", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ValidationEventHandler", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveTextValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm01.TypeRef("System.Exception"), $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm01.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaValidationException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaValidationException"), $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), $.Object, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaValidationException"), $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LineInfoProvider", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.IXmlLineInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SourceUri", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.Uri")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ValidationEventSender", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDtdSchemaInfo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SkipToEndElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowDeclNotFoundWarningOrError", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateAtomicValue", 
      new JSIL.MethodSignature($.Object, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateAtomicValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateAttribute", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateAttribute", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlValueGetter"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateAttribute", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlValueGetter"), $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo"), $.String, 
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateElementContext", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateEndElement", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateEndElement", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateEndOfAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateStartElementIdentityConstraints", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateText", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlValueGetter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateText", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Schema.XmlValueGetter")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateWhitespace", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlValueGetter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateWhitespace", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Schema.XmlValueGetter")], [])
    );

    $.Constant({Static:true , Public:false}, "STACK_INCREMENT", 10); 
    $.Constant({Static:true , Public:false}, "Quote", "'"); 
    $.Field({Static:false, Public:false}, "schemaSet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
    $.Field({Static:false, Public:false}, "validationFlags", $asm05.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags")); 
    $.Field({Static:false, Public:false}, "startIDConstraint", $.Int32); 
    $.Field({Static:false, Public:false}, "isRoot", $.Boolean); 
    $.Field({Static:false, Public:false}, "rootHasSchema", $.Boolean); 
    $.Field({Static:false, Public:false}, "attrValid", $.Boolean); 
    $.Field({Static:false, Public:false}, "checkEntity", $.Boolean); 
    $.Field({Static:false, Public:false}, "compiledSchemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo")); 
    $.Field({Static:false, Public:false}, "dtdSchemaInfo", $asm05.TypeRef("System.Xml.Schema.SchemaInfo")); 
    $.Field({Static:false, Public:false}, "validatedNamespaces", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "validationStack", $asm05.TypeRef("System.Xml.HWStack")); 
    $.Field({Static:false, Public:false}, "context", $asm05.TypeRef("System.Xml.Schema.ValidationState")); 
    $.Field({Static:false, Public:false}, "currentState", $asm05.TypeRef("System.Xml.Schema.ValidatorState")); 
    $.Field({Static:false, Public:false}, "attPresence", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "wildID", $asm05.TypeRef("System.Xml.Schema.SchemaAttDef")); 
    $.Field({Static:false, Public:false}, "IDs", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "idRefListHead", $asm05.TypeRef("System.Xml.Schema.IdRefNode")); 
    $.Field({Static:false, Public:false}, "contextQName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "NsXs", $.String); 
    $.Field({Static:false, Public:false}, "NsXsi", $.String); 
    $.Field({Static:false, Public:false}, "NsXmlNs", $.String); 
    $.Field({Static:false, Public:false}, "NsXml", $.String); 
    $.Field({Static:false, Public:false}, "partialValidationType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")); 
    $.Field({Static:false, Public:false}, "textValue", $asm01.TypeRef("System.Text.StringBuilder")); 
    $.Field({Static:false, Public:false}, "eventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "validationEventSender", $.Object); 
    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "positionInfo", $asm05.TypeRef("System.Xml.IXmlLineInfo")); 
    $.Field({Static:false, Public:false}, "dummyPositionInfo", $asm05.TypeRef("System.Xml.IXmlLineInfo")); 
    $.Field({Static:false, Public:false}, "xmlResolver", $asm05.TypeRef("System.Xml.XmlResolver")); 
    $.Field({Static:false, Public:false}, "sourceUri", $asm02.TypeRef("System.Uri")); 
    $.Field({Static:false, Public:false}, "sourceUriString", $.String); 
    $.Field({Static:false, Public:false}, "nsResolver", $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")); 
    $.Field({Static:false, Public:false}, "processContents", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")); 
    $.Field({Static:true , Public:false}, "xsiTypeSO", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")); 
    $.Field({Static:true , Public:false}, "xsiNilSO", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")); 
    $.Field({Static:true , Public:false}, "xsiSLSO", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")); 
    $.Field({Static:true , Public:false}, "xsiNoNsSLSO", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")); 
    $.Field({Static:false, Public:false}, "xsiTypeString", $.String); 
    $.Field({Static:false, Public:false}, "xsiNilString", $.String); 
    $.Field({Static:false, Public:false}, "xsiSchemaLocationString", $.String); 
    $.Field({Static:false, Public:false}, "xsiNoNamespaceSchemaLocationString", $.String); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "dtQName", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "dtCDATA", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "dtStringArray", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
    $.Field({Static:true , Public:false}, "EmptyParticleArray", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")]), function ($pi) {
        return JSIL.Array.New($asm05.System.Xml.Schema.XmlSchemaParticle, 0);
      }); 
    $.Field({Static:true , Public:false}, "EmptyAttributeArray", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")]), function ($pi) {
        return JSIL.Array.New($asm05.System.Xml.Schema.XmlSchemaAttribute, 0);
      }); 
    $.Field({Static:false, Public:false}, "xmlCharType", $asm05.TypeRef("System.Xml.XmlCharType")); 
    $.Field({Static:true , Public:false}, "ValidStates", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:true , Public:false}, "MethodNames", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Property({Static:false, Public:true }, "XmlResolver", $asm05.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "LineInfoProvider", $asm05.TypeRef("System.Xml.IXmlLineInfo"));

    $.Property({Static:false, Public:true }, "SourceUri", $asm02.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "ValidationEventSender", $.Object);

    $.Property({Static:false, Public:false}, "SchemaSet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Property({Static:false, Public:false}, "ValidationFlags", $asm05.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags"));

    $.Property({Static:false, Public:false}, "CurrentContentType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentType"));

    $.Property({Static:false, Public:false}, "CurrentProcessContents", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"));

    $.Property({Static:false, Public:false}, "StrictlyAssessed", $.Boolean);

    $.Property({Static:false, Public:false}, "HasSchema", $.Boolean);

    $.Property({Static:false, Public:false}, "HasIdentityConstraints", $.Boolean);

    $.Property({Static:false, Public:false}, "ProcessIdentityConstraints", $.Boolean);

    $.Property({Static:false, Public:false}, "ReportValidationWarnings", $.Boolean);

    $.Property({Static:false, Public:false}, "ProcessInlineSchema", $.Boolean);

    $.Property({Static:false, Public:false}, "ProcessSchemaLocation", $.Boolean);

    $.Property({Static:false, Public:false}, "ProcessSchemaHints", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaValidity", true, {
    NotKnown: 0, 
    Valid: 1, 
    Invalid: 2
  }, false
);

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSeverityType", true, {
    Error: 0, 
    Warning: 1
  }, false
);

JSIL.MakeEnum(
  "System.Xml.XmlTokenizedType", true, {
    CDATA: 0, 
    ID: 1, 
    IDREF: 2, 
    IDREFS: 3, 
    ENTITY: 4, 
    ENTITIES: 5, 
    NMTOKEN: 6, 
    NMTOKENS: 7, 
    NOTATION: 8, 
    ENUMERATION: 9, 
    QName: 10, 
    NCName: 11, 
    None: 12
  }, false
);

JSIL.MakeEnum(
  "System.Xml.Schema.XmlTypeCode", true, {
    None: 0, 
    Item: 1, 
    Node: 2, 
    Document: 3, 
    Element: 4, 
    Attribute: 5, 
    Namespace: 6, 
    ProcessingInstruction: 7, 
    Comment: 8, 
    Text: 9, 
    AnyAtomicType: 10, 
    UntypedAtomic: 11, 
    String: 12, 
    Boolean: 13, 
    Decimal: 14, 
    Float: 15, 
    Double: 16, 
    Duration: 17, 
    DateTime: 18, 
    Time: 19, 
    Date: 20, 
    GYearMonth: 21, 
    GYear: 22, 
    GMonthDay: 23, 
    GDay: 24, 
    GMonth: 25, 
    HexBinary: 26, 
    Base64Binary: 27, 
    AnyUri: 28, 
    QName: 29, 
    Notation: 30, 
    NormalizedString: 31, 
    Token: 32, 
    Language: 33, 
    NmToken: 34, 
    Name: 35, 
    NCName: 36, 
    Id: 37, 
    Idref: 38, 
    Entity: 39, 
    Integer: 40, 
    NonPositiveInteger: 41, 
    NegativeInteger: 42, 
    Long: 43, 
    Int: 44, 
    Short: 45, 
    Byte: 46, 
    NonNegativeInteger: 47, 
    UnsignedLong: 48, 
    UnsignedInt: 49, 
    UnsignedShort: 50, 
    UnsignedByte: 51, 
    PositiveInteger: 52, 
    YearMonthDuration: 53, 
    DayTimeDuration: 54
  }, false
);

(function XmlValueConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlValueConverter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Boolean, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int32, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int64, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Decimal"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Single, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Double, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.DateTimeOffset"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.String, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlBaseConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), "System.Xml.Schema.XmlBaseConverter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlTypeCode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AnyUriToString", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.Uri")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Base64BinaryToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeListType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Boolean, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.DateTimeOffset"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Decimal"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Double, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int32, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int64, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Single, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.String, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidClrMappingException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateOffsetToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateTimeOffsetToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateTimeOffsetToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateTimeToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DayTimeDurationToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecimalToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecimalToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecimalToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DurationToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GDayOffsetToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GDayToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultClrType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlTypeName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GMonthDayOffsetToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GMonthDayToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GMonthOffsetToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GMonthToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GYearMonthOffsetToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GYearMonthToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GYearOffsetToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GYearToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Int32ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Int32ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Int32ToSByte", 
      new JSIL.MethodSignature($.SByte, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Int32ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Int64ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Int64ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDerivedFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "QNameToString", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "QNameToString", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToBase64Binary", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToDate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToDateOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToDayTimeDuration", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToDuration", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGDay", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGDayOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGMonth", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGMonthDay", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGMonthDayOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGMonthOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGYear", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGYearMonth", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGYearMonthOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGYearOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToHexBinary", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToQName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToYearMonthDuration", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeOffsetToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UntypedAtomicToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UntypedAtomicToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "YearMonthDurationToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.TimeSpan")], [])
    );

    $.Field({Static:false, Public:false}, "schemaType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType")); 
    $.Field({Static:false, Public:false}, "typeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode")); 
    $.Field({Static:false, Public:false}, "clrTypeDefault", $asm01.TypeRef("System.Type")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ICollectionType", $asm01.TypeRef("System.Type"), $asm01.System.Collections.ICollection.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "IEnumerableType", $asm01.TypeRef("System.Type"), $asm01.System.Collections.IEnumerable.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "IListType", $asm01.TypeRef("System.Type"), $asm01.System.Collections.IList.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ObjectArrayType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.Object).__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "StringArrayType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.String).__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "XmlAtomicValueArrayType", $asm01.TypeRef("System.Type"), System.Array.Of($asm05.System.Xml.Schema.XmlAtomicValue).__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DecimalType", $asm01.TypeRef("System.Type"), $asm01.System.Decimal.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Int32Type", $asm01.TypeRef("System.Type"), $asm01.System.Int32.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Int64Type", $asm01.TypeRef("System.Type"), $asm01.System.Int64.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "StringType", $asm01.TypeRef("System.Type"), $asm01.System.String.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "XmlAtomicValueType", $asm01.TypeRef("System.Type"), $asm05.System.Xml.Schema.XmlAtomicValue.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ObjectType", $asm01.TypeRef("System.Type"), $asm01.System.Object.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ByteType", $asm01.TypeRef("System.Type"), $asm01.System.Byte.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Int16Type", $asm01.TypeRef("System.Type"), $asm01.System.Int16.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SByteType", $asm01.TypeRef("System.Type"), $asm01.System.SByte.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "UInt16Type", $asm01.TypeRef("System.Type"), $asm01.System.UInt16.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "UInt32Type", $asm01.TypeRef("System.Type"), $asm01.System.UInt32.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "UInt64Type", $asm01.TypeRef("System.Type"), $asm01.System.UInt64.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "XPathItemType", $asm01.TypeRef("System.Type"), $asm05.System.Xml.XPath.XPathItem.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DoubleType", $asm01.TypeRef("System.Type"), $asm01.System.Double.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SingleType", $asm01.TypeRef("System.Type"), $asm01.System.Single.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DateTimeType", $asm01.TypeRef("System.Type"), $asm01.System.DateTime.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DateTimeOffsetType", $asm01.TypeRef("System.Type"), $asm01.System.DateTimeOffset.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BooleanType", $asm01.TypeRef("System.Type"), $asm01.System.Boolean.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ByteArrayType", $asm01.TypeRef("System.Type"), System.Array.Of($asm01.System.Byte).__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "XmlQualifiedNameType", $asm01.TypeRef("System.Type"), $asm05.System.Xml.XmlQualifiedName.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "UriType", $asm01.TypeRef("System.Type"), $asm02.System.Uri.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "TimeSpanType", $asm01.TypeRef("System.Type"), $asm01.System.TimeSpan.__Type__); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "XPathNavigatorType", $asm01.TypeRef("System.Type"), $asm05.System.Xml.XPath.XPathNavigator.__Type__); 
    $.Property({Static:false, Public:false}, "SchemaType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:false}, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false}, "XmlTypeName", $.String);

    $.Property({Static:false, Public:false}, "DefaultClrType", $asm01.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlNumeric10Converter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlNumeric10Converter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Decimal"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int32, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int64, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardDestination", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardSource", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlNumeric2Converter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlNumeric2Converter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Double, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Single, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlDateTimeConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlDateTimeConverter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.DateTimeOffset"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlBooleanConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlBooleanConverter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Boolean, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlMiscConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlMiscConverter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardDestination", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardSource", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlStringConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlStringConverter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlListConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlListConverter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlBaseConverter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlBaseConverter"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeListType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlValueConverter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidClrMappingException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsListType", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ListAsString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Collections.IEnumerable"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StringAsList", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.List`1", [$.String]), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$.Object, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToList", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IList"), [$.Object, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.Field({Static:false, Public:false}, "atomicConverter", $asm05.TypeRef("System.Xml.Schema.XmlValueConverter")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlUntypedConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlListConverter"), "System.Xml.Schema.XmlUntypedConverter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeListType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Boolean, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.DateTimeOffset"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Decimal"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Double, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int32, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int64, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Single, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardDestination", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardSource", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SupportsType", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.Field({Static:false, Public:false}, "allowListToList", $.Boolean); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Untyped", $asm05.TypeRef("System.Xml.Schema.XmlValueConverter")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "UntypedList", $asm05.TypeRef("System.Xml.Schema.XmlValueConverter")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlNodeConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlNodeConverter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Node", $asm05.TypeRef("System.Xml.Schema.XmlValueConverter")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlAnyConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlAnyConverter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlTypeCode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Boolean, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.DateTime"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.DateTimeOffset"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Decimal"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Double, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int32, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int64, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Single, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardDestination", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardSource", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Decimal"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToNavigator", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm05.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Object], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Item", $asm05.TypeRef("System.Xml.Schema.XmlValueConverter")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "AnyAtomic", $asm05.TypeRef("System.Xml.Schema.XmlValueConverter")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlAnyListConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlListConverter"), "System.Xml.Schema.XmlAnyListConverter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlBaseConverter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "ItemList", $asm05.TypeRef("System.Xml.Schema.XmlValueConverter")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "AnyAtomicList", $asm05.TypeRef("System.Xml.Schema.XmlValueConverter")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlUnionConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlBaseConverter"), "System.Xml.Schema.XmlUnionConverter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.Field({Static:false, Public:false}, "converters", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlValueConverter")])); 
    $.Field({Static:false, Public:false}, "hasAtomicMember", $.Boolean); 
    $.Field({Static:false, Public:false}, "hasListMember", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XsdBuilder$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.SchemaBuilder"), "System.Xml.Schema.XsdBuilder", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.XmlNamespaceManager"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchema"), $asm05.TypeRef("System.Xml.XmlNameTable"), 
          $asm05.TypeRef("System.Xml.Schema.SchemaNames"), $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddParticle", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAnnotated_Id", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAny_Namespace", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAny_ProcessContents", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAnyAttribute_Namespace", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAnyAttribute_ProcessContents", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAppinfo_Source", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Default", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Fixed", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Form", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Name", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Ref", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Type", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Use", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttributeGroup_Name", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttributeGroupRef_Ref", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildComplexContent_Mixed", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildComplexContentExtension_Base", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildComplexContentRestriction_Base", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildComplexType_Abstract", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildComplexType_Block", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildComplexType_Final", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildComplexType_Mixed", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildComplexType_Name", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildDocumentation_Source", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildDocumentation_XmlLang", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Abstract", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Block", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Default", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Final", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Fixed", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Form", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_MaxOccurs", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_MinOccurs", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Name", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Nillable", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Ref", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_SubstitutionGroup", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Type", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildFacet_Fixed", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildFacet_Value", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildField_XPath", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildGroup_Name", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildGroupRef_Ref", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildIdentityConstraint_Name", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildIdentityConstraint_Refer", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildImport_Namespace", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildImport_SchemaLocation", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildInclude_SchemaLocation", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildNotation_Name", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildNotation_Public", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildNotation_System", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildParticle_MaxOccurs", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildParticle_MinOccurs", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildRedefine_SchemaLocation", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSchema_AttributeFormDefault", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSchema_BlockDefault", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSchema_ElementFormDefault", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSchema_FinalDefault", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSchema_TargetNamespace", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSchema_Version", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSelector_XPath", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSimpleContentExtension_Base", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSimpleContentRestriction_Base", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSimpleType_Final", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSimpleType_Name", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSimpleTypeList_ItemType", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSimpleTypeRestriction_Base", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSimpleTypeUnion_MemberTypes", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EndAppinfo", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndChildren", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EndDocumentation", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EndRedefine", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaNames/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParentContainer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParentElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaNames/Token"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetContainer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextState", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitAll", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitAnnotation", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitAny", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitAnyAttribute", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitAppinfo", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitAttribute", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitAttributeGroup", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitAttributeGroupRef", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitChoice", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitComplexContent", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitComplexContentExtension", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitComplexContentRestriction", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitComplexType", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitDocumentation", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitElement", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitFacet", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitField", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitGroup", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitGroupRef", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitIdentityConstraint", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitImport", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitInclude", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitNotation", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitRedefine", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSchema", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSelector", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSequence", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSimpleContent", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSimpleContentExtension", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSimpleContentRestriction", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSimpleType", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSimpleTypeList", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSimpleTypeRestriction", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSimpleTypeUnion", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsContentParsed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSkipableElement", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseBlockFinalEnum", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseEnum", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseQName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseUriReference", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessElement", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessMarkup", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNode")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordPosition", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm05.TypeRef("System.Xml.Schema.XmlSeverityType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetContainer", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMaxOccurs", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMinOccurs", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartChildren", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "STACK_INCREMENT", 10); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SchemaElement", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SchemaSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AttributeSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ElementSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexTypeSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentExtensionSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentRestrictionSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentExtensionSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentRestrictionSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeRestrictionSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeListSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeUnionSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "RedefineSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AttributeGroupSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GroupSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AllSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ChoiceSequenceSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "IdentityConstraintSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AnnotationSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AnnotatedSubelements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SchemaAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AttributeAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ElementAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexTypeAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentExtensionAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentRestrictionAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentExtensionAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentRestrictionAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeRestrictionAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeUnionAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeListAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AttributeGroupAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AttributeGroupRefAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GroupAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "GroupRefAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ParticleAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AnyAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "IdentityConstraintAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SelectorAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "FieldAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "NotationAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "IncludeAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ImportAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "FacetAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AnyAttributeAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DocumentationAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AppinfoAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "RedefineAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "AnnotationAttributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SchemaEntries", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdEntry")])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DerivationMethodValues", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DerivationMethodStrings", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "FormStringValues", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "UseStringValues", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ProcessContentsStringValues", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:false, Public:false}, "reader", $asm05.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "positionInfo", $asm05.TypeRef("System.Xml.PositionInfo")); 
    $.Field({Static:false, Public:false}, "currentEntry", $asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdEntry")); 
    $.Field({Static:false, Public:false}, "nextEntry", $asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdEntry")); 
    $.Field({Static:false, Public:false}, "hasChild", $.Boolean); 
    $.Field({Static:false, Public:false}, "stateHistory", $asm05.TypeRef("System.Xml.HWStack")); 
    $.Field({Static:false, Public:false}, "containerStack", $asm01.TypeRef("System.Collections.Stack")); 
    $.Field({Static:false, Public:false}, "nameTable", $asm05.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "schemaNames", $asm05.TypeRef("System.Xml.Schema.SchemaNames")); 
    $.Field({Static:false, Public:false}, "namespaceManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Field({Static:false, Public:false}, "canIncludeImport", $.Boolean); 
    $.Field({Static:false, Public:false}, "schema", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    $.Field({Static:false, Public:false}, "xso", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")); 
    $.Field({Static:false, Public:false}, "element", $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")); 
    $.Field({Static:false, Public:false}, "anyElement", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAny")); 
    $.Field({Static:false, Public:false}, "attribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")); 
    $.Field({Static:false, Public:false}, "anyAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
    $.Field({Static:false, Public:false}, "complexType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")); 
    $.Field({Static:false, Public:false}, "simpleType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")); 
    $.Field({Static:false, Public:false}, "complexContent", $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexContent")); 
    $.Field({Static:false, Public:false}, "complexContentExtension", $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension")); 
    $.Field({Static:false, Public:false}, "complexContentRestriction", $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexContentRestriction")); 
    $.Field({Static:false, Public:false}, "simpleContent", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleContent")); 
    $.Field({Static:false, Public:false}, "simpleContentExtension", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension")); 
    $.Field({Static:false, Public:false}, "simpleContentRestriction", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentRestriction")); 
    $.Field({Static:false, Public:false}, "simpleTypeUnion", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeUnion")); 
    $.Field({Static:false, Public:false}, "simpleTypeList", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeList")); 
    $.Field({Static:false, Public:false}, "simpleTypeRestriction", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeRestriction")); 
    $.Field({Static:false, Public:false}, "group", $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup")); 
    $.Field({Static:false, Public:false}, "groupRef", $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupRef")); 
    $.Field({Static:false, Public:false}, "all", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAll")); 
    $.Field({Static:false, Public:false}, "choice", $asm05.TypeRef("System.Xml.Schema.XmlSchemaChoice")); 
    $.Field({Static:false, Public:false}, "sequence", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSequence")); 
    $.Field({Static:false, Public:false}, "particle", $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle")); 
    $.Field({Static:false, Public:false}, "attributeGroup", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")); 
    $.Field({Static:false, Public:false}, "attributeGroupRef", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroupRef")); 
    $.Field({Static:false, Public:false}, "notation", $asm05.TypeRef("System.Xml.Schema.XmlSchemaNotation")); 
    $.Field({Static:false, Public:false}, "identityConstraint", $asm05.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint")); 
    $.Field({Static:false, Public:false}, "xpath", $asm05.TypeRef("System.Xml.Schema.XmlSchemaXPath")); 
    $.Field({Static:false, Public:false}, "include", $asm05.TypeRef("System.Xml.Schema.XmlSchemaInclude")); 
    $.Field({Static:false, Public:false}, "$import", $asm05.TypeRef("System.Xml.Schema.XmlSchemaImport")); 
    $.Field({Static:false, Public:false}, "annotation", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")); 
    $.Field({Static:false, Public:false}, "appInfo", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAppInfo")); 
    $.Field({Static:false, Public:false}, "documentation", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDocumentation")); 
    $.Field({Static:false, Public:false}, "facet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet")); 
    $.Field({Static:false, Public:false}, "markup", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlNode")])); 
    $.Field({Static:false, Public:false}, "redefine", $asm05.TypeRef("System.Xml.Schema.XmlSchemaRedefine")); 
    $.Field({Static:false, Public:false}, "validationEventHandler", $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")); 
    $.Field({Static:false, Public:false}, "unhandledAttributes", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "namespaces", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Property({Static:false, Public:false}, "CurrentElement", $asm05.TypeRef("System.Xml.Schema.SchemaNames/Token"));

    $.Property({Static:false, Public:false}, "ParentElement", $asm05.TypeRef("System.Xml.Schema.SchemaNames/Token"));

    $.Property({Static:false, Public:false}, "ParentContainer", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.XsdBuilder/State", false, {
    Root: 0, 
    Schema: 1, 
    Annotation: 2, 
    Include: 3, 
    Import: 4, 
    Element: 5, 
    Attribute: 6, 
    AttributeGroup: 7, 
    AttributeGroupRef: 8, 
    AnyAttribute: 9, 
    Group: 10, 
    GroupRef: 11, 
    All: 12, 
    Choice: 13, 
    Sequence: 14, 
    Any: 15, 
    Notation: 16, 
    SimpleType: 17, 
    ComplexType: 18, 
    ComplexContent: 19, 
    ComplexContentRestriction: 20, 
    ComplexContentExtension: 21, 
    SimpleContent: 22, 
    SimpleContentExtension: 23, 
    SimpleContentRestriction: 24, 
    SimpleTypeUnion: 25, 
    SimpleTypeList: 26, 
    SimpleTypeRestriction: 27, 
    Unique: 28, 
    Key: 29, 
    KeyRef: 30, 
    Selector: 31, 
    Field: 32, 
    MinExclusive: 33, 
    MinInclusive: 34, 
    MaxExclusive: 35, 
    MaxInclusive: 36, 
    TotalDigits: 37, 
    FractionDigits: 38, 
    Length: 39, 
    MinLength: 40, 
    MaxLength: 41, 
    Enumeration: 42, 
    Pattern: 43, 
    WhiteSpace: 44, 
    AppInfo: 45, 
    Documentation: 46, 
    Redefine: 47
  }, false
);

JSIL.MakeDelegate("System.Xml.Schema.XsdBuilder/XsdBuildFunction", false, []);

JSIL.MakeDelegate("System.Xml.Schema.XsdBuilder/XsdInitFunction", false, []);

JSIL.MakeDelegate("System.Xml.Schema.XsdBuilder/XsdEndChildFunction", false, []);

(function XsdAttributeEntry$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XsdBuilder/XsdAttributeEntry", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.SchemaNames/Token"), $asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdBuildFunction")], [])
    );

    $.Field({Static:false, Public:true }, "Attribute", $asm05.TypeRef("System.Xml.Schema.SchemaNames/Token")); 
    $.Field({Static:false, Public:true }, "BuildFunc", $asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdBuildFunction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XsdEntry$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XsdBuilder/XsdEntry", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.SchemaNames/Token"), $asm05.TypeRef("System.Xml.Schema.XsdBuilder/State"), 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")]), 
          $asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdInitFunction"), $asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdEndChildFunction"), 
          $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:true }, "Name", $asm05.TypeRef("System.Xml.Schema.SchemaNames/Token")); 
    $.Field({Static:false, Public:true }, "CurrentState", $asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")); 
    $.Field({Static:false, Public:true }, "NextStates", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/State")])); 
    $.Field({Static:false, Public:true }, "Attributes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdAttributeEntry")])); 
    $.Field({Static:false, Public:true }, "InitFunc", $asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdInitFunction")); 
    $.Field({Static:false, Public:true }, "EndChildFunc", $asm05.TypeRef("System.Xml.Schema.XsdBuilder/XsdEndChildFunction")); 
    $.Field({Static:false, Public:true }, "ParseContent", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function BuilderNamespaceManager$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlNamespaceManager"), "System.Xml.Schema.XsdBuilder/BuilderNamespaceManager", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNamespaceManager"), $asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "nsMgr", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Field({Static:false, Public:false}, "reader", $asm05.TypeRef("System.Xml.XmlReader")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.XsdDateTimeFlags", false, {
    DateTime: 1, 
    Time: 2, 
    Date: 4, 
    GYearMonth: 8, 
    GYear: 16, 
    GMonthDay: 32, 
    GDay: 64, 
    GMonth: 128, 
    AllXsd: 255, 
    XdrDateTimeNoTz: 256, 
    XdrDateTime: 512, 
    XdrTimeNoTz: 1024
  }, true
);

(function XsdDateTime$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.Schema.XsdDateTime", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Schema.XsdDateTimeFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XsdDateTime/Parser")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.DateTime"), $asm05.TypeRef("System.Xml.Schema.XsdDateTimeFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.DateTimeOffset"), $asm05.TypeRef("System.Xml.Schema.XsdDateTimeFlags")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Day", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fraction", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Hour", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalKind", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XsdDateTime/XsdDateTimeKind"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalTypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XsdDateTime/DateTimeTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeKind"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Minute", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Month", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Second", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlTypeCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Year", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ZoneHour", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ZoneMinute", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetZuluDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitiateXsdDateTime", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XsdDateTime/Parser")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IntToCharArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTimeOffset"), [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrintDate", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrintTime", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrintZone", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShortToCharArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToZulu", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm05.TypeRef("System.Xml.Schema.XsdDateTimeFlags"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.Constant({Static:true , Public:false}, "TypeMask", 4278190080); 
    $.Constant({Static:true , Public:false}, "KindMask", 16711680); 
    $.Constant({Static:true , Public:false}, "ZoneHourMask", 65280); 
    $.Constant({Static:true , Public:false}, "ZoneMinuteMask", 255); 
    $.Constant({Static:true , Public:false}, "TypeShift", 24); 
    $.Constant({Static:true , Public:false}, "KindShift", 16); 
    $.Constant({Static:true , Public:false}, "ZoneHourShift", 8); 
    $.Constant({Static:true , Public:false}, "maxFractionDigits", 7); 
    $.Field({Static:false, Public:false}, "dt", $asm01.TypeRef("System.DateTime")); 
    $.Field({Static:false, Public:false}, "extra", $.UInt32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy_", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy_MM", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy_MM_", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy_MM_dd", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy_MM_ddT", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LzHH", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LzHH_", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LzHH_mm", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LzHH_mm_", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LzHH_mm_ss", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz_", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz_zz", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz_zz_", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz_zz_zz", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz__", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz__mm", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz__mm_", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz__mm__", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz__mm_dd", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz___", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz___dd", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "typeCodes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlTypeCode")])); 
    $.Property({Static:false, Public:false}, "InternalTypeCode", $asm05.TypeRef("System.Xml.Schema.XsdDateTime/DateTimeTypeCode"));

    $.Property({Static:false, Public:false}, "InternalKind", $asm05.TypeRef("System.Xml.Schema.XsdDateTime/XsdDateTimeKind"));

    $.Property({Static:false, Public:true }, "TypeCode", $asm05.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true }, "Kind", $asm01.TypeRef("System.DateTimeKind"));

    $.Property({Static:false, Public:true }, "Year", $.Int32);

    $.Property({Static:false, Public:true }, "Month", $.Int32);

    $.Property({Static:false, Public:true }, "Day", $.Int32);

    $.Property({Static:false, Public:true }, "Hour", $.Int32);

    $.Property({Static:false, Public:true }, "Minute", $.Int32);

    $.Property({Static:false, Public:true }, "Second", $.Int32);

    $.Property({Static:false, Public:true }, "Fraction", $.Int32);

    $.Property({Static:false, Public:true }, "ZoneHour", $.Int32);

    $.Property({Static:false, Public:true }, "ZoneMinute", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.XsdDateTime/DateTimeTypeCode", false, {
    DateTime: 0, 
    Time: 1, 
    Date: 2, 
    GYearMonth: 3, 
    GYear: 4, 
    GMonthDay: 5, 
    GDay: 6, 
    GMonth: 7, 
    XdrDateTime: 8
  }, false
);

JSIL.MakeEnum(
  "System.Xml.Schema.XsdDateTime/XsdDateTimeKind", false, {
    Unspecified: 0, 
    Zulu: 1, 
    LocalWestOfZulu: 2, 
    LocalEastOfZulu: 3
  }, false
);

(function Parser$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.Schema.XsdDateTime/Parser", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, "Parse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm05.TypeRef("System.Xml.Schema.XsdDateTimeFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Parse2Dig", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Parse4Dig", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseChar", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDate", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseTime", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseTimeAndWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseTimeAndZoneAndWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseZoneAndWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Test", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XsdDateTimeFlags"), $asm05.TypeRef("System.Xml.Schema.XsdDateTimeFlags")], [])
    );

    $.Constant({Static:true , Public:false}, "leapYear", 1904); 
    $.Constant({Static:true , Public:false}, "firstMonth", 1); 
    $.Constant({Static:true , Public:false}, "firstDay", 1); 
    $.Field({Static:false, Public:true }, "typeCode", $asm05.TypeRef("System.Xml.Schema.XsdDateTime/DateTimeTypeCode")); 
    $.Field({Static:false, Public:true }, "year", $.Int32); 
    $.Field({Static:false, Public:true }, "month", $.Int32); 
    $.Field({Static:false, Public:true }, "day", $.Int32); 
    $.Field({Static:false, Public:true }, "hour", $.Int32); 
    $.Field({Static:false, Public:true }, "minute", $.Int32); 
    $.Field({Static:false, Public:true }, "second", $.Int32); 
    $.Field({Static:false, Public:true }, "fraction", $.Int32); 
    $.Field({Static:false, Public:true }, "kind", $asm05.TypeRef("System.Xml.Schema.XsdDateTime/XsdDateTimeKind")); 
    $.Field({Static:false, Public:true }, "zoneHour", $.Int32); 
    $.Field({Static:false, Public:true }, "zoneMinute", $.Int32); 
    $.Field({Static:false, Public:false}, "text", $.String); 
    $.Field({Static:false, Public:false}, "$length", $.Int32); 
    $.Field({Static:true , Public:false}, "Power10", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XsdDuration$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.Schema.XsdDuration", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.TimeSpan"), $asm05.TypeRef("System.Xml.Schema.XsdDuration/DurationType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Schema.XsdDuration/DurationType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Days", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Hours", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNegative", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Microseconds", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Milliseconds", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Minutes", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Months", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Nanoseconds", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Seconds", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Years", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Schema.XsdDuration/DurationType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToTimeSpan", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToTimeSpan", 
      new JSIL.MethodSignature($asm01.TypeRef("System.TimeSpan"), [$asm05.TypeRef("System.Xml.Schema.XsdDuration/DurationType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParse", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParse", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $asm05.TypeRef("System.Xml.Schema.XsdDuration/DurationType"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseDigits", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryToTimeSpan", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.TimeSpan")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryToTimeSpan", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm05.TypeRef("System.Xml.Schema.XsdDuration/DurationType"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.TimeSpan")])], [])
    );

    $.Constant({Static:true , Public:false}, "NegativeBit", 2147483648); 
    $.Field({Static:false, Public:false}, "years", $.Int32); 
    $.Field({Static:false, Public:false}, "months", $.Int32); 
    $.Field({Static:false, Public:false}, "days", $.Int32); 
    $.Field({Static:false, Public:false}, "hours", $.Int32); 
    $.Field({Static:false, Public:false}, "minutes", $.Int32); 
    $.Field({Static:false, Public:false}, "seconds", $.Int32); 
    $.Field({Static:false, Public:false}, "nanoseconds", $.UInt32); 
    $.Property({Static:false, Public:true }, "IsNegative", $.Boolean);

    $.Property({Static:false, Public:true }, "Years", $.Int32);

    $.Property({Static:false, Public:true }, "Months", $.Int32);

    $.Property({Static:false, Public:true }, "Days", $.Int32);

    $.Property({Static:false, Public:true }, "Hours", $.Int32);

    $.Property({Static:false, Public:true }, "Minutes", $.Int32);

    $.Property({Static:false, Public:true }, "Seconds", $.Int32);

    $.Property({Static:false, Public:true }, "Nanoseconds", $.Int32);

    $.Property({Static:false, Public:true }, "Microseconds", $.Int32);

    $.Property({Static:false, Public:true }, "Milliseconds", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.XsdDuration/Parts", false, {
    HasNone: 0, 
    HasYears: 1, 
    HasMonths: 2, 
    HasDays: 4, 
    HasHours: 8, 
    HasMinutes: 16, 
    HasSeconds: 32
  }, false
);

JSIL.MakeEnum(
  "System.Xml.Schema.XsdDuration/DurationType", false, {
    Duration: 0, 
    YearMonthDuration: 1, 
    DayTimeDuration: 2
  }, false
);

(function XsdValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.BaseValidator"), "System.Xml.Schema.XsdValidator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.BaseValidator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlValidatingReaderImpl"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaCollection"), 
          $asm05.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddID", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIdentityConstraints", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AttributeIdentityConstraints", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $.String, 
          $asm05.TypeRef("System.Xml.Schema.SchemaAttDef")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForwardRefs", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckValue", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Schema.SchemaAttDef")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ElementIdentityConstraints", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndElementIdentityConstraints", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FastGetElementDecl", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindId", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DtQName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasIdentityConstraints", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasSchema", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsInlineSchemaStarted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreserveWhitespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsXSDRoot", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadSchema", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadSchemaFromLocation", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessElement", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessInlineSchema", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessTokenizedType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlTokenizedType"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessXsiAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.XmlQualifiedName")]), $jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Context", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationState")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThoroughGetElementDecl", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"), [
          $asm05.TypeRef("System.Xml.Schema.SchemaElementDecl"), $asm05.TypeRef("System.Xml.XmlQualifiedName"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnWrapUnion", 
      new JSIL.MethodSignature($.Object, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateChildElement", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEndStartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateStartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateStartElementIdentityConstraints", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "STACK_INCREMENT", 10); 
    $.Field({Static:false, Public:false}, "startIDConstraint", $.Int32); 
    $.Field({Static:false, Public:false}, "validationStack", $asm05.TypeRef("System.Xml.HWStack")); 
    $.Field({Static:false, Public:false}, "attPresence", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "nsManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Field({Static:false, Public:false}, "bManageNamespaces", $.Boolean); 
    $.Field({Static:false, Public:false}, "IDs", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "idRefListHead", $asm05.TypeRef("System.Xml.Schema.IdRefNode")); 
    $.Field({Static:false, Public:false}, "inlineSchemaParser", $asm05.TypeRef("System.Xml.Schema.Parser")); 
    $.Field({Static:false, Public:false}, "processContents", $asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "dtCDATA", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "dtQName", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "dtStringArray", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype")); 
    $.Field({Static:false, Public:false}, "NsXmlNs", $.String); 
    $.Field({Static:false, Public:false}, "NsXs", $.String); 
    $.Field({Static:false, Public:false}, "NsXsi", $.String); 
    $.Field({Static:false, Public:false}, "XsiType", $.String); 
    $.Field({Static:false, Public:false}, "XsiNil", $.String); 
    $.Field({Static:false, Public:false}, "XsiSchemaLocation", $.String); 
    $.Field({Static:false, Public:false}, "XsiNoNamespaceSchemaLocation", $.String); 
    $.Field({Static:false, Public:false}, "XsdSchema", $.String); 
    $.Property({Static:false, Public:true }, "Context", $asm05.TypeRef("System.Xml.Schema.ValidationState"));

    $.Property({Static:true , Public:true }, "DtQName", $asm05.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    $.Property({Static:false, Public:false}, "IsInlineSchemaStarted", $.Boolean);

    $.Property({Static:false, Public:false}, "HasSchema", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", $.Boolean);

    $.Property({Static:false, Public:false}, "HasIdentityConstraints", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaInference$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Schema.XmlSchemaInference", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $asm05.TypeRef("System.Xml.Schema.XmlSchema"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.Schema.XmlSchema"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSimpleContentExtension", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateNewElementforChoice", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateXmlSchema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateTime", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [$asm01.TypeRef("System.Collections.ICollection"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAttributeRef", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [
          $asm01.TypeRef("System.Collections.ICollection"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindElementRef", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindGlobalElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Schema.XmlSchema")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindMatchingElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [
          $.Boolean, $asm05.TypeRef("System.Xml.XmlReader"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $asm05.TypeRef("System.Xml.Schema.XmlSchema"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Occurrence", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaInference/InferenceOption"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeInference", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaInference/InferenceOption"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEffectiveSchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaType", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InferElement", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.Boolean, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchema")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "InferSchema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "InferSchema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), [$asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InferSchema1", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), [$asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InferSimpleType", 
      new JSIL.MethodSignature($.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeExistingAttributesOptional", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveAttributes", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAttributes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")]), $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), 
          $.Boolean, $asm05.TypeRef("System.Xml.Schema.XmlSchema")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RefineSimpleType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Occurrence", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaInference/InferenceOption")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypeInference", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaInference/InferenceOption")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMinMaxOccurs", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SwitchUseToOptional", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.Constant({Static:true , Public:false}, "HC_ST_boolean", 0); 
    $.Constant({Static:true , Public:false}, "HC_ST_byte", 1); 
    $.Constant({Static:true , Public:false}, "HC_ST_unsignedByte", 2); 
    $.Constant({Static:true , Public:false}, "HC_ST_short", 3); 
    $.Constant({Static:true , Public:false}, "HC_ST_unsignedShort", 4); 
    $.Constant({Static:true , Public:false}, "HC_ST_int", 5); 
    $.Constant({Static:true , Public:false}, "HC_ST_unsignedInt", 6); 
    $.Constant({Static:true , Public:false}, "HC_ST_long", 7); 
    $.Constant({Static:true , Public:false}, "HC_ST_unsignedLong", 8); 
    $.Constant({Static:true , Public:false}, "HC_ST_integer", 9); 
    $.Constant({Static:true , Public:false}, "HC_ST_decimal", 10); 
    $.Constant({Static:true , Public:false}, "HC_ST_float", 11); 
    $.Constant({Static:true , Public:false}, "HC_ST_double", 12); 
    $.Constant({Static:true , Public:false}, "HC_ST_duration", 13); 
    $.Constant({Static:true , Public:false}, "HC_ST_dateTime", 14); 
    $.Constant({Static:true , Public:false}, "HC_ST_time", 15); 
    $.Constant({Static:true , Public:false}, "HC_ST_date", 16); 
    $.Constant({Static:true , Public:false}, "HC_ST_gYearMonth", 17); 
    $.Constant({Static:true , Public:false}, "HC_ST_string", 18); 
    $.Constant({Static:true , Public:false}, "HC_ST_Count", 19); 
    $.Constant({Static:true , Public:false}, "TF_boolean", 1); 
    $.Constant({Static:true , Public:false}, "TF_byte", 2); 
    $.Constant({Static:true , Public:false}, "TF_unsignedByte", 4); 
    $.Constant({Static:true , Public:false}, "TF_short", 8); 
    $.Constant({Static:true , Public:false}, "TF_unsignedShort", 16); 
    $.Constant({Static:true , Public:false}, "TF_int", 32); 
    $.Constant({Static:true , Public:false}, "TF_unsignedInt", 64); 
    $.Constant({Static:true , Public:false}, "TF_long", 128); 
    $.Constant({Static:true , Public:false}, "TF_unsignedLong", 256); 
    $.Constant({Static:true , Public:false}, "TF_integer", 512); 
    $.Constant({Static:true , Public:false}, "TF_decimal", 1024); 
    $.Constant({Static:true , Public:false}, "TF_float", 2048); 
    $.Constant({Static:true , Public:false}, "TF_double", 4096); 
    $.Constant({Static:true , Public:false}, "TF_duration", 8192); 
    $.Constant({Static:true , Public:false}, "TF_dateTime", 16384); 
    $.Constant({Static:true , Public:false}, "TF_time", 32768); 
    $.Constant({Static:true , Public:false}, "TF_date", 65536); 
    $.Constant({Static:true , Public:false}, "TF_gYearMonth", 131072); 
    $.Constant({Static:true , Public:false}, "TF_string", 262144); 
    $.Field({Static:true , Public:false}, "ST_boolean", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_byte", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_unsignedByte", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_short", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_unsignedShort", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_int", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_unsignedInt", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_long", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_unsignedLong", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_integer", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_decimal", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_float", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_double", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_duration", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_dateTime", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_time", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_date", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_gYearMonth", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_string", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ST_anySimpleType", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "SimpleTypes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlQualifiedName")])); 
    $.Field({Static:false, Public:false}, "rootSchema", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    $.Field({Static:false, Public:false}, "schemaSet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
    $.Field({Static:false, Public:false}, "xtr", $asm05.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "nametable", $asm05.TypeRef("System.Xml.NameTable")); 
    $.Field({Static:false, Public:false}, "TargetNamespace", $.String); 
    $.Field({Static:false, Public:false}, "NamespaceManager", $asm05.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Field({Static:false, Public:false}, "schemaList", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "occurrence", $asm05.TypeRef("System.Xml.Schema.XmlSchemaInference/InferenceOption")); 
    $.Field({Static:false, Public:false}, "typeInference", $asm05.TypeRef("System.Xml.Schema.XmlSchemaInference/InferenceOption")); 
    $.Property({Static:false, Public:true }, "Occurrence", $asm05.TypeRef("System.Xml.Schema.XmlSchemaInference/InferenceOption"));

    $.Property({Static:false, Public:true }, "TypeInference", $asm05.TypeRef("System.Xml.Schema.XmlSchemaInference/InferenceOption"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Schema.XmlSchemaInference/InferenceOption", false, {
    Restricted: 0, 
    Relaxed: 1
  }, false
);

(function XmlSchemaInferenceException$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Schema.XmlSchemaException"), "System.Xml.Schema.XmlSchemaInferenceException", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Exception"), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm01.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xml.Serialization");
(function CodeExporter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.CodeExporter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeNamespace"), $asm02.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm01.TypeRef("System.Collections.Hashtable")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddIncludeMetadata", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm05.TypeRef("System.Xml.Serialization.StructMapping"), 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPropertyChangedNotifier", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.CodeDom.CodeTypeDeclaration")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTypeMetadata", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm01.TypeRef("System.Type"), 
          $.String, $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddWarningComment", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.CodeDom.CodeCommentStatementCollection"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckScope", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeScope")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreatePropertyDeclaration", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.CodeMemberProperty"), [
          $asm02.TypeRef("System.CodeDom.CodeMemberField"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnsureTypesExported", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.Accessor")]), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExportConstant", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm05.TypeRef("System.Xml.Serialization.ConstantMapping"), 
          $asm01.TypeRef("System.Type"), $.Boolean, 
          $.Int64
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExportDerivedStructs", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportEnum", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm05.TypeRef("System.Xml.Serialization.EnumMapping"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportRoot", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.StructMapping"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindAttributeDeclaration", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.CodeAttributeDeclaration"), [$asm01.TypeRef("System.Type"), $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeCompileUnit", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.CodeCompileUnit"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeNamespace", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.CodeNamespace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeProvider", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnableDataBinding", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExportedClasses", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExportedMappings", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GeneratedCodeAttribute", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.CodeAttributeDeclaration"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenerateProperties", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IncludeMetadata", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PropertyChangedEvent", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.CodeMemberEvent"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RaisePropertyChangedEventMethod", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.CodeMemberMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Scope", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeScope"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProductVersion", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Reflection.Assembly")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeFieldName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PromoteType", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type"), $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldInclude", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Serialization.ArrayMapping")], [])
    );

    $.Field({Static:false, Public:false}, "exportedMappings", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "exportedClasses", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "codeNamespace", $asm02.TypeRef("System.CodeDom.CodeNamespace")); 
    $.Field({Static:false, Public:false}, "codeCompileUnit", $asm02.TypeRef("System.CodeDom.CodeCompileUnit")); 
    $.Field({Static:false, Public:false}, "rootExported", $.Boolean); 
    $.Field({Static:false, Public:false}, "scope", $asm05.TypeRef("System.Xml.Serialization.TypeScope")); 
    $.Field({Static:false, Public:false}, "includeMetadata", $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection")); 
    $.Field({Static:false, Public:false}, "options", $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions")); 
    $.Field({Static:false, Public:false}, "codeProvider", $asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider")); 
    $.Field({Static:false, Public:false}, "generatedCodeAttribute", $asm02.TypeRef("System.CodeDom.CodeAttributeDeclaration")); 
    $.Property({Static:false, Public:false}, "CodeCompileUnit", $asm02.TypeRef("System.CodeDom.CodeCompileUnit"));

    $.Property({Static:false, Public:false}, "CodeNamespace", $asm02.TypeRef("System.CodeDom.CodeNamespace"));

    $.Property({Static:false, Public:false}, "CodeProvider", $asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider"));

    $.Property({Static:false, Public:false}, "ExportedClasses", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "ExportedMappings", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "GenerateProperties", $.Boolean);

    $.Property({Static:false, Public:false}, "GeneratedCodeAttribute", $asm02.TypeRef("System.CodeDom.CodeAttributeDeclaration"));

    $.Property({Static:false, Public:true }, "IncludeMetadata", $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"));

    $.Property({Static:false, Public:false}, "Scope", $asm05.TypeRef("System.Xml.Serialization.TypeScope"));

    $.Property({Static:false, Public:false}, "EnableDataBinding", $.Boolean);

    $.Property({Static:true , Public:false}, "RaisePropertyChangedEventMethod", $asm02.TypeRef("System.CodeDom.CodeMemberMethod"));

    $.Property({Static:true , Public:false}, "PropertyChangedEvent", $asm02.TypeRef("System.CodeDom.CodeMemberEvent"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Serialization.CodeGenerationOptions", true, {
    None: 0, 
    GenerateProperties: 1, 
    GenerateNewAsync: 2, 
    GenerateOldAsync: 4, 
    GenerateOrder: 8, 
    EnableDataBinding: 16
  }, true
);

(function CodeIdentifier$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.CodeIdentifier", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm01.TypeRef("System.ObsoleteAttribute"), function () { return ["This class should never get constructed as it contains only static methods."]; });

    $.ExternalMethod({Static:true , Public:false}, "CheckValidIdentifier", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeKeywords", 
      new JSIL.MethodSignature(null, [
          $.String, $asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), 
          $asm01.TypeRef("System.Text.StringBuilder")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeKeywords", 
      new JSIL.MethodSignature($.String, [$.String, $asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCSharpName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCSharpName", 
      new JSIL.MethodSignature($.Int32, [
          $asm01.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), 
          $.Int32, $asm01.TypeRef("System.Text.StringBuilder")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCSharpName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValid", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidStart", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeCamel", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakePascal", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeValid", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeValidInternal", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "MaxIdentifierLength", 511); 
    $.Field({Static:true , Public:false}, "csharp", $asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CaseInsensitiveKeyComparer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Collections.CaseInsensitiveComparer"), "System.Xml.Serialization.CaseInsensitiveKeyComparer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object], [])
    )
      .Overrides(1, "Equals");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object], [])
    )
      .Overrides(1, "GetHashCode");

    $.ImplementInterfaces(
      /* 1 */ $asm01.TypeRef("System.Collections.IEqualityComparer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CodeIdentifiers$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.CodeIdentifiers", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddReserved", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddUnique", 
      new JSIL.MethodSignature($.String, [$.String, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseCamelCasing", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsInUse", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeRightCase", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeUnique", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveReserved", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UseCamelCasing", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "identifiers", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "reservedIdentifiers", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "list", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "camelCase", $.Boolean); 
    $.Property({Static:false, Public:true }, "UseCamelCasing", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TempAssembly$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.TempAssembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), 
          $.String, $.String, 
          $asm01.TypeRef("System.Security.Policy.Evidence")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")]), $asm01.TypeRef("System.Reflection.Assembly"), 
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializerImplementation")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSerializerImplementation")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanRead", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Serialization.XmlMapping"), $asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateAssembly", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.Assembly"), [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")]), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), 
          $.String, $asm01.TypeRef("System.Security.Policy.Evidence"), 
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializerCompilerParameters"), $asm01.TypeRef("System.Reflection.Assembly"), 
          $asm01.TypeRef("System.Collections.Hashtable")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateAssemblyId", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Contract", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializerImplementation"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FileIOPermission", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Permissions.FileIOPermission"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NeedAssembyResolve", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodFromType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [
          $asm01.TypeRef("System.Type"), $.String, 
          $asm01.TypeRef("System.Reflection.Assembly")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetName", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.AssemblyName"), [$asm01.TypeRef("System.Reflection.Assembly"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReferencedAssembly", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.Assembly"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeFromAssembly", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Reflection.Assembly"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitAssemblyMethods", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeReader", 
      new JSIL.MethodSignature($.Object, [
          $asm05.TypeRef("System.Xml.Serialization.XmlMapping"), $asm05.TypeRef("System.Xml.XmlReader"), 
          $asm05.TypeRef("System.Xml.Serialization.XmlDeserializationEvents"), $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeWriter", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.XmlMapping"), $asm05.TypeRef("System.Xml.XmlWriter"), 
          $.Object, $asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSerializerVersionMatch", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Reflection.Assembly"), $asm01.TypeRef("System.Type"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadGeneratedAssembly", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.Assembly"), [
          $asm01.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Serialization.XmlSerializerImplementation")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Log", 
      new JSIL.MethodSignature(null, [$.String, $asm02.TypeRef("System.Diagnostics.EventLogEntryType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEncodingStyle", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.Constant({Static:true , Public:false}, "GeneratedAssemblyNamespace", "Microsoft.Xml.Serialization.GeneratedAssembly"); 
    $.Field({Static:false, Public:false}, "assembly", $asm01.TypeRef("System.Reflection.Assembly")); 
    $.Field({Static:false, Public:false}, "pregeneratedAssmbly", $.Boolean); 
    $.Field({Static:false, Public:false}, "contract", $asm05.TypeRef("System.Xml.Serialization.XmlSerializerImplementation")); 
    $.Field({Static:false, Public:false}, "writerMethods", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "readerMethods", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "methods", $asm05.TypeRef("System.Xml.Serialization.TempAssembly/TempMethodDictionary")); 
    $.Field({Static:true , Public:false}, "emptyObjectArray", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return JSIL.Array.New($asm01.System.Object, 0);
      }); 
    $.Field({Static:false, Public:false}, "assemblies", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:true , Public:false}, "fileIOPermission", $asm01.TypeRef("System.Security.Permissions.FileIOPermission")); 
    $.Property({Static:false, Public:false}, "Contract", $asm05.TypeRef("System.Xml.Serialization.XmlSerializerImplementation"));

    $.Property({Static:true , Public:false}, "FileIOPermission", $asm01.TypeRef("System.Security.Permissions.FileIOPermission"));

    $.Property({Static:false, Public:false}, "NeedAssembyResolve", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TempMethod$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.TempAssembly/TempMethod", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "writeMethod", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "readMethod", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "isSoap", $.Boolean); 
    $.Field({Static:false, Public:false}, "methodKey", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TempMethodDictionary$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Collections.DictionaryBase"), "System.Xml.Serialization.TempAssembly/TempMethodDictionary", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Serialization.TempAssembly/TempMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TempAssembly/TempMethod"), [$.String], [])
    );

    $.Property({Static:false, Public:false}, "Item", $asm05.TypeRef("System.Xml.Serialization.TempAssembly/TempMethod"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function XmlSerializerCompilerParameters$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializerCompilerParameters", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.CodeDom.Compiler.CompilerParameters"), $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$asm02.TypeRef("System.CodeDom.Compiler.CompilerParameters"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeDomParameters", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.Compiler.CompilerParameters"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNeedTempDirAccess", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "needTempDirAccess", $.Boolean); 
    $.Field({Static:false, Public:false}, "parameters", $asm02.TypeRef("System.CodeDom.Compiler.CompilerParameters")); 
    $.Property({Static:false, Public:false}, "IsNeedTempDirAccess", $.Boolean);

    $.Property({Static:false, Public:false}, "CodeDomParameters", $asm02.TypeRef("System.CodeDom.Compiler.CompilerParameters"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TempAssemblyCacheKey$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.TempAssemblyCacheKey", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "type", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TempAssemblyCache$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.TempAssemblyCache", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $asm05.TypeRef("System.Xml.Serialization.TempAssembly")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TempAssembly"), [$.String, $.Object], [])
    );

    $.Field({Static:false, Public:false}, "cache", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Property({Static:false, Public:false}, "Item", $asm05.TypeRef("System.Xml.Serialization.TempAssembly"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function Compiler$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.Compiler", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddImport", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Collections.Hashtable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddImport", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Assembly")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AssemblyNameFromOptions", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compile", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.Assembly"), [
          $asm01.TypeRef("System.Reflection.Assembly"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializerCompilerParameters"), $asm01.TypeRef("System.Security.Policy.Evidence")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Imports", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Source", 
      new JSIL.MethodSignature($asm01.TypeRef("System.IO.TextWriter"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentUser", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTempAssemblyName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Reflection.AssemblyName"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTempAssemblyPath", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm01.TypeRef("System.Reflection.Assembly"), 
          $.String
        ], [])
    );

    $.Field({Static:false, Public:false}, "debugEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "imports", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "writer", $asm01.TypeRef("System.IO.StringWriter")); 
    $.Property({Static:false, Public:false}, "Imports", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "Source", $asm01.TypeRef("System.IO.TextWriter"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ImportContext$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.ImportContext", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Cache", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.SchemaObjectCache"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Elements", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Mappings", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ShareTypes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeIdentifiers", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Warnings", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Specialized.StringCollection"), [], [])
    );

    $.Field({Static:false, Public:false}, "shareTypes", $.Boolean); 
    $.Field({Static:false, Public:false}, "cache", $asm05.TypeRef("System.Xml.Serialization.SchemaObjectCache")); 
    $.Field({Static:false, Public:false}, "mappings", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "elements", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "typeIdentifiers", $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers")); 
    $.Property({Static:false, Public:false}, "Cache", $asm05.TypeRef("System.Xml.Serialization.SchemaObjectCache"));

    $.Property({Static:false, Public:false}, "Elements", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "Mappings", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "TypeIdentifiers", $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"));

    $.Property({Static:false, Public:true }, "ShareTypes", $.Boolean);

    $.Property({Static:false, Public:true }, "Warnings", $asm02.TypeRef("System.Collections.Specialized.StringCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SchemaObjectCache$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.SchemaObjectCache", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddItem", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm05.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm05.TypeRef("System.Xml.Serialization.XmlSchemas")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompositeHash", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateSchemaGraph", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSchemas")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Graph", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Hash", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectCache", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Warnings", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Specialized.StringCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDependencies", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm01.TypeRef("System.Collections.ArrayList"), 
          $asm01.TypeRef("System.Collections.Hashtable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHash", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Match", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm05.TypeRef("System.Xml.Serialization.SchemaObjectWriter")], [])
    );

    $.Field({Static:false, Public:false}, "graph", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "hash", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "objectCache", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "warnings", $asm02.TypeRef("System.Collections.Specialized.StringCollection")); 
    $.Field({Static:false, Public:false}, "looks", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Property({Static:false, Public:false}, "Graph", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "Hash", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "ObjectCache", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "Warnings", $asm02.TypeRef("System.Collections.Specialized.StringCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SchemaGraph$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.SchemaGraph", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Hashtable"), $asm05.TypeRef("System.Xml.Serialization.XmlSchemas")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRef", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.ArrayList"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Depends", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Depends", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm01.TypeRef("System.Collections.ArrayList")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetItems", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [], [])
    );

    $.Field({Static:false, Public:false}, "empty", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "schemas", $asm05.TypeRef("System.Xml.Serialization.XmlSchemas")); 
    $.Field({Static:false, Public:false}, "scope", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "items", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function IndentedWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.IndentedWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Indent", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Indent", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLine", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLine", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "writer", $asm01.TypeRef("System.IO.TextWriter")); 
    $.Field({Static:false, Public:false}, "needIndent", $.Boolean); 
    $.Field({Static:false, Public:false}, "indentLevel", $.Int32); 
    $.Field({Static:false, Public:false}, "compact", $.Boolean); 
    $.Property({Static:false, Public:false}, "Indent", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeInterface(
  "System.Xml.Serialization.IXmlSerializable", true, [], function ($) {
    $.Method({}, "GetSchema", new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [], []));
    $.Method({}, "ReadXml", new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], []));
    $.Method({}, "WriteXml", new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], []));
  }, []);

JSIL.MakeInterface(
  "System.Xml.Serialization.IXmlTextParser", true, [], function ($) {
    $.Method({}, "get_Normalized", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "set_Normalized", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "get_WhitespaceHandling", new JSIL.MethodSignature($asm05.TypeRef("System.Xml.WhitespaceHandling"), [], []));
    $.Method({}, "set_WhitespaceHandling", new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.WhitespaceHandling")], []));
    $.Property({}, "Normalized");
    $.Property({}, "WhitespaceHandling");
  }, []);

(function Accessor$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.Accessor", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeQName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Any", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AnyNamespaces", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Default", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Form", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFixed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOptional", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsTopLevelInSchema", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Mapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Any", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AnyNamespaces", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Default", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Form", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsFixed", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsOptional", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsTopLevelInSchema", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Mapping", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnescapeName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "defaultValue", $.Object); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "mapping", $asm05.TypeRef("System.Xml.Serialization.TypeMapping")); 
    $.Field({Static:false, Public:false}, "any", $.Boolean); 
    $.Field({Static:false, Public:false}, "anyNs", $.String); 
    $.Field({Static:false, Public:false}, "topLevelInSchema", $.Boolean); 
    $.Field({Static:false, Public:false}, "isFixed", $.Boolean); 
    $.Field({Static:false, Public:false}, "isOptional", $.Boolean); 
    $.Field({Static:false, Public:false}, "form", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
    $.Property({Static:false, Public:false}, "Mapping", $asm05.TypeRef("System.Xml.Serialization.TypeMapping"));

    $.Property({Static:false, Public:false}, "Default", $.Object);

    $.Property({Static:false, Public:false}, "HasDefault", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:false}, "Any", $.Boolean);

    $.Property({Static:false, Public:false}, "AnyNamespaces", $.String);

    $.Property({Static:false, Public:false}, "Namespace", $.String);

    $.Property({Static:false, Public:false}, "Form", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Property({Static:false, Public:false}, "IsFixed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsOptional", $.Boolean);

    $.Property({Static:false, Public:false}, "IsTopLevelInSchema", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ElementAccessor$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.Accessor"), "System.Xml.Serialization.ElementAccessor", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSoap", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnbounded", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsNullable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsSoap", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsUnbounded", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "nullable", $.Boolean); 
    $.Field({Static:false, Public:false}, "isSoap", $.Boolean); 
    $.Field({Static:false, Public:false}, "unbounded", $.Boolean); 
    $.Property({Static:false, Public:false}, "IsSoap", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUnbounded", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ChoiceIdentifierAccessor$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.Accessor"), "System.Xml.Serialization.ChoiceIdentifierAccessor", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemberIds", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemberName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MemberIds", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MemberName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "memberName", $.String); 
    $.Field({Static:false, Public:false}, "memberIds", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Property({Static:false, Public:false}, "MemberName", $.String);

    $.Property({Static:false, Public:false}, "MemberIds", $jsilcore.TypeRef("System.Array", [$.String]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TextAccessor$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.Accessor"), "System.Xml.Serialization.TextAccessor", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlnsAccessor$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.Accessor"), "System.Xml.Serialization.XmlnsAccessor", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AttributeAccessor$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.Accessor"), "System.Xml.Serialization.AttributeAccessor", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSpecial", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsList", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSpecialXmlNamespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsList", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "isSpecial", $.Boolean); 
    $.Field({Static:false, Public:false}, "isList", $.Boolean); 
    $.Property({Static:false, Public:false}, "IsSpecialXmlNamespace", $.Boolean);

    $.Property({Static:false, Public:false}, "IsList", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Mapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.Mapping", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSoap", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsSoap", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "isSoap", $.Boolean); 
    $.Property({Static:false, Public:false}, "IsSoap", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TypeMapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.Mapping"), "System.Xml.Serialization.TypeMapping", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DefaultElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IncludeInSchema", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAnonymousType", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsList", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReference", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReferencedByElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReferencedByTopLevelElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IncludeInSchema", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsList", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsReference", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReferencedByElement", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReferencedByTopLevelElement", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TypeDesc", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeDesc")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TypeName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "typeDesc", $asm05.TypeRef("System.Xml.Serialization.TypeDesc")); 
    $.Field({Static:false, Public:false}, "typeNs", $.String); 
    $.Field({Static:false, Public:false}, "typeName", $.String); 
    $.Field({Static:false, Public:false}, "referencedByElement", $.Boolean); 
    $.Field({Static:false, Public:false}, "referencedByTopLevelElement", $.Boolean); 
    $.Field({Static:false, Public:false}, "includeInSchema", $.Boolean); 
    $.Field({Static:false, Public:false}, "reference", $.Boolean); 
    $.Property({Static:false, Public:false}, "ReferencedByTopLevelElement", $.Boolean);

    $.Property({Static:false, Public:false}, "ReferencedByElement", $.Boolean);

    $.Property({Static:false, Public:false}, "Namespace", $.String);

    $.Property({Static:false, Public:false}, "TypeName", $.String);

    $.Property({Static:false, Public:false}, "TypeDesc", $asm05.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Property({Static:false, Public:false}, "IncludeInSchema", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsList", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReference", $.Boolean);

    $.Property({Static:false, Public:false}, "IsAnonymousType", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "DefaultElementName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PrimitiveMapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), "System.Xml.Serialization.PrimitiveMapping", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsList", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsList", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "isList", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "IsList", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NullableMapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), "System.Xml.Serialization.NullableMapping", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DefaultElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseMapping", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeMapping")], [])
    );

    $.Field({Static:false, Public:false}, "baseMapping", $asm05.TypeRef("System.Xml.Serialization.TypeMapping")); 
    $.Property({Static:false, Public:false}, "BaseMapping", $asm05.TypeRef("System.Xml.Serialization.TypeMapping"));

    $.Property({Static:false, Public:false, Virtual:true }, "DefaultElementName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ArrayMapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), "System.Xml.Serialization.ArrayMapping", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Elements", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementsSortedByDerivation", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Next", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TopLevelMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Elements", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Next", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TopLevelMapping", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")])); 
    $.Field({Static:false, Public:false}, "sortedElements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")])); 
    $.Field({Static:false, Public:false}, "next", $.Type); 
    $.Field({Static:false, Public:false}, "topLevelMapping", $asm05.TypeRef("System.Xml.Serialization.StructMapping")); 
    $.Property({Static:false, Public:false}, "Elements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]));

    $.Property({Static:false, Public:false}, "ElementsSortedByDerivation", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]));

    $.Property({Static:false, Public:false}, "Next", $.Type);

    $.Property({Static:false, Public:false}, "TopLevelMapping", $asm05.TypeRef("System.Xml.Serialization.StructMapping"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EnumMapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.PrimitiveMapping"), "System.Xml.Serialization.EnumMapping", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Constants", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ConstantMapping")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFlags", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Constants", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ConstantMapping")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsFlags", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "constants", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ConstantMapping")])); 
    $.Field({Static:false, Public:false}, "isFlags", $.Boolean); 
    $.Property({Static:false, Public:false}, "IsFlags", $.Boolean);

    $.Property({Static:false, Public:false}, "Constants", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ConstantMapping")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConstantMapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.Mapping"), "System.Xml.Serialization.ConstantMapping", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Value", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "xmlName", $.String); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "value", $.Int64); 
    $.Property({Static:false, Public:false}, "XmlName", $.String);

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Value", $.Int64);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeInterface(
  "System.Xml.Serialization.INameScope", false, [], function ($) {
    $.Method({}, "get_Item", new JSIL.MethodSignature($.Object, [$.String, $.String], []));
    $.Method({}, "set_Item", new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ], []));
    $.Property({}, "Item");
  }, []);

(function StructMapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), "System.Xml.Serialization.StructMapping", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Declares", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Serialization.MemberMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDeclaringMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.MemberMapping"), [
          $asm05.TypeRef("System.Xml.Serialization.MemberMapping"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseMapping", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DerivedMappings", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasElements", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasSimpleContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasXmlnsMember", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFullyInitialized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOpenModel", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSequence", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalAttributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.NameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalElements", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.NameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NextDerivedMapping", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Scope", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlnsMember", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.MemberMapping"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasExplicitSequence", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseMapping", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsOpenModel", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsSequence", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Scope", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlnsMember", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetContentModel", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TextAccessor"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSequence", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.INameScope.get_Item", 
      new JSIL.MethodSignature($.Object, [$.String, $.String], [])
    )
      .Overrides(0, "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.INameScope.set_Item", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ], [])
    )
      .Overrides(0, "set_Item");

    $.Field({Static:false, Public:false}, "members", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")])); 
    $.Field({Static:false, Public:false}, "baseMapping", $.Type); 
    $.Field({Static:false, Public:false}, "derivedMappings", $.Type); 
    $.Field({Static:false, Public:false}, "nextDerivedMapping", $.Type); 
    $.Field({Static:false, Public:false}, "xmlnsMember", $asm05.TypeRef("System.Xml.Serialization.MemberMapping")); 
    $.Field({Static:false, Public:false}, "hasSimpleContent", $.Boolean); 
    $.Field({Static:false, Public:false}, "openModel", $.Boolean); 
    $.Field({Static:false, Public:false}, "isSequence", $.Boolean); 
    $.Field({Static:false, Public:false}, "elements", $asm05.TypeRef("System.Xml.Serialization.NameTable")); 
    $.Field({Static:false, Public:false}, "attributes", $asm05.TypeRef("System.Xml.Serialization.NameTable")); 
    $.Field({Static:false, Public:false}, "scope", $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers")); 
    $.Property({Static:false, Public:false}, "BaseMapping", $.Type);

    $.Property({Static:false, Public:false}, "DerivedMappings", $.Type);

    $.Property({Static:false, Public:false}, "IsFullyInitialized", $.Boolean);

    $.Property({Static:false, Public:false}, "LocalElements", $asm05.TypeRef("System.Xml.Serialization.NameTable"));

    $.Property({Static:false, Public:false}, "LocalAttributes", $asm05.TypeRef("System.Xml.Serialization.NameTable"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.INameScope.Item", $.Object);

    $.Property({Static:false, Public:false}, "NextDerivedMapping", $.Type);

    $.Property({Static:false, Public:false}, "HasSimpleContent", $.Boolean);

    $.Property({Static:false, Public:false}, "HasXmlnsMember", $.Boolean);

    $.Property({Static:false, Public:false}, "Members", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")]));

    $.Property({Static:false, Public:false}, "XmlnsMember", $asm05.TypeRef("System.Xml.Serialization.MemberMapping"));

    $.Property({Static:false, Public:false}, "IsOpenModel", $.Boolean);

    $.Property({Static:false, Public:false}, "Scope", $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"));

    $.Property({Static:false, Public:false}, "HasElements", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSequence", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("System.Xml.Serialization.INameScope")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AccessorMapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.Mapping"), "System.Xml.Serialization.AccessorMapping", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementsMatch", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Accessor", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.Accessor"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Attribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.AttributeAccessor"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChoiceIdentifier", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Elements", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementsSortedByDerivation", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Ignore", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNeedNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsParticle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsText", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Text", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TextAccessor"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Xmlns", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlnsAccessor"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNeedNullableMember", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Match", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Attribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.AttributeAccessor")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ChoiceIdentifier", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Elements", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Ignore", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Text", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TextAccessor")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TypeDesc", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeDesc")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Xmlns", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlnsAccessor")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SortMostToLeastDerived", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")])], [])
    );

    $.Field({Static:false, Public:false}, "typeDesc", $asm05.TypeRef("System.Xml.Serialization.TypeDesc")); 
    $.Field({Static:false, Public:false}, "attribute", $asm05.TypeRef("System.Xml.Serialization.AttributeAccessor")); 
    $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")])); 
    $.Field({Static:false, Public:false}, "sortedElements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")])); 
    $.Field({Static:false, Public:false}, "text", $asm05.TypeRef("System.Xml.Serialization.TextAccessor")); 
    $.Field({Static:false, Public:false}, "choiceIdentifier", $asm05.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor")); 
    $.Field({Static:false, Public:false}, "xmlns", $asm05.TypeRef("System.Xml.Serialization.XmlnsAccessor")); 
    $.Field({Static:false, Public:false}, "ignore", $.Boolean); 
    $.Property({Static:false, Public:false}, "IsAttribute", $.Boolean);

    $.Property({Static:false, Public:false}, "IsText", $.Boolean);

    $.Property({Static:false, Public:false}, "IsParticle", $.Boolean);

    $.Property({Static:false, Public:false}, "TypeDesc", $asm05.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Property({Static:false, Public:false}, "Attribute", $asm05.TypeRef("System.Xml.Serialization.AttributeAccessor"));

    $.Property({Static:false, Public:false}, "Elements", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]));

    $.Property({Static:false, Public:false}, "ElementsSortedByDerivation", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]));

    $.Property({Static:false, Public:false}, "Text", $asm05.TypeRef("System.Xml.Serialization.TextAccessor"));

    $.Property({Static:false, Public:false}, "ChoiceIdentifier", $asm05.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"));

    $.Property({Static:false, Public:false}, "Xmlns", $asm05.TypeRef("System.Xml.Serialization.XmlnsAccessor"));

    $.Property({Static:false, Public:false}, "Ignore", $.Boolean);

    $.Property({Static:false, Public:false}, "Accessor", $asm05.TypeRef("System.Xml.Serialization.Accessor"));

    $.Property({Static:false, Public:false}, "IsNeedNullable", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function AccessorComparer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.AccessorMapping/AccessorComparer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IComparer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function MemberMappingComparer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.MemberMappingComparer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IComparer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function MemberMapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.AccessorMapping"), "System.Xml.Serialization.MemberMapping", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CheckShouldPersist", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CheckSpecified", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.SpecifiedAccessor"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReturnValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSequence", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SequenceId", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNullableType", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.TypeDesc")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeName", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CheckShouldPersist", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CheckSpecified", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.SpecifiedAccessor")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsReturnValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReadOnly", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SequenceId", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "checkShouldPersist", $.Boolean); 
    $.Field({Static:false, Public:false}, "checkSpecified", $asm05.TypeRef("System.Xml.Serialization.SpecifiedAccessor")); 
    $.Field({Static:false, Public:false}, "isReturnValue", $.Boolean); 
    $.Field({Static:false, Public:false}, "readOnly", $.Boolean); 
    $.Field({Static:false, Public:false}, "sequenceId", $.Int32); 
    $.Property({Static:false, Public:false}, "CheckShouldPersist", $.Boolean);

    $.Property({Static:false, Public:false}, "CheckSpecified", $asm05.TypeRef("System.Xml.Serialization.SpecifiedAccessor"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "IsReturnValue", $.Boolean);

    $.Property({Static:false, Public:false}, "ReadOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSequence", $.Boolean);

    $.Property({Static:false, Public:false}, "SequenceId", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function MembersMapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), "System.Xml.Serialization.MembersMapping", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasWrapperElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValidateRpcWrapperElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriteAccessors", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlnsMember", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.MemberMapping"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasWrapperElement", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ValidateRpcWrapperElement", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_WriteAccessors", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlnsMember", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")], [])
    );

    $.Field({Static:false, Public:false}, "members", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")])); 
    $.Field({Static:false, Public:false}, "hasWrapperElement", $.Boolean); 
    $.Field({Static:false, Public:false}, "validateRpcWrapperElement", $.Boolean); 
    $.Field({Static:false, Public:false}, "writeAccessors", $.Boolean); 
    $.Field({Static:false, Public:false}, "xmlnsMember", $asm05.TypeRef("System.Xml.Serialization.MemberMapping")); 
    $.Property({Static:false, Public:false}, "Members", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")]));

    $.Property({Static:false, Public:false}, "XmlnsMember", $asm05.TypeRef("System.Xml.Serialization.MemberMapping"));

    $.Property({Static:false, Public:false}, "HasWrapperElement", $.Boolean);

    $.Property({Static:false, Public:false}, "ValidateRpcWrapperElement", $.Boolean);

    $.Property({Static:false, Public:false}, "WriteAccessors", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SpecialMapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), "System.Xml.Serialization.SpecialMapping", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamedAny", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NamedAny", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "namedAny", $.Boolean); 
    $.Property({Static:false, Public:false}, "NamedAny", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SerializableMapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.SpecialMapping"), "System.Xml.Serialization.SerializableMapping", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.MethodInfo"), $.Boolean, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDuplicateElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DerivedMappings", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAny", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceList", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Next", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NextDerivedMapping", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Schema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Schemas", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XsdType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XsiType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Match", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RetrieveSerializableSchema", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Next", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Type", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBaseMapping", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidationCallbackWithErrorCode", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("System.Xml.Schema.ValidationEventArgs")], [])
    );

    $.Field({Static:false, Public:false}, "schema", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    $.Field({Static:false, Public:false}, "type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "needSchema", $.Boolean); 
    $.Field({Static:false, Public:false}, "getSchemaMethod", $asm01.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "xsiType", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "xsdType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType")); 
    $.Field({Static:false, Public:false}, "schemas", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
    $.Field({Static:false, Public:false}, "any", $.Boolean); 
    $.Field({Static:false, Public:false}, "namespaces", $.String); 
    $.Field({Static:false, Public:false}, "baseMapping", $.Type); 
    $.Field({Static:false, Public:false}, "derivedMappings", $.Type); 
    $.Field({Static:false, Public:false}, "nextDerivedMapping", $.Type); 
    $.Field({Static:false, Public:false}, "next", $.Type); 
    $.Property({Static:false, Public:false}, "IsAny", $.Boolean);

    $.Property({Static:false, Public:false}, "NamespaceList", $.String);

    $.Property({Static:false, Public:false}, "DerivedMappings", $.Type);

    $.Property({Static:false, Public:false}, "NextDerivedMapping", $.Type);

    $.Property({Static:false, Public:false}, "Next", $.Type);

    $.Property({Static:false, Public:false}, "Type", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Schemas", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Property({Static:false, Public:false}, "Schema", $asm05.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:false}, "XsiType", $asm05.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "XsdType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ModelScope$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.ModelScope", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeScope")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeScope", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeScope"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArrayModel", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ArrayModel"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeModel", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeModel"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeModel", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeModel"), [$asm01.TypeRef("System.Type"), $.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "typeScope", $asm05.TypeRef("System.Xml.Serialization.TypeScope")); 
    $.Field({Static:false, Public:false}, "models", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "arrayModels", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Property({Static:false, Public:false}, "TypeScope", $asm05.TypeRef("System.Xml.Serialization.TypeScope"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TypeModel$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.TypeModel", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm05.TypeRef("System.Xml.Serialization.ModelScope")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ModelScope", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ModelScope"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [], [])
    );

    $.Field({Static:false, Public:false}, "typeDesc", $asm05.TypeRef("System.Xml.Serialization.TypeDesc")); 
    $.Field({Static:false, Public:false}, "type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "scope", $asm05.TypeRef("System.Xml.Serialization.ModelScope")); 
    $.Property({Static:false, Public:false}, "Type", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ModelScope", $asm05.TypeRef("System.Xml.Serialization.ModelScope"));

    $.Property({Static:false, Public:false}, "TypeDesc", $asm05.TypeRef("System.Xml.Serialization.TypeDesc"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ArrayModel$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.TypeModel"), "System.Xml.Serialization.ArrayModel", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm05.TypeRef("System.Xml.Serialization.ModelScope")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Element", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeModel"), [], [])
    );

    $.Property({Static:false, Public:false}, "Element", $asm05.TypeRef("System.Xml.Serialization.TypeModel"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function PrimitiveModel$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.TypeModel"), "System.Xml.Serialization.PrimitiveModel", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm05.TypeRef("System.Xml.Serialization.ModelScope")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SpecialModel$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.TypeModel"), "System.Xml.Serialization.SpecialModel", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm05.TypeRef("System.Xml.Serialization.ModelScope")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function StructModel$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.TypeModel"), "System.Xml.Serialization.StructModel", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm05.TypeRef("System.Xml.Serialization.ModelScope")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckPropertyRead", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Reflection.PropertyInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSupportedMember", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $asm01.TypeRef("System.Reflection.MemberInfo"), 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFieldModel", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.FieldModel"), [$asm01.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFieldModel", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.FieldModel"), [$asm01.TypeRef("System.Reflection.FieldInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemberInfos", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Reflection.MemberInfo")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPropertyModel", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.FieldModel"), [$asm01.TypeRef("System.Reflection.PropertyInfo")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Serialization.SpecifiedAccessor", false, {
    None: 0, 
    ReadOnly: 1, 
    ReadWrite: 2
  }, false
);

(function FieldModel$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.FieldModel", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean, 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Reflection.MemberInfo"), $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CheckShouldPersist", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CheckSpecified", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.SpecifiedAccessor"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FieldType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FieldTypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsProperty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "checkSpecified", $asm05.TypeRef("System.Xml.Serialization.SpecifiedAccessor")); 
    $.Field({Static:false, Public:false}, "checkShouldPersist", $.Boolean); 
    $.Field({Static:false, Public:false}, "readOnly", $.Boolean); 
    $.Field({Static:false, Public:false}, "isProperty", $.Boolean); 
    $.Field({Static:false, Public:false}, "fieldType", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "fieldTypeDesc", $asm05.TypeRef("System.Xml.Serialization.TypeDesc")); 
    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "FieldType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "FieldTypeDesc", $asm05.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Property({Static:false, Public:false}, "CheckShouldPersist", $.Boolean);

    $.Property({Static:false, Public:false}, "CheckSpecified", $asm05.TypeRef("System.Xml.Serialization.SpecifiedAccessor"));

    $.Property({Static:false, Public:false}, "ReadOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "IsProperty", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ConstantModel$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.ConstantModel", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.FieldInfo"), $.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FieldInfo", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.FieldInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.Field({Static:false, Public:false}, "fieldInfo", $asm01.TypeRef("System.Reflection.FieldInfo")); 
    $.Field({Static:false, Public:false}, "value", $.Int64); 
    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Value", $.Int64);

    $.Property({Static:false, Public:false}, "FieldInfo", $asm01.TypeRef("System.Reflection.FieldInfo"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function EnumModel$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.TypeModel"), "System.Xml.Serialization.EnumModel", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm05.TypeRef("System.Xml.Serialization.ModelScope")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Constants", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ConstantModel")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConstantModel", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ConstantModel"), [$asm01.TypeRef("System.Reflection.FieldInfo")], [])
    );

    $.Field({Static:false, Public:false}, "constants", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ConstantModel")])); 
    $.Property({Static:false, Public:false}, "Constants", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ConstantModel")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NameKey$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.NameKey", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function NameTable$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.NameTable", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Values", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ICollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.INameScope.get_Item", 
      new JSIL.MethodSignature($.Object, [$.String, $.String], [])
    )
      .Overrides(0, "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.INameScope.set_Item", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ], [])
    )
      .Overrides(0, "set_Item");

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Array"), [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "table", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.INameScope.Item", $.Object);

    $.Property({Static:false, Public:false}, "Values", $asm01.TypeRef("System.Collections.ICollection"));

    $.ImplementInterfaces(
      /* 0 */ $asm05.TypeRef("System.Xml.Serialization.INameScope")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function SchemaImporter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.SchemaImporter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm05.TypeRef("System.Xml.Serialization.ImportContext")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReference", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Serialization.NameTable"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReservedIdentifiersForDataBinding", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRootMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUniqueTypeName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeProvider", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Context", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ImportContext"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Extensions", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GroupsInUse", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.NameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImportedElements", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImportedMappings", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Options", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Schemas", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSchemas"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Scope", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeScope"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeIdentifiers", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypesInUse", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.NameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRootMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ImportDerivedTypes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportRootMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeDerived", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.StructMapping"), $asm01.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveReference", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Serialization.NameTable")], [])
    );

    $.Field({Static:false, Public:false}, "schemas", $asm05.TypeRef("System.Xml.Serialization.XmlSchemas")); 
    $.Field({Static:false, Public:false}, "root", $asm05.TypeRef("System.Xml.Serialization.StructMapping")); 
    $.Field({Static:false, Public:false}, "options", $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions")); 
    $.Field({Static:false, Public:false}, "codeProvider", $asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider")); 
    $.Field({Static:false, Public:false}, "scope", $asm05.TypeRef("System.Xml.Serialization.TypeScope")); 
    $.Field({Static:false, Public:false}, "context", $asm05.TypeRef("System.Xml.Serialization.ImportContext")); 
    $.Field({Static:false, Public:false}, "rootImported", $.Boolean); 
    $.Field({Static:false, Public:false}, "typesInUse", $asm05.TypeRef("System.Xml.Serialization.NameTable")); 
    $.Field({Static:false, Public:false}, "groupsInUse", $asm05.TypeRef("System.Xml.Serialization.NameTable")); 
    $.Field({Static:false, Public:false}, "extensions", $asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection")); 
    $.Property({Static:false, Public:false}, "Context", $asm05.TypeRef("System.Xml.Serialization.ImportContext"));

    $.Property({Static:false, Public:false}, "CodeProvider", $asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider"));

    $.Property({Static:false, Public:true }, "Extensions", $asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"));

    $.Property({Static:false, Public:false}, "ImportedElements", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "ImportedMappings", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "TypeIdentifiers", $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"));

    $.Property({Static:false, Public:false}, "Schemas", $asm05.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Property({Static:false, Public:false}, "Scope", $asm05.TypeRef("System.Xml.Serialization.TypeScope"));

    $.Property({Static:false, Public:false}, "GroupsInUse", $asm05.TypeRef("System.Xml.Serialization.NameTable"));

    $.Property({Static:false, Public:false}, "TypesInUse", $asm05.TypeRef("System.Xml.Serialization.NameTable"));

    $.Property({Static:false, Public:false}, "Options", $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlAttributeComparer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlAttributeComparer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IComparer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlFacetComparer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlFacetComparer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IComparer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function QNameComparer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.QNameComparer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IComparer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaObjectComparer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSchemaObjectComparer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NameOf", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NameOf", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Namespace", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.Field({Static:false, Public:false}, "comparer", $asm05.TypeRef("System.Xml.Serialization.QNameComparer")); 
    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IComparer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SchemaObjectWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.SchemaObjectWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewLine", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Schema.NamespaceList")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_XmlSchemaFacet", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write1_XmlSchemaAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write11_XmlSchemaDerivationMethod", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write12_XmlSchemaSimpleTypeUnion", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeUnion")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write14_XmlSchemaSimpleTypeList", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeList")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write15_XmlSchemaSimpleTypeRestriction", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeRestriction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write3_XmlSchemaObject", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write30_XmlSchemaUse", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaUse")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write31_XmlSchemaAttributeGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write32_XmlSchemaAttributeGroupRef", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroupRef")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write33_XmlSchemaAnyAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write34_XmlSchemaContentProcessing", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write35_XmlSchemaComplexType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write36_XmlSchemaSimpleContent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleContent")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write38_XmlSchemaSimpleContentExtension", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write40_XmlSchemaSimpleContentRestriction", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentRestriction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write41_XmlSchemaComplexContent", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexContent")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write42_XmlSchemaComplexContentExtension", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write43_XmlSchemaAll", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAll")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write46_XmlSchemaElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write47_XmlSchemaKey", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaKey")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write48_XmlSchemaIdentityConstraint", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write49_XmlSchemaXPath", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaXPath")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write5_XmlSchemaAnnotation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write50_XmlSchemaKeyref", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaKeyref")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write51_XmlSchemaUnique", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaUnique")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write52_XmlSchemaChoice", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaChoice")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write53_XmlSchemaAny", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAny")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write54_XmlSchemaSequence", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSequence")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write55_XmlSchemaGroupRef", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupRef")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write56_XmlSchemaComplexContentRestriction", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexContentRestriction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write57_XmlSchemaGroup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write6_XmlSchemaDocumentation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaDocumentation")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write7_XmlSchemaAppInfo", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaAppInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write9_XmlSchemaSimpleType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlAttribute")]), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteFacets", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSortedItems", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlSchemaObject", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.Field({Static:false, Public:false}, "w", $asm01.TypeRef("System.Text.StringBuilder")); 
    $.Field({Static:false, Public:false}, "indentLevel", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SoapAttributeAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.SoapAttributeAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AttributeName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "attributeName", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "dataType", $.String); 
    $.Property({Static:false, Public:true }, "AttributeName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "DataType", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

(function SoapAttributeOverrides$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.SoapAttributeOverrides", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.SoapAttributes")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.SoapAttributes")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.SoapAttributes"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.SoapAttributes"), [$asm01.TypeRef("System.Type"), $.String], [])
    );

    $.Field({Static:false, Public:false}, "types", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Property({Static:false, Public:true }, "Item", $asm05.TypeRef("System.Xml.Serialization.SoapAttributes"));

    $.Property({Static:false, Public:true }, "Item", $asm05.TypeRef("System.Xml.Serialization.SoapAttributes"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

JSIL.MakeEnum(
  "System.Xml.Serialization.SoapAttributeFlags", false, {
    Enum: 1, 
    Type: 2, 
    Element: 4, 
    Attribute: 8
  }, false
);

(function SoapAttributes$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.SoapAttributes", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.ICustomAttributeProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.SoapAttributeAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapDefaultValue", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.SoapElementAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapEnum", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.SoapEnumAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SoapFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.SoapAttributeFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapIgnore", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.SoapTypeAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.SoapAttributeAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapDefaultValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.SoapElementAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapEnum", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.SoapEnumAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapIgnore", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.SoapTypeAttribute")], [])
    );

    $.Field({Static:false, Public:false}, "soapIgnore", $.Boolean); 
    $.Field({Static:false, Public:false}, "soapType", $asm05.TypeRef("System.Xml.Serialization.SoapTypeAttribute")); 
    $.Field({Static:false, Public:false}, "soapElement", $asm05.TypeRef("System.Xml.Serialization.SoapElementAttribute")); 
    $.Field({Static:false, Public:false}, "soapAttribute", $asm05.TypeRef("System.Xml.Serialization.SoapAttributeAttribute")); 
    $.Field({Static:false, Public:false}, "soapEnum", $asm05.TypeRef("System.Xml.Serialization.SoapEnumAttribute")); 
    $.Field({Static:false, Public:false}, "soapDefaultValue", $.Object); 
    $.Property({Static:false, Public:false}, "SoapFlags", $asm05.TypeRef("System.Xml.Serialization.SoapAttributeFlags"));

    $.Property({Static:false, Public:true }, "SoapType", $asm05.TypeRef("System.Xml.Serialization.SoapTypeAttribute"));

    $.Property({Static:false, Public:true }, "SoapEnum", $asm05.TypeRef("System.Xml.Serialization.SoapEnumAttribute"));

    $.Property({Static:false, Public:true }, "SoapIgnore", $.Boolean);

    $.Property({Static:false, Public:true }, "SoapElement", $asm05.TypeRef("System.Xml.Serialization.SoapElementAttribute"));

    $.Property({Static:false, Public:true }, "SoapAttribute", $asm05.TypeRef("System.Xml.Serialization.SoapAttributeAttribute"));

    $.Property({Static:false, Public:true }, "SoapDefaultValue", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SoapCodeExporter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.CodeExporter"), "System.Xml.Serialization.SoapCodeExporter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.CodeDom.CodeNamespace")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.CodeDom.CodeNamespace"), $asm02.TypeRef("System.CodeDom.CodeCompileUnit")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeNamespace"), $asm02.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeNamespace"), $asm02.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), $asm01.TypeRef("System.Collections.Hashtable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeNamespace"), $asm02.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm01.TypeRef("System.Collections.Hashtable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddElementMetadata", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddMappingMetadata", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm05.TypeRef("System.Xml.Serialization.XmlMemberMapping"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddMappingMetadata", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm05.TypeRef("System.Xml.Serialization.XmlMemberMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddMemberMetadata", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm05.TypeRef("System.Xml.Serialization.MemberMapping"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnsureTypesExported", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.Accessor")]), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExportDerivedStructs", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportMember", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm05.TypeRef("System.Xml.Serialization.MemberMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportProperty", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm05.TypeRef("System.Xml.Serialization.MemberMapping"), 
          $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportStruct", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportTypeMapping", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SoapElementAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.SoapElementAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNullable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "elementName", $.String); 
    $.Field({Static:false, Public:false}, "dataType", $.String); 
    $.Field({Static:false, Public:false}, "nullable", $.Boolean); 
    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true }, "DataType", $.String);

    $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

(function SoapEnumAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.SoapEnumAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Field]; });

})();

(function SoapIgnoreAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.SoapIgnoreAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

(function SoapIncludeAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.SoapIncludeAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "type", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Class", "Interface", "Method", "Struct")]; });

})();

(function SoapReflectionImporter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.SoapReflectionImporter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.SoapAttributeOverrides")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.SoapAttributeOverrides"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateElementAccessor", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), [$asm05.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateNullableMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.NullableMapping"), [$asm05.TypeRef("System.Xml.Serialization.TypeMapping"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRootMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.SoapAttributes"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.SoapAttributes"), [$asm01.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $asm05.TypeRef("System.Xml.Serialization.SoapAttributes")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRootMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAccessorMapping", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.MemberMapping"), $asm05.TypeRef("System.Xml.Serialization.FieldModel"), 
          $asm05.TypeRef("System.Xml.Serialization.SoapAttributes"), $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportArrayLikeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ArrayMapping"), [$asm05.TypeRef("System.Xml.Serialization.ArrayModel"), $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportConstantMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ConstantMapping"), [$asm05.TypeRef("System.Xml.Serialization.ConstantModel")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportEnumMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.EnumMapping"), [$asm05.TypeRef("System.Xml.Serialization.EnumModel")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportFieldMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.MemberMapping"), [
          $asm05.TypeRef("System.Xml.Serialization.FieldModel"), $asm05.TypeRef("System.Xml.Serialization.SoapAttributes"), 
          $.String, $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportMemberMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.MemberMapping"), [
          $asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), 
          $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
          $.Boolean, $.Boolean, 
          $asm05.TypeRef("System.Xml.Serialization.XmlMappingAccess")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.MembersMapping"), [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.String, 
          $.Boolean, $.Boolean, 
          $.Boolean, $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportPrimitiveMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [$asm05.TypeRef("System.Xml.Serialization.PrimitiveModel"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportStructLikeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.StructMapping"), [$asm05.TypeRef("System.Xml.Serialization.StructModel"), $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm01.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm05.TypeRef("System.Xml.Serialization.TypeModel"), $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm05.TypeRef("System.Xml.Serialization.TypeModel"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncludeType", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncludeType", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncludeTypes", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.ICustomAttributeProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncludeTypes", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.ICustomAttributeProvider"), $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeStructMembers", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Serialization.StructMapping"), $asm05.TypeRef("System.Xml.Serialization.StructModel"), 
          $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReflectionException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetArrayMappingType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.ArrayMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "XsdTypeName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "XsdTypeName", 
      new JSIL.MethodSignature($.String, [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.SoapAttributes"), 
          $.String
        ], [])
    );

    $.Field({Static:false, Public:false}, "typeScope", $asm05.TypeRef("System.Xml.Serialization.TypeScope")); 
    $.Field({Static:false, Public:false}, "attributeOverrides", $asm05.TypeRef("System.Xml.Serialization.SoapAttributeOverrides")); 
    $.Field({Static:false, Public:false}, "types", $asm05.TypeRef("System.Xml.Serialization.NameTable")); 
    $.Field({Static:false, Public:false}, "nullables", $asm05.TypeRef("System.Xml.Serialization.NameTable")); 
    $.Field({Static:false, Public:false}, "root", $asm05.TypeRef("System.Xml.Serialization.StructMapping")); 
    $.Field({Static:false, Public:false}, "defaultNs", $.String); 
    $.Field({Static:false, Public:false}, "modelScope", $asm05.TypeRef("System.Xml.Serialization.ModelScope")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SoapSchemaExporter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.SoapSchemaExporter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSchemas")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSchemaImport", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSchemaItem", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForDuplicateType", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckScope", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeScope")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportArrayMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm05.TypeRef("System.Xml.Serialization.ArrayMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportDerivedMappings", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElementAccessor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), 
          $.Boolean, $.Boolean, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElementAccessors", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]), 
          $.Boolean, $.Boolean, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportEnumMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm05.TypeRef("System.Xml.Serialization.EnumMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm05.TypeRef("System.Xml.Serialization.MembersMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportNonXsdPrimitiveMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm05.TypeRef("System.Xml.Serialization.PrimitiveMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportPrimitiveMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm05.TypeRef("System.Xml.Serialization.PrimitiveMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportRootMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportStructMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm05.TypeRef("System.Xml.Serialization.StructMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportTypeMapping", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm05.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportTypeMembers", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")]), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindImport", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaImport"), [$asm05.TypeRef("System.Xml.Schema.XmlSchema"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Document", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDocument"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SchemaContainsItem", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String], [])
    );

    $.Constant({Static:true , Public:false}, "elementFormDefault", 1); 
    $.Field({Static:false, Public:false}, "schemas", $asm05.TypeRef("System.Xml.Serialization.XmlSchemas")); 
    $.Field({Static:false, Public:false}, "types", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "exportedRoot", $.Boolean); 
    $.Field({Static:false, Public:false}, "scope", $asm05.TypeRef("System.Xml.Serialization.TypeScope")); 
    $.Field({Static:false, Public:false}, "document", $asm05.TypeRef("System.Xml.XmlDocument")); 
    $.Field({Static:true , Public:false}, "ArrayQName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:true , Public:false}, "ArrayTypeQName", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Property({Static:false, Public:false}, "Document", $asm05.TypeRef("System.Xml.XmlDocument"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SoapSchemaImporter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.SchemaImporter"), "System.Xml.Serialization.SoapSchemaImporter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSchemas")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm05.TypeRef("System.Xml.Serialization.ImportContext")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm05.TypeRef("System.Xml.Serialization.ImportContext")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDataType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindType", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataTypeSource", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAnyType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportArray", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportArrayMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ArrayMapping"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportDataType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportDerivedTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm01.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ImportDerivedTypes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportElementMember", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportElementType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportEnumeratedDataType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportGroup", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportGroupMembers", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Serialization.SoapSchemaMember")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.SoapSchemaMember")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.SoapSchemaMember")]), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.SoapSchemaMember")]), $.Boolean, 
          $asm01.TypeRef("System.Type"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportNonXsdPrimitiveDataType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportPrimitiveDataType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportStructType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.StructMapping"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTypeMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")]), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SoapSchemaMember$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.SoapSchemaMember", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.Field({Static:false, Public:false}, "memberName", $.String); 
    $.Field({Static:false, Public:false}, "type", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Property({Static:false, Public:true }, "MemberType", $asm05.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:true }, "MemberName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SoapTypeAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.SoapTypeAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IncludeInSchema", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IncludeInSchema", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypeName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "typeName", $.String); 
    $.Field({Static:false, Public:false}, "includeInSchema", $.Boolean); 
    $.Property({Static:false, Public:true }, "IncludeInSchema", $.Boolean);

    $.Property({Static:false, Public:true }, "TypeName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Class", "Enum", "Interface", "Struct")]; });

})();

JSIL.MakeEnum(
  "System.Xml.Serialization.TypeKind", false, {
    Root: 0, 
    Primitive: 1, 
    Enum: 2, 
    Struct: 3, 
    Class: 4, 
    Array: 5, 
    Collection: 6, 
    Enumerable: 7, 
    Void: 8, 
    Node: 9, 
    Attribute: 10, 
    Serializable: 11
  }, false
);

JSIL.MakeEnum(
  "System.Xml.Serialization.TypeFlags", false, {
    None: 0, 
    Abstract: 1, 
    Reference: 2, 
    Special: 4, 
    CanBeAttributeValue: 8, 
    CanBeTextValue: 16, 
    CanBeElementValue: 32, 
    HasCustomFormatter: 64, 
    AmbiguousDataType: 128, 
    IgnoreDefault: 512, 
    HasIsEmpty: 1024, 
    HasDefaultConstructor: 2048, 
    XmlEncodingNotRequired: 4096, 
    UseReflection: 16384, 
    CollapseWhitespace: 32768, 
    OptionalValue: 65536, 
    CtorInaccessible: 131072, 
    UsePrivateImplementation: 262144, 
    GenericInterface: 524288, 
    Unsupported: 1048576
  }, false
);

(function TypeDesc$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.TypeDesc", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm05.TypeRef("System.Xml.Serialization.TypeKind"), 
          $.Type, $asm05.TypeRef("System.Xml.Serialization.TypeFlags"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm05.TypeRef("System.Xml.Serialization.TypeKind"), 
          $.Type, $asm05.TypeRef("System.Xml.Serialization.TypeFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Serialization.TypeKind"), $.Type, 
          $asm05.TypeRef("System.Xml.Serialization.TypeFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $.Boolean, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.TypeFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.Serialization.TypeKind"), 
          $.Type, $asm05.TypeRef("System.Xml.Serialization.TypeFlags"), 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNeedConstructor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSupported", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateArrayTypeDesc", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateMappedTypeDesc", 
      new JSIL.MethodSignature($.Type, [$asm05.TypeRef("System.Xml.Serialization.Advanced.MappedTypeDesc")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindCommonBaseTypeDesc", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArrayElementTypeDesc", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArrayLengthName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseTypeDesc", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanBeAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanBeElementValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanBeTextValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CannotNew", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CollapseWhitespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConstructorInaccessible", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CSharpName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Exception", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExtendedType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.Advanced.MappedTypeDesc"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Flags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FormatterName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FullName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasCustomFormatter", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDefaultConstructor", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDefaultSupport", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasIsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAbstract", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAmbiguousDataType", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsArray", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsArrayLike", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsClass", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCollection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEnum", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEnumerable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsGenericInterface", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsMappedType", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsMixed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOptionalValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPrimitive", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPrivateImplementation", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRoot", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSpecial", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsStructLike", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnsupported", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValueType", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsVoid", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsXsdType", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Kind", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeKind"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UseReflection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Weight", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlEncodingNotRequired", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNullableTypeDesc", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDerivedFrom", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ArrayElementTypeDesc", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseTypeDesc", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Exception", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsMixed", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "fullName", $.String); 
    $.Field({Static:false, Public:false}, "cSharpName", $.String); 
    $.Field({Static:false, Public:false}, "arrayElementTypeDesc", $.Type); 
    $.Field({Static:false, Public:false}, "arrayTypeDesc", $.Type); 
    $.Field({Static:false, Public:false}, "nullableTypeDesc", $.Type); 
    $.Field({Static:false, Public:false}, "kind", $asm05.TypeRef("System.Xml.Serialization.TypeKind")); 
    $.Field({Static:false, Public:false}, "dataType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType")); 
    $.Field({Static:false, Public:false}, "type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "baseTypeDesc", $.Type); 
    $.Field({Static:false, Public:false}, "flags", $asm05.TypeRef("System.Xml.Serialization.TypeFlags")); 
    $.Field({Static:false, Public:false}, "formatterName", $.String); 
    $.Field({Static:false, Public:false}, "isXsdType", $.Boolean); 
    $.Field({Static:false, Public:false}, "isMixed", $.Boolean); 
    $.Field({Static:false, Public:false}, "extendedType", $asm05.TypeRef("System.Xml.Serialization.Advanced.MappedTypeDesc")); 
    $.Field({Static:false, Public:false}, "weight", $.Int32); 
    $.Field({Static:false, Public:false}, "exception", $asm01.TypeRef("System.Exception")); 
    $.Property({Static:false, Public:false}, "Flags", $asm05.TypeRef("System.Xml.Serialization.TypeFlags"));

    $.Property({Static:false, Public:false}, "IsXsdType", $.Boolean);

    $.Property({Static:false, Public:false}, "IsMappedType", $.Boolean);

    $.Property({Static:false, Public:false}, "ExtendedType", $asm05.TypeRef("System.Xml.Serialization.Advanced.MappedTypeDesc"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "FullName", $.String);

    $.Property({Static:false, Public:false}, "CSharpName", $.String);

    $.Property({Static:false, Public:false}, "DataType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:false}, "Type", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "FormatterName", $.String);

    $.Property({Static:false, Public:false}, "Kind", $asm05.TypeRef("System.Xml.Serialization.TypeKind"));

    $.Property({Static:false, Public:false}, "IsValueType", $.Boolean);

    $.Property({Static:false, Public:false}, "CanBeAttributeValue", $.Boolean);

    $.Property({Static:false, Public:false}, "XmlEncodingNotRequired", $.Boolean);

    $.Property({Static:false, Public:false}, "CanBeElementValue", $.Boolean);

    $.Property({Static:false, Public:false}, "CanBeTextValue", $.Boolean);

    $.Property({Static:false, Public:false}, "IsMixed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSpecial", $.Boolean);

    $.Property({Static:false, Public:false}, "IsAmbiguousDataType", $.Boolean);

    $.Property({Static:false, Public:false}, "HasCustomFormatter", $.Boolean);

    $.Property({Static:false, Public:false}, "HasDefaultSupport", $.Boolean);

    $.Property({Static:false, Public:false}, "HasIsEmpty", $.Boolean);

    $.Property({Static:false, Public:false}, "CollapseWhitespace", $.Boolean);

    $.Property({Static:false, Public:false}, "HasDefaultConstructor", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUnsupported", $.Boolean);

    $.Property({Static:false, Public:false}, "IsGenericInterface", $.Boolean);

    $.Property({Static:false, Public:false}, "IsPrivateImplementation", $.Boolean);

    $.Property({Static:false, Public:false}, "CannotNew", $.Boolean);

    $.Property({Static:false, Public:false}, "IsAbstract", $.Boolean);

    $.Property({Static:false, Public:false}, "IsOptionalValue", $.Boolean);

    $.Property({Static:false, Public:false}, "UseReflection", $.Boolean);

    $.Property({Static:false, Public:false}, "IsVoid", $.Boolean);

    $.Property({Static:false, Public:false}, "IsClass", $.Boolean);

    $.Property({Static:false, Public:false}, "IsStructLike", $.Boolean);

    $.Property({Static:false, Public:false}, "IsArrayLike", $.Boolean);

    $.Property({Static:false, Public:false}, "IsCollection", $.Boolean);

    $.Property({Static:false, Public:false}, "IsEnumerable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsArray", $.Boolean);

    $.Property({Static:false, Public:false}, "IsPrimitive", $.Boolean);

    $.Property({Static:false, Public:false}, "IsEnum", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsRoot", $.Boolean);

    $.Property({Static:false, Public:false}, "ConstructorInaccessible", $.Boolean);

    $.Property({Static:false, Public:false}, "Exception", $asm01.TypeRef("System.Exception"));

    $.Property({Static:false, Public:false}, "ArrayLengthName", $.String);

    $.Property({Static:false, Public:false}, "ArrayElementTypeDesc", $.Type);

    $.Property({Static:false, Public:false}, "Weight", $.Int32);

    $.Property({Static:false, Public:false}, "BaseTypeDesc", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TypeScope$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.TypeScope", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddNonXsdPrimitive", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $.String, 
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaFacet")]), 
          $asm05.TypeRef("System.Xml.Serialization.TypeFlags")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddPrimitive", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.Serialization.TypeFlags")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddSoapEncodedPrimitive", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $.String, 
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Serialization.TypeFlags")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddSoapEncodedTypes", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTypeMapping", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeMapping")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PrimtiveTypes", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeMappings", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ICollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Types", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ICollection"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAllMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")]), [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAllMembers", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.StructMapping"), $asm01.TypeRef("System.Collections.ArrayList")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetArrayElementType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArrayTypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCollectionElementType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConstructorFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeFlags"), [$asm01.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Exception")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultIndexer", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.PropertyInfo"), [$asm01.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEnumeratorElementType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm01.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Serialization.TypeFlags")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Serialization.TypeFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.MemberInfo"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.MemberInfo"), 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeFromTypeDesc", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm05.TypeRef("System.Xml.Serialization.TypeDesc")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeMappingFromTypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm05.TypeRef("System.Xml.Serialization.TypeDesc")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Reflection.MemberInfo"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsKnownType", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOptionalValue", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseWsdlArrayType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "typeDescs", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "arrayTypeDescs", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "typeMappings", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:true , Public:false}, "primitiveTypes", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:true , Public:false}, "primitiveDataTypes", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:true , Public:false}, "primitiveNames", $asm05.TypeRef("System.Xml.Serialization.NameTable")); 
    $.Field({Static:true , Public:false}, "unsupportedTypes", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Property({Static:false, Public:false}, "Types", $asm01.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false}, "TypeMappings", $asm01.TypeRef("System.Collections.ICollection"));

    $.Property({Static:true , Public:false}, "PrimtiveTypes", $asm01.TypeRef("System.Collections.Hashtable"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Soap$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.Soap", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "Encoding", "http://schemas.xmlsoap.org/soap/encoding/"); 
    $.Constant({Static:true , Public:false}, "UrType", "anyType"); 
    $.Constant({Static:true , Public:false}, "Array", "Array"); 
    $.Constant({Static:true , Public:false}, "ArrayType", "arrayType"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Soap12$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.Soap12", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "Encoding", "http://www.w3.org/2003/05/soap-encoding"); 
    $.Constant({Static:true , Public:false}, "RpcNamespace", "http://www.w3.org/2003/05/soap-rpc"); 
    $.Constant({Static:true , Public:false}, "RpcResult", "result"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Wsdl$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.Wsdl", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "Namespace", "http://schemas.xmlsoap.org/wsdl/"); 
    $.Constant({Static:true , Public:false}, "ArrayType", "arrayType"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function UrtTypes$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.UrtTypes", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "Namespace", "http://microsoft.com/wsdl/types/"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlAnyAttributeAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlAnyAttributeAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

(function XmlAnyElementAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlAnyElementAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceSpecified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Order", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Order", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "order", $.Int32); 
    $.Field({Static:false, Public:false}, "nsSpecified", $.Boolean); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "Order", $.Int32);

    $.Property({Static:false, Public:false}, "NamespaceSpecified", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

(function XmlAnyElementAttributes$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Collections.CollectionBase"), "System.Xml.Serialization.XmlAnyElementAttributes", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")], [])
    );

    $.Property({Static:false, Public:true }, "Item", $asm05.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function XmlArrayAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlArrayAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Form", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Order", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Form", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNullable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Order", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "elementName", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "nullable", $.Boolean); 
    $.Field({Static:false, Public:false}, "form", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
    $.Field({Static:false, Public:false}, "order", $.Int32); 
    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:true }, "Form", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Property({Static:false, Public:true }, "Order", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

(function XmlArrayItemAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlArrayItemAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Form", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullableSpecified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NestingLevel", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Form", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNullable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NestingLevel", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "elementName", $.String); 
    $.Field({Static:false, Public:false}, "type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "dataType", $.String); 
    $.Field({Static:false, Public:false}, "nullable", $.Boolean); 
    $.Field({Static:false, Public:false}, "nullableSpecified", $.Boolean); 
    $.Field({Static:false, Public:false}, "form", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
    $.Field({Static:false, Public:false}, "nestingLevel", $.Int32); 
    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "NestingLevel", $.Int32);

    $.Property({Static:false, Public:true }, "DataType", $.String);

    $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullableSpecified", $.Boolean);

    $.Property({Static:false, Public:true }, "Form", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

(function XmlArrayItemAttributes$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Collections.CollectionBase"), "System.Xml.Serialization.XmlArrayItemAttributes", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")], [])
    );

    $.Property({Static:false, Public:true }, "Item", $asm05.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function XmlAttributeAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlAttributeAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Form", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AttributeName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Form", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "attributeName", $.String); 
    $.Field({Static:false, Public:false}, "type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "dataType", $.String); 
    $.Field({Static:false, Public:false}, "form", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "AttributeName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "DataType", $.String);

    $.Property({Static:false, Public:true }, "Form", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

(function XmlAttributeOverrides$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlAttributeOverrides", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.XmlAttributes")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.XmlAttributes")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlAttributes"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlAttributes"), [$asm01.TypeRef("System.Type"), $.String], [])
    );

    $.Field({Static:false, Public:false}, "types", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Property({Static:false, Public:true }, "Item", $asm05.TypeRef("System.Xml.Serialization.XmlAttributes"));

    $.Property({Static:false, Public:true }, "Item", $asm05.TypeRef("System.Xml.Serialization.XmlAttributes"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

JSIL.MakeEnum(
  "System.Xml.Serialization.XmlAttributeFlags", false, {
    Enum: 1, 
    Array: 2, 
    Text: 4, 
    ArrayItems: 8, 
    Elements: 16, 
    Attribute: 32, 
    Root: 64, 
    Type: 128, 
    AnyElements: 256, 
    AnyAttribute: 512, 
    ChoiceIdentifier: 1024, 
    XmlnsDeclarations: 2048
  }, false
);

(function XmlAttributes$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlAttributes", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.ICustomAttributeProvider")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IgnoreAttribute", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlAnyAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlAnyElements", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlAnyElementAttributes"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlArray", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlArrayAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlArrayItems", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlChoiceIdentifier", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlChoiceIdentifierAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlDefaultValue", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlElements", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlElementAttributes"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlEnum", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlEnumAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFlags", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlAttributeFlags"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlIgnore", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Xmlns", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlRoot", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlRootAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlText", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTextAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTypeAttribute"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAttr", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Reflection.ICustomAttributeProvider"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlAnyAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlArray", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlArrayAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlDefaultValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlEnum", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlEnumAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlIgnore", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Xmlns", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlRoot", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlRootAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlText", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlTextAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlTypeAttribute")], [])
    );

    $.Field({Static:false, Public:false}, "xmlElements", $asm05.TypeRef("System.Xml.Serialization.XmlElementAttributes")); 
    $.Field({Static:false, Public:false}, "xmlArrayItems", $asm05.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes")); 
    $.Field({Static:false, Public:false}, "xmlAnyElements", $asm05.TypeRef("System.Xml.Serialization.XmlAnyElementAttributes")); 
    $.Field({Static:false, Public:false}, "xmlArray", $asm05.TypeRef("System.Xml.Serialization.XmlArrayAttribute")); 
    $.Field({Static:false, Public:false}, "xmlAttribute", $asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute")); 
    $.Field({Static:false, Public:false}, "xmlText", $asm05.TypeRef("System.Xml.Serialization.XmlTextAttribute")); 
    $.Field({Static:false, Public:false}, "xmlEnum", $asm05.TypeRef("System.Xml.Serialization.XmlEnumAttribute")); 
    $.Field({Static:false, Public:false}, "xmlIgnore", $.Boolean); 
    $.Field({Static:false, Public:false}, "xmlns", $.Boolean); 
    $.Field({Static:false, Public:false}, "xmlDefaultValue", $.Object); 
    $.Field({Static:false, Public:false}, "xmlRoot", $asm05.TypeRef("System.Xml.Serialization.XmlRootAttribute")); 
    $.Field({Static:false, Public:false}, "xmlType", $asm05.TypeRef("System.Xml.Serialization.XmlTypeAttribute")); 
    $.Field({Static:false, Public:false}, "xmlAnyAttribute", $asm05.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute")); 
    $.Field({Static:false, Public:false}, "xmlChoiceIdentifier", $asm05.TypeRef("System.Xml.Serialization.XmlChoiceIdentifierAttribute")); 
    $.Field({Static:true , Public:false}, "ignoreAttributeType", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:false}, "XmlFlags", $asm05.TypeRef("System.Xml.Serialization.XmlAttributeFlags"));

    $.Property({Static:true , Public:false}, "IgnoreAttribute", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "XmlElements", $asm05.TypeRef("System.Xml.Serialization.XmlElementAttributes"));

    $.Property({Static:false, Public:true }, "XmlAttribute", $asm05.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"));

    $.Property({Static:false, Public:true }, "XmlEnum", $asm05.TypeRef("System.Xml.Serialization.XmlEnumAttribute"));

    $.Property({Static:false, Public:true }, "XmlText", $asm05.TypeRef("System.Xml.Serialization.XmlTextAttribute"));

    $.Property({Static:false, Public:true }, "XmlArray", $asm05.TypeRef("System.Xml.Serialization.XmlArrayAttribute"));

    $.Property({Static:false, Public:true }, "XmlArrayItems", $asm05.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes"));

    $.Property({Static:false, Public:true }, "XmlDefaultValue", $.Object);

    $.Property({Static:false, Public:true }, "XmlIgnore", $.Boolean);

    $.Property({Static:false, Public:true }, "XmlType", $asm05.TypeRef("System.Xml.Serialization.XmlTypeAttribute"));

    $.Property({Static:false, Public:true }, "XmlRoot", $asm05.TypeRef("System.Xml.Serialization.XmlRootAttribute"));

    $.Property({Static:false, Public:true }, "XmlAnyElements", $asm05.TypeRef("System.Xml.Serialization.XmlAnyElementAttributes"));

    $.Property({Static:false, Public:true }, "XmlAnyAttribute", $asm05.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

    $.Property({Static:false, Public:true }, "XmlChoiceIdentifier", $asm05.TypeRef("System.Xml.Serialization.XmlChoiceIdentifierAttribute"));

    $.Property({Static:false, Public:true }, "Xmlns", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlChoiceIdentifierAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlChoiceIdentifierAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Property({Static:false, Public:true }, "MemberName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

(function XmlCodeExporter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.CodeExporter"), "System.Xml.Serialization.XmlCodeExporter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.CodeDom.CodeNamespace")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.CodeDom.CodeNamespace"), $asm02.TypeRef("System.CodeDom.CodeCompileUnit")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeNamespace"), $asm02.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeNamespace"), $asm02.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), $asm01.TypeRef("System.Collections.Hashtable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeNamespace"), $asm02.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm01.TypeRef("System.Collections.Hashtable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDefaultValueAttribute", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeMemberField"), $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), 
          $.Object, $asm05.TypeRef("System.Xml.Serialization.TypeMapping"), 
          $asm02.TypeRef("System.CodeDom.CodeCommentStatementCollection"), $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm05.TypeRef("System.Xml.Serialization.Accessor"), $asm02.TypeRef("System.CodeDom.CodeConstructor")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddInitializationStatement", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeConstructor"), $asm02.TypeRef("System.CodeDom.CodeMemberField"), 
          $asm02.TypeRef("System.CodeDom.CodeExpression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddMappingMetadata", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddMappingMetadata", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm05.TypeRef("System.Xml.Serialization.XmlMemberMapping"), 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddMappingMetadata", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm05.TypeRef("System.Xml.Serialization.XmlMemberMapping"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddMemberMetadata", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeMemberField"), $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), 
          $asm05.TypeRef("System.Xml.Serialization.MemberMapping"), $.String, 
          $.Boolean, $asm02.TypeRef("System.CodeDom.CodeCommentStatementCollection"), 
          $asm02.TypeRef("System.CodeDom.CodeConstructor")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRootMetadata", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm05.TypeRef("System.Xml.Serialization.TypeMapping"), 
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Serialization.ElementAccessor")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DropDefaultAttribute", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.Accessor"), $asm02.TypeRef("System.CodeDom.CodeCommentStatementCollection"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnsureTypesExported", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.Accessor")]), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureTypesExported", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.Accessor"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportAnyAttribute", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportAnyElement", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
          $.String, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportArray", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
          $.String, $.Boolean, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportArrayElements", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm05.TypeRef("System.Xml.Serialization.ArrayMapping"), 
          $.String, $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportArrayItem", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportAttribute", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExportDerivedStructs", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElement", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportMember", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm05.TypeRef("System.Xml.Serialization.MemberMapping"), 
          $.String, $asm02.TypeRef("System.CodeDom.CodeConstructor")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportMetadata", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm01.TypeRef("System.Type"), 
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $.Object, $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportProperty", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm05.TypeRef("System.Xml.Serialization.MemberMapping"), 
          $.String, $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm02.TypeRef("System.CodeDom.CodeConstructor")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportStruct", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportText", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportType", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.TypeMapping"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportTypeMapping", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultValueArguments", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm02.TypeRef("System.CodeDom.CodeAttributeArgument")]), [
          $asm05.TypeRef("System.Xml.Serialization.PrimitiveMapping"), $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm02.TypeRef("System.CodeDom.CodeExpression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportDefault", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlCountingReader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.XmlReader"), "System.Xml.Serialization.XmlCountingReader", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AdvanceCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementCount", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToContent", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAs", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAs", 
      new JSIL.MethodSignature($.Object, [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.IXmlNamespaceResolver"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDouble", 
      new JSIL.MethodSignature($.Double, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsInt", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsLong", 
      new JSIL.MethodSignature($.Int64, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsObject", 
      new JSIL.MethodSignature($.Object, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsString", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInnerXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadOuterXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSubtree", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToDescendant", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToDescendant", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToNextSibling", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToNextSibling", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(2, "get_LineNumber");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(2, "get_LinePosition");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(2, "HasLineInfo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.get_Normalized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "get_Normalized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.get_WhitespaceHandling", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.WhitespaceHandling"), [], [])
    )
      .Overrides(1, "get_WhitespaceHandling");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.set_Normalized", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Overrides(1, "set_Normalized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.set_WhitespaceHandling", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.WhitespaceHandling")], [])
    )
      .Overrides(1, "set_WhitespaceHandling");

    $.Field({Static:false, Public:false}, "innerReader", $asm05.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "advanceCount", $.Int32); 
    $.Property({Static:false, Public:false}, "AdvanceCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm05.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm05.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm05.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm05.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm05.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.Normalized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.WhitespaceHandling", $asm05.TypeRef("System.Xml.WhitespaceHandling"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm05.TypeRef("System.Xml.Serialization.IXmlTextParser"), 
      /* 2 */ $asm05.TypeRef("System.Xml.IXmlLineInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function XmlCustomFormatter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlCustomFormatter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollapseWhitespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromByteArrayHex", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromChar", 
      new JSIL.MethodSignature($.String, [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDate", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDateTime", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDefaultValue", 
      new JSIL.MethodSignature($.String, [$.Object, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromEnum", 
      new JSIL.MethodSignature($.String, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromTime", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlNCName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlNmToken", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlNmTokens", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Mode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection/DateTimeSerializationMode"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToByteArrayBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToByteArrayHex", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToDate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToDefaultValue", 
      new JSIL.MethodSignature($.Object, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToEnum", 
      new JSIL.MethodSignature($.Int64, [
          $.String, $asm01.TypeRef("System.Collections.Hashtable"), 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXmlName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXmlNCName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXmlNmToken", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXmlNmTokens", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteArrayBase64", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlWriter"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.Field({Static:true , Public:false}, "mode", $asm05.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection/DateTimeSerializationMode")); 
    $.Field({Static:true , Public:false}, "allDateTimeFormats", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:true , Public:false}, "allDateFormats", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:true , Public:false}, "allTimeFormats", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Property({Static:true , Public:false}, "Mode", $asm05.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection/DateTimeSerializationMode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlElementAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlElementAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Form", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullableSpecified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Order", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Form", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNullable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Order", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "elementName", $.String); 
    $.Field({Static:false, Public:false}, "type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "dataType", $.String); 
    $.Field({Static:false, Public:false}, "nullable", $.Boolean); 
    $.Field({Static:false, Public:false}, "nullableSpecified", $.Boolean); 
    $.Field({Static:false, Public:false}, "form", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm")); 
    $.Field({Static:false, Public:false}, "order", $.Int32); 
    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "DataType", $.String);

    $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullableSpecified", $.Boolean);

    $.Property({Static:false, Public:true }, "Form", $asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Property({Static:false, Public:true }, "Order", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

(function XmlElementAttributes$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Collections.CollectionBase"), "System.Xml.Serialization.XmlElementAttributes", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute")], [])
    );

    $.Property({Static:false, Public:true }, "Item", $asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function XmlEnumAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlEnumAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Field]; });

})();

(function XmlIgnoreAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlIgnoreAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

(function XmlIncludeAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlIncludeAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "type", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Class", "Interface", "Method", "Struct")]; });

})();

JSIL.MakeEnum(
  "System.Xml.Serialization.XmlMappingAccess", true, {
    None: 0, 
    Read: 1, 
    Write: 2
  }, true
);

(function XmlMapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlMapping", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeScope"), $asm05.TypeRef("System.Xml.Serialization.ElementAccessor")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.TypeScope"), $asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), 
          $asm05.TypeRef("System.Xml.Serialization.XmlMappingAccess")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckShallow", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateKey", 
      new JSIL.MethodSignature($.String, [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Accessor", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenerateSerializer", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSoap", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsWriteable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Scope", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeScope"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XsdElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsShallow", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_GenerateSerializer", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsSoap", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetKey", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetKeyInternal", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "scope", $asm05.TypeRef("System.Xml.Serialization.TypeScope")); 
    $.Field({Static:false, Public:false}, "generateSerializer", $.Boolean); 
    $.Field({Static:false, Public:false}, "isSoap", $.Boolean); 
    $.Field({Static:false, Public:false}, "accessor", $asm05.TypeRef("System.Xml.Serialization.ElementAccessor")); 
    $.Field({Static:false, Public:false}, "key", $.String); 
    $.Field({Static:false, Public:false}, "shallow", $.Boolean); 
    $.Field({Static:false, Public:false}, "access", $asm05.TypeRef("System.Xml.Serialization.XmlMappingAccess")); 
    $.Property({Static:false, Public:false}, "Accessor", $asm05.TypeRef("System.Xml.Serialization.ElementAccessor"));

    $.Property({Static:false, Public:false}, "Scope", $asm05.TypeRef("System.Xml.Serialization.TypeScope"));

    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true }, "XsdElementName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:false}, "GenerateSerializer", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReadable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsWriteable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSoap", $.Boolean);

    $.Property({Static:false, Public:false}, "Key", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlMemberMapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlMemberMapping", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateTypeName", 
      new JSIL.MethodSignature($.String, [$asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Accessor", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.Accessor"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Any", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CheckSpecified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Mapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.MemberMapping"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeFullName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeNamespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XsdElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "mapping", $asm05.TypeRef("System.Xml.Serialization.MemberMapping")); 
    $.Property({Static:false, Public:false}, "Mapping", $asm05.TypeRef("System.Xml.Serialization.MemberMapping"));

    $.Property({Static:false, Public:false}, "Accessor", $asm05.TypeRef("System.Xml.Serialization.Accessor"));

    $.Property({Static:false, Public:true }, "Any", $.Boolean);

    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true }, "XsdElementName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "MemberName", $.String);

    $.Property({Static:false, Public:true }, "TypeName", $.String);

    $.Property({Static:false, Public:true }, "TypeNamespace", $.String);

    $.Property({Static:false, Public:true }, "TypeFullName", $.String);

    $.Property({Static:false, Public:true }, "CheckSpecified", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlMembersMapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.XmlMapping"), "System.Xml.Serialization.XmlMembersMapping", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.TypeScope"), $asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), 
          $asm05.TypeRef("System.Xml.Serialization.XmlMappingAccess")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMemberMapping"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeNamespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "mappings", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlMemberMapping")])); 
    $.Property({Static:false, Public:true }, "TypeName", $.String);

    $.Property({Static:false, Public:true }, "TypeNamespace", $.String);

    $.Property({Static:false, Public:true }, "Item", $asm05.TypeRef("System.Xml.Serialization.XmlMemberMapping"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function XmlNamespaceDeclarationsAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlNamespaceDeclarationsAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

(function XmlReflectionImporter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlReflectionImporter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlAttributeOverrides")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddUniqueAccessor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.INameScope"), $asm05.TypeRef("System.Xml.Serialization.Accessor")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddUniqueAccessor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.MemberMapping"), $asm05.TypeRef("System.Xml.Serialization.INameScope"), 
          $asm05.TypeRef("System.Xml.Serialization.INameScope"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAmbiguousChoice", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.XmlAttributes"), $asm01.TypeRef("System.Type"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckChoiceIdentifierMapping", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.EnumMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckChoiceIdentifierType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [
          $asm01.TypeRef("System.Type"), $.Boolean, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckContext", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $asm05.TypeRef("System.Xml.Serialization.XmlReflectionImporter/ImportContext")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckForm", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckNullable", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm05.TypeRef("System.Xml.Serialization.TypeMapping")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTopLevelAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlAttributes"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CountAtLevel", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateArrayAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlArrayAttribute"), [$asm05.TypeRef("System.Xml.Serialization.TypeDesc")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateArrayElementsFromAttributes", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.ArrayMapping"), $asm05.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes"), 
          $asm01.TypeRef("System.Type"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateArrayItemAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute"), [$asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateElementAccessor", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), [$asm05.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateElementAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlElementAttribute"), [$asm05.TypeRef("System.Xml.Serialization.TypeDesc")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateMemberReflectionException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm05.TypeRef("System.Xml.Serialization.FieldModel"), $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateNullableMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.NullableMapping"), [$asm05.TypeRef("System.Xml.Serialization.TypeMapping"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReflectionException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRootMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTypeReflectionException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $asm01.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindSpecifiedMember", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember"), [$.String, $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlAttributes"), [$asm01.TypeRef("System.Type"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlAttributes"), [$asm01.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChoiceIdentifierType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [
          $asm05.TypeRef("System.Xml.Serialization.XmlChoiceIdentifierAttribute"), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), 
          $.Boolean, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChoiceIdentifierType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [
          $asm05.TypeRef("System.Xml.Serialization.XmlChoiceIdentifierAttribute"), $asm05.TypeRef("System.Xml.Serialization.StructModel"), 
          $.Boolean, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetContextName", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.XmlReflectionImporter/ImportContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultValue", 
      new JSIL.MethodSignature($.Object, [
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.Serialization.XmlAttributes")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMappingName", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.Mapping")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodFromSchemaProvider", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.MethodInfo"), [$asm05.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRootMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTopLevelMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm01.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $asm05.TypeRef("System.Xml.Serialization.NameTable"), 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAccessorMapping", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.MemberMapping"), $asm05.TypeRef("System.Xml.Serialization.FieldModel"), 
          $asm05.TypeRef("System.Xml.Serialization.XmlAttributes"), $.String, 
          $asm01.TypeRef("System.Type"), $.Boolean, 
          $.Boolean, $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportArrayLikeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ArrayMapping"), [
          $asm05.TypeRef("System.Xml.Serialization.ArrayModel"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportConstantMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ConstantMapping"), [$asm05.TypeRef("System.Xml.Serialization.ConstantModel")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), [
          $asm05.TypeRef("System.Xml.Serialization.TypeModel"), $asm05.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
          $.String, $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportEnumMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.EnumMapping"), [
          $asm05.TypeRef("System.Xml.Serialization.EnumModel"), $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportFieldMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.MemberMapping"), [
          $asm05.TypeRef("System.Xml.Serialization.StructModel"), $asm05.TypeRef("System.Xml.Serialization.FieldModel"), 
          $asm05.TypeRef("System.Xml.Serialization.XmlAttributes"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportMemberMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.MemberMapping"), [
          $asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
          $.Boolean, $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
          $.Boolean, $.Boolean, 
          $asm05.TypeRef("System.Xml.Serialization.XmlMappingAccess")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.MembersMapping"), [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.String, 
          $.Boolean, $.Boolean, 
          $.Boolean, $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportPrimitiveMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [
          $asm05.TypeRef("System.Xml.Serialization.PrimitiveModel"), $asm05.TypeRef("System.Xml.Serialization.XmlReflectionImporter/ImportContext"), 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportSpecialMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.SpecialMapping"), [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $.String, $asm05.TypeRef("System.Xml.Serialization.XmlReflectionImporter/ImportContext"), 
          $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportStructLikeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.StructMapping"), [
          $asm05.TypeRef("System.Xml.Serialization.StructModel"), $.String, 
          $.Boolean, $asm05.TypeRef("System.Xml.Serialization.XmlAttributes"), 
          $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm01.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.XmlRootAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm05.TypeRef("System.Xml.Serialization.TypeModel"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.XmlReflectionImporter/ImportContext"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.XmlAttributes"), $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm05.TypeRef("System.Xml.Serialization.TypeModel"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.XmlReflectionImporter/ImportContext"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.XmlAttributes"), $.Boolean, 
          $.Boolean, $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncludeType", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncludeType", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncludeTypes", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.ICustomAttributeProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncludeTypes", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.ICustomAttributeProvider"), $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeStructMembers", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Serialization.StructMapping"), $asm05.TypeRef("System.Xml.Serialization.StructModel"), 
          $.Boolean, $.String, 
          $asm05.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidAttributeUseException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAnonymousType", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Serialization.XmlAttributes"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReconcileAccessor", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.Accessor"), [$asm05.TypeRef("System.Xml.Serialization.Accessor"), $asm05.TypeRef("System.Xml.Serialization.NameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReconcileLocalAccessor", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetArrayMappingType", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.ArrayMapping"), $.String, 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBase", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.SerializableMapping"), $asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsupportedException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $asm05.TypeRef("System.Xml.Serialization.XmlReflectionImporter/ImportContext")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidationCallbackWithErrorCode", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("System.Xml.Schema.ValidationEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "XsdTypeName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "XsdTypeName", 
      new JSIL.MethodSignature($.String, [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.XmlAttributes"), 
          $.String
        ], [])
    );

    $.Field({Static:false, Public:false}, "typeScope", $asm05.TypeRef("System.Xml.Serialization.TypeScope")); 
    $.Field({Static:false, Public:false}, "attributeOverrides", $asm05.TypeRef("System.Xml.Serialization.XmlAttributeOverrides")); 
    $.Field({Static:false, Public:false}, "defaultAttributes", $asm05.TypeRef("System.Xml.Serialization.XmlAttributes")); 
    $.Field({Static:false, Public:false}, "types", $asm05.TypeRef("System.Xml.Serialization.NameTable")); 
    $.Field({Static:false, Public:false}, "nullables", $asm05.TypeRef("System.Xml.Serialization.NameTable")); 
    $.Field({Static:false, Public:false}, "elements", $asm05.TypeRef("System.Xml.Serialization.NameTable")); 
    $.Field({Static:false, Public:false}, "xsdAttributes", $asm05.TypeRef("System.Xml.Serialization.NameTable")); 
    $.Field({Static:false, Public:false}, "specials", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "anonymous", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "serializables", $asm05.TypeRef("System.Xml.Serialization.NameTable")); 
    $.Field({Static:false, Public:false}, "root", $asm05.TypeRef("System.Xml.Serialization.StructMapping")); 
    $.Field({Static:false, Public:false}, "defaultNs", $.String); 
    $.Field({Static:false, Public:false}, "modelScope", $asm05.TypeRef("System.Xml.Serialization.ModelScope")); 
    $.Field({Static:false, Public:false}, "arrayNestingLevel", $.Int32); 
    $.Field({Static:false, Public:false}, "savedArrayItemAttributes", $asm05.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes")); 
    $.Field({Static:false, Public:false}, "savedArrayNamespace", $.String); 
    $.Field({Static:false, Public:false}, "choiceNum", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Serialization.XmlReflectionImporter/ImportContext", false, {
    Text: 0, 
    Attribute: 1, 
    Element: 2
  }, false
);

(function ImportStructWorkItem$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.ImportStructWorkItem", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.StructModel"), $asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Mapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.StructMapping"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Model", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.StructModel"), [], [])
    );

    $.Field({Static:false, Public:false}, "model", $asm05.TypeRef("System.Xml.Serialization.StructModel")); 
    $.Field({Static:false, Public:false}, "mapping", $asm05.TypeRef("System.Xml.Serialization.StructMapping")); 
    $.Property({Static:false, Public:false}, "Model", $asm05.TypeRef("System.Xml.Serialization.StructModel"));

    $.Property({Static:false, Public:false}, "Mapping", $asm05.TypeRef("System.Xml.Serialization.StructMapping"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function WorkItems$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.WorkItems", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.ImportStructWorkItem")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ImportStructWorkItem"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.Serialization.ImportStructWorkItem")], [])
    );

    $.Field({Static:false, Public:false}, "list", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Property({Static:false, Public:false}, "Item", $asm05.TypeRef("System.Xml.Serialization.ImportStructWorkItem"));

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function RecursionLimiter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.RecursionLimiter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DeferredWorkItems", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.WorkItems"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsExceededLimit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Depth", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "maxDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "deferredWorkItems", $asm05.TypeRef("System.Xml.Serialization.WorkItems")); 
    $.Property({Static:false, Public:false}, "IsExceededLimit", $.Boolean);

    $.Property({Static:false, Public:false}, "Depth", $.Int32);

    $.Property({Static:false, Public:false}, "DeferredWorkItems", $asm05.TypeRef("System.Xml.Serialization.WorkItems"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlReflectionMember$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlReflectionMember", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReturnValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OverrideIsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapAttributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.SoapAttributes"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlAttributes", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlAttributes"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsReturnValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberType", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OverrideIsNullable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.SoapAttributes")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlAttributes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlAttributes")], [])
    );

    $.Field({Static:false, Public:false}, "memberName", $.String); 
    $.Field({Static:false, Public:false}, "type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "xmlAttributes", $asm05.TypeRef("System.Xml.Serialization.XmlAttributes")); 
    $.Field({Static:false, Public:false}, "soapAttributes", $asm05.TypeRef("System.Xml.Serialization.SoapAttributes")); 
    $.Field({Static:false, Public:false}, "isReturnValue", $.Boolean); 
    $.Field({Static:false, Public:false}, "overrideIsNullable", $.Boolean); 
    $.Property({Static:false, Public:true }, "MemberType", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "XmlAttributes", $asm05.TypeRef("System.Xml.Serialization.XmlAttributes"));

    $.Property({Static:false, Public:true }, "SoapAttributes", $asm05.TypeRef("System.Xml.Serialization.SoapAttributes"));

    $.Property({Static:false, Public:true }, "MemberName", $.String);

    $.Property({Static:false, Public:true }, "IsReturnValue", $.Boolean);

    $.Property({Static:false, Public:true }, "OverrideIsNullable", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlRootAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlRootAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullableSpecified", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNullable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "elementName", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "dataType", $.String); 
    $.Field({Static:false, Public:false}, "nullable", $.Boolean); 
    $.Field({Static:false, Public:false}, "nullableSpecified", $.Boolean); 
    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "DataType", $.String);

    $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullableSpecified", $.Boolean);

    $.Property({Static:false, Public:false}, "Key", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags(
          "Class", "Enum", "Interface", "ReturnValue", 
          "Struct"
      )]; });

})();

(function XmlSchemaExporter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSchemaExporter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSchemas")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSchema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSchemaImport", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSchemaItem", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXmlnsAnnotation", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForDuplicateType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckScope", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeScope")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportAnonymousPrimitiveMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm05.TypeRef("System.Xml.Serialization.PrimitiveMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportAnyType", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportAnyType", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportArrayMapping", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.ArrayMapping"), $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportAttributeAccessor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm05.TypeRef("System.Xml.Serialization.AttributeAccessor"), 
          $.Boolean, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExportDefaultValue", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.TypeMapping"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportDerivedMappings", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElementAccessor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), 
          $.Boolean, $.Boolean, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElementAccessors", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]), 
          $.Boolean, $.Boolean, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElementMapping", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm05.TypeRef("System.Xml.Serialization.Mapping"), 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportEnumMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm05.TypeRef("System.Xml.Serialization.EnumMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportMapping", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.Mapping"), $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm05.TypeRef("System.Xml.Serialization.MembersMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportNonXsdPrimitiveMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm05.TypeRef("System.Xml.Serialization.PrimitiveMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportPrimitiveMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm05.TypeRef("System.Xml.Serialization.PrimitiveMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportRootIfNecessary", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeScope")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportSpecialMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [
          $asm05.TypeRef("System.Xml.Serialization.SpecialMapping"), $.String, 
          $.Boolean, $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportStructMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [
          $asm05.TypeRef("System.Xml.Serialization.StructMapping"), $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportTypeMapping", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportTypeMembers", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")]), 
          $.String, $.String, 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindImport", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaImport"), [$asm05.TypeRef("System.Xml.Schema.XmlSchema"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindSchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [$.String, $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAnyType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NamespacesEqual", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SchemaContainsItem", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String], [])
    );

    $.Constant({Static:true , Public:false}, "elementFormDefault", 1); 
    $.Constant({Static:true , Public:false}, "attributeFormDefault", 2); 
    $.Field({Static:false, Public:false}, "schemas", $asm05.TypeRef("System.Xml.Serialization.XmlSchemas")); 
    $.Field({Static:false, Public:false}, "elements", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "attributes", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "types", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "references", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "needToExportRoot", $.Boolean); 
    $.Field({Static:false, Public:false}, "scope", $asm05.TypeRef("System.Xml.Serialization.TypeScope")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaImporter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.SchemaImporter"), "System.Xml.Serialization.XmlSchemaImporter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSchemas")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm05.TypeRef("System.Xml.Serialization.ImportContext")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm05.TypeRef("System.Xml.Serialization.ImportContext")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddScopeElement", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.INameScope"), $asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddScopeElements", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.INameScope"), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AttributeForm", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), [$.String, $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BaseTypeName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ElementForm", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaForm"), [$.String, $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAttributeGroup", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDataType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Serialization.TypeFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindExtendedAnyElement", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaAny"), $.Boolean, 
          $asm02.TypeRef("System.CodeDom.CodeCompileUnit"), $asm02.TypeRef("System.CodeDom.CodeNamespace"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindExtendedType", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm02.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm02.TypeRef("System.CodeDom.CodeNamespace"), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindExtendedType", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $asm02.TypeRef("System.CodeDom.CodeCompileUnit"), $asm02.TypeRef("System.CodeDom.CodeNamespace"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindGroup", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.Serialization.TypeFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GatherGroupChoices", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroup"), $asm05.TypeRef("System.Xml.Serialization.NameTable"), 
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GatherGroupChoices", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm05.TypeRef("System.Xml.Serialization.NameTable"), 
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUniqueTypeName", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenerateOrder", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataTypeSource", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $asm05.TypeRef("System.Xml.Serialization.TypeFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm05.TypeRef("System.Xml.Serialization.TypeFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEquivalentElements", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")]), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTopLevelElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeItems", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSchemaImporter/TypeItems"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAny", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaAny"), $.Boolean, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAnyAttributeMember", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAnyMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.SpecialMapping"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAnyMember", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.MemberMapping"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaAny"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm05.TypeRef("System.Xml.Serialization.INameScope"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportAnyType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportArray", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportArrayMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ArrayMapping"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.AttributeAccessor"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAttributeGroupMembers", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAttributeMember", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportChoiceGroup", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.MemberMapping"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm05.TypeRef("System.Xml.Serialization.INameScope"), $.String, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportDataType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
          $.String, $asm01.TypeRef("System.Type"), 
          $asm05.TypeRef("System.Xml.Serialization.TypeFlags"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportDerivedTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportDerivedTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm01.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ImportDerivedTypes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String, 
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportElementMember", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm05.TypeRef("System.Xml.Serialization.INameScope"), $.String, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportElementType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String, 
          $asm01.TypeRef("System.Type"), $asm01.TypeRef("System.Type"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportEnumeratedChoice", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.EnumMapping"), [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportEnumeratedDataType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.Serialization.TypeFlags"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportGroup", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm05.TypeRef("System.Xml.Serialization.INameScope"), $.String, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportGroupMembers", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm05.TypeRef("System.Xml.Serialization.INameScope"), $.String, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlQualifiedName")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlQualifiedName")]), $asm01.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.SoapSchemaMember")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportMembersType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.MembersMapping"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportNonXsdPrimitiveDataType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.TypeFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportPrimitiveDataType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $asm05.TypeRef("System.Xml.Serialization.TypeFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportSchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportSchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportSchemaType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm01.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportSpecialAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.AttributeAccessor"), [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportStructDataType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.StructMapping"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
          $.String, $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportStructType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.StructMapping"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
          $.String, $asm01.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportSubstitutionGroupMember", 
      new JSIL.MethodSignature($.Boolean, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTextMember", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.TypeFlags"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String, 
          $.String, $asm01.TypeRef("System.Type"), 
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.TypeFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTypeMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")]), [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm05.TypeRef("System.Xml.Serialization.INameScope"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportXmlnsDeclarationsMember", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAllGroup", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMixed", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNeedXmlSerializationAttributes", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Serialization.ArrayMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "KeepXmlnsDeclarations", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunSchemaExtensions", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.TypeMapping"), $asm05.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $asm05.TypeRef("System.Xml.Serialization.TypeFlags")
        ], [])
    );

    $.Property({Static:false, Public:false}, "GenerateOrder", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TypeItems$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSchemaImporter/TypeItems", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "Attributes", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")); 
    $.Field({Static:false, Public:false}, "AnyAttribute", $asm05.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")); 
    $.Field({Static:false, Public:false}, "Particle", $asm05.TypeRef("System.Xml.Schema.XmlSchemaGroupBase")); 
    $.Field({Static:false, Public:false}, "baseSimpleType", $asm05.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "IsUnbounded", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ElementComparer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSchemaImporter/ElementComparer", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.IComparer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSchemaProviderAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlSchemaProviderAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAny", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsAny", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "methodName", $.String); 
    $.Field({Static:false, Public:false}, "any", $.Boolean); 
    $.Property({Static:false, Public:true }, "MethodName", $.String);

    $.Property({Static:false, Public:true }, "IsAny", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Class", "Interface", "Struct")]; });

})();

(function XmlSchemas$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Collections.CollectionBase"), "System.Xml.Serialization.XmlSchemas", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Schema.XmlSchema"), $asm02.TypeRef("System.Uri")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddImport", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.IList"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddReference", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.ValidationEventHandler"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Schema.XmlSchema")]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateFakeXsdSchema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateValidationException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaException"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Dump", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Find", 
      new JSIL.MethodSignature($.Object, [
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm01.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Find", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm01.TypeRef("System.Collections.IList")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Cache", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.SchemaObjectCache"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsCompiled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MergedSchemas", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_References", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaSet", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XmlSchema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XsdSchema", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParentName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaItem", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSchemas", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.IList"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IgnoreCompileErrors", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("System.Xml.Schema.ValidationEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsDataSet", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsReference", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ItemName", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Merge", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Merge", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.IList"), $asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MergeFailedMessage", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemove", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Prepare", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Preprocess", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveName", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCache", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.SchemaObjectCache"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xml.Schema.XmlSchema$g.GetEnumerator", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm05.TypeRef("System.Xml.Schema.XmlSchema")]), [], [])
    )
      .Overrides(3, "GetEnumerator");

    $.Constant({Static:true , Public:false}, "xmlSchema", "<?xml version='1.0' encoding='UTF-8' ?> \r\n<xs:schema targetNamespace='http://www.w3.org/XML/1998/namespace' xmlns:xs='http://www.w3.org/2001/XMLSchema' xml:lang='en'>\r\n <xs:attribute name='lang' type='xs:language'/>\r\n <xs:attribute name='space'>\r\n  <xs:simpleType>\r\n   <xs:restriction base='xs:NCName'>\r\n    <xs:enumeration value='default'/>\r\n    <xs:enumeration value='preserve'/>\r\n   </xs:restriction>\r\n  </xs:simpleType>\r\n </xs:attribute>\r\n <xs:attribute name='base' type='xs:anyURI'/>\r\n <xs:attribute name='id' type='xs:ID' />\r\n <xs:attributeGroup name='specialAttrs'>\r\n  <xs:attribute ref='xml:base'/>\r\n  <xs:attribute ref='xml:lang'/>\r\n  <xs:attribute ref='xml:space'/>\r\n </xs:attributeGroup>\r\n</xs:schema>"); 
    $.Field({Static:false, Public:false}, "schemaSet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
    $.Field({Static:false, Public:false}, "references", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "cache", $asm05.TypeRef("System.Xml.Serialization.SchemaObjectCache")); 
    $.Field({Static:false, Public:false}, "shareTypes", $.Boolean); 
    $.Field({Static:false, Public:false}, "mergedSchemas", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "delayedSchemas", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "isCompiled", $.Boolean); 
    $.Field({Static:true , Public:false}, "xsd", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    $.Field({Static:true , Public:false}, "xml", $asm05.TypeRef("System.Xml.Schema.XmlSchema")); 
    $.Property({Static:false, Public:true }, "Item", $asm05.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:true }, "Item", $asm05.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:false}, "Cache", $asm05.TypeRef("System.Xml.Serialization.SchemaObjectCache"));

    $.Property({Static:false, Public:false}, "MergedSchemas", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "References", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "SchemaSet", $asm05.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Property({Static:false, Public:true }, "IsCompiled", $.Boolean);

    $.Property({Static:true , Public:false}, "XsdSchema", $asm05.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:true , Public:false}, "XmlSchema", $asm05.TypeRef("System.Xml.Schema.XmlSchema"));

    $.ImplementInterfaces(
      /* 3 */ $asm01.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm05.TypeRef("System.Xml.Schema.XmlSchema")]), 
      /* 4 */ $asm01.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function XmlSchemaEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSchemaEnumerator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSchemas")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Schema.XmlSchema"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(2, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Reset");

    $.Field({Static:false, Public:false}, "list", $asm05.TypeRef("System.Xml.Serialization.XmlSchemas")); 
    $.Field({Static:false, Public:false}, "idx", $.Int32); 
    $.Field({Static:false, Public:false}, "end", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm05.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm05.TypeRef("System.Xml.Schema.XmlSchema")]), 
      /* 1 */ $asm01.TypeRef("System.IDisposable"), 
      /* 2 */ $asm01.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSerializationGeneratedCode$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializationGeneratedCode", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TempAssembly")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnAssemblyResolve", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.Assembly"), [$.Object, $asm01.TypeRef("System.ResolveEventArgs")], [])
    );

    $.Field({Static:false, Public:false}, "tempAssembly", $asm05.TypeRef("System.Xml.Serialization.TempAssembly")); 
    $.Field({Static:false, Public:false}, "threadCode", $.Int32); 
    $.Field({Static:false, Public:false}, "assemblyResolver", $asm01.TypeRef("System.ResolveEventHandler")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSerializationCodeGen$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializationCodeGen", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.IndentedWriter"), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.TypeScope")]), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureArrayIndex", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.TypeMapping")]), [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.TypeMapping")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBaseSerializer", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateGetSerializer", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Hashtable"), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateHashtableGetBegin", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateHashtableGetEnd", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateMethod", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GeneratePublicMethods", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateReferencedMethods", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateSerializerContract", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")]), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm01.TypeRef("System.Collections.Hashtable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateSupportedTypes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateTypedSerializer", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Serialization.XmlMapping"), $asm05.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateTypedSerializers", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Hashtable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Access", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ClassName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GeneratedMethods", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MethodNames", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NextMethodNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QnameTypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RaCodeGen", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.ReflectionAwareCodeGen"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Scopes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.TypeScope")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StringTypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Writer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.IndentedWriter"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWildcard", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Serialization.SpecialMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReferenceMapping", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.TypeMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NextMethodNumber", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteQuotedCSharpString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "writer", $asm05.TypeRef("System.Xml.Serialization.IndentedWriter")); 
    $.Field({Static:false, Public:false}, "nextMethodNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "methodNames", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "raCodeGen", $asm05.TypeRef("System.Xml.Serialization.ReflectionAwareCodeGen")); 
    $.Field({Static:false, Public:false}, "scopes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.TypeScope")])); 
    $.Field({Static:false, Public:false}, "stringTypeDesc", $asm05.TypeRef("System.Xml.Serialization.TypeDesc")); 
    $.Field({Static:false, Public:false}, "qnameTypeDesc", $asm05.TypeRef("System.Xml.Serialization.TypeDesc")); 
    $.Field({Static:false, Public:false}, "access", $.String); 
    $.Field({Static:false, Public:false}, "className", $.String); 
    $.Field({Static:false, Public:false}, "referencedMethods", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.TypeMapping")])); 
    $.Field({Static:false, Public:false}, "references", $.Int32); 
    $.Field({Static:false, Public:false}, "generatedMethods", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Property({Static:false, Public:false}, "Writer", $asm05.TypeRef("System.Xml.Serialization.IndentedWriter"));

    $.Property({Static:false, Public:false}, "NextMethodNumber", $.Int32);

    $.Property({Static:false, Public:false}, "RaCodeGen", $asm05.TypeRef("System.Xml.Serialization.ReflectionAwareCodeGen"));

    $.Property({Static:false, Public:false}, "StringTypeDesc", $asm05.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Property({Static:false, Public:false}, "QnameTypeDesc", $asm05.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Property({Static:false, Public:false}, "ClassName", $.String);

    $.Property({Static:false, Public:false}, "Access", $.String);

    $.Property({Static:false, Public:false}, "Scopes", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.TypeScope")]));

    $.Property({Static:false, Public:false}, "MethodNames", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "GeneratedMethods", $asm01.TypeRef("System.Collections.Hashtable"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSerializationReader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.XmlSerializationGeneratedCode"), "System.Xml.Serialization.XmlSerializationReader", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddFixup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReader/Fixup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddFixup", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReader/CollectionFixup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReadCallback", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.XmlSerializationReadCallback")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTarget", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckReaderCount", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CollapseWhitespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAbstractTypeException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateBadDerivationException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateCtorHasSecurityException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInaccessibleConstructorException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidCastException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.Type"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidCastException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $asm01.TypeRef("System.Type"), $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateMissingIXmlSerializableType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReadOnlyCollectionException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUnknownConstantException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUnknownNodeException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUnknownTypeException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CurrentTag", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoFixups", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureArrayIndex", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Array"), [
          $asm01.TypeRef("System.Array"), $.Int32, 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupArrayRefs", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DecodeName", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Document", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDocument"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReturnValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Reader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReaderCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArrayLength", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCurrentPosition", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNullAttr", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPrimitiveType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTarget", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXsiType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleUnreferencedObjects", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.Serialization.XmlDeserializationEvents"), 
          $.String, $asm05.TypeRef("System.Xml.Serialization.TempAssembly")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitCallbacks", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitIDs", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitPrimitiveIDs", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsPrimitiveNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsXmlnsAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseArrayType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializationReader/SoapArrayInfo"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseSoap12ArrayType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializationReader/SoapArrayInfo"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseWsdlArrayType", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Object, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadElementQualifiedName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNullableQualifiedName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNullableString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadReference", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadReferencedElement", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadReferencedElement", 
      new JSIL.MethodSignature($.Object, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadReferencedElements", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadReferencingElement", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadReferencingElement", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadReferencingElement", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSerializable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.IXmlSerializable"), [$asm05.TypeRef("System.Xml.Serialization.IXmlSerializable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSerializable", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.IXmlSerializable"), [$asm05.TypeRef("System.Xml.Serialization.IXmlSerializable"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadString", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadStringValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTypedNull", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTypedPrimitive", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTypedPrimitive", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXmlDocument", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlDocument"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXmlNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNode"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXmlNodes", 
      new JSIL.MethodSignature($.Object, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXmlQualifiedName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Referenced", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveDynamicAssembly", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.Assembly"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DecodeName", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsReturnValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShrinkArray", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Array"), [
          $asm01.TypeRef("System.Array"), $.Int32, 
          $asm01.TypeRef("System.Type"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToByteArrayBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToByteArrayBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToByteArrayHex", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToByteArrayHex", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToDate", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToDateTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToEnum", 
      new JSIL.MethodSignature($.Int64, [
          $.String, $asm01.TypeRef("System.Collections.Hashtable"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToTime", 
      new JSIL.MethodSignature($asm01.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXmlName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXmlNCName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXmlNmToken", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXmlNmTokens", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToXmlQualifiedName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToXmlQualifiedName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnknownAttribute", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("System.Xml.XmlAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnknownAttribute", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm05.TypeRef("System.Xml.XmlAttribute"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnknownElement", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("System.Xml.XmlElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnknownElement", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm05.TypeRef("System.Xml.XmlElement"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnknownNode", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnknownNode", 
      new JSIL.MethodSignature(null, [$.Object, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnknownNode", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNode"), $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnreferencedObject", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    );

    $.Field({Static:false, Public:false}, "r", $asm05.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "countingReader", $asm05.TypeRef("System.Xml.Serialization.XmlCountingReader")); 
    $.Field({Static:false, Public:false}, "d", $asm05.TypeRef("System.Xml.XmlDocument")); 
    $.Field({Static:false, Public:false}, "callbacks", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "types", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "typesReverse", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "events", $asm05.TypeRef("System.Xml.Serialization.XmlDeserializationEvents")); 
    $.Field({Static:false, Public:false}, "targets", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "referencedTargets", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "targetsWithoutIds", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "fixups", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "collectionFixups", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "soap12", $.Boolean); 
    $.Field({Static:false, Public:false}, "isReturnValue", $.Boolean); 
    $.Field({Static:false, Public:false}, "decodeName", $.Boolean); 
    $.Field({Static:false, Public:false}, "schemaNsID", $.String); 
    $.Field({Static:false, Public:false}, "schemaNs1999ID", $.String); 
    $.Field({Static:false, Public:false}, "schemaNs2000ID", $.String); 
    $.Field({Static:false, Public:false}, "schemaNonXsdTypesNsID", $.String); 
    $.Field({Static:false, Public:false}, "instanceNsID", $.String); 
    $.Field({Static:false, Public:false}, "instanceNs2000ID", $.String); 
    $.Field({Static:false, Public:false}, "instanceNs1999ID", $.String); 
    $.Field({Static:false, Public:false}, "soapNsID", $.String); 
    $.Field({Static:false, Public:false}, "soap12NsID", $.String); 
    $.Field({Static:false, Public:false}, "schemaID", $.String); 
    $.Field({Static:false, Public:false}, "wsdlNsID", $.String); 
    $.Field({Static:false, Public:false}, "wsdlArrayTypeID", $.String); 
    $.Field({Static:false, Public:false}, "nullID", $.String); 
    $.Field({Static:false, Public:false}, "nilID", $.String); 
    $.Field({Static:false, Public:false}, "typeID", $.String); 
    $.Field({Static:false, Public:false}, "arrayTypeID", $.String); 
    $.Field({Static:false, Public:false}, "itemTypeID", $.String); 
    $.Field({Static:false, Public:false}, "arraySizeID", $.String); 
    $.Field({Static:false, Public:false}, "arrayID", $.String); 
    $.Field({Static:false, Public:false}, "urTypeID", $.String); 
    $.Field({Static:false, Public:false}, "stringID", $.String); 
    $.Field({Static:false, Public:false}, "intID", $.String); 
    $.Field({Static:false, Public:false}, "booleanID", $.String); 
    $.Field({Static:false, Public:false}, "shortID", $.String); 
    $.Field({Static:false, Public:false}, "longID", $.String); 
    $.Field({Static:false, Public:false}, "floatID", $.String); 
    $.Field({Static:false, Public:false}, "doubleID", $.String); 
    $.Field({Static:false, Public:false}, "decimalID", $.String); 
    $.Field({Static:false, Public:false}, "dateTimeID", $.String); 
    $.Field({Static:false, Public:false}, "qnameID", $.String); 
    $.Field({Static:false, Public:false}, "dateID", $.String); 
    $.Field({Static:false, Public:false}, "timeID", $.String); 
    $.Field({Static:false, Public:false}, "hexBinaryID", $.String); 
    $.Field({Static:false, Public:false}, "base64BinaryID", $.String); 
    $.Field({Static:false, Public:false}, "base64ID", $.String); 
    $.Field({Static:false, Public:false}, "unsignedByteID", $.String); 
    $.Field({Static:false, Public:false}, "byteID", $.String); 
    $.Field({Static:false, Public:false}, "unsignedShortID", $.String); 
    $.Field({Static:false, Public:false}, "unsignedIntID", $.String); 
    $.Field({Static:false, Public:false}, "unsignedLongID", $.String); 
    $.Field({Static:false, Public:false}, "oldDecimalID", $.String); 
    $.Field({Static:false, Public:false}, "oldTimeInstantID", $.String); 
    $.Field({Static:false, Public:false}, "anyURIID", $.String); 
    $.Field({Static:false, Public:false}, "durationID", $.String); 
    $.Field({Static:false, Public:false}, "ENTITYID", $.String); 
    $.Field({Static:false, Public:false}, "ENTITIESID", $.String); 
    $.Field({Static:false, Public:false}, "gDayID", $.String); 
    $.Field({Static:false, Public:false}, "gMonthID", $.String); 
    $.Field({Static:false, Public:false}, "gMonthDayID", $.String); 
    $.Field({Static:false, Public:false}, "gYearID", $.String); 
    $.Field({Static:false, Public:false}, "gYearMonthID", $.String); 
    $.Field({Static:false, Public:false}, "IDID", $.String); 
    $.Field({Static:false, Public:false}, "IDREFID", $.String); 
    $.Field({Static:false, Public:false}, "IDREFSID", $.String); 
    $.Field({Static:false, Public:false}, "integerID", $.String); 
    $.Field({Static:false, Public:false}, "languageID", $.String); 
    $.Field({Static:false, Public:false}, "NameID", $.String); 
    $.Field({Static:false, Public:false}, "NCNameID", $.String); 
    $.Field({Static:false, Public:false}, "NMTOKENID", $.String); 
    $.Field({Static:false, Public:false}, "NMTOKENSID", $.String); 
    $.Field({Static:false, Public:false}, "negativeIntegerID", $.String); 
    $.Field({Static:false, Public:false}, "nonPositiveIntegerID", $.String); 
    $.Field({Static:false, Public:false}, "nonNegativeIntegerID", $.String); 
    $.Field({Static:false, Public:false}, "normalizedStringID", $.String); 
    $.Field({Static:false, Public:false}, "NOTATIONID", $.String); 
    $.Field({Static:false, Public:false}, "positiveIntegerID", $.String); 
    $.Field({Static:false, Public:false}, "tokenID", $.String); 
    $.Field({Static:false, Public:false}, "charID", $.String); 
    $.Field({Static:false, Public:false}, "guidID", $.String); 
    $.Field({Static:true , Public:false}, "checkDeserializeAdvances", $.Boolean); 
    $.Property({Static:false, Public:false}, "DecodeName", $.Boolean);

    $.Property({Static:false, Public:false}, "Reader", $asm05.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:false}, "ReaderCount", $.Int32);

    $.Property({Static:false, Public:false}, "Document", $asm05.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:false}, "IsReturnValue", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SoapArrayInfo$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.Serialization.XmlSerializationReader/SoapArrayInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "qname", $.String); 
    $.Field({Static:false, Public:true }, "dimensions", $.Int32); 
    $.Field({Static:false, Public:true }, "$length", $.Int32); 
    $.Field({Static:false, Public:true }, "jaggedDimensions", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Fixup$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializationReader/Fixup", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm05.TypeRef("System.Xml.Serialization.XmlSerializationFixupCallback"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm05.TypeRef("System.Xml.Serialization.XmlSerializationFixupCallback"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Callback", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializationFixupCallback"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Ids", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Source", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Field({Static:false, Public:false}, "callback", $asm05.TypeRef("System.Xml.Serialization.XmlSerializationFixupCallback")); 
    $.Field({Static:false, Public:false}, "source", $.Object); 
    $.Field({Static:false, Public:false}, "ids", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Property({Static:false, Public:true }, "Callback", $asm05.TypeRef("System.Xml.Serialization.XmlSerializationFixupCallback"));

    $.Property({Static:false, Public:true }, "Source", $.Object);

    $.Property({Static:false, Public:true }, "Ids", $jsilcore.TypeRef("System.Array", [$.String]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CollectionFixup$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializationReader/CollectionFixup", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm05.TypeRef("System.Xml.Serialization.XmlSerializationCollectionFixupCallback"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Callback", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializationCollectionFixupCallback"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Collection", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CollectionItems", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.Field({Static:false, Public:false}, "callback", $asm05.TypeRef("System.Xml.Serialization.XmlSerializationCollectionFixupCallback")); 
    $.Field({Static:false, Public:false}, "collection", $.Object); 
    $.Field({Static:false, Public:false}, "collectionItems", $.Object); 
    $.Property({Static:false, Public:true }, "Callback", $asm05.TypeRef("System.Xml.Serialization.XmlSerializationCollectionFixupCallback"));

    $.Property({Static:false, Public:true }, "Collection", $.Object);

    $.Property({Static:false, Public:true }, "CollectionItems", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.Xml.Serialization.XmlSerializationFixupCallback", true, []);

JSIL.MakeDelegate("System.Xml.Serialization.XmlSerializationCollectionFixupCallback", true, []);

JSIL.MakeDelegate("System.Xml.Serialization.XmlSerializationReadCallback", true, []);

(function XmlSerializationReaderCodeGen$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.XmlSerializationCodeGen"), "System.Xml.Serialization.XmlSerializationReaderCodeGen", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.IndentedWriter"), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.TypeScope")]), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpectedElements", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBegin", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateElement", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateEncodedMembersElement", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateEnd", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateEnd", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")]), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateInitCallbacksMethod", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLiteralMembersElement", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMembersElement", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateMethod", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateTypeElement", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Enums", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArraySource", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArraySource", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChoiceIdentifierSource", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")]), $asm05.TypeRef("System.Xml.Serialization.MemberMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChoiceIdentifierSource", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("System.Xml.Serialization.MemberMapping"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeValueTypes", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSequence", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeUnique", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.EnumMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextIdName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextMethodName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAddCollectionFixup", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Serialization.ArrayMapping"), $.Boolean, 
          $.Boolean, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayLocalDecl", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.Serialization.TypeDesc")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")]), $asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBooleanValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCatchCastException", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCatchException", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCreateCollection", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCreateCollectionMethod", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/CreateCollectionInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCreateInstance", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCreateMapping", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDerivedSerializable", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.SerializableMapping"), $asm05.TypeRef("System.Xml.Serialization.SerializableMapping"), 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDerivedTypes", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.StructMapping"), $.Boolean, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), 
          $asm05.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), $.String, 
          $.Boolean, $.Boolean, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEncodedStructMethod", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEnumAndArrayTypes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEnumMethod", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.EnumMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteFixupMethod", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")]), 
          $.String, $.Boolean, 
          $.Boolean, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHandleHrefList", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")]), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHashtable", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.EnumMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteID", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIfNotSoapRoot", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteInitCheckTypeHrefList", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIsStartTag", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLiteralStructMethod", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLocalDecl", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberBegin", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberElements", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")]), $.String, 
          $.String, $asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member"), 
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member"), $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberElementsCheckType", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberElementsElse", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberElementsIf", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")]), $asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberEnd", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberEnd", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")]), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberFixupBegin", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")]), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberText", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableMethod", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.NullableMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteParamsRead", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrimitive", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteQNameEqual", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteReadNonRoots", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSourceBegin", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSourceBeginTyped", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Serialization.TypeDesc")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSourceEnd", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStructMethod", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteText", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen/Member")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUnknownNode", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteWhileLoopEnd", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteWhileLoopEndCheck", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteWhileLoopStartCheck", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteWhileNotLoopStart", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlNodeEqual", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.Field({Static:false, Public:false}, "idNames", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "enums", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "createMethods", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "nextCreateMethodNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "nextIdNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "nextWhileLoopIndex", $.Int32); 
    $.Property({Static:false, Public:false}, "Enums", $asm01.TypeRef("System.Collections.Hashtable"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function CreateCollectionInfo$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializationReaderCodeGen/CreateCollectionInfo", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Serialization.TypeDesc")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeDesc", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeDesc"), [], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "td", $asm05.TypeRef("System.Xml.Serialization.TypeDesc")); 
    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "TypeDesc", $asm05.TypeRef("System.Xml.Serialization.TypeDesc"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function Member$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializationReaderCodeGen/Member", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
          $.String, $.Int32, 
          $asm05.TypeRef("System.Xml.Serialization.MemberMapping")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
          $.String, $.Int32, 
          $asm05.TypeRef("System.Xml.Serialization.MemberMapping"), $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
          $.String, $.String, 
          $.Int32, $asm05.TypeRef("System.Xml.Serialization.MemberMapping")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
          $.String, $.String, 
          $.Int32, $asm05.TypeRef("System.Xml.Serialization.MemberMapping"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
          $.String, $.Int32, 
          $asm05.TypeRef("System.Xml.Serialization.MemberMapping"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
          $.String, $.String, 
          $.Int32, $asm05.TypeRef("System.Xml.Serialization.MemberMapping"), 
          $.Boolean, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArrayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArraySource", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CheckSpecifiedSource", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChoiceArrayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChoiceArraySource", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChoiceSource", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FixupIndex", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsArrayLike", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsList", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Mapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.MemberMapping"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MultiRef", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParamsReadSource", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Source", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CheckSpecifiedSource", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FixupIndex", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsNullable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MultiRef", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ParamsReadSource", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "source", $.String); 
    $.Field({Static:false, Public:false}, "arrayName", $.String); 
    $.Field({Static:false, Public:false}, "arraySource", $.String); 
    $.Field({Static:false, Public:false}, "choiceArrayName", $.String); 
    $.Field({Static:false, Public:false}, "choiceSource", $.String); 
    $.Field({Static:false, Public:false}, "choiceArraySource", $.String); 
    $.Field({Static:false, Public:false}, "mapping", $asm05.TypeRef("System.Xml.Serialization.MemberMapping")); 
    $.Field({Static:false, Public:false}, "isArray", $.Boolean); 
    $.Field({Static:false, Public:false}, "isList", $.Boolean); 
    $.Field({Static:false, Public:false}, "isNullable", $.Boolean); 
    $.Field({Static:false, Public:false}, "multiRef", $.Boolean); 
    $.Field({Static:false, Public:false}, "fixupIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "paramsReadSource", $.String); 
    $.Field({Static:false, Public:false}, "checkSpecifiedSource", $.String); 
    $.Property({Static:false, Public:false}, "Mapping", $asm05.TypeRef("System.Xml.Serialization.MemberMapping"));

    $.Property({Static:false, Public:false}, "Source", $.String);

    $.Property({Static:false, Public:false}, "ArrayName", $.String);

    $.Property({Static:false, Public:false}, "ArraySource", $.String);

    $.Property({Static:false, Public:false}, "IsList", $.Boolean);

    $.Property({Static:false, Public:false}, "IsArrayLike", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "MultiRef", $.Boolean);

    $.Property({Static:false, Public:false}, "FixupIndex", $.Int32);

    $.Property({Static:false, Public:false}, "ParamsReadSource", $.String);

    $.Property({Static:false, Public:false}, "CheckSpecifiedSource", $.String);

    $.Property({Static:false, Public:false}, "ChoiceSource", $.String);

    $.Property({Static:false, Public:false}, "ChoiceArrayName", $.String);

    $.Property({Static:false, Public:false}, "ChoiceArraySource", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSerializationWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.XmlSerializationGeneratedCode"), "System.Xml.Serialization.XmlSerializationWriter", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWriteCallback", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $.String, 
          $.String, $asm05.TypeRef("System.Xml.Serialization.XmlSerializationWriteCallback")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateChoiceIdentifierValueException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidAnyTypeException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidAnyTypeException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidChoiceIdentifierValueException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidEnumValueException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateMismatchChoiceException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUnknownAnyElementException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUnknownTypeException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUnknownTypeException", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Exception"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromByteArrayBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromByteArrayHex", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromChar", 
      new JSIL.MethodSignature($.String, [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDate", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDateTime", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromEnum", 
      new JSIL.MethodSignature($.String, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.Int64])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromEnum", 
      new JSIL.MethodSignature($.String, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromTime", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlNCName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlNmToken", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlNmTokens", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FromXmlQualifiedName", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FromXmlQualifiedName", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EscapeName", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespaces", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Writer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetId", 
      new JSIL.MethodSignature($.String, [$.Object, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPrimitiveTypeName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPrimitiveTypeName", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm01.TypeRef("System.Type"), $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPrimitiveTypeNameInternal", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlQualifiedName"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetQualifiedName", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeEntry", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializationWriter/TypeEntry"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlWriter"), $asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"), 
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Serialization.TempAssembly")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitCallbacks", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsIdDefined", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ListUsedPrefixes", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [$asm01.TypeRef("System.Collections.Hashtable"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextPrefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveDynamicAssembly", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.Assembly"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EscapeName", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Namespaces", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.ArrayList")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Writer", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TopLevelElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElement", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementEncoded", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementLiteral", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementQualifiedName", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementQualifiedName", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementQualifiedName", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementString", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementString", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementString", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementString", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEmptyTag", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEmptyTag", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteId", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteId", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNamespaceDeclarations", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableQualifiedNameEncoded", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XmlQualifiedName"), $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableQualifiedNameLiteral", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringEncoded", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringEncodedRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringEncodedRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm05.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringLiteral", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringLiteralRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringLiteralRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullTagEncoded", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullTagEncoded", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullTagLiteral", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullTagLiteral", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePotentiallyReferencingElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePotentiallyReferencingElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePotentiallyReferencingElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $asm01.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePotentiallyReferencingElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $asm01.TypeRef("System.Type"), 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteReferencedElement", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteReferencedElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteReferencedElements", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteReferencingElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteReferencingElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRpcResult", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSerializable", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.IXmlSerializable"), $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSerializable", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.IXmlSerializable"), $.String, 
          $.String, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $.Boolean, 
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTypedPrimitive", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlNode"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXsiType", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.Field({Static:false, Public:false}, "w", $asm05.TypeRef("System.Xml.XmlWriter")); 
    $.Field({Static:false, Public:false}, "namespaces", $asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")); 
    $.Field({Static:false, Public:false}, "tempNamespacePrefix", $.Int32); 
    $.Field({Static:false, Public:false}, "usedPrefixes", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "references", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "idBase", $.String); 
    $.Field({Static:false, Public:false}, "nextId", $.Int32); 
    $.Field({Static:false, Public:false}, "typeEntries", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "referencesToWrite", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "objectsInUse", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "aliasBase", $.String); 
    $.Field({Static:false, Public:false}, "soap12", $.Boolean); 
    $.Field({Static:false, Public:false}, "escapeName", $.Boolean); 
    $.Property({Static:false, Public:false}, "EscapeName", $.Boolean);

    $.Property({Static:false, Public:false}, "Writer", $asm05.TypeRef("System.Xml.XmlWriter"));

    $.Property({Static:false, Public:false}, "Namespaces", $asm01.TypeRef("System.Collections.ArrayList"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TypeEntry$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializationWriter/TypeEntry", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "callback", $asm05.TypeRef("System.Xml.Serialization.XmlSerializationWriteCallback")); 
    $.Field({Static:false, Public:false}, "typeNs", $.String); 
    $.Field({Static:false, Public:false}, "typeName", $.String); 
    $.Field({Static:false, Public:false}, "type", $asm01.TypeRef("System.Type")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.Xml.Serialization.XmlSerializationWriteCallback", true, []);

(function XmlSerializationWriterCodeGen$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.XmlSerializationCodeGen"), "System.Xml.Serialization.XmlSerializationWriterCodeGen", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.IndentedWriter"), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.TypeScope")]), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanOptimizeWriteListSequence", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Serialization.TypeDesc")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindChoiceEnumValue", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), $asm05.TypeRef("System.Xml.Serialization.EnumMapping"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindXmlnsIndex", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.MemberMapping")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBegin", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateElement", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateEnd", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateInitCallbacksMethod", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMembersElement", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.XmlMembersMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateMethod", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateTypeElement", 
      new JSIL.MethodSignature($.String, [$asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextMethodName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]), $asm05.TypeRef("System.Xml.Serialization.TextAccessor"), 
          $asm05.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), $asm05.TypeRef("System.Xml.Serialization.TypeDesc")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayItems", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]), $asm05.TypeRef("System.Xml.Serialization.TextAccessor"), 
          $asm05.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayLocalDecl", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.Serialization.TypeDesc")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayTypeCompare", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.Serialization.AttributeAccessor"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCheckDefault", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteChoiceTypeCheck", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean, $asm05.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), 
          $.String, $asm05.TypeRef("System.Xml.Serialization.TypeDesc")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDerivedTypes", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElement", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.Serialization.ElementAccessor"), 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementCall", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.Type"), 
          $.String, $.String, 
          $.String, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElements", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]), 
          $asm05.TypeRef("System.Xml.Serialization.TextAccessor"), $asm05.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), 
          $.String, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElements", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]), $asm05.TypeRef("System.Xml.Serialization.TextAccessor"), 
          $asm05.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), $.String, 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEmptyTag", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEncodedNullTag", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEnumAndArrayTypes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEnumCase", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.Serialization.ConstantMapping"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEnumMethod", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.EnumMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEnumValue", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.EnumMapping"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteExtraMembers", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteInstanceOf", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLiteralNullTag", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLocalDecl", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMember", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.Serialization.AttributeAccessor"), 
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMember", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.ElementAccessor")]), $asm05.TypeRef("System.Xml.Serialization.TextAccessor"), 
          $asm05.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNamespaces", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullCheckBegin", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Serialization.ElementAccessor")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrimitive", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Object, 
          $.String, $asm05.TypeRef("System.Xml.Serialization.TypeMapping"), 
          $.Boolean, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrimitiveValue", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteQualifiedNameElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $.String, 
          $.Boolean, $.Boolean, 
          $asm05.TypeRef("System.Xml.Serialization.TypeMapping")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStructMethod", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.StructMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTag", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTag", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteText", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Serialization.TextAccessor")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTypeCompare", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DynamicAssemblies$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.DynamicAssemblies", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Reflection.Assembly")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Get", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.Assembly"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnrestrictedFileIOPermission", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Permissions.FileIOPermission"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Reflection.Assembly")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeDynamic", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeDynamic", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])], [])
    );

    $.Field({Static:true , Public:false}, "assembliesInConfig", $asm01.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:true , Public:false}, "nameToAssemblyMap", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:true , Public:false}, "assemblyToNameMap", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:true , Public:false}, "tableIsTypeDynamic", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:true , Public:false}, "fileIOPermission", $asm01.TypeRef("System.Security.Permissions.FileIOPermission")); 
    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object); 
    $.Property({Static:true , Public:false}, "UnrestrictedFileIOPermission", $asm01.TypeRef("System.Security.Permissions.FileIOPermission"));

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function ReflectionAwareCodeGen$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.ReflectionAwareCodeGen", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.IndentedWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateVariableName", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReflectionVariable", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForArrayMember", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForCreateInstance", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Boolean, 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForCreateInstance", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Boolean, 
          $.Boolean, $.Boolean, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForCreateInstance", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.Boolean, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForEnumCompare", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("System.Xml.Serialization.EnumMapping"), $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForEnumLongValue", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForEnumMember", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForMember", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Serialization.TypeDesc")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForMethod", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForMethodInvoke", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForTypeof", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitTheFirstTime", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayLocalDecl", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.Serialization.TypeDesc")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayTypeCompare", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAssemblyInfo", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCollectionInfo", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCreateInstance", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDefaultIndexerInit", 
      new JSIL.MethodSignature($.String, [
          $asm01.TypeRef("System.Type"), $.String, 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEnumCase", 
      new JSIL.MethodSignature(null, [
          $.String, $asm05.TypeRef("System.Xml.Serialization.ConstantMapping"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteInstanceOf", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLocalDecl", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMappingInfo", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.Serialization.TypeMapping"), $.String, 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberInfo", 
      new JSIL.MethodSignature($.String, [
          $asm01.TypeRef("System.Type"), $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMethodInfo", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteQuotedCSharpString", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.IndentedWriter"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteQuotedCSharpString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteReflectionInit", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeScope")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTypeCompare", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTypeInfo", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("System.Xml.Serialization.TypeScope"), $asm05.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm01.TypeRef("System.Type")
        ], [])
    );

    $.Constant({Static:true , Public:false}, "hexDigits", "0123456789ABCDEF"); 
    $.Constant({Static:true , Public:false}, "arrayMemberKey", "0"); 
    $.Field({Static:false, Public:false}, "reflectionVariables", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "nextReflectionVariableNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "writer", $asm05.TypeRef("System.Xml.Serialization.IndentedWriter")); 
    $.Field({Static:true , Public:false}, "helperClassesForUseReflection", $.String, "\r\n    sealed class XSFieldInfo {{\r\n       {3} fieldInfo;\r\n        public XSFieldInfo({2} t, {1} memberName){{\r\n            fieldInfo = t.GetField(memberName);\r\n        }}\r\n        public {0} this[{0} o] {{\r\n            get {{\r\n                return fieldInfo.GetValue(o);\r\n            }}\r\n            set {{\r\n                fieldInfo.SetValue(o, value);\r\n            }}\r\n        }}\r\n\r\n    }}\r\n    sealed class XSPropInfo {{\r\n        {4} propInfo;\r\n        public XSPropInfo({2} t, {1} memberName){{\r\n            propInfo = t.GetProperty(memberName);\r\n        }}\r\n        public {0} this[{0} o] {{\r\n            get {{\r\n                return propInfo.GetValue(o, null);\r\n            }}\r\n            set {{\r\n                propInfo.SetValue(o, value, null);\r\n            }}\r\n        }}\r\n    }}\r\n    sealed class XSArrayInfo {{\r\n        {4} propInfo;\r\n        public XSArrayInfo({4} propInfo){{\r\n            this.propInfo = propInfo;\r\n        }}\r\n        public {0} this[{0} a, int i] {{\r\n            get {{\r\n                return propInfo.GetValue(a, new {0}[]{{i}});\r\n            }}\r\n            set {{\r\n                propInfo.SetValue(a, value, new {0}[]{{i}});\r\n            }}\r\n        }}\r\n    }}\r\n"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSerializerAssemblyAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlSerializerAssemblyAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CodeBase", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssemblyName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CodeBase", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "assemblyName", $.String); 
    $.Field({Static:false, Public:false}, "codeBase", $.String); 
    $.Property({Static:false, Public:true }, "CodeBase", $.String);

    $.Property({Static:false, Public:true }, "AssemblyName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Class", "Enum", "Interface", "Struct")]; });

})();

(function XmlDeserializationEvents$Members () {
  var $, $thisType;
  JSIL.MakeStruct($asm01.TypeRef("System.ValueType"), "System.Xml.Serialization.XmlDeserializationEvents", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, "get_OnUnknownAttribute", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OnUnknownElement", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlElementEventHandler"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OnUnknownNode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlNodeEventHandler"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OnUnreferencedObject", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OnUnknownAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OnUnknownElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlElementEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OnUnknownNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlNodeEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OnUnreferencedObject", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler")], [])
    );

    $.Field({Static:false, Public:false}, "onUnknownNode", $asm05.TypeRef("System.Xml.Serialization.XmlNodeEventHandler")); 
    $.Field({Static:false, Public:false}, "onUnknownAttribute", $asm05.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler")); 
    $.Field({Static:false, Public:false}, "onUnknownElement", $asm05.TypeRef("System.Xml.Serialization.XmlElementEventHandler")); 
    $.Field({Static:false, Public:false}, "onUnreferencedObject", $asm05.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler")); 
    $.Field({Static:false, Public:false}, "sender", $.Object); 
    $.Property({Static:false, Public:true }, "OnUnknownNode", $asm05.TypeRef("System.Xml.Serialization.XmlNodeEventHandler"));

    $.Property({Static:false, Public:true }, "OnUnknownAttribute", $asm05.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler"));

    $.Property({Static:false, Public:true }, "OnUnknownElement", $asm05.TypeRef("System.Xml.Serialization.XmlElementEventHandler"));

    $.Property({Static:false, Public:true }, "OnUnreferencedObject", $asm05.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSerializerImplementation$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializerImplementation", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanSerialize", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Reader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializationReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadMethods", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypedSerializers", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteMethods", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Writer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializationWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSerializer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm01.TypeRef("System.Type")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Reader", $asm05.TypeRef("System.Xml.Serialization.XmlSerializationReader"));

    $.Property({Static:false, Public:true , Virtual:true }, "Writer", $asm05.TypeRef("System.Xml.Serialization.XmlSerializationWriter"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadMethods", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteMethods", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypedSerializers", $asm01.TypeRef("System.Collections.Hashtable"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSerializer$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializer", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), $asm05.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.XmlRootAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.XmlAttributeOverrides")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), $asm05.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
          $.String, $.String, 
          $asm01.TypeRef("System.Security.Policy.Evidence")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_UnknownAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_UnknownElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlElementEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_UnknownNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlNodeEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_UnreferencedObject", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanDeserialize", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateReader", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializationReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateWriter", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializationWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandForUserLocation", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.IO.TextReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.Serialization.XmlDeserializationEvents")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XmlReader"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm05.TypeRef("System.Xml.XmlReader"), $.String, 
          $asm05.TypeRef("System.Xml.Serialization.XmlDeserializationEvents")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.Serialization.XmlSerializationReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializePrimitive", 
      new JSIL.MethodSignature($.Object, [$asm05.TypeRef("System.Xml.XmlReader"), $asm05.TypeRef("System.Xml.Serialization.XmlDeserializationEvents")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromMappings", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromMappings", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")]), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromMappings", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")]), $asm01.TypeRef("System.Security.Policy.Evidence")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateSerializer", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.Assembly"), [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateSerializer", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Reflection.Assembly"), [
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")]), 
          $asm02.TypeRef("System.CodeDom.Compiler.CompilerParameters")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateTempAssembly", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TempAssembly"), [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateTempAssembly", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TempAssembly"), [
          $asm05.TypeRef("System.Xml.Serialization.XmlMapping"), $asm01.TypeRef("System.Type"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateTempAssembly", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TempAssembly"), [
          $asm05.TypeRef("System.Xml.Serialization.XmlMapping"), $asm01.TypeRef("System.Type"), 
          $.String, $.String, 
          $asm01.TypeRef("System.Security.Policy.Evidence")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultNamespaces", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKnownMapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm01.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSerializersFromCache", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")]), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXmlSerializerAssemblyName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXmlSerializerAssemblyName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_UnknownAttribute", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_UnknownElement", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlElementEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_UnknownNode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlNodeEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_UnreferencedObject", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.TextWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.TextWriter"), $.Object, 
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.IO.Stream"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.IO.Stream"), $.Object, 
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.XmlWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlWriter"), $.Object, 
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlWriter"), $.Object, 
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"), $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlWriter"), $.Object, 
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$.Object, $asm05.TypeRef("System.Xml.Serialization.XmlSerializationWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializePrimitive", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlWriter"), $.Object, 
          $asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTempAssembly", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TempAssembly"), $asm05.TypeRef("System.Xml.Serialization.XmlMapping")], [])
    );

    $.Field({Static:false, Public:false}, "tempAssembly", $asm05.TypeRef("System.Xml.Serialization.TempAssembly")); 
    $.Field({Static:false, Public:false}, "typedSerializer", $.Boolean); 
    $.Field({Static:false, Public:false}, "primitiveType", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "mapping", $asm05.TypeRef("System.Xml.Serialization.XmlMapping")); 
    $.Field({Static:false, Public:false}, "events", $asm05.TypeRef("System.Xml.Serialization.XmlDeserializationEvents")); 
    $.Field({Static:true , Public:false}, "cache", $asm05.TypeRef("System.Xml.Serialization.TempAssemblyCache")); 
    $.Field({Static:true , Public:false}, "defaultNamespaces", $asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")); 
    $.Field({Static:true , Public:false}, "xmlSerializerTable", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Property({Static:true , Public:false}, "DefaultNamespaces", $asm05.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSerializerMappingKey$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializer/XmlSerializerMappingKey", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.XmlMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:true }, "Mapping", $asm05.TypeRef("System.Xml.Serialization.XmlMapping")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSerializerFactory$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializerFactory", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializer"), [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), $asm05.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.XmlRootAttribute")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm01.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.XmlAttributeOverrides")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm05.TypeRef("System.Xml.Serialization.XmlTypeMapping")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm01.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.XmlSerializer"), [
          $asm01.TypeRef("System.Type"), $asm05.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.Type")]), $asm05.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
          $.String, $.String, 
          $asm01.TypeRef("System.Security.Policy.Evidence")
        ], [])
    );

    $.Field({Static:true , Public:false}, "cache", $asm05.TypeRef("System.Xml.Serialization.TempAssemblyCache")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSerializerNamespaces$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.XmlSerializerNamespaces", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlQualifiedName")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddInternal", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceList", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.ArrayList"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespaces", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Namespaces", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Collections.Hashtable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.XmlQualifiedName")]), [], [])
    );

    $.Field({Static:false, Public:false}, "namespaces", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "NamespaceList", $asm01.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "Namespaces", $asm01.TypeRef("System.Collections.Hashtable"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSerializerVersionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlSerializerVersionAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentAssemblyId", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParentAssemblyId", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Version", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "mvid", $.String); 
    $.Field({Static:false, Public:false}, "serializerVersion", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "type", $asm01.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "ParentAssemblyId", $.String);

    $.Property({Static:false, Public:true }, "Version", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.Assembly]; });

})();

(function XmlTextAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlTextAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "dataType", $.String); 
    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "DataType", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

(function XmlTypeAttribute$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Attribute"), "System.Xml.Serialization.XmlTypeAttribute", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AnonymousType", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IncludeInSchema", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AnonymousType", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IncludeInSchema", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypeName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "includeInSchema", $.Boolean); 
    $.Field({Static:false, Public:false}, "anonymousType", $.Boolean); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "typeName", $.String); 
    $.Property({Static:false, Public:true }, "AnonymousType", $.Boolean);

    $.Property({Static:false, Public:true }, "IncludeInSchema", $.Boolean);

    $.Property({Static:false, Public:true }, "TypeName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm01.System.AttributeTargets.$Flags("Class", "Enum", "Interface", "Struct")]; });

})();

(function XmlTypeMapping$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.XmlMapping"), "System.Xml.Serialization.XmlTypeMapping", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.TypeScope"), $asm05.TypeRef("System.Xml.Serialization.ElementAccessor")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Mapping", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.TypeMapping"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeFullName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XsdTypeName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XsdTypeNamespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Property({Static:false, Public:false}, "Mapping", $asm05.TypeRef("System.Xml.Serialization.TypeMapping"));

    $.Property({Static:false, Public:true }, "TypeName", $.String);

    $.Property({Static:false, Public:true }, "TypeFullName", $.String);

    $.Property({Static:false, Public:true }, "XsdTypeName", $.String);

    $.Property({Static:false, Public:true }, "XsdTypeNamespace", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.Xml.Serialization.XmlAttributeEventHandler", true, []);

(function XmlAttributeEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.EventArgs"), "System.Xml.Serialization.XmlAttributeEventArgs", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlAttribute"), $.Int32, 
          $.Int32, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attr", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExpectedAttributes", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ObjectBeingDeserialized", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.Field({Static:false, Public:false}, "o", $.Object); 
    $.Field({Static:false, Public:false}, "attr", $asm05.TypeRef("System.Xml.XmlAttribute")); 
    $.Field({Static:false, Public:false}, "qnames", $.String); 
    $.Field({Static:false, Public:false}, "lineNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "linePosition", $.Int32); 
    $.Property({Static:false, Public:true }, "ObjectBeingDeserialized", $.Object);

    $.Property({Static:false, Public:true }, "Attr", $asm05.TypeRef("System.Xml.XmlAttribute"));

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "ExpectedAttributes", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.Xml.Serialization.XmlElementEventHandler", true, []);

(function XmlElementEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.EventArgs"), "System.Xml.Serialization.XmlElementEventArgs", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlElement"), $.Int32, 
          $.Int32, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Element", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExpectedElements", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ObjectBeingDeserialized", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.Field({Static:false, Public:false}, "o", $.Object); 
    $.Field({Static:false, Public:false}, "elem", $asm05.TypeRef("System.Xml.XmlElement")); 
    $.Field({Static:false, Public:false}, "qnames", $.String); 
    $.Field({Static:false, Public:false}, "lineNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "linePosition", $.Int32); 
    $.Property({Static:false, Public:true }, "ObjectBeingDeserialized", $.Object);

    $.Property({Static:false, Public:true }, "Element", $asm05.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "ExpectedElements", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.Xml.Serialization.XmlNodeEventHandler", true, []);

(function XmlNodeEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.EventArgs"), "System.Xml.Serialization.XmlNodeEventArgs", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm05.TypeRef("System.Xml.XmlNode"), $.Int32, 
          $.Int32, $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ObjectBeingDeserialized", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Text", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "o", $.Object); 
    $.Field({Static:false, Public:false}, "xmlNode", $asm05.TypeRef("System.Xml.XmlNode")); 
    $.Field({Static:false, Public:false}, "lineNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "linePosition", $.Int32); 
    $.Property({Static:false, Public:true }, "ObjectBeingDeserialized", $.Object);

    $.Property({Static:false, Public:true }, "NodeType", $asm05.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true }, "Text", $.String);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeDelegate("System.Xml.Serialization.UnreferencedObjectEventHandler", true, []);

(function UnreferencedObjectEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.EventArgs"), "System.Xml.Serialization.UnreferencedObjectEventArgs", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnreferencedId", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnreferencedObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.Field({Static:false, Public:false}, "o", $.Object); 
    $.Field({Static:false, Public:false}, "id", $.String); 
    $.Property({Static:false, Public:true }, "UnreferencedObject", $.Object);

    $.Property({Static:false, Public:true }, "UnreferencedId", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xml.Serialization.Advanced");
(function SchemaImporterExtension$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.Advanced.SchemaImporterExtension", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportAnyElement", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaAny"), $.Boolean, 
          $asm05.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm05.TypeRef("System.Xml.Serialization.XmlSchemaImporter"), 
          $asm02.TypeRef("System.CodeDom.CodeCompileUnit"), $asm02.TypeRef("System.CodeDom.CodeNamespace"), 
          $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), $asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportDefaultValue", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.CodeExpression"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportSchemaType", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm05.TypeRef("System.Xml.Serialization.XmlSchemas"), 
          $asm05.TypeRef("System.Xml.Serialization.XmlSchemaImporter"), $asm02.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm02.TypeRef("System.CodeDom.CodeNamespace"), $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportSchemaType", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $asm05.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm05.TypeRef("System.Xml.Serialization.XmlSchemaImporter"), 
          $asm02.TypeRef("System.CodeDom.CodeCompileUnit"), $asm02.TypeRef("System.CodeDom.CodeNamespace"), 
          $asm05.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), $asm02.TypeRef("System.CodeDom.Compiler.CodeDomProvider")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SchemaImporterExtensionCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Collections.CollectionBase"), "System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.String, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$.String, $asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Names", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")], [])
    );

    $.Field({Static:false, Public:false}, "exNames", $asm01.TypeRef("System.Collections.Hashtable")); 
    $.Property({Static:false, Public:false}, "Names", $asm01.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Item", $asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

(function MappedTypeDesc$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.Advanced.MappedTypeDesc", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm05.TypeRef("System.Xml.Schema.XmlSchemaType"), 
          $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"), 
          $asm02.TypeRef("System.CodeDom.CodeNamespace"), $asm02.TypeRef("System.Collections.Specialized.StringCollection")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportTypeDefinition", 
      new JSIL.MethodSignature($asm02.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm02.TypeRef("System.CodeDom.CodeNamespace"), $asm02.TypeRef("System.CodeDom.CodeCompileUnit")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Extension", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReferencedAssemblies", 
      new JSIL.MethodSignature($asm02.TypeRef("System.Collections.Specialized.StringCollection"), [], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "xsdType", $asm05.TypeRef("System.Xml.Schema.XmlSchemaType")); 
    $.Field({Static:false, Public:false}, "context", $asm05.TypeRef("System.Xml.Schema.XmlSchemaObject")); 
    $.Field({Static:false, Public:false}, "clrType", $.String); 
    $.Field({Static:false, Public:false}, "extension", $asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")); 
    $.Field({Static:false, Public:false}, "code", $asm02.TypeRef("System.CodeDom.CodeNamespace")); 
    $.Field({Static:false, Public:false}, "exported", $.Boolean); 
    $.Field({Static:false, Public:false}, "references", $asm02.TypeRef("System.Collections.Specialized.StringCollection")); 
    $.Property({Static:false, Public:false}, "Extension", $asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "ReferencedAssemblies", $asm02.TypeRef("System.Collections.Specialized.StringCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSerializationPrimitiveWriter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.XmlSerializationWriter"), "System.Xml.Serialization.XmlSerializationPrimitiveWriter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitCallbacks", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_base64Binary", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_boolean", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_byte", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_char", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_dateTime", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_decimal", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_double", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_float", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_guid", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_int", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_long", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_QName", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_short", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_string", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_unsignedByte", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_unsignedInt", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_unsignedLong", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_unsignedShort", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSerializationPrimitiveReader$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm05.TypeRef("System.Xml.Serialization.XmlSerializationReader"), "System.Xml.Serialization.XmlSerializationPrimitiveReader", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitCallbacks", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitIDs", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_base64Binary", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_boolean", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_byte", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_char", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_dateTime", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_decimal", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_double", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_float", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_guid", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_int", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_long", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_QName", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_short", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_string", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_unsignedByte", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_unsignedInt", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_unsignedLong", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_unsignedShort", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.Field({Static:false, Public:false}, "id4_boolean", $.String); 
    $.Field({Static:false, Public:false}, "id14_unsignedInt", $.String); 
    $.Field({Static:false, Public:false}, "id15_unsignedLong", $.String); 
    $.Field({Static:false, Public:false}, "id7_float", $.String); 
    $.Field({Static:false, Public:false}, "id10_dateTime", $.String); 
    $.Field({Static:false, Public:false}, "id6_long", $.String); 
    $.Field({Static:false, Public:false}, "id9_decimal", $.String); 
    $.Field({Static:false, Public:false}, "id8_double", $.String); 
    $.Field({Static:false, Public:false}, "id17_guid", $.String); 
    $.Field({Static:false, Public:false}, "id2_Item", $.String); 
    $.Field({Static:false, Public:false}, "id13_unsignedShort", $.String); 
    $.Field({Static:false, Public:false}, "id18_char", $.String); 
    $.Field({Static:false, Public:false}, "id3_int", $.String); 
    $.Field({Static:false, Public:false}, "id12_byte", $.String); 
    $.Field({Static:false, Public:false}, "id16_base64Binary", $.String); 
    $.Field({Static:false, Public:false}, "id11_unsignedByte", $.String); 
    $.Field({Static:false, Public:false}, "id5_short", $.String); 
    $.Field({Static:false, Public:false}, "id1_string", $.String); 
    $.Field({Static:false, Public:false}, "id1_QName", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xml.Serialization.Configuration");
(function ConfigurationStrings$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Xml.Serialization.Configuration.ConfigurationStrings", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "get_DateTimeSerializationSectionPath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SchemaImporterExtensionsSectionPath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XmlSerializerSectionPath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSectionPath", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "Name", "name"); 
    $.Constant({Static:true , Public:false}, "SchemaImporterExtensionsSectionName", "schemaImporterExtensions"); 
    $.Constant({Static:true , Public:false}, "DateTimeSerializationSectionName", "dateTimeSerialization"); 
    $.Constant({Static:true , Public:false}, "XmlSerializerSectionName", "xmlSerializer"); 
    $.Constant({Static:true , Public:false}, "SectionGroupName", "system.xml.serialization"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterChar", "SqlTypesSchemaImporterChar"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterNChar", "SqlTypesSchemaImporterNChar"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterVarChar", "SqlTypesSchemaImporterVarChar"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterNVarChar", "SqlTypesSchemaImporterNVarChar"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterText", "SqlTypesSchemaImporterText"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterNText", "SqlTypesSchemaImporterNText"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterVarBinary", "SqlTypesSchemaImporterVarBinary"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterBinary", "SqlTypesSchemaImporterBinary"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterImage", "SqlTypesSchemaImporterImage"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterDecimal", "SqlTypesSchemaImporterDecimal"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterNumeric", "SqlTypesSchemaImporterNumeric"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterBigInt", "SqlTypesSchemaImporterBigInt"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterInt", "SqlTypesSchemaImporterInt"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterSmallInt", "SqlTypesSchemaImporterSmallInt"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterTinyInt", "SqlTypesSchemaImporterTinyInt"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterBit", "SqlTypesSchemaImporterBit"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterFloat", "SqlTypesSchemaImporterFloat"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterReal", "SqlTypesSchemaImporterReal"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterDateTime", "SqlTypesSchemaImporterDateTime"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterSmallDateTime", "SqlTypesSchemaImporterSmallDateTime"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterMoney", "SqlTypesSchemaImporterMoney"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterSmallMoney", "SqlTypesSchemaImporterSmallMoney"); 
    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterUniqueIdentifier", "SqlTypesSchemaImporterUniqueIdentifier"); 
    $.Constant({Static:true , Public:false}, "Type", "type"); 
    $.Constant({Static:true , Public:false}, "Mode", "mode"); 
    $.Constant({Static:true , Public:false}, "CheckDeserializeAdvances", "checkDeserializeAdvances"); 
    $.Constant({Static:true , Public:false}, "TempFilesLocation", "tempFilesLocation"); 
    $.Property({Static:true , Public:false}, "SchemaImporterExtensionsSectionPath", $.String);

    $.Property({Static:true , Public:false}, "DateTimeSerializationSectionPath", $.String);

    $.Property({Static:true , Public:false}, "XmlSerializerSectionPath", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function DateTimeSerializationSection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationSection"), "System.Xml.Serialization.Configuration.DateTimeSerializationSection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Mode", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection/DateTimeSerializationMode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Mode", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection/DateTimeSerializationMode")], [])
    );

    $.Field({Static:false, Public:false}, "properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "mode", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Mode", $asm05.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection/DateTimeSerializationMode"))
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["mode"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.MakeEnum(
  "System.Xml.Serialization.Configuration.DateTimeSerializationSection/DateTimeSerializationMode", false, {
    Default: 0, 
    Roundtrip: 1, 
    Local: 2
  }, false
);

(function SchemaImporterExtensionElement$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationElement"), "System.Xml.Serialization.Configuration.SchemaImporterExtensionElement", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "$name", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Type", $asm01.TypeRef("System.Type"))
      .Attribute($asm02.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm05.System.Xml.Serialization.Configuration.SchemaImporterExtensionElement_TypeTypeConverter.__Type__]; })
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; });

    $.Property({Static:false, Public:false}, "Key", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TypeAndName$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm01.TypeRef("System.Object"), "System.Xml.Serialization.Configuration.SchemaImporterExtensionElement/TypeAndName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "type", $asm01.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "$name", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function TypeTypeConverter$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm02.TypeRef("System.ComponentModel.TypeConverter"), "System.Xml.Serialization.Configuration.SchemaImporterExtensionElement/TypeTypeConverter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm02.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm01.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm01.TypeRef("System.Type")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SchemaImporterExtensionElementCollection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationElementCollection"), "System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm05.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm05.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $asm05.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement")], [])
    );

    $.Property({Static:false, Public:true }, "Item", $asm05.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"));

    $.Property({Static:false, Public:true }, "Item", $asm05.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm03.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm05.System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.__Type__]; });

})();

(function SchemaImporterExtensionsSection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationSection"), "System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaImporterExtensions", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaImporterExtensionsInternal", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlTypeSchemaImporter", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeDefault", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "schemaImporterExtensions", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "SchemaImporterExtensions", $asm05.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"))
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:false}, "SchemaImporterExtensionsInternal", $asm05.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function SerializationSectionGroup$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationSectionGroup"), "System.Xml.Serialization.Configuration.SerializationSectionGroup", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DateTimeSerialization", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaImporterExtensions", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSerializer", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Xml.Serialization.Configuration.XmlSerializerSection"), [], [])
    );

    $.Property({Static:false, Public:true }, "SchemaImporterExtensions", $asm05.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection"))
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["schemaImporterExtensions"]; });

    $.Property({Static:false, Public:true }, "DateTimeSerialization", $asm05.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection"))
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["dateTimeSerialization"]; });

    $.Property({Static:false, Public:true }, "XmlSerializer", $asm05.TypeRef("System.Xml.Serialization.Configuration.XmlSerializerSection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function XmlSerializerSection$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationSection"), "System.Xml.Serialization.Configuration.XmlSerializerSection", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CheckDeserializeAdvances", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TempFilesLocation", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CheckDeserializeAdvances", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TempFilesLocation", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "checkDeserializeAdvances", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "tempFilesLocation", $asm03.TypeRef("System.Configuration.ConfigurationProperty")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm03.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "CheckDeserializeAdvances", $.Boolean)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["checkDeserializeAdvances"]; });

    $.Property({Static:false, Public:true }, "TempFilesLocation", $.String)
      .Attribute($asm03.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["tempFilesLocation"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

(function RootedPathValidator$Members () {
  var $, $thisType;
  JSIL.MakeClass($asm03.TypeRef("System.Configuration.ConfigurationValidatorBase"), "System.Xml.Serialization.Configuration.RootedPathValidator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

